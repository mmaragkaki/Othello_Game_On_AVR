
Project3_sim.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002952  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00002952  000029e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000b2  00800064  00800064  000029ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000029ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002a1c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00002a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003f59  00000000  00000000  00002ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006de  00000000  00000000  00006a41  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000020e3  00000000  00000000  0000711f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000218  00000000  00000000  00009204  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c6  00000000  00000000  0000941c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003653  00000000  00000000  000098e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  0000cf35  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__ctors_end>
       4:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
       8:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
       c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      10:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      14:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      18:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      1c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      20:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      24:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      28:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      2c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      30:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      34:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      38:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      3c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      40:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      48:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      4c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      50:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      54:	e6 08       	sbc	r14, r6
      56:	06 09       	sbc	r16, r6
      58:	26 09       	sbc	r18, r6
      5a:	46 09       	sbc	r20, r6
      5c:	66 09       	sbc	r22, r6
      5e:	86 09       	sbc	r24, r6
      60:	a6 09       	sbc	r26, r6
      62:	c6 09       	sbc	r28, r6
      64:	11 0a       	sbc	r1, r17
      66:	31 0a       	sbc	r3, r17
      68:	51 0a       	sbc	r5, r17
      6a:	71 0a       	sbc	r7, r17
      6c:	8f 0a       	sbc	r8, r31
      6e:	ad 0a       	sbc	r10, r29
      70:	cb 0a       	sbc	r12, r27
      72:	e9 0a       	sbc	r14, r25
      74:	36 0b       	sbc	r19, r22
      76:	54 0b       	sbc	r21, r20
      78:	72 0b       	sbc	r23, r18
      7a:	90 0b       	sbc	r25, r16
      7c:	ae 0b       	sbc	r26, r30
      7e:	cc 0b       	sbc	r28, r28
      80:	ea 0b       	sbc	r30, r26
      82:	08 0c       	add	r0, r8
      84:	5a 0c       	add	r5, r10
      86:	78 0c       	add	r7, r8
      88:	96 0c       	add	r9, r6
      8a:	b4 0c       	add	r11, r4
      8c:	d2 0c       	add	r13, r2
      8e:	f0 0c       	add	r15, r0
      90:	0e 0d       	add	r16, r14
      92:	2c 0d       	add	r18, r12
      94:	7e 0d       	add	r23, r14
      96:	9c 0d       	add	r25, r12
      98:	ba 0d       	add	r27, r10
      9a:	d8 0d       	add	r29, r8
      9c:	f6 0d       	add	r31, r6
      9e:	14 0e       	add	r1, r20
      a0:	32 0e       	add	r3, r18
      a2:	50 0e       	add	r5, r16
      a4:	a2 0e       	add	r10, r18
      a6:	c0 0e       	add	r12, r16
      a8:	de 0e       	add	r13, r30
      aa:	fc 0e       	add	r15, r28
      ac:	1a 0f       	add	r17, r26
      ae:	38 0f       	add	r19, r24
      b0:	56 0f       	add	r21, r22
      b2:	74 0f       	add	r23, r20
      b4:	c6 0f       	add	r28, r22
      b6:	e4 0f       	add	r30, r20
      b8:	02 10       	cpse	r0, r2
      ba:	20 10       	cpse	r2, r0
      bc:	3e 10       	cpse	r3, r14
      be:	5c 10       	cpse	r5, r12
      c0:	7a 10       	cpse	r7, r10
      c2:	98 10       	cpse	r9, r8
      c4:	b9 10       	cpse	r11, r9
      c6:	07 11       	cpse	r16, r7
      c8:	25 11       	cpse	r18, r5
      ca:	46 11       	cpse	r20, r6
      cc:	68 11       	cpse	r22, r8
      ce:	89 11       	cpse	r24, r9
      d0:	ab 11       	cpse	r26, r11
      d2:	cd 11       	cpse	r28, r13
      d4:	ef 11       	cpse	r30, r15

000000d6 <__ctors_end>:
      d6:	11 24       	eor	r1, r1
      d8:	1f be       	out	0x3f, r1	; 63
      da:	cf e5       	ldi	r28, 0x5F	; 95
      dc:	d4 e0       	ldi	r29, 0x04	; 4
      de:	de bf       	out	0x3e, r29	; 62
      e0:	cd bf       	out	0x3d, r28	; 61

000000e2 <__do_copy_data>:
      e2:	10 e0       	ldi	r17, 0x00	; 0
      e4:	a0 e6       	ldi	r26, 0x60	; 96
      e6:	b0 e0       	ldi	r27, 0x00	; 0
      e8:	e2 e5       	ldi	r30, 0x52	; 82
      ea:	f9 e2       	ldi	r31, 0x29	; 41
      ec:	02 c0       	rjmp	.+4      	; 0xf2 <__do_copy_data+0x10>
      ee:	05 90       	lpm	r0, Z+
      f0:	0d 92       	st	X+, r0
      f2:	a4 36       	cpi	r26, 0x64	; 100
      f4:	b1 07       	cpc	r27, r17
      f6:	d9 f7       	brne	.-10     	; 0xee <__do_copy_data+0xc>

000000f8 <__do_clear_bss>:
      f8:	21 e0       	ldi	r18, 0x01	; 1
      fa:	a4 e6       	ldi	r26, 0x64	; 100
      fc:	b0 e0       	ldi	r27, 0x00	; 0
      fe:	01 c0       	rjmp	.+2      	; 0x102 <.do_clear_bss_start>

00000100 <.do_clear_bss_loop>:
     100:	1d 92       	st	X+, r1

00000102 <.do_clear_bss_start>:
     102:	a6 31       	cpi	r26, 0x16	; 22
     104:	b2 07       	cpc	r27, r18
     106:	e1 f7       	brne	.-8      	; 0x100 <.do_clear_bss_loop>
     108:	0e 94 47 14 	call	0x288e	; 0x288e <main>
     10c:	0c 94 a7 14 	jmp	0x294e	; 0x294e <_exit>

00000110 <__bad_interrupt>:
     110:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000114 <setChecker>:
		}
		
		i++ ;
	}
	return count ;
}
     114:	81 54       	subi	r24, 0x41	; 65
     116:	88 0f       	add	r24, r24
     118:	65 30       	cpi	r22, 0x05	; 5
     11a:	10 f4       	brcc	.+4      	; 0x120 <setChecker+0xc>
     11c:	61 50       	subi	r22, 0x01	; 1
     11e:	02 c0       	rjmp	.+4      	; 0x124 <setChecker+0x10>
     120:	8f 5f       	subi	r24, 0xFF	; 255
     122:	65 50       	subi	r22, 0x05	; 5
     124:	f9 01       	movw	r30, r18
     126:	e8 0f       	add	r30, r24
     128:	f1 1d       	adc	r31, r1
     12a:	20 81       	ld	r18, Z
     12c:	42 34       	cpi	r20, 0x42	; 66
     12e:	99 f4       	brne	.+38     	; 0x156 <setChecker+0x42>
     130:	84 e0       	ldi	r24, 0x04	; 4
     132:	86 0f       	add	r24, r22
     134:	41 e0       	ldi	r20, 0x01	; 1
     136:	50 e0       	ldi	r21, 0x00	; 0
     138:	da 01       	movw	r26, r20
     13a:	02 c0       	rjmp	.+4      	; 0x140 <setChecker+0x2c>
     13c:	aa 0f       	add	r26, r26
     13e:	bb 1f       	adc	r27, r27
     140:	8a 95       	dec	r24
     142:	e2 f7       	brpl	.-8      	; 0x13c <setChecker+0x28>
     144:	cd 01       	movw	r24, r26
     146:	82 2b       	or	r24, r18
     148:	02 c0       	rjmp	.+4      	; 0x14e <setChecker+0x3a>
     14a:	44 0f       	add	r20, r20
     14c:	55 1f       	adc	r21, r21
     14e:	6a 95       	dec	r22
     150:	e2 f7       	brpl	.-8      	; 0x14a <setChecker+0x36>
     152:	84 2b       	or	r24, r20
     154:	12 c0       	rjmp	.+36     	; 0x17a <setChecker+0x66>
     156:	81 e0       	ldi	r24, 0x01	; 1
     158:	90 e0       	ldi	r25, 0x00	; 0
     15a:	ac 01       	movw	r20, r24
     15c:	06 2e       	mov	r0, r22
     15e:	02 c0       	rjmp	.+4      	; 0x164 <setChecker+0x50>
     160:	44 0f       	add	r20, r20
     162:	55 1f       	adc	r21, r21
     164:	0a 94       	dec	r0
     166:	e2 f7       	brpl	.-8      	; 0x160 <setChecker+0x4c>
     168:	6c 5f       	subi	r22, 0xFC	; 252
     16a:	02 c0       	rjmp	.+4      	; 0x170 <setChecker+0x5c>
     16c:	88 0f       	add	r24, r24
     16e:	99 1f       	adc	r25, r25
     170:	6a 95       	dec	r22
     172:	e2 f7       	brpl	.-8      	; 0x16c <setChecker+0x58>
     174:	40 95       	com	r20
     176:	42 23       	and	r20, r18
     178:	84 2b       	or	r24, r20
     17a:	80 83       	st	Z, r24
     17c:	08 95       	ret

0000017e <readCell>:
     17e:	81 54       	subi	r24, 0x41	; 65
     180:	88 0f       	add	r24, r24
     182:	65 30       	cpi	r22, 0x05	; 5
     184:	10 f4       	brcc	.+4      	; 0x18a <readCell+0xc>
     186:	61 50       	subi	r22, 0x01	; 1
     188:	02 c0       	rjmp	.+4      	; 0x18e <readCell+0x10>
     18a:	8f 5f       	subi	r24, 0xFF	; 255
     18c:	65 50       	subi	r22, 0x05	; 5
     18e:	fa 01       	movw	r30, r20
     190:	e8 0f       	add	r30, r24
     192:	f1 1d       	adc	r31, r1
     194:	80 81       	ld	r24, Z
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	24 e0       	ldi	r18, 0x04	; 4
     19a:	26 0f       	add	r18, r22
     19c:	ac 01       	movw	r20, r24
     19e:	02 c0       	rjmp	.+4      	; 0x1a4 <readCell+0x26>
     1a0:	55 95       	asr	r21
     1a2:	47 95       	ror	r20
     1a4:	2a 95       	dec	r18
     1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <readCell+0x22>
     1a8:	40 ff       	sbrs	r20, 0
     1aa:	09 c0       	rjmp	.+18     	; 0x1be <readCell+0x40>
     1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <readCell+0x34>
     1ae:	95 95       	asr	r25
     1b0:	87 95       	ror	r24
     1b2:	6a 95       	dec	r22
     1b4:	e2 f7       	brpl	.-8      	; 0x1ae <readCell+0x30>
     1b6:	80 fd       	sbrc	r24, 0
     1b8:	04 c0       	rjmp	.+8      	; 0x1c2 <readCell+0x44>
     1ba:	87 e5       	ldi	r24, 0x57	; 87
     1bc:	08 95       	ret
     1be:	85 e4       	ldi	r24, 0x45	; 69
     1c0:	08 95       	ret
     1c2:	82 e4       	ldi	r24, 0x42	; 66
     1c4:	08 95       	ret

000001c6 <insertMineValid>:
     1c6:	81 54       	subi	r24, 0x41	; 65
     1c8:	e8 2f       	mov	r30, r24
     1ca:	f0 e0       	ldi	r31, 0x00	; 0
     1cc:	61 50       	subi	r22, 0x01	; 1
     1ce:	81 e0       	ldi	r24, 0x01	; 1
     1d0:	90 e0       	ldi	r25, 0x00	; 0
     1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <insertMineValid+0x12>
     1d4:	88 0f       	add	r24, r24
     1d6:	99 1f       	adc	r25, r25
     1d8:	6a 95       	dec	r22
     1da:	e2 f7       	brpl	.-8      	; 0x1d4 <insertMineValid+0xe>
     1dc:	e2 56       	subi	r30, 0x62	; 98
     1de:	ff 4f       	sbci	r31, 0xFF	; 255
     1e0:	90 81       	ld	r25, Z
     1e2:	89 2b       	or	r24, r25
     1e4:	80 83       	st	Z, r24
     1e6:	08 95       	ret

000001e8 <insertEnemyValid>:
     1e8:	81 54       	subi	r24, 0x41	; 65
     1ea:	e8 2f       	mov	r30, r24
     1ec:	f0 e0       	ldi	r31, 0x00	; 0
     1ee:	61 50       	subi	r22, 0x01	; 1
     1f0:	81 e0       	ldi	r24, 0x01	; 1
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	02 c0       	rjmp	.+4      	; 0x1fa <insertEnemyValid+0x12>
     1f6:	88 0f       	add	r24, r24
     1f8:	99 1f       	adc	r25, r25
     1fa:	6a 95       	dec	r22
     1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <insertEnemyValid+0xe>
     1fe:	ea 58       	subi	r30, 0x8A	; 138
     200:	ff 4f       	sbci	r31, 0xFF	; 255
     202:	90 81       	ld	r25, Z
     204:	89 2b       	or	r24, r25
     206:	80 83       	st	Z, r24
     208:	08 95       	ret

0000020a <checkAvailable>:
     20a:	7f 92       	push	r7
     20c:	8f 92       	push	r8
     20e:	9f 92       	push	r9
     210:	af 92       	push	r10
     212:	bf 92       	push	r11
     214:	cf 92       	push	r12
     216:	df 92       	push	r13
     218:	ef 92       	push	r14
     21a:	ff 92       	push	r15
     21c:	0f 93       	push	r16
     21e:	1f 93       	push	r17
     220:	cf 93       	push	r28
     222:	df 93       	push	r29
     224:	c8 2f       	mov	r28, r24
     226:	d6 2f       	mov	r29, r22
     228:	c4 2e       	mov	r12, r20
     22a:	d2 2e       	mov	r13, r18
     22c:	82 e4       	ldi	r24, 0x42	; 66
     22e:	48 13       	cpse	r20, r24
     230:	c4 c1       	rjmp	.+904    	; 0x5ba <__stack+0x15b>
     232:	01 e0       	ldi	r16, 0x01	; 1
     234:	06 0f       	add	r16, r22
     236:	09 30       	cpi	r16, 0x09	; 9
     238:	40 f0       	brcs	.+16     	; 0x24a <checkAvailable+0x40>
     23a:	27 c0       	rjmp	.+78     	; 0x28a <checkAvailable+0x80>
     23c:	82 34       	cpi	r24, 0x42	; 66
     23e:	09 f4       	brne	.+2      	; 0x242 <checkAvailable+0x38>
     240:	78 c3       	rjmp	.+1776   	; 0x932 <__stack+0x4d3>
     242:	1f 5f       	subi	r17, 0xFF	; 255
     244:	19 30       	cpi	r17, 0x09	; 9
     246:	11 f4       	brne	.+4      	; 0x24c <checkAvailable+0x42>
     248:	20 c0       	rjmp	.+64     	; 0x28a <checkAvailable+0x80>
     24a:	10 2f       	mov	r17, r16
     24c:	46 ea       	ldi	r20, 0xA6	; 166
     24e:	50 e0       	ldi	r21, 0x00	; 0
     250:	61 2f       	mov	r22, r17
     252:	8c 2f       	mov	r24, r28
     254:	0e 94 bf 00 	call	0x17e	; 0x17e <readCell>
     258:	85 34       	cpi	r24, 0x45	; 69
     25a:	81 f7       	brne	.-32     	; 0x23c <checkAvailable+0x32>
     25c:	16 c0       	rjmp	.+44     	; 0x28a <checkAvailable+0x80>
     25e:	1f ef       	ldi	r17, 0xFF	; 255
     260:	1d 0f       	add	r17, r29
     262:	46 ea       	ldi	r20, 0xA6	; 166
     264:	50 e0       	ldi	r21, 0x00	; 0
     266:	61 2f       	mov	r22, r17
     268:	8c 2f       	mov	r24, r28
     26a:	0e 94 bf 00 	call	0x17e	; 0x17e <readCell>
     26e:	85 34       	cpi	r24, 0x45	; 69
     270:	61 f4       	brne	.+24     	; 0x28a <checkAvailable+0x80>
     272:	92 e4       	ldi	r25, 0x42	; 66
     274:	d9 12       	cpse	r13, r25
     276:	05 c0       	rjmp	.+10     	; 0x282 <checkAvailable+0x78>
     278:	61 2f       	mov	r22, r17
     27a:	8c 2f       	mov	r24, r28
     27c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <insertMineValid>
     280:	04 c0       	rjmp	.+8      	; 0x28a <checkAvailable+0x80>
     282:	61 2f       	mov	r22, r17
     284:	8c 2f       	mov	r24, r28
     286:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <insertEnemyValid>
     28a:	cc 24       	eor	r12, r12
     28c:	ca 94       	dec	r12
     28e:	cd 0e       	add	r12, r29
     290:	81 e0       	ldi	r24, 0x01	; 1
     292:	8c 15       	cp	r24, r12
     294:	40 f0       	brcs	.+16     	; 0x2a6 <checkAvailable+0x9c>
     296:	25 c0       	rjmp	.+74     	; 0x2e2 <checkAvailable+0xd8>
     298:	82 34       	cpi	r24, 0x42	; 66
     29a:	09 f4       	brne	.+2      	; 0x29e <checkAvailable+0x94>
     29c:	52 c3       	rjmp	.+1700   	; 0x942 <__stack+0x4e3>
     29e:	11 50       	subi	r17, 0x01	; 1
     2a0:	11 30       	cpi	r17, 0x01	; 1
     2a2:	11 f4       	brne	.+4      	; 0x2a8 <checkAvailable+0x9e>
     2a4:	1e c0       	rjmp	.+60     	; 0x2e2 <checkAvailable+0xd8>
     2a6:	1c 2d       	mov	r17, r12
     2a8:	46 ea       	ldi	r20, 0xA6	; 166
     2aa:	50 e0       	ldi	r21, 0x00	; 0
     2ac:	61 2f       	mov	r22, r17
     2ae:	8c 2f       	mov	r24, r28
     2b0:	0e 94 bf 00 	call	0x17e	; 0x17e <readCell>
     2b4:	85 34       	cpi	r24, 0x45	; 69
     2b6:	81 f7       	brne	.-32     	; 0x298 <checkAvailable+0x8e>
     2b8:	14 c0       	rjmp	.+40     	; 0x2e2 <checkAvailable+0xd8>
     2ba:	46 ea       	ldi	r20, 0xA6	; 166
     2bc:	50 e0       	ldi	r21, 0x00	; 0
     2be:	60 2f       	mov	r22, r16
     2c0:	8c 2f       	mov	r24, r28
     2c2:	0e 94 bf 00 	call	0x17e	; 0x17e <readCell>
     2c6:	85 34       	cpi	r24, 0x45	; 69
     2c8:	61 f4       	brne	.+24     	; 0x2e2 <checkAvailable+0xd8>
     2ca:	92 e4       	ldi	r25, 0x42	; 66
     2cc:	d9 12       	cpse	r13, r25
     2ce:	05 c0       	rjmp	.+10     	; 0x2da <checkAvailable+0xd0>
     2d0:	60 2f       	mov	r22, r16
     2d2:	8c 2f       	mov	r24, r28
     2d4:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <insertMineValid>
     2d8:	04 c0       	rjmp	.+8      	; 0x2e2 <checkAvailable+0xd8>
     2da:	60 2f       	mov	r22, r16
     2dc:	8c 2f       	mov	r24, r28
     2de:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <insertEnemyValid>
     2e2:	bb 24       	eor	r11, r11
     2e4:	ba 94       	dec	r11
     2e6:	bc 0e       	add	r11, r28
     2e8:	80 e4       	ldi	r24, 0x40	; 64
     2ea:	8b 15       	cp	r24, r11
     2ec:	40 f0       	brcs	.+16     	; 0x2fe <checkAvailable+0xf4>
     2ee:	38 c3       	rjmp	.+1648   	; 0x960 <__stack+0x501>
     2f0:	82 34       	cpi	r24, 0x42	; 66
     2f2:	09 f4       	brne	.+2      	; 0x2f6 <checkAvailable+0xec>
     2f4:	2d c3       	rjmp	.+1626   	; 0x950 <__stack+0x4f1>
     2f6:	11 50       	subi	r17, 0x01	; 1
     2f8:	10 34       	cpi	r17, 0x40	; 64
     2fa:	11 f4       	brne	.+4      	; 0x300 <checkAvailable+0xf6>
     2fc:	20 c0       	rjmp	.+64     	; 0x33e <checkAvailable+0x134>
     2fe:	1b 2d       	mov	r17, r11
     300:	46 ea       	ldi	r20, 0xA6	; 166
     302:	50 e0       	ldi	r21, 0x00	; 0
     304:	6d 2f       	mov	r22, r29
     306:	81 2f       	mov	r24, r17
     308:	0e 94 bf 00 	call	0x17e	; 0x17e <readCell>
     30c:	85 34       	cpi	r24, 0x45	; 69
     30e:	81 f7       	brne	.-32     	; 0x2f0 <checkAvailable+0xe6>
     310:	16 c0       	rjmp	.+44     	; 0x33e <checkAvailable+0x134>
     312:	11 e0       	ldi	r17, 0x01	; 1
     314:	1c 0f       	add	r17, r28
     316:	46 ea       	ldi	r20, 0xA6	; 166
     318:	50 e0       	ldi	r21, 0x00	; 0
     31a:	6d 2f       	mov	r22, r29
     31c:	81 2f       	mov	r24, r17
     31e:	0e 94 bf 00 	call	0x17e	; 0x17e <readCell>
     322:	85 34       	cpi	r24, 0x45	; 69
     324:	61 f4       	brne	.+24     	; 0x33e <checkAvailable+0x134>
     326:	92 e4       	ldi	r25, 0x42	; 66
     328:	d9 12       	cpse	r13, r25
     32a:	05 c0       	rjmp	.+10     	; 0x336 <checkAvailable+0x12c>
     32c:	6d 2f       	mov	r22, r29
     32e:	81 2f       	mov	r24, r17
     330:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <insertMineValid>
     334:	04 c0       	rjmp	.+8      	; 0x33e <checkAvailable+0x134>
     336:	6d 2f       	mov	r22, r29
     338:	81 2f       	mov	r24, r17
     33a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <insertEnemyValid>
     33e:	11 e0       	ldi	r17, 0x01	; 1
     340:	1c 0f       	add	r17, r28
     342:	19 34       	cpi	r17, 0x49	; 73
     344:	48 f0       	brcs	.+18     	; 0x358 <checkAvailable+0x14e>
     346:	21 c0       	rjmp	.+66     	; 0x38a <checkAvailable+0x180>
     348:	82 34       	cpi	r24, 0x42	; 66
     34a:	09 f4       	brne	.+2      	; 0x34e <checkAvailable+0x144>
     34c:	0f c3       	rjmp	.+1566   	; 0x96c <__stack+0x50d>
     34e:	f3 94       	inc	r15
     350:	89 e4       	ldi	r24, 0x49	; 73
     352:	f8 12       	cpse	r15, r24
     354:	02 c0       	rjmp	.+4      	; 0x35a <checkAvailable+0x150>
     356:	19 c0       	rjmp	.+50     	; 0x38a <checkAvailable+0x180>
     358:	f1 2e       	mov	r15, r17
     35a:	46 ea       	ldi	r20, 0xA6	; 166
     35c:	50 e0       	ldi	r21, 0x00	; 0
     35e:	6d 2f       	mov	r22, r29
     360:	8f 2d       	mov	r24, r15
     362:	0e 94 bf 00 	call	0x17e	; 0x17e <readCell>
     366:	85 34       	cpi	r24, 0x45	; 69
     368:	79 f7       	brne	.-34     	; 0x348 <checkAvailable+0x13e>
     36a:	0f c0       	rjmp	.+30     	; 0x38a <checkAvailable+0x180>
     36c:	46 ea       	ldi	r20, 0xA6	; 166
     36e:	50 e0       	ldi	r21, 0x00	; 0
     370:	6d 2f       	mov	r22, r29
     372:	8b 2d       	mov	r24, r11
     374:	0e 94 bf 00 	call	0x17e	; 0x17e <readCell>
     378:	85 34       	cpi	r24, 0x45	; 69
     37a:	39 f4       	brne	.+14     	; 0x38a <checkAvailable+0x180>
     37c:	92 e4       	ldi	r25, 0x42	; 66
     37e:	d9 12       	cpse	r13, r25
     380:	0b c0       	rjmp	.+22     	; 0x398 <checkAvailable+0x18e>
     382:	6d 2f       	mov	r22, r29
     384:	8b 2d       	mov	r24, r11
     386:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <insertMineValid>
     38a:	80 e4       	ldi	r24, 0x40	; 64
     38c:	8b 15       	cp	r24, r11
     38e:	08 f0       	brcs	.+2      	; 0x392 <checkAvailable+0x188>
     390:	43 c0       	rjmp	.+134    	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     392:	09 30       	cpi	r16, 0x09	; 9
     394:	98 f0       	brcs	.+38     	; 0x3bc <checkAvailable+0x1b2>
     396:	40 c0       	rjmp	.+128    	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     398:	6d 2f       	mov	r22, r29
     39a:	8b 2d       	mov	r24, r11
     39c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <insertEnemyValid>
     3a0:	f4 cf       	rjmp	.-24     	; 0x38a <checkAvailable+0x180>
     3a2:	a9 2c       	mov	r10, r9
     3a4:	82 34       	cpi	r24, 0x42	; 66
     3a6:	09 f0       	breq	.+2      	; 0x3aa <checkAvailable+0x1a0>
     3a8:	a8 2c       	mov	r10, r8
     3aa:	fa 94       	dec	r15
     3ac:	e3 94       	inc	r14
     3ae:	90 e4       	ldi	r25, 0x40	; 64
     3b0:	f9 16       	cp	r15, r25
     3b2:	a1 f0       	breq	.+40     	; 0x3dc <checkAvailable+0x1d2>
     3b4:	89 e0       	ldi	r24, 0x09	; 9
     3b6:	e8 12       	cpse	r14, r24
     3b8:	07 c0       	rjmp	.+14     	; 0x3c8 <checkAvailable+0x1be>
     3ba:	10 c0       	rjmp	.+32     	; 0x3dc <checkAvailable+0x1d2>
     3bc:	e0 2e       	mov	r14, r16
     3be:	fb 2c       	mov	r15, r11
     3c0:	a1 2c       	mov	r10, r1
     3c2:	99 24       	eor	r9, r9
     3c4:	93 94       	inc	r9
     3c6:	81 2c       	mov	r8, r1
     3c8:	46 ea       	ldi	r20, 0xA6	; 166
     3ca:	50 e0       	ldi	r21, 0x00	; 0
     3cc:	6e 2d       	mov	r22, r14
     3ce:	8f 2d       	mov	r24, r15
     3d0:	0e 94 bf 00 	call	0x17e	; 0x17e <readCell>
     3d4:	85 34       	cpi	r24, 0x45	; 69
     3d6:	11 f0       	breq	.+4      	; 0x3dc <checkAvailable+0x1d2>
     3d8:	aa 20       	and	r10, r10
     3da:	19 f3       	breq	.-58     	; 0x3a2 <checkAvailable+0x198>
     3dc:	91 e0       	ldi	r25, 0x01	; 1
     3de:	a9 12       	cpse	r10, r25
     3e0:	1b c0       	rjmp	.+54     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     3e2:	8c 2f       	mov	r24, r28
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	01 96       	adiw	r24, 0x01	; 1
     3e8:	89 34       	cpi	r24, 0x49	; 73
     3ea:	91 05       	cpc	r25, r1
     3ec:	ac f4       	brge	.+42     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     3ee:	8d 2f       	mov	r24, r29
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	01 97       	sbiw	r24, 0x01	; 1
     3f4:	18 16       	cp	r1, r24
     3f6:	19 06       	cpc	r1, r25
     3f8:	7c f4       	brge	.+30     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     3fa:	46 ea       	ldi	r20, 0xA6	; 166
     3fc:	50 e0       	ldi	r21, 0x00	; 0
     3fe:	6c 2d       	mov	r22, r12
     400:	81 2f       	mov	r24, r17
     402:	0e 94 bf 00 	call	0x17e	; 0x17e <readCell>
     406:	85 34       	cpi	r24, 0x45	; 69
     408:	39 f4       	brne	.+14     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     40a:	82 e4       	ldi	r24, 0x42	; 66
     40c:	d8 12       	cpse	r13, r24
     40e:	0a c0       	rjmp	.+20     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     410:	6c 2d       	mov	r22, r12
     412:	81 2f       	mov	r24, r17
     414:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <insertMineValid>
     418:	19 34       	cpi	r17, 0x49	; 73
     41a:	08 f0       	brcs	.+2      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     41c:	af c2       	rjmp	.+1374   	; 0x97c <__stack+0x51d>
     41e:	c1 10       	cpse	r12, r1
     420:	10 c0       	rjmp	.+32     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     422:	80 c0       	rjmp	.+256    	; 0x524 <__stack+0xc5>
     424:	6c 2d       	mov	r22, r12
     426:	81 2f       	mov	r24, r17
     428:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <insertEnemyValid>
     42c:	f5 cf       	rjmp	.-22     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     42e:	f3 94       	inc	r15
     430:	ea 94       	dec	r14
     432:	99 e4       	ldi	r25, 0x49	; 73
     434:	f9 16       	cp	r15, r25
     436:	81 f0       	breq	.+32     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     438:	ee 20       	and	r14, r14
     43a:	71 f0       	breq	.+28     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     43c:	82 34       	cpi	r24, 0x42	; 66
     43e:	19 f4       	brne	.+6      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     440:	0b c0       	rjmp	.+22     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     442:	ec 2c       	mov	r14, r12
     444:	f1 2e       	mov	r15, r17
     446:	46 ea       	ldi	r20, 0xA6	; 166
     448:	50 e0       	ldi	r21, 0x00	; 0
     44a:	6e 2d       	mov	r22, r14
     44c:	8f 2d       	mov	r24, r15
     44e:	0e 94 bf 00 	call	0x17e	; 0x17e <readCell>
     452:	85 34       	cpi	r24, 0x45	; 69
     454:	61 f7       	brne	.-40     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     456:	21 c0       	rjmp	.+66     	; 0x49a <__stack+0x3b>
     458:	82 34       	cpi	r24, 0x42	; 66
     45a:	09 f0       	breq	.+2      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     45c:	94 c2       	rjmp	.+1320   	; 0x986 <__stack+0x527>
     45e:	8c 2f       	mov	r24, r28
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	01 97       	sbiw	r24, 0x01	; 1
     464:	81 34       	cpi	r24, 0x41	; 65
     466:	91 05       	cpc	r25, r1
     468:	0c f4       	brge	.+2      	; 0x46c <__stack+0xd>
     46a:	8d c2       	rjmp	.+1306   	; 0x986 <__stack+0x527>
     46c:	8d 2f       	mov	r24, r29
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	01 96       	adiw	r24, 0x01	; 1
     472:	09 97       	sbiw	r24, 0x09	; 9
     474:	0c f0       	brlt	.+2      	; 0x478 <__stack+0x19>
     476:	87 c2       	rjmp	.+1294   	; 0x986 <__stack+0x527>
     478:	46 ea       	ldi	r20, 0xA6	; 166
     47a:	50 e0       	ldi	r21, 0x00	; 0
     47c:	60 2f       	mov	r22, r16
     47e:	8b 2d       	mov	r24, r11
     480:	0e 94 bf 00 	call	0x17e	; 0x17e <readCell>
     484:	85 34       	cpi	r24, 0x45	; 69
     486:	09 f0       	breq	.+2      	; 0x48a <__stack+0x2b>
     488:	7e c2       	rjmp	.+1276   	; 0x986 <__stack+0x527>
     48a:	82 e4       	ldi	r24, 0x42	; 66
     48c:	d8 12       	cpse	r13, r24
     48e:	0c c0       	rjmp	.+24     	; 0x4a8 <__stack+0x49>
     490:	60 2f       	mov	r22, r16
     492:	8b 2d       	mov	r24, r11
     494:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <insertMineValid>
     498:	76 c2       	rjmp	.+1260   	; 0x986 <__stack+0x527>
     49a:	90 e4       	ldi	r25, 0x40	; 64
     49c:	9b 15       	cp	r25, r11
     49e:	08 f0       	brcs	.+2      	; 0x4a2 <__stack+0x43>
     4a0:	41 c0       	rjmp	.+130    	; 0x524 <__stack+0xc5>
     4a2:	c1 10       	cpse	r12, r1
     4a4:	12 c0       	rjmp	.+36     	; 0x4ca <__stack+0x6b>
     4a6:	3e c0       	rjmp	.+124    	; 0x524 <__stack+0xc5>
     4a8:	60 2f       	mov	r22, r16
     4aa:	8b 2d       	mov	r24, r11
     4ac:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <insertEnemyValid>
     4b0:	6a c2       	rjmp	.+1236   	; 0x986 <__stack+0x527>
     4b2:	a9 2c       	mov	r10, r9
     4b4:	82 34       	cpi	r24, 0x42	; 66
     4b6:	09 f0       	breq	.+2      	; 0x4ba <__stack+0x5b>
     4b8:	a8 2c       	mov	r10, r8
     4ba:	fa 94       	dec	r15
     4bc:	ea 94       	dec	r14
     4be:	80 e4       	ldi	r24, 0x40	; 64
     4c0:	f8 16       	cp	r15, r24
     4c2:	99 f0       	breq	.+38     	; 0x4ea <__stack+0x8b>
     4c4:	e1 10       	cpse	r14, r1
     4c6:	07 c0       	rjmp	.+14     	; 0x4d6 <__stack+0x77>
     4c8:	10 c0       	rjmp	.+32     	; 0x4ea <__stack+0x8b>
     4ca:	ec 2c       	mov	r14, r12
     4cc:	fb 2c       	mov	r15, r11
     4ce:	a1 2c       	mov	r10, r1
     4d0:	99 24       	eor	r9, r9
     4d2:	93 94       	inc	r9
     4d4:	81 2c       	mov	r8, r1
     4d6:	46 ea       	ldi	r20, 0xA6	; 166
     4d8:	50 e0       	ldi	r21, 0x00	; 0
     4da:	6e 2d       	mov	r22, r14
     4dc:	8f 2d       	mov	r24, r15
     4de:	0e 94 bf 00 	call	0x17e	; 0x17e <readCell>
     4e2:	85 34       	cpi	r24, 0x45	; 69
     4e4:	11 f0       	breq	.+4      	; 0x4ea <__stack+0x8b>
     4e6:	aa 20       	and	r10, r10
     4e8:	21 f3       	breq	.-56     	; 0x4b2 <__stack+0x53>
     4ea:	91 e0       	ldi	r25, 0x01	; 1
     4ec:	a9 12       	cpse	r10, r25
     4ee:	1a c0       	rjmp	.+52     	; 0x524 <__stack+0xc5>
     4f0:	8c 2f       	mov	r24, r28
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	01 96       	adiw	r24, 0x01	; 1
     4f6:	89 34       	cpi	r24, 0x49	; 73
     4f8:	91 05       	cpc	r25, r1
     4fa:	a4 f4       	brge	.+40     	; 0x524 <__stack+0xc5>
     4fc:	8d 2f       	mov	r24, r29
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	01 96       	adiw	r24, 0x01	; 1
     502:	09 97       	sbiw	r24, 0x09	; 9
     504:	7c f4       	brge	.+30     	; 0x524 <__stack+0xc5>
     506:	46 ea       	ldi	r20, 0xA6	; 166
     508:	50 e0       	ldi	r21, 0x00	; 0
     50a:	60 2f       	mov	r22, r16
     50c:	81 2f       	mov	r24, r17
     50e:	0e 94 bf 00 	call	0x17e	; 0x17e <readCell>
     512:	85 34       	cpi	r24, 0x45	; 69
     514:	39 f4       	brne	.+14     	; 0x524 <__stack+0xc5>
     516:	82 e4       	ldi	r24, 0x42	; 66
     518:	d8 12       	cpse	r13, r24
     51a:	0a c0       	rjmp	.+20     	; 0x530 <__stack+0xd1>
     51c:	60 2f       	mov	r22, r16
     51e:	81 2f       	mov	r24, r17
     520:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <insertMineValid>
     524:	19 34       	cpi	r17, 0x49	; 73
     526:	08 f0       	brcs	.+2      	; 0x52a <__stack+0xcb>
     528:	61 c2       	rjmp	.+1218   	; 0x9ec <__stack+0x58d>
     52a:	09 30       	cpi	r16, 0x09	; 9
     52c:	88 f0       	brcs	.+34     	; 0x550 <__stack+0xf1>
     52e:	5e c2       	rjmp	.+1212   	; 0x9ec <__stack+0x58d>
     530:	60 2f       	mov	r22, r16
     532:	81 2f       	mov	r24, r17
     534:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <insertEnemyValid>
     538:	f5 cf       	rjmp	.-22     	; 0x524 <__stack+0xc5>
     53a:	fe 2c       	mov	r15, r14
     53c:	82 34       	cpi	r24, 0x42	; 66
     53e:	09 f0       	breq	.+2      	; 0x542 <__stack+0xe3>
     540:	fa 2c       	mov	r15, r10
     542:	1f 5f       	subi	r17, 0xFF	; 255
     544:	0f 5f       	subi	r16, 0xFF	; 255
     546:	19 34       	cpi	r17, 0x49	; 73
     548:	89 f0       	breq	.+34     	; 0x56c <__stack+0x10d>
     54a:	09 30       	cpi	r16, 0x09	; 9
     54c:	29 f4       	brne	.+10     	; 0x558 <__stack+0xf9>
     54e:	0e c0       	rjmp	.+28     	; 0x56c <__stack+0x10d>
     550:	f1 2c       	mov	r15, r1
     552:	ee 24       	eor	r14, r14
     554:	e3 94       	inc	r14
     556:	a1 2c       	mov	r10, r1
     558:	46 ea       	ldi	r20, 0xA6	; 166
     55a:	50 e0       	ldi	r21, 0x00	; 0
     55c:	60 2f       	mov	r22, r16
     55e:	81 2f       	mov	r24, r17
     560:	0e 94 bf 00 	call	0x17e	; 0x17e <readCell>
     564:	85 34       	cpi	r24, 0x45	; 69
     566:	11 f0       	breq	.+4      	; 0x56c <__stack+0x10d>
     568:	ff 20       	and	r15, r15
     56a:	39 f3       	breq	.-50     	; 0x53a <__stack+0xdb>
     56c:	91 e0       	ldi	r25, 0x01	; 1
     56e:	f9 12       	cpse	r15, r25
     570:	3d c2       	rjmp	.+1146   	; 0x9ec <__stack+0x58d>
     572:	8c 2f       	mov	r24, r28
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	01 97       	sbiw	r24, 0x01	; 1
     578:	81 34       	cpi	r24, 0x41	; 65
     57a:	91 05       	cpc	r25, r1
     57c:	0c f4       	brge	.+2      	; 0x580 <__stack+0x121>
     57e:	36 c2       	rjmp	.+1132   	; 0x9ec <__stack+0x58d>
     580:	8d 2f       	mov	r24, r29
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	01 97       	sbiw	r24, 0x01	; 1
     586:	18 16       	cp	r1, r24
     588:	19 06       	cpc	r1, r25
     58a:	0c f0       	brlt	.+2      	; 0x58e <__stack+0x12f>
     58c:	2f c2       	rjmp	.+1118   	; 0x9ec <__stack+0x58d>
     58e:	46 ea       	ldi	r20, 0xA6	; 166
     590:	50 e0       	ldi	r21, 0x00	; 0
     592:	6c 2d       	mov	r22, r12
     594:	8b 2d       	mov	r24, r11
     596:	0e 94 bf 00 	call	0x17e	; 0x17e <readCell>
     59a:	85 34       	cpi	r24, 0x45	; 69
     59c:	09 f0       	breq	.+2      	; 0x5a0 <__stack+0x141>
     59e:	26 c2       	rjmp	.+1100   	; 0x9ec <__stack+0x58d>
     5a0:	82 e4       	ldi	r24, 0x42	; 66
     5a2:	d8 12       	cpse	r13, r24
     5a4:	05 c0       	rjmp	.+10     	; 0x5b0 <__stack+0x151>
     5a6:	6c 2d       	mov	r22, r12
     5a8:	8b 2d       	mov	r24, r11
     5aa:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <insertMineValid>
     5ae:	1e c2       	rjmp	.+1084   	; 0x9ec <__stack+0x58d>
     5b0:	6c 2d       	mov	r22, r12
     5b2:	8b 2d       	mov	r24, r11
     5b4:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <insertEnemyValid>
     5b8:	19 c2       	rjmp	.+1074   	; 0x9ec <__stack+0x58d>
     5ba:	01 e0       	ldi	r16, 0x01	; 1
     5bc:	06 0f       	add	r16, r22
     5be:	09 30       	cpi	r16, 0x09	; 9
     5c0:	40 f0       	brcs	.+16     	; 0x5d2 <__stack+0x173>
     5c2:	26 c0       	rjmp	.+76     	; 0x610 <__stack+0x1b1>
     5c4:	87 35       	cpi	r24, 0x57	; 87
     5c6:	09 f4       	brne	.+2      	; 0x5ca <__stack+0x16b>
     5c8:	e3 c1       	rjmp	.+966    	; 0x990 <__stack+0x531>
     5ca:	1f 5f       	subi	r17, 0xFF	; 255
     5cc:	19 30       	cpi	r17, 0x09	; 9
     5ce:	11 f4       	brne	.+4      	; 0x5d4 <__stack+0x175>
     5d0:	1f c0       	rjmp	.+62     	; 0x610 <__stack+0x1b1>
     5d2:	10 2f       	mov	r17, r16
     5d4:	46 ea       	ldi	r20, 0xA6	; 166
     5d6:	50 e0       	ldi	r21, 0x00	; 0
     5d8:	61 2f       	mov	r22, r17
     5da:	8c 2f       	mov	r24, r28
     5dc:	0e 94 bf 00 	call	0x17e	; 0x17e <readCell>
     5e0:	85 34       	cpi	r24, 0x45	; 69
     5e2:	81 f7       	brne	.-32     	; 0x5c4 <__stack+0x165>
     5e4:	15 c0       	rjmp	.+42     	; 0x610 <__stack+0x1b1>
     5e6:	1f ef       	ldi	r17, 0xFF	; 255
     5e8:	1d 0f       	add	r17, r29
     5ea:	46 ea       	ldi	r20, 0xA6	; 166
     5ec:	50 e0       	ldi	r21, 0x00	; 0
     5ee:	61 2f       	mov	r22, r17
     5f0:	8c 2f       	mov	r24, r28
     5f2:	0e 94 bf 00 	call	0x17e	; 0x17e <readCell>
     5f6:	85 34       	cpi	r24, 0x45	; 69
     5f8:	59 f4       	brne	.+22     	; 0x610 <__stack+0x1b1>
     5fa:	cd 10       	cpse	r12, r13
     5fc:	05 c0       	rjmp	.+10     	; 0x608 <__stack+0x1a9>
     5fe:	61 2f       	mov	r22, r17
     600:	8c 2f       	mov	r24, r28
     602:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <insertMineValid>
     606:	04 c0       	rjmp	.+8      	; 0x610 <__stack+0x1b1>
     608:	61 2f       	mov	r22, r17
     60a:	8c 2f       	mov	r24, r28
     60c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <insertEnemyValid>
     610:	bb 24       	eor	r11, r11
     612:	ba 94       	dec	r11
     614:	bd 0e       	add	r11, r29
     616:	91 e0       	ldi	r25, 0x01	; 1
     618:	9b 15       	cp	r25, r11
     61a:	40 f0       	brcs	.+16     	; 0x62c <__stack+0x1cd>
     61c:	24 c0       	rjmp	.+72     	; 0x666 <__stack+0x207>
     61e:	87 35       	cpi	r24, 0x57	; 87
     620:	09 f4       	brne	.+2      	; 0x624 <__stack+0x1c5>
     622:	be c1       	rjmp	.+892    	; 0x9a0 <__stack+0x541>
     624:	11 50       	subi	r17, 0x01	; 1
     626:	11 30       	cpi	r17, 0x01	; 1
     628:	11 f4       	brne	.+4      	; 0x62e <__stack+0x1cf>
     62a:	1d c0       	rjmp	.+58     	; 0x666 <__stack+0x207>
     62c:	1b 2d       	mov	r17, r11
     62e:	46 ea       	ldi	r20, 0xA6	; 166
     630:	50 e0       	ldi	r21, 0x00	; 0
     632:	61 2f       	mov	r22, r17
     634:	8c 2f       	mov	r24, r28
     636:	0e 94 bf 00 	call	0x17e	; 0x17e <readCell>
     63a:	85 34       	cpi	r24, 0x45	; 69
     63c:	81 f7       	brne	.-32     	; 0x61e <__stack+0x1bf>
     63e:	13 c0       	rjmp	.+38     	; 0x666 <__stack+0x207>
     640:	46 ea       	ldi	r20, 0xA6	; 166
     642:	50 e0       	ldi	r21, 0x00	; 0
     644:	60 2f       	mov	r22, r16
     646:	8c 2f       	mov	r24, r28
     648:	0e 94 bf 00 	call	0x17e	; 0x17e <readCell>
     64c:	85 34       	cpi	r24, 0x45	; 69
     64e:	59 f4       	brne	.+22     	; 0x666 <__stack+0x207>
     650:	cd 10       	cpse	r12, r13
     652:	05 c0       	rjmp	.+10     	; 0x65e <__stack+0x1ff>
     654:	60 2f       	mov	r22, r16
     656:	8c 2f       	mov	r24, r28
     658:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <insertMineValid>
     65c:	04 c0       	rjmp	.+8      	; 0x666 <__stack+0x207>
     65e:	60 2f       	mov	r22, r16
     660:	8c 2f       	mov	r24, r28
     662:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <insertEnemyValid>
     666:	aa 24       	eor	r10, r10
     668:	aa 94       	dec	r10
     66a:	ac 0e       	add	r10, r28
     66c:	80 e4       	ldi	r24, 0x40	; 64
     66e:	8a 15       	cp	r24, r10
     670:	40 f0       	brcs	.+16     	; 0x682 <__stack+0x223>
     672:	a5 c1       	rjmp	.+842    	; 0x9be <__stack+0x55f>
     674:	87 35       	cpi	r24, 0x57	; 87
     676:	09 f4       	brne	.+2      	; 0x67a <__stack+0x21b>
     678:	9a c1       	rjmp	.+820    	; 0x9ae <__stack+0x54f>
     67a:	11 50       	subi	r17, 0x01	; 1
     67c:	10 34       	cpi	r17, 0x40	; 64
     67e:	11 f4       	brne	.+4      	; 0x684 <__stack+0x225>
     680:	1f c0       	rjmp	.+62     	; 0x6c0 <__stack+0x261>
     682:	1a 2d       	mov	r17, r10
     684:	46 ea       	ldi	r20, 0xA6	; 166
     686:	50 e0       	ldi	r21, 0x00	; 0
     688:	6d 2f       	mov	r22, r29
     68a:	81 2f       	mov	r24, r17
     68c:	0e 94 bf 00 	call	0x17e	; 0x17e <readCell>
     690:	85 34       	cpi	r24, 0x45	; 69
     692:	81 f7       	brne	.-32     	; 0x674 <__stack+0x215>
     694:	15 c0       	rjmp	.+42     	; 0x6c0 <__stack+0x261>
     696:	11 e0       	ldi	r17, 0x01	; 1
     698:	1c 0f       	add	r17, r28
     69a:	46 ea       	ldi	r20, 0xA6	; 166
     69c:	50 e0       	ldi	r21, 0x00	; 0
     69e:	6d 2f       	mov	r22, r29
     6a0:	81 2f       	mov	r24, r17
     6a2:	0e 94 bf 00 	call	0x17e	; 0x17e <readCell>
     6a6:	85 34       	cpi	r24, 0x45	; 69
     6a8:	59 f4       	brne	.+22     	; 0x6c0 <__stack+0x261>
     6aa:	cd 10       	cpse	r12, r13
     6ac:	05 c0       	rjmp	.+10     	; 0x6b8 <__stack+0x259>
     6ae:	6d 2f       	mov	r22, r29
     6b0:	81 2f       	mov	r24, r17
     6b2:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <insertMineValid>
     6b6:	04 c0       	rjmp	.+8      	; 0x6c0 <__stack+0x261>
     6b8:	6d 2f       	mov	r22, r29
     6ba:	81 2f       	mov	r24, r17
     6bc:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <insertEnemyValid>
     6c0:	11 e0       	ldi	r17, 0x01	; 1
     6c2:	1c 0f       	add	r17, r28
     6c4:	19 34       	cpi	r17, 0x49	; 73
     6c6:	48 f0       	brcs	.+18     	; 0x6da <__stack+0x27b>
     6c8:	20 c0       	rjmp	.+64     	; 0x70a <__stack+0x2ab>
     6ca:	87 35       	cpi	r24, 0x57	; 87
     6cc:	09 f4       	brne	.+2      	; 0x6d0 <__stack+0x271>
     6ce:	7d c1       	rjmp	.+762    	; 0x9ca <__stack+0x56b>
     6d0:	f3 94       	inc	r15
     6d2:	99 e4       	ldi	r25, 0x49	; 73
     6d4:	f9 12       	cpse	r15, r25
     6d6:	02 c0       	rjmp	.+4      	; 0x6dc <__stack+0x27d>
     6d8:	18 c0       	rjmp	.+48     	; 0x70a <__stack+0x2ab>
     6da:	f1 2e       	mov	r15, r17
     6dc:	46 ea       	ldi	r20, 0xA6	; 166
     6de:	50 e0       	ldi	r21, 0x00	; 0
     6e0:	6d 2f       	mov	r22, r29
     6e2:	8f 2d       	mov	r24, r15
     6e4:	0e 94 bf 00 	call	0x17e	; 0x17e <readCell>
     6e8:	85 34       	cpi	r24, 0x45	; 69
     6ea:	79 f7       	brne	.-34     	; 0x6ca <__stack+0x26b>
     6ec:	0e c0       	rjmp	.+28     	; 0x70a <__stack+0x2ab>
     6ee:	46 ea       	ldi	r20, 0xA6	; 166
     6f0:	50 e0       	ldi	r21, 0x00	; 0
     6f2:	6d 2f       	mov	r22, r29
     6f4:	8a 2d       	mov	r24, r10
     6f6:	0e 94 bf 00 	call	0x17e	; 0x17e <readCell>
     6fa:	85 34       	cpi	r24, 0x45	; 69
     6fc:	31 f4       	brne	.+12     	; 0x70a <__stack+0x2ab>
     6fe:	cd 10       	cpse	r12, r13
     700:	0b c0       	rjmp	.+22     	; 0x718 <__stack+0x2b9>
     702:	6d 2f       	mov	r22, r29
     704:	8a 2d       	mov	r24, r10
     706:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <insertMineValid>
     70a:	80 e4       	ldi	r24, 0x40	; 64
     70c:	8a 15       	cp	r24, r10
     70e:	08 f0       	brcs	.+2      	; 0x712 <__stack+0x2b3>
     710:	42 c0       	rjmp	.+132    	; 0x796 <__stack+0x337>
     712:	09 30       	cpi	r16, 0x09	; 9
     714:	98 f0       	brcs	.+38     	; 0x73c <__stack+0x2dd>
     716:	3f c0       	rjmp	.+126    	; 0x796 <__stack+0x337>
     718:	6d 2f       	mov	r22, r29
     71a:	8a 2d       	mov	r24, r10
     71c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <insertEnemyValid>
     720:	f4 cf       	rjmp	.-24     	; 0x70a <__stack+0x2ab>
     722:	98 2c       	mov	r9, r8
     724:	87 35       	cpi	r24, 0x57	; 87
     726:	09 f0       	breq	.+2      	; 0x72a <__stack+0x2cb>
     728:	97 2c       	mov	r9, r7
     72a:	fa 94       	dec	r15
     72c:	e3 94       	inc	r14
     72e:	90 e4       	ldi	r25, 0x40	; 64
     730:	f9 16       	cp	r15, r25
     732:	a1 f0       	breq	.+40     	; 0x75c <__stack+0x2fd>
     734:	89 e0       	ldi	r24, 0x09	; 9
     736:	e8 12       	cpse	r14, r24
     738:	07 c0       	rjmp	.+14     	; 0x748 <__stack+0x2e9>
     73a:	10 c0       	rjmp	.+32     	; 0x75c <__stack+0x2fd>
     73c:	e0 2e       	mov	r14, r16
     73e:	fa 2c       	mov	r15, r10
     740:	91 2c       	mov	r9, r1
     742:	88 24       	eor	r8, r8
     744:	83 94       	inc	r8
     746:	71 2c       	mov	r7, r1
     748:	46 ea       	ldi	r20, 0xA6	; 166
     74a:	50 e0       	ldi	r21, 0x00	; 0
     74c:	6e 2d       	mov	r22, r14
     74e:	8f 2d       	mov	r24, r15
     750:	0e 94 bf 00 	call	0x17e	; 0x17e <readCell>
     754:	85 34       	cpi	r24, 0x45	; 69
     756:	11 f0       	breq	.+4      	; 0x75c <__stack+0x2fd>
     758:	99 20       	and	r9, r9
     75a:	19 f3       	breq	.-58     	; 0x722 <__stack+0x2c3>
     75c:	91 e0       	ldi	r25, 0x01	; 1
     75e:	99 12       	cpse	r9, r25
     760:	1a c0       	rjmp	.+52     	; 0x796 <__stack+0x337>
     762:	8c 2f       	mov	r24, r28
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	01 96       	adiw	r24, 0x01	; 1
     768:	89 34       	cpi	r24, 0x49	; 73
     76a:	91 05       	cpc	r25, r1
     76c:	a4 f4       	brge	.+40     	; 0x796 <__stack+0x337>
     76e:	8d 2f       	mov	r24, r29
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	01 97       	sbiw	r24, 0x01	; 1
     774:	18 16       	cp	r1, r24
     776:	19 06       	cpc	r1, r25
     778:	74 f4       	brge	.+28     	; 0x796 <__stack+0x337>
     77a:	46 ea       	ldi	r20, 0xA6	; 166
     77c:	50 e0       	ldi	r21, 0x00	; 0
     77e:	6b 2d       	mov	r22, r11
     780:	81 2f       	mov	r24, r17
     782:	0e 94 bf 00 	call	0x17e	; 0x17e <readCell>
     786:	85 34       	cpi	r24, 0x45	; 69
     788:	31 f4       	brne	.+12     	; 0x796 <__stack+0x337>
     78a:	cd 10       	cpse	r12, r13
     78c:	0a c0       	rjmp	.+20     	; 0x7a2 <__stack+0x343>
     78e:	6b 2d       	mov	r22, r11
     790:	81 2f       	mov	r24, r17
     792:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <insertMineValid>
     796:	19 34       	cpi	r17, 0x49	; 73
     798:	08 f0       	brcs	.+2      	; 0x79c <__stack+0x33d>
     79a:	24 c1       	rjmp	.+584    	; 0x9e4 <__stack+0x585>
     79c:	b1 10       	cpse	r11, r1
     79e:	10 c0       	rjmp	.+32     	; 0x7c0 <__stack+0x361>
     7a0:	7e c0       	rjmp	.+252    	; 0x89e <__stack+0x43f>
     7a2:	6b 2d       	mov	r22, r11
     7a4:	81 2f       	mov	r24, r17
     7a6:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <insertEnemyValid>
     7aa:	f5 cf       	rjmp	.-22     	; 0x796 <__stack+0x337>
     7ac:	f3 94       	inc	r15
     7ae:	ea 94       	dec	r14
     7b0:	99 e4       	ldi	r25, 0x49	; 73
     7b2:	f9 16       	cp	r15, r25
     7b4:	81 f0       	breq	.+32     	; 0x7d6 <__stack+0x377>
     7b6:	ee 20       	and	r14, r14
     7b8:	71 f0       	breq	.+28     	; 0x7d6 <__stack+0x377>
     7ba:	87 35       	cpi	r24, 0x57	; 87
     7bc:	19 f4       	brne	.+6      	; 0x7c4 <__stack+0x365>
     7be:	0b c0       	rjmp	.+22     	; 0x7d6 <__stack+0x377>
     7c0:	eb 2c       	mov	r14, r11
     7c2:	f1 2e       	mov	r15, r17
     7c4:	46 ea       	ldi	r20, 0xA6	; 166
     7c6:	50 e0       	ldi	r21, 0x00	; 0
     7c8:	6e 2d       	mov	r22, r14
     7ca:	8f 2d       	mov	r24, r15
     7cc:	0e 94 bf 00 	call	0x17e	; 0x17e <readCell>
     7d0:	85 34       	cpi	r24, 0x45	; 69
     7d2:	61 f7       	brne	.-40     	; 0x7ac <__stack+0x34d>
     7d4:	20 c0       	rjmp	.+64     	; 0x816 <__stack+0x3b7>
     7d6:	87 35       	cpi	r24, 0x57	; 87
     7d8:	09 f0       	breq	.+2      	; 0x7dc <__stack+0x37d>
     7da:	ff c0       	rjmp	.+510    	; 0x9da <__stack+0x57b>
     7dc:	8c 2f       	mov	r24, r28
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	01 97       	sbiw	r24, 0x01	; 1
     7e2:	81 34       	cpi	r24, 0x41	; 65
     7e4:	91 05       	cpc	r25, r1
     7e6:	0c f4       	brge	.+2      	; 0x7ea <__stack+0x38b>
     7e8:	f8 c0       	rjmp	.+496    	; 0x9da <__stack+0x57b>
     7ea:	8d 2f       	mov	r24, r29
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	01 96       	adiw	r24, 0x01	; 1
     7f0:	09 97       	sbiw	r24, 0x09	; 9
     7f2:	0c f0       	brlt	.+2      	; 0x7f6 <__stack+0x397>
     7f4:	f2 c0       	rjmp	.+484    	; 0x9da <__stack+0x57b>
     7f6:	46 ea       	ldi	r20, 0xA6	; 166
     7f8:	50 e0       	ldi	r21, 0x00	; 0
     7fa:	60 2f       	mov	r22, r16
     7fc:	8a 2d       	mov	r24, r10
     7fe:	0e 94 bf 00 	call	0x17e	; 0x17e <readCell>
     802:	85 34       	cpi	r24, 0x45	; 69
     804:	09 f0       	breq	.+2      	; 0x808 <__stack+0x3a9>
     806:	e9 c0       	rjmp	.+466    	; 0x9da <__stack+0x57b>
     808:	cd 10       	cpse	r12, r13
     80a:	0c c0       	rjmp	.+24     	; 0x824 <__stack+0x3c5>
     80c:	60 2f       	mov	r22, r16
     80e:	8a 2d       	mov	r24, r10
     810:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <insertMineValid>
     814:	e2 c0       	rjmp	.+452    	; 0x9da <__stack+0x57b>
     816:	80 e4       	ldi	r24, 0x40	; 64
     818:	8a 15       	cp	r24, r10
     81a:	08 f0       	brcs	.+2      	; 0x81e <__stack+0x3bf>
     81c:	40 c0       	rjmp	.+128    	; 0x89e <__stack+0x43f>
     81e:	b1 10       	cpse	r11, r1
     820:	12 c0       	rjmp	.+36     	; 0x846 <__stack+0x3e7>
     822:	3d c0       	rjmp	.+122    	; 0x89e <__stack+0x43f>
     824:	60 2f       	mov	r22, r16
     826:	8a 2d       	mov	r24, r10
     828:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <insertEnemyValid>
     82c:	d6 c0       	rjmp	.+428    	; 0x9da <__stack+0x57b>
     82e:	98 2c       	mov	r9, r8
     830:	87 35       	cpi	r24, 0x57	; 87
     832:	09 f0       	breq	.+2      	; 0x836 <__stack+0x3d7>
     834:	97 2c       	mov	r9, r7
     836:	fa 94       	dec	r15
     838:	ea 94       	dec	r14
     83a:	90 e4       	ldi	r25, 0x40	; 64
     83c:	f9 16       	cp	r15, r25
     83e:	99 f0       	breq	.+38     	; 0x866 <__stack+0x407>
     840:	e1 10       	cpse	r14, r1
     842:	07 c0       	rjmp	.+14     	; 0x852 <__stack+0x3f3>
     844:	10 c0       	rjmp	.+32     	; 0x866 <__stack+0x407>
     846:	eb 2c       	mov	r14, r11
     848:	fa 2c       	mov	r15, r10
     84a:	91 2c       	mov	r9, r1
     84c:	88 24       	eor	r8, r8
     84e:	83 94       	inc	r8
     850:	71 2c       	mov	r7, r1
     852:	46 ea       	ldi	r20, 0xA6	; 166
     854:	50 e0       	ldi	r21, 0x00	; 0
     856:	6e 2d       	mov	r22, r14
     858:	8f 2d       	mov	r24, r15
     85a:	0e 94 bf 00 	call	0x17e	; 0x17e <readCell>
     85e:	85 34       	cpi	r24, 0x45	; 69
     860:	11 f0       	breq	.+4      	; 0x866 <__stack+0x407>
     862:	99 20       	and	r9, r9
     864:	21 f3       	breq	.-56     	; 0x82e <__stack+0x3cf>
     866:	81 e0       	ldi	r24, 0x01	; 1
     868:	98 12       	cpse	r9, r24
     86a:	19 c0       	rjmp	.+50     	; 0x89e <__stack+0x43f>
     86c:	8c 2f       	mov	r24, r28
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	01 96       	adiw	r24, 0x01	; 1
     872:	89 34       	cpi	r24, 0x49	; 73
     874:	91 05       	cpc	r25, r1
     876:	9c f4       	brge	.+38     	; 0x89e <__stack+0x43f>
     878:	8d 2f       	mov	r24, r29
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	01 96       	adiw	r24, 0x01	; 1
     87e:	09 97       	sbiw	r24, 0x09	; 9
     880:	74 f4       	brge	.+28     	; 0x89e <__stack+0x43f>
     882:	46 ea       	ldi	r20, 0xA6	; 166
     884:	50 e0       	ldi	r21, 0x00	; 0
     886:	60 2f       	mov	r22, r16
     888:	81 2f       	mov	r24, r17
     88a:	0e 94 bf 00 	call	0x17e	; 0x17e <readCell>
     88e:	85 34       	cpi	r24, 0x45	; 69
     890:	31 f4       	brne	.+12     	; 0x89e <__stack+0x43f>
     892:	cd 10       	cpse	r12, r13
     894:	0a c0       	rjmp	.+20     	; 0x8aa <__stack+0x44b>
     896:	60 2f       	mov	r22, r16
     898:	81 2f       	mov	r24, r17
     89a:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <insertMineValid>
     89e:	19 34       	cpi	r17, 0x49	; 73
     8a0:	08 f0       	brcs	.+2      	; 0x8a4 <__stack+0x445>
     8a2:	a4 c0       	rjmp	.+328    	; 0x9ec <__stack+0x58d>
     8a4:	09 30       	cpi	r16, 0x09	; 9
     8a6:	88 f0       	brcs	.+34     	; 0x8ca <__stack+0x46b>
     8a8:	a1 c0       	rjmp	.+322    	; 0x9ec <__stack+0x58d>
     8aa:	60 2f       	mov	r22, r16
     8ac:	81 2f       	mov	r24, r17
     8ae:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <insertEnemyValid>
     8b2:	f5 cf       	rjmp	.-22     	; 0x89e <__stack+0x43f>
     8b4:	fe 2c       	mov	r15, r14
     8b6:	87 35       	cpi	r24, 0x57	; 87
     8b8:	09 f0       	breq	.+2      	; 0x8bc <__stack+0x45d>
     8ba:	f9 2c       	mov	r15, r9
     8bc:	1f 5f       	subi	r17, 0xFF	; 255
     8be:	0f 5f       	subi	r16, 0xFF	; 255
     8c0:	19 34       	cpi	r17, 0x49	; 73
     8c2:	89 f0       	breq	.+34     	; 0x8e6 <__stack+0x487>
     8c4:	09 30       	cpi	r16, 0x09	; 9
     8c6:	29 f4       	brne	.+10     	; 0x8d2 <__stack+0x473>
     8c8:	0e c0       	rjmp	.+28     	; 0x8e6 <__stack+0x487>
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ee 24       	eor	r14, r14
     8ce:	e3 94       	inc	r14
     8d0:	91 2c       	mov	r9, r1
     8d2:	46 ea       	ldi	r20, 0xA6	; 166
     8d4:	50 e0       	ldi	r21, 0x00	; 0
     8d6:	60 2f       	mov	r22, r16
     8d8:	81 2f       	mov	r24, r17
     8da:	0e 94 bf 00 	call	0x17e	; 0x17e <readCell>
     8de:	85 34       	cpi	r24, 0x45	; 69
     8e0:	11 f0       	breq	.+4      	; 0x8e6 <__stack+0x487>
     8e2:	ff 20       	and	r15, r15
     8e4:	39 f3       	breq	.-50     	; 0x8b4 <__stack+0x455>
     8e6:	91 e0       	ldi	r25, 0x01	; 1
     8e8:	f9 12       	cpse	r15, r25
     8ea:	80 c0       	rjmp	.+256    	; 0x9ec <__stack+0x58d>
     8ec:	8c 2f       	mov	r24, r28
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	01 97       	sbiw	r24, 0x01	; 1
     8f2:	81 34       	cpi	r24, 0x41	; 65
     8f4:	91 05       	cpc	r25, r1
     8f6:	0c f4       	brge	.+2      	; 0x8fa <__stack+0x49b>
     8f8:	79 c0       	rjmp	.+242    	; 0x9ec <__stack+0x58d>
     8fa:	8d 2f       	mov	r24, r29
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	01 97       	sbiw	r24, 0x01	; 1
     900:	18 16       	cp	r1, r24
     902:	19 06       	cpc	r1, r25
     904:	0c f0       	brlt	.+2      	; 0x908 <__stack+0x4a9>
     906:	72 c0       	rjmp	.+228    	; 0x9ec <__stack+0x58d>
     908:	46 ea       	ldi	r20, 0xA6	; 166
     90a:	50 e0       	ldi	r21, 0x00	; 0
     90c:	6b 2d       	mov	r22, r11
     90e:	8a 2d       	mov	r24, r10
     910:	0e 94 bf 00 	call	0x17e	; 0x17e <readCell>
     914:	85 34       	cpi	r24, 0x45	; 69
     916:	09 f0       	breq	.+2      	; 0x91a <__stack+0x4bb>
     918:	69 c0       	rjmp	.+210    	; 0x9ec <__stack+0x58d>
     91a:	cd 10       	cpse	r12, r13
     91c:	05 c0       	rjmp	.+10     	; 0x928 <__stack+0x4c9>
     91e:	6b 2d       	mov	r22, r11
     920:	8a 2d       	mov	r24, r10
     922:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <insertMineValid>
     926:	62 c0       	rjmp	.+196    	; 0x9ec <__stack+0x58d>
     928:	6b 2d       	mov	r22, r11
     92a:	8a 2d       	mov	r24, r10
     92c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <insertEnemyValid>
     930:	5d c0       	rjmp	.+186    	; 0x9ec <__stack+0x58d>
     932:	8d 2f       	mov	r24, r29
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	01 97       	sbiw	r24, 0x01	; 1
     938:	18 16       	cp	r1, r24
     93a:	19 06       	cpc	r1, r25
     93c:	0c f4       	brge	.+2      	; 0x940 <__stack+0x4e1>
     93e:	8f cc       	rjmp	.-1762   	; 0x25e <checkAvailable+0x54>
     940:	a4 cc       	rjmp	.-1720   	; 0x28a <checkAvailable+0x80>
     942:	8d 2f       	mov	r24, r29
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	01 96       	adiw	r24, 0x01	; 1
     948:	09 97       	sbiw	r24, 0x09	; 9
     94a:	0c f4       	brge	.+2      	; 0x94e <__stack+0x4ef>
     94c:	b6 cc       	rjmp	.-1684   	; 0x2ba <checkAvailable+0xb0>
     94e:	c9 cc       	rjmp	.-1646   	; 0x2e2 <checkAvailable+0xd8>
     950:	8c 2f       	mov	r24, r28
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	01 96       	adiw	r24, 0x01	; 1
     956:	89 34       	cpi	r24, 0x49	; 73
     958:	91 05       	cpc	r25, r1
     95a:	0c f4       	brge	.+2      	; 0x95e <__stack+0x4ff>
     95c:	da cc       	rjmp	.-1612   	; 0x312 <checkAvailable+0x108>
     95e:	ef cc       	rjmp	.-1570   	; 0x33e <checkAvailable+0x134>
     960:	11 e0       	ldi	r17, 0x01	; 1
     962:	1c 0f       	add	r17, r28
     964:	19 34       	cpi	r17, 0x49	; 73
     966:	08 f4       	brcc	.+2      	; 0x96a <__stack+0x50b>
     968:	f7 cc       	rjmp	.-1554   	; 0x358 <checkAvailable+0x14e>
     96a:	56 cd       	rjmp	.-1364   	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     96c:	8c 2f       	mov	r24, r28
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	01 97       	sbiw	r24, 0x01	; 1
     972:	81 34       	cpi	r24, 0x41	; 65
     974:	91 05       	cpc	r25, r1
     976:	0c f0       	brlt	.+2      	; 0x97a <__stack+0x51b>
     978:	f9 cc       	rjmp	.-1550   	; 0x36c <checkAvailable+0x162>
     97a:	07 cd       	rjmp	.-1522   	; 0x38a <checkAvailable+0x180>
     97c:	80 e4       	ldi	r24, 0x40	; 64
     97e:	8b 15       	cp	r24, r11
     980:	08 f4       	brcc	.+2      	; 0x984 <__stack+0x525>
     982:	8f cd       	rjmp	.-1250   	; 0x4a2 <__stack+0x43>
     984:	33 c0       	rjmp	.+102    	; 0x9ec <__stack+0x58d>
     986:	90 e4       	ldi	r25, 0x40	; 64
     988:	9b 15       	cp	r25, r11
     98a:	08 f4       	brcc	.+2      	; 0x98e <__stack+0x52f>
     98c:	9e cd       	rjmp	.-1220   	; 0x4ca <__stack+0x6b>
     98e:	ca cd       	rjmp	.-1132   	; 0x524 <__stack+0xc5>
     990:	8d 2f       	mov	r24, r29
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	01 97       	sbiw	r24, 0x01	; 1
     996:	18 16       	cp	r1, r24
     998:	19 06       	cpc	r1, r25
     99a:	0c f4       	brge	.+2      	; 0x99e <__stack+0x53f>
     99c:	24 ce       	rjmp	.-952    	; 0x5e6 <__stack+0x187>
     99e:	38 ce       	rjmp	.-912    	; 0x610 <__stack+0x1b1>
     9a0:	8d 2f       	mov	r24, r29
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	01 96       	adiw	r24, 0x01	; 1
     9a6:	09 97       	sbiw	r24, 0x09	; 9
     9a8:	0c f4       	brge	.+2      	; 0x9ac <__stack+0x54d>
     9aa:	4a ce       	rjmp	.-876    	; 0x640 <__stack+0x1e1>
     9ac:	5c ce       	rjmp	.-840    	; 0x666 <__stack+0x207>
     9ae:	8c 2f       	mov	r24, r28
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	01 96       	adiw	r24, 0x01	; 1
     9b4:	89 34       	cpi	r24, 0x49	; 73
     9b6:	91 05       	cpc	r25, r1
     9b8:	0c f4       	brge	.+2      	; 0x9bc <__stack+0x55d>
     9ba:	6d ce       	rjmp	.-806    	; 0x696 <__stack+0x237>
     9bc:	81 ce       	rjmp	.-766    	; 0x6c0 <__stack+0x261>
     9be:	11 e0       	ldi	r17, 0x01	; 1
     9c0:	1c 0f       	add	r17, r28
     9c2:	19 34       	cpi	r17, 0x49	; 73
     9c4:	08 f4       	brcc	.+2      	; 0x9c8 <__stack+0x569>
     9c6:	89 ce       	rjmp	.-750    	; 0x6da <__stack+0x27b>
     9c8:	e6 ce       	rjmp	.-564    	; 0x796 <__stack+0x337>
     9ca:	8c 2f       	mov	r24, r28
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	01 97       	sbiw	r24, 0x01	; 1
     9d0:	81 34       	cpi	r24, 0x41	; 65
     9d2:	91 05       	cpc	r25, r1
     9d4:	0c f0       	brlt	.+2      	; 0x9d8 <__stack+0x579>
     9d6:	8b ce       	rjmp	.-746    	; 0x6ee <__stack+0x28f>
     9d8:	98 ce       	rjmp	.-720    	; 0x70a <__stack+0x2ab>
     9da:	80 e4       	ldi	r24, 0x40	; 64
     9dc:	8a 15       	cp	r24, r10
     9de:	08 f4       	brcc	.+2      	; 0x9e2 <__stack+0x583>
     9e0:	32 cf       	rjmp	.-412    	; 0x846 <__stack+0x3e7>
     9e2:	5d cf       	rjmp	.-326    	; 0x89e <__stack+0x43f>
     9e4:	90 e4       	ldi	r25, 0x40	; 64
     9e6:	9a 15       	cp	r25, r10
     9e8:	08 f4       	brcc	.+2      	; 0x9ec <__stack+0x58d>
     9ea:	19 cf       	rjmp	.-462    	; 0x81e <__stack+0x3bf>
     9ec:	df 91       	pop	r29
     9ee:	cf 91       	pop	r28
     9f0:	1f 91       	pop	r17
     9f2:	0f 91       	pop	r16
     9f4:	ff 90       	pop	r15
     9f6:	ef 90       	pop	r14
     9f8:	df 90       	pop	r13
     9fa:	cf 90       	pop	r12
     9fc:	bf 90       	pop	r11
     9fe:	af 90       	pop	r10
     a00:	9f 90       	pop	r9
     a02:	8f 90       	pop	r8
     a04:	7f 90       	pop	r7
     a06:	08 95       	ret

00000a08 <scanChessboard>:
     a08:	5f 92       	push	r5
     a0a:	6f 92       	push	r6
     a0c:	7f 92       	push	r7
     a0e:	8f 92       	push	r8
     a10:	9f 92       	push	r9
     a12:	af 92       	push	r10
     a14:	bf 92       	push	r11
     a16:	cf 92       	push	r12
     a18:	df 92       	push	r13
     a1a:	ef 92       	push	r14
     a1c:	ff 92       	push	r15
     a1e:	0f 93       	push	r16
     a20:	1f 93       	push	r17
     a22:	cf 93       	push	r28
     a24:	df 93       	push	r29
     a26:	08 2f       	mov	r16, r24
     a28:	0f 2e       	mov	r0, r31
     a2a:	f6 ea       	ldi	r31, 0xA6	; 166
     a2c:	ef 2e       	mov	r14, r31
     a2e:	f0 e0       	ldi	r31, 0x00	; 0
     a30:	ff 2e       	mov	r15, r31
     a32:	f0 2d       	mov	r31, r0
     a34:	10 e0       	ldi	r17, 0x00	; 0
     a36:	55 24       	eor	r5, r5
     a38:	53 94       	inc	r5
     a3a:	0f 2e       	mov	r0, r31
     a3c:	f5 e0       	ldi	r31, 0x05	; 5
     a3e:	6f 2e       	mov	r6, r31
     a40:	f0 2d       	mov	r31, r0
     a42:	68 94       	set
     a44:	77 24       	eor	r7, r7
     a46:	71 f8       	bld	r7, 1
     a48:	0f 2e       	mov	r0, r31
     a4a:	f6 e0       	ldi	r31, 0x06	; 6
     a4c:	8f 2e       	mov	r8, r31
     a4e:	f0 2d       	mov	r31, r0
     a50:	0f 2e       	mov	r0, r31
     a52:	f3 e0       	ldi	r31, 0x03	; 3
     a54:	9f 2e       	mov	r9, r31
     a56:	f0 2d       	mov	r31, r0
     a58:	0f 2e       	mov	r0, r31
     a5a:	f7 e0       	ldi	r31, 0x07	; 7
     a5c:	af 2e       	mov	r10, r31
     a5e:	f0 2d       	mov	r31, r0
     a60:	68 94       	set
     a62:	bb 24       	eor	r11, r11
     a64:	b2 f8       	bld	r11, 2
     a66:	68 94       	set
     a68:	cc 24       	eor	r12, r12
     a6a:	c3 f8       	bld	r12, 3
     a6c:	c1 2f       	mov	r28, r17
     a6e:	c6 95       	lsr	r28
     a70:	cf 5b       	subi	r28, 0xBF	; 191
     a72:	f7 01       	movw	r30, r14
     a74:	d1 91       	ld	r29, Z+
     a76:	7f 01       	movw	r14, r30
     a78:	d4 ff       	sbrs	r29, 4
     a7a:	24 c0       	rjmp	.+72     	; 0xac4 <scanChessboard+0xbc>
     a7c:	10 ff       	sbrs	r17, 0
     a7e:	02 c0       	rjmp	.+4      	; 0xa84 <scanChessboard+0x7c>
     a80:	d6 2c       	mov	r13, r6
     a82:	01 c0       	rjmp	.+2      	; 0xa86 <scanChessboard+0x7e>
     a84:	d5 2c       	mov	r13, r5
     a86:	46 ea       	ldi	r20, 0xA6	; 166
     a88:	50 e0       	ldi	r21, 0x00	; 0
     a8a:	6d 2d       	mov	r22, r13
     a8c:	8c 2f       	mov	r24, r28
     a8e:	0e 94 bf 00 	call	0x17e	; 0x17e <readCell>
     a92:	87 35       	cpi	r24, 0x57	; 87
     a94:	61 f4       	brne	.+24     	; 0xaae <scanChessboard+0xa6>
     a96:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
     a9a:	8f 5f       	subi	r24, 0xFF	; 255
     a9c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end>
     aa0:	20 2f       	mov	r18, r16
     aa2:	42 e4       	ldi	r20, 0x42	; 66
     aa4:	6d 2d       	mov	r22, r13
     aa6:	8c 2f       	mov	r24, r28
     aa8:	0e 94 05 01 	call	0x20a	; 0x20a <checkAvailable>
     aac:	0b c0       	rjmp	.+22     	; 0xac4 <scanChessboard+0xbc>
     aae:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <blackCount>
     ab2:	8f 5f       	subi	r24, 0xFF	; 255
     ab4:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <blackCount>
     ab8:	20 2f       	mov	r18, r16
     aba:	47 e5       	ldi	r20, 0x57	; 87
     abc:	6d 2d       	mov	r22, r13
     abe:	8c 2f       	mov	r24, r28
     ac0:	0e 94 05 01 	call	0x20a	; 0x20a <checkAvailable>
     ac4:	d5 ff       	sbrs	r29, 5
     ac6:	24 c0       	rjmp	.+72     	; 0xb10 <scanChessboard+0x108>
     ac8:	10 ff       	sbrs	r17, 0
     aca:	02 c0       	rjmp	.+4      	; 0xad0 <scanChessboard+0xc8>
     acc:	d8 2c       	mov	r13, r8
     ace:	01 c0       	rjmp	.+2      	; 0xad2 <scanChessboard+0xca>
     ad0:	d7 2c       	mov	r13, r7
     ad2:	46 ea       	ldi	r20, 0xA6	; 166
     ad4:	50 e0       	ldi	r21, 0x00	; 0
     ad6:	6d 2d       	mov	r22, r13
     ad8:	8c 2f       	mov	r24, r28
     ada:	0e 94 bf 00 	call	0x17e	; 0x17e <readCell>
     ade:	87 35       	cpi	r24, 0x57	; 87
     ae0:	61 f4       	brne	.+24     	; 0xafa <scanChessboard+0xf2>
     ae2:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
     ae6:	8f 5f       	subi	r24, 0xFF	; 255
     ae8:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end>
     aec:	20 2f       	mov	r18, r16
     aee:	42 e4       	ldi	r20, 0x42	; 66
     af0:	6d 2d       	mov	r22, r13
     af2:	8c 2f       	mov	r24, r28
     af4:	0e 94 05 01 	call	0x20a	; 0x20a <checkAvailable>
     af8:	0b c0       	rjmp	.+22     	; 0xb10 <scanChessboard+0x108>
     afa:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <blackCount>
     afe:	8f 5f       	subi	r24, 0xFF	; 255
     b00:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <blackCount>
     b04:	20 2f       	mov	r18, r16
     b06:	47 e5       	ldi	r20, 0x57	; 87
     b08:	6d 2d       	mov	r22, r13
     b0a:	8c 2f       	mov	r24, r28
     b0c:	0e 94 05 01 	call	0x20a	; 0x20a <checkAvailable>
     b10:	d6 ff       	sbrs	r29, 6
     b12:	24 c0       	rjmp	.+72     	; 0xb5c <scanChessboard+0x154>
     b14:	10 ff       	sbrs	r17, 0
     b16:	02 c0       	rjmp	.+4      	; 0xb1c <scanChessboard+0x114>
     b18:	da 2c       	mov	r13, r10
     b1a:	01 c0       	rjmp	.+2      	; 0xb1e <scanChessboard+0x116>
     b1c:	d9 2c       	mov	r13, r9
     b1e:	46 ea       	ldi	r20, 0xA6	; 166
     b20:	50 e0       	ldi	r21, 0x00	; 0
     b22:	6d 2d       	mov	r22, r13
     b24:	8c 2f       	mov	r24, r28
     b26:	0e 94 bf 00 	call	0x17e	; 0x17e <readCell>
     b2a:	87 35       	cpi	r24, 0x57	; 87
     b2c:	61 f4       	brne	.+24     	; 0xb46 <scanChessboard+0x13e>
     b2e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
     b32:	8f 5f       	subi	r24, 0xFF	; 255
     b34:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end>
     b38:	20 2f       	mov	r18, r16
     b3a:	42 e4       	ldi	r20, 0x42	; 66
     b3c:	6d 2d       	mov	r22, r13
     b3e:	8c 2f       	mov	r24, r28
     b40:	0e 94 05 01 	call	0x20a	; 0x20a <checkAvailable>
     b44:	0b c0       	rjmp	.+22     	; 0xb5c <scanChessboard+0x154>
     b46:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <blackCount>
     b4a:	8f 5f       	subi	r24, 0xFF	; 255
     b4c:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <blackCount>
     b50:	20 2f       	mov	r18, r16
     b52:	47 e5       	ldi	r20, 0x57	; 87
     b54:	6d 2d       	mov	r22, r13
     b56:	8c 2f       	mov	r24, r28
     b58:	0e 94 05 01 	call	0x20a	; 0x20a <checkAvailable>
     b5c:	dd 23       	and	r29, r29
     b5e:	24 f5       	brge	.+72     	; 0xba8 <scanChessboard+0x1a0>
     b60:	10 ff       	sbrs	r17, 0
     b62:	02 c0       	rjmp	.+4      	; 0xb68 <scanChessboard+0x160>
     b64:	dc 2d       	mov	r29, r12
     b66:	01 c0       	rjmp	.+2      	; 0xb6a <scanChessboard+0x162>
     b68:	db 2d       	mov	r29, r11
     b6a:	46 ea       	ldi	r20, 0xA6	; 166
     b6c:	50 e0       	ldi	r21, 0x00	; 0
     b6e:	6d 2f       	mov	r22, r29
     b70:	8c 2f       	mov	r24, r28
     b72:	0e 94 bf 00 	call	0x17e	; 0x17e <readCell>
     b76:	87 35       	cpi	r24, 0x57	; 87
     b78:	61 f4       	brne	.+24     	; 0xb92 <scanChessboard+0x18a>
     b7a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
     b7e:	8f 5f       	subi	r24, 0xFF	; 255
     b80:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end>
     b84:	20 2f       	mov	r18, r16
     b86:	42 e4       	ldi	r20, 0x42	; 66
     b88:	6d 2f       	mov	r22, r29
     b8a:	8c 2f       	mov	r24, r28
     b8c:	0e 94 05 01 	call	0x20a	; 0x20a <checkAvailable>
     b90:	0b c0       	rjmp	.+22     	; 0xba8 <scanChessboard+0x1a0>
     b92:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <blackCount>
     b96:	8f 5f       	subi	r24, 0xFF	; 255
     b98:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <blackCount>
     b9c:	20 2f       	mov	r18, r16
     b9e:	47 e5       	ldi	r20, 0x57	; 87
     ba0:	6d 2f       	mov	r22, r29
     ba2:	8c 2f       	mov	r24, r28
     ba4:	0e 94 05 01 	call	0x20a	; 0x20a <checkAvailable>
     ba8:	1f 5f       	subi	r17, 0xFF	; 255
     baa:	10 31       	cpi	r17, 0x10	; 16
     bac:	09 f0       	breq	.+2      	; 0xbb0 <scanChessboard+0x1a8>
     bae:	5e cf       	rjmp	.-324    	; 0xa6c <scanChessboard+0x64>
     bb0:	df 91       	pop	r29
     bb2:	cf 91       	pop	r28
     bb4:	1f 91       	pop	r17
     bb6:	0f 91       	pop	r16
     bb8:	ff 90       	pop	r15
     bba:	ef 90       	pop	r14
     bbc:	df 90       	pop	r13
     bbe:	cf 90       	pop	r12
     bc0:	bf 90       	pop	r11
     bc2:	af 90       	pop	r10
     bc4:	9f 90       	pop	r9
     bc6:	8f 90       	pop	r8
     bc8:	7f 90       	pop	r7
     bca:	6f 90       	pop	r6
     bcc:	5f 90       	pop	r5
     bce:	08 95       	ret

00000bd0 <checkEnemyMove>:
     bd0:	81 54       	subi	r24, 0x41	; 65
     bd2:	e8 2f       	mov	r30, r24
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	ea 58       	subi	r30, 0x8A	; 138
     bd8:	ff 4f       	sbci	r31, 0xFF	; 255
     bda:	20 81       	ld	r18, Z
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	61 50       	subi	r22, 0x01	; 1
     be0:	02 c0       	rjmp	.+4      	; 0xbe6 <checkEnemyMove+0x16>
     be2:	35 95       	asr	r19
     be4:	27 95       	ror	r18
     be6:	6a 95       	dec	r22
     be8:	e2 f7       	brpl	.-8      	; 0xbe2 <checkEnemyMove+0x12>
     bea:	81 e0       	ldi	r24, 0x01	; 1
     bec:	20 ff       	sbrs	r18, 0
     bee:	80 e0       	ldi	r24, 0x00	; 0
     bf0:	08 95       	ret

00000bf2 <TurnOtherCheckers>:
     bf2:	7f 92       	push	r7
     bf4:	8f 92       	push	r8
     bf6:	9f 92       	push	r9
     bf8:	af 92       	push	r10
     bfa:	bf 92       	push	r11
     bfc:	cf 92       	push	r12
     bfe:	df 92       	push	r13
     c00:	ef 92       	push	r14
     c02:	ff 92       	push	r15
     c04:	0f 93       	push	r16
     c06:	1f 93       	push	r17
     c08:	cf 93       	push	r28
     c0a:	df 93       	push	r29
     c0c:	f8 2e       	mov	r15, r24
     c0e:	e6 2e       	mov	r14, r22
     c10:	c4 2f       	mov	r28, r20
     c12:	d2 2e       	mov	r13, r18
     c14:	cc 24       	eor	r12, r12
     c16:	c3 94       	inc	r12
     c18:	c6 0e       	add	r12, r22
     c1a:	88 e0       	ldi	r24, 0x08	; 8
     c1c:	8c 15       	cp	r24, r12
     c1e:	98 f4       	brcc	.+38     	; 0xc46 <TurnOtherCheckers+0x54>
     c20:	31 c0       	rjmp	.+98     	; 0xc84 <TurnOtherCheckers+0x92>
     c22:	8d 2f       	mov	r24, r29
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	01 96       	adiw	r24, 0x01	; 1
     c28:	09 97       	sbiw	r24, 0x09	; 9
     c2a:	4c f4       	brge	.+18     	; 0xc3e <TurnOtherCheckers+0x4c>
     c2c:	a8 01       	movw	r20, r16
     c2e:	61 e0       	ldi	r22, 0x01	; 1
     c30:	6d 0f       	add	r22, r29
     c32:	8f 2d       	mov	r24, r15
     c34:	0e 94 bf 00 	call	0x17e	; 0x17e <readCell>
     c38:	ba 2c       	mov	r11, r10
     c3a:	8d 11       	cpse	r24, r13
     c3c:	b9 2c       	mov	r11, r9
     c3e:	df 5f       	subi	r29, 0xFF	; 255
     c40:	d9 30       	cpi	r29, 0x09	; 9
     c42:	31 f4       	brne	.+12     	; 0xc50 <TurnOtherCheckers+0x5e>
     c44:	1f c0       	rjmp	.+62     	; 0xc84 <TurnOtherCheckers+0x92>
     c46:	dc 2d       	mov	r29, r12
     c48:	b1 2c       	mov	r11, r1
     c4a:	aa 24       	eor	r10, r10
     c4c:	a3 94       	inc	r10
     c4e:	91 2c       	mov	r9, r1
     c50:	a8 01       	movw	r20, r16
     c52:	6d 2f       	mov	r22, r29
     c54:	8f 2d       	mov	r24, r15
     c56:	0e 94 bf 00 	call	0x17e	; 0x17e <readCell>
     c5a:	8c 13       	cpse	r24, r28
     c5c:	02 c0       	rjmp	.+4      	; 0xc62 <TurnOtherCheckers+0x70>
     c5e:	bb 20       	and	r11, r11
     c60:	01 f3       	breq	.-64     	; 0xc22 <TurnOtherCheckers+0x30>
     c62:	81 e0       	ldi	r24, 0x01	; 1
     c64:	b8 12       	cpse	r11, r24
     c66:	0e c0       	rjmp	.+28     	; 0xc84 <TurnOtherCheckers+0x92>
     c68:	d9 30       	cpi	r29, 0x09	; 9
     c6a:	60 f4       	brcc	.+24     	; 0xc84 <TurnOtherCheckers+0x92>
     c6c:	cd 16       	cp	r12, r29
     c6e:	50 f4       	brcc	.+20     	; 0xc84 <TurnOtherCheckers+0x92>
     c70:	bc 2c       	mov	r11, r12
     c72:	98 01       	movw	r18, r16
     c74:	4d 2d       	mov	r20, r13
     c76:	6b 2d       	mov	r22, r11
     c78:	8f 2d       	mov	r24, r15
     c7a:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
     c7e:	b3 94       	inc	r11
     c80:	bd 16       	cp	r11, r29
     c82:	b8 f3       	brcs	.-18     	; 0xc72 <TurnOtherCheckers+0x80>
     c84:	bb 24       	eor	r11, r11
     c86:	ba 94       	dec	r11
     c88:	be 0c       	add	r11, r14
     c8a:	99 f4       	brne	.+38     	; 0xcb2 <TurnOtherCheckers+0xc0>
     c8c:	35 c0       	rjmp	.+106    	; 0xcf8 <TurnOtherCheckers+0x106>
     c8e:	8d 2f       	mov	r24, r29
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	01 97       	sbiw	r24, 0x01	; 1
     c94:	18 16       	cp	r1, r24
     c96:	19 06       	cpc	r1, r25
     c98:	4c f4       	brge	.+18     	; 0xcac <TurnOtherCheckers+0xba>
     c9a:	a8 01       	movw	r20, r16
     c9c:	6f ef       	ldi	r22, 0xFF	; 255
     c9e:	6d 0f       	add	r22, r29
     ca0:	8f 2d       	mov	r24, r15
     ca2:	0e 94 bf 00 	call	0x17e	; 0x17e <readCell>
     ca6:	a9 2c       	mov	r10, r9
     ca8:	d8 12       	cpse	r13, r24
     caa:	a8 2c       	mov	r10, r8
     cac:	d1 50       	subi	r29, 0x01	; 1
     cae:	31 f4       	brne	.+12     	; 0xcbc <TurnOtherCheckers+0xca>
     cb0:	0e c0       	rjmp	.+28     	; 0xcce <TurnOtherCheckers+0xdc>
     cb2:	db 2d       	mov	r29, r11
     cb4:	a1 2c       	mov	r10, r1
     cb6:	99 24       	eor	r9, r9
     cb8:	93 94       	inc	r9
     cba:	81 2c       	mov	r8, r1
     cbc:	a8 01       	movw	r20, r16
     cbe:	6d 2f       	mov	r22, r29
     cc0:	8f 2d       	mov	r24, r15
     cc2:	0e 94 bf 00 	call	0x17e	; 0x17e <readCell>
     cc6:	c8 13       	cpse	r28, r24
     cc8:	02 c0       	rjmp	.+4      	; 0xcce <TurnOtherCheckers+0xdc>
     cca:	aa 20       	and	r10, r10
     ccc:	01 f3       	breq	.-64     	; 0xc8e <TurnOtherCheckers+0x9c>
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	a8 12       	cpse	r10, r24
     cd2:	12 c0       	rjmp	.+36     	; 0xcf8 <TurnOtherCheckers+0x106>
     cd4:	8e 2d       	mov	r24, r14
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	01 97       	sbiw	r24, 0x01	; 1
     cda:	18 16       	cp	r1, r24
     cdc:	19 06       	cpc	r1, r25
     cde:	64 f4       	brge	.+24     	; 0xcf8 <TurnOtherCheckers+0x106>
     ce0:	db 15       	cp	r29, r11
     ce2:	50 f4       	brcc	.+20     	; 0xcf8 <TurnOtherCheckers+0x106>
     ce4:	ab 2c       	mov	r10, r11
     ce6:	98 01       	movw	r18, r16
     ce8:	4d 2d       	mov	r20, r13
     cea:	6a 2d       	mov	r22, r10
     cec:	8f 2d       	mov	r24, r15
     cee:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
     cf2:	aa 94       	dec	r10
     cf4:	da 15       	cp	r29, r10
     cf6:	b8 f3       	brcs	.-18     	; 0xce6 <TurnOtherCheckers+0xf4>
     cf8:	aa 24       	eor	r10, r10
     cfa:	aa 94       	dec	r10
     cfc:	af 0c       	add	r10, r15
     cfe:	80 e4       	ldi	r24, 0x40	; 64
     d00:	8a 15       	cp	r24, r10
     d02:	a0 f0       	brcs	.+40     	; 0xd2c <TurnOtherCheckers+0x13a>
     d04:	a7 c1       	rjmp	.+846    	; 0x1054 <TurnOtherCheckers+0x462>
     d06:	8d 2f       	mov	r24, r29
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	01 97       	sbiw	r24, 0x01	; 1
     d0c:	81 34       	cpi	r24, 0x41	; 65
     d0e:	91 05       	cpc	r25, r1
     d10:	4c f0       	brlt	.+18     	; 0xd24 <TurnOtherCheckers+0x132>
     d12:	a8 01       	movw	r20, r16
     d14:	6e 2d       	mov	r22, r14
     d16:	8f ef       	ldi	r24, 0xFF	; 255
     d18:	8d 0f       	add	r24, r29
     d1a:	0e 94 bf 00 	call	0x17e	; 0x17e <readCell>
     d1e:	98 2c       	mov	r9, r8
     d20:	d8 12       	cpse	r13, r24
     d22:	97 2c       	mov	r9, r7
     d24:	d1 50       	subi	r29, 0x01	; 1
     d26:	d0 34       	cpi	r29, 0x40	; 64
     d28:	31 f4       	brne	.+12     	; 0xd36 <TurnOtherCheckers+0x144>
     d2a:	0e c0       	rjmp	.+28     	; 0xd48 <TurnOtherCheckers+0x156>
     d2c:	da 2d       	mov	r29, r10
     d2e:	91 2c       	mov	r9, r1
     d30:	88 24       	eor	r8, r8
     d32:	83 94       	inc	r8
     d34:	71 2c       	mov	r7, r1
     d36:	a8 01       	movw	r20, r16
     d38:	6e 2d       	mov	r22, r14
     d3a:	8d 2f       	mov	r24, r29
     d3c:	0e 94 bf 00 	call	0x17e	; 0x17e <readCell>
     d40:	c8 13       	cpse	r28, r24
     d42:	02 c0       	rjmp	.+4      	; 0xd48 <TurnOtherCheckers+0x156>
     d44:	99 20       	and	r9, r9
     d46:	f9 f2       	breq	.-66     	; 0xd06 <TurnOtherCheckers+0x114>
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	98 12       	cpse	r9, r24
     d4c:	0e c0       	rjmp	.+28     	; 0xd6a <TurnOtherCheckers+0x178>
     d4e:	d1 34       	cpi	r29, 0x41	; 65
     d50:	60 f0       	brcs	.+24     	; 0xd6a <TurnOtherCheckers+0x178>
     d52:	da 15       	cp	r29, r10
     d54:	50 f4       	brcc	.+20     	; 0xd6a <TurnOtherCheckers+0x178>
     d56:	9a 2c       	mov	r9, r10
     d58:	98 01       	movw	r18, r16
     d5a:	4d 2d       	mov	r20, r13
     d5c:	6e 2d       	mov	r22, r14
     d5e:	89 2d       	mov	r24, r9
     d60:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
     d64:	9a 94       	dec	r9
     d66:	d9 15       	cp	r29, r9
     d68:	b8 f3       	brcs	.-18     	; 0xd58 <TurnOtherCheckers+0x166>
     d6a:	f3 94       	inc	r15
     d6c:	88 e4       	ldi	r24, 0x48	; 72
     d6e:	8f 15       	cp	r24, r15
     d70:	a0 f4       	brcc	.+40     	; 0xd9a <TurnOtherCheckers+0x1a8>
     d72:	28 c0       	rjmp	.+80     	; 0xdc4 <TurnOtherCheckers+0x1d2>
     d74:	8d 2f       	mov	r24, r29
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	01 96       	adiw	r24, 0x01	; 1
     d7a:	89 34       	cpi	r24, 0x49	; 73
     d7c:	91 05       	cpc	r25, r1
     d7e:	4c f4       	brge	.+18     	; 0xd92 <TurnOtherCheckers+0x1a0>
     d80:	a8 01       	movw	r20, r16
     d82:	6e 2d       	mov	r22, r14
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	8d 0f       	add	r24, r29
     d88:	0e 94 bf 00 	call	0x17e	; 0x17e <readCell>
     d8c:	98 2c       	mov	r9, r8
     d8e:	d8 12       	cpse	r13, r24
     d90:	97 2c       	mov	r9, r7
     d92:	df 5f       	subi	r29, 0xFF	; 255
     d94:	d9 34       	cpi	r29, 0x49	; 73
     d96:	31 f4       	brne	.+12     	; 0xda4 <TurnOtherCheckers+0x1b2>
     d98:	0e c0       	rjmp	.+28     	; 0xdb6 <TurnOtherCheckers+0x1c4>
     d9a:	df 2d       	mov	r29, r15
     d9c:	91 2c       	mov	r9, r1
     d9e:	88 24       	eor	r8, r8
     da0:	83 94       	inc	r8
     da2:	71 2c       	mov	r7, r1
     da4:	a8 01       	movw	r20, r16
     da6:	6e 2d       	mov	r22, r14
     da8:	8d 2f       	mov	r24, r29
     daa:	0e 94 bf 00 	call	0x17e	; 0x17e <readCell>
     dae:	c8 13       	cpse	r28, r24
     db0:	02 c0       	rjmp	.+4      	; 0xdb6 <TurnOtherCheckers+0x1c4>
     db2:	99 20       	and	r9, r9
     db4:	f9 f2       	breq	.-66     	; 0xd74 <TurnOtherCheckers+0x182>
     db6:	81 e0       	ldi	r24, 0x01	; 1
     db8:	98 12       	cpse	r9, r24
     dba:	04 c0       	rjmp	.+8      	; 0xdc4 <TurnOtherCheckers+0x1d2>
     dbc:	d9 34       	cpi	r29, 0x49	; 73
     dbe:	10 f4       	brcc	.+4      	; 0xdc4 <TurnOtherCheckers+0x1d2>
     dc0:	fd 16       	cp	r15, r29
     dc2:	40 f0       	brcs	.+16     	; 0xdd4 <TurnOtherCheckers+0x1e2>
     dc4:	80 e4       	ldi	r24, 0x40	; 64
     dc6:	8a 15       	cp	r24, r10
     dc8:	08 f0       	brcs	.+2      	; 0xdcc <TurnOtherCheckers+0x1da>
     dca:	40 c0       	rjmp	.+128    	; 0xe4c <TurnOtherCheckers+0x25a>
     dcc:	88 e0       	ldi	r24, 0x08	; 8
     dce:	8c 15       	cp	r24, r12
     dd0:	48 f5       	brcc	.+82     	; 0xe24 <TurnOtherCheckers+0x232>
     dd2:	3c c0       	rjmp	.+120    	; 0xe4c <TurnOtherCheckers+0x25a>
     dd4:	9f 2c       	mov	r9, r15
     dd6:	98 01       	movw	r18, r16
     dd8:	4d 2d       	mov	r20, r13
     dda:	6e 2d       	mov	r22, r14
     ddc:	89 2d       	mov	r24, r9
     dde:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
     de2:	93 94       	inc	r9
     de4:	9d 16       	cp	r9, r29
     de6:	b8 f3       	brcs	.-18     	; 0xdd6 <TurnOtherCheckers+0x1e4>
     de8:	ed cf       	rjmp	.-38     	; 0xdc4 <TurnOtherCheckers+0x1d2>
     dea:	8d 2f       	mov	r24, r29
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	01 97       	sbiw	r24, 0x01	; 1
     df0:	81 34       	cpi	r24, 0x41	; 65
     df2:	91 05       	cpc	r25, r1
     df4:	7c f0       	brlt	.+30     	; 0xe14 <TurnOtherCheckers+0x222>
     df6:	8e 2d       	mov	r24, r14
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	01 96       	adiw	r24, 0x01	; 1
     dfc:	09 97       	sbiw	r24, 0x09	; 9
     dfe:	54 f4       	brge	.+20     	; 0xe14 <TurnOtherCheckers+0x222>
     e00:	a8 01       	movw	r20, r16
     e02:	61 e0       	ldi	r22, 0x01	; 1
     e04:	6e 0d       	add	r22, r14
     e06:	8f ef       	ldi	r24, 0xFF	; 255
     e08:	8d 0f       	add	r24, r29
     e0a:	0e 94 bf 00 	call	0x17e	; 0x17e <readCell>
     e0e:	d8 12       	cpse	r13, r24
     e10:	01 c0       	rjmp	.+2      	; 0xe14 <TurnOtherCheckers+0x222>
     e12:	98 2c       	mov	r9, r8
     e14:	d1 50       	subi	r29, 0x01	; 1
     e16:	e3 94       	inc	r14
     e18:	d0 34       	cpi	r29, 0x40	; 64
     e1a:	a1 f0       	breq	.+40     	; 0xe44 <TurnOtherCheckers+0x252>
     e1c:	89 e0       	ldi	r24, 0x09	; 9
     e1e:	e8 12       	cpse	r14, r24
     e20:	06 c0       	rjmp	.+12     	; 0xe2e <TurnOtherCheckers+0x23c>
     e22:	03 c1       	rjmp	.+518    	; 0x102a <TurnOtherCheckers+0x438>
     e24:	ec 2c       	mov	r14, r12
     e26:	da 2d       	mov	r29, r10
     e28:	91 2c       	mov	r9, r1
     e2a:	88 24       	eor	r8, r8
     e2c:	83 94       	inc	r8
     e2e:	a8 01       	movw	r20, r16
     e30:	6e 2d       	mov	r22, r14
     e32:	8d 2f       	mov	r24, r29
     e34:	0e 94 bf 00 	call	0x17e	; 0x17e <readCell>
     e38:	c8 13       	cpse	r28, r24
     e3a:	04 c0       	rjmp	.+8      	; 0xe44 <TurnOtherCheckers+0x252>
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	98 12       	cpse	r9, r24
     e40:	d4 cf       	rjmp	.-88     	; 0xdea <TurnOtherCheckers+0x1f8>
     e42:	0e c1       	rjmp	.+540    	; 0x1060 <TurnOtherCheckers+0x46e>
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	98 16       	cp	r9, r24
     e48:	09 f4       	brne	.+2      	; 0xe4c <TurnOtherCheckers+0x25a>
     e4a:	0a c1       	rjmp	.+532    	; 0x1060 <TurnOtherCheckers+0x46e>
     e4c:	88 e4       	ldi	r24, 0x48	; 72
     e4e:	8f 15       	cp	r24, r15
     e50:	08 f4       	brcc	.+2      	; 0xe54 <TurnOtherCheckers+0x262>
     e52:	13 c1       	rjmp	.+550    	; 0x107a <TurnOtherCheckers+0x488>
     e54:	b1 10       	cpse	r11, r1
     e56:	2d c0       	rjmp	.+90     	; 0xeb2 <TurnOtherCheckers+0x2c0>
     e58:	8c c0       	rjmp	.+280    	; 0xf72 <TurnOtherCheckers+0x380>
     e5a:	da 15       	cp	r29, r10
     e5c:	b8 f7       	brcc	.-18     	; 0xe4c <TurnOtherCheckers+0x25a>
     e5e:	ea 2c       	mov	r14, r10
     e60:	9c 2c       	mov	r9, r12
     e62:	98 01       	movw	r18, r16
     e64:	4d 2d       	mov	r20, r13
     e66:	69 2d       	mov	r22, r9
     e68:	8e 2d       	mov	r24, r14
     e6a:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
     e6e:	93 94       	inc	r9
     e70:	ea 94       	dec	r14
     e72:	de 15       	cp	r29, r14
     e74:	b0 f3       	brcs	.-20     	; 0xe62 <TurnOtherCheckers+0x270>
     e76:	ea cf       	rjmp	.-44     	; 0xe4c <TurnOtherCheckers+0x25a>
     e78:	8d 2f       	mov	r24, r29
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	01 96       	adiw	r24, 0x01	; 1
     e7e:	89 34       	cpi	r24, 0x49	; 73
     e80:	91 05       	cpc	r25, r1
     e82:	84 f4       	brge	.+32     	; 0xea4 <TurnOtherCheckers+0x2b2>
     e84:	8e 2d       	mov	r24, r14
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	01 97       	sbiw	r24, 0x01	; 1
     e8a:	18 16       	cp	r1, r24
     e8c:	19 06       	cpc	r1, r25
     e8e:	54 f4       	brge	.+20     	; 0xea4 <TurnOtherCheckers+0x2b2>
     e90:	a8 01       	movw	r20, r16
     e92:	6f ef       	ldi	r22, 0xFF	; 255
     e94:	6e 0d       	add	r22, r14
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	8d 0f       	add	r24, r29
     e9a:	0e 94 bf 00 	call	0x17e	; 0x17e <readCell>
     e9e:	d8 12       	cpse	r13, r24
     ea0:	01 c0       	rjmp	.+2      	; 0xea4 <TurnOtherCheckers+0x2b2>
     ea2:	98 2c       	mov	r9, r8
     ea4:	df 5f       	subi	r29, 0xFF	; 255
     ea6:	ea 94       	dec	r14
     ea8:	d9 34       	cpi	r29, 0x49	; 73
     eaa:	99 f0       	breq	.+38     	; 0xed2 <TurnOtherCheckers+0x2e0>
     eac:	e1 10       	cpse	r14, r1
     eae:	06 c0       	rjmp	.+12     	; 0xebc <TurnOtherCheckers+0x2ca>
     eb0:	c0 c0       	rjmp	.+384    	; 0x1032 <TurnOtherCheckers+0x440>
     eb2:	eb 2c       	mov	r14, r11
     eb4:	df 2d       	mov	r29, r15
     eb6:	91 2c       	mov	r9, r1
     eb8:	88 24       	eor	r8, r8
     eba:	83 94       	inc	r8
     ebc:	a8 01       	movw	r20, r16
     ebe:	6e 2d       	mov	r22, r14
     ec0:	8d 2f       	mov	r24, r29
     ec2:	0e 94 bf 00 	call	0x17e	; 0x17e <readCell>
     ec6:	c8 13       	cpse	r28, r24
     ec8:	04 c0       	rjmp	.+8      	; 0xed2 <TurnOtherCheckers+0x2e0>
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	98 12       	cpse	r9, r24
     ece:	d4 cf       	rjmp	.-88     	; 0xe78 <TurnOtherCheckers+0x286>
     ed0:	cb c0       	rjmp	.+406    	; 0x1068 <TurnOtherCheckers+0x476>
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	98 12       	cpse	r9, r24
     ed6:	cc c0       	rjmp	.+408    	; 0x1070 <TurnOtherCheckers+0x47e>
     ed8:	c7 c0       	rjmp	.+398    	; 0x1068 <TurnOtherCheckers+0x476>
     eda:	80 e4       	ldi	r24, 0x40	; 64
     edc:	8a 15       	cp	r24, r10
     ede:	08 f0       	brcs	.+2      	; 0xee2 <TurnOtherCheckers+0x2f0>
     ee0:	48 c0       	rjmp	.+144    	; 0xf72 <TurnOtherCheckers+0x380>
     ee2:	b1 10       	cpse	r11, r1
     ee4:	31 c0       	rjmp	.+98     	; 0xf48 <TurnOtherCheckers+0x356>
     ee6:	45 c0       	rjmp	.+138    	; 0xf72 <TurnOtherCheckers+0x380>
     ee8:	fd 16       	cp	r15, r29
     eea:	08 f0       	brcs	.+2      	; 0xeee <TurnOtherCheckers+0x2fc>
     eec:	a6 c0       	rjmp	.+332    	; 0x103a <TurnOtherCheckers+0x448>
     eee:	ef 2c       	mov	r14, r15
     ef0:	9b 2c       	mov	r9, r11
     ef2:	98 01       	movw	r18, r16
     ef4:	4d 2d       	mov	r20, r13
     ef6:	69 2d       	mov	r22, r9
     ef8:	8e 2d       	mov	r24, r14
     efa:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
     efe:	9a 94       	dec	r9
     f00:	e3 94       	inc	r14
     f02:	ed 16       	cp	r14, r29
     f04:	08 f0       	brcs	.+2      	; 0xf08 <TurnOtherCheckers+0x316>
     f06:	99 c0       	rjmp	.+306    	; 0x103a <TurnOtherCheckers+0x448>
     f08:	91 10       	cpse	r9, r1
     f0a:	f3 cf       	rjmp	.-26     	; 0xef2 <TurnOtherCheckers+0x300>
     f0c:	96 c0       	rjmp	.+300    	; 0x103a <TurnOtherCheckers+0x448>
     f0e:	8d 2f       	mov	r24, r29
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	01 97       	sbiw	r24, 0x01	; 1
     f14:	81 34       	cpi	r24, 0x41	; 65
     f16:	91 05       	cpc	r25, r1
     f18:	84 f0       	brlt	.+32     	; 0xf3a <TurnOtherCheckers+0x348>
     f1a:	8e 2d       	mov	r24, r14
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	01 97       	sbiw	r24, 0x01	; 1
     f20:	18 16       	cp	r1, r24
     f22:	19 06       	cpc	r1, r25
     f24:	54 f4       	brge	.+20     	; 0xf3a <TurnOtherCheckers+0x348>
     f26:	a8 01       	movw	r20, r16
     f28:	6f ef       	ldi	r22, 0xFF	; 255
     f2a:	6e 0d       	add	r22, r14
     f2c:	8f ef       	ldi	r24, 0xFF	; 255
     f2e:	8d 0f       	add	r24, r29
     f30:	0e 94 bf 00 	call	0x17e	; 0x17e <readCell>
     f34:	d8 12       	cpse	r13, r24
     f36:	01 c0       	rjmp	.+2      	; 0xf3a <TurnOtherCheckers+0x348>
     f38:	98 2c       	mov	r9, r8
     f3a:	d1 50       	subi	r29, 0x01	; 1
     f3c:	ea 94       	dec	r14
     f3e:	d1 34       	cpi	r29, 0x41	; 65
     f40:	98 f0       	brcs	.+38     	; 0xf68 <TurnOtherCheckers+0x376>
     f42:	e1 10       	cpse	r14, r1
     f44:	06 c0       	rjmp	.+12     	; 0xf52 <TurnOtherCheckers+0x360>
     f46:	7e c0       	rjmp	.+252    	; 0x1044 <TurnOtherCheckers+0x452>
     f48:	eb 2c       	mov	r14, r11
     f4a:	da 2d       	mov	r29, r10
     f4c:	91 2c       	mov	r9, r1
     f4e:	88 24       	eor	r8, r8
     f50:	83 94       	inc	r8
     f52:	a8 01       	movw	r20, r16
     f54:	6e 2d       	mov	r22, r14
     f56:	8d 2f       	mov	r24, r29
     f58:	0e 94 bf 00 	call	0x17e	; 0x17e <readCell>
     f5c:	c8 13       	cpse	r28, r24
     f5e:	04 c0       	rjmp	.+8      	; 0xf68 <TurnOtherCheckers+0x376>
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	98 12       	cpse	r9, r24
     f64:	d4 cf       	rjmp	.-88     	; 0xf0e <TurnOtherCheckers+0x31c>
     f66:	03 c0       	rjmp	.+6      	; 0xf6e <TurnOtherCheckers+0x37c>
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	98 12       	cpse	r9, r24
     f6c:	02 c0       	rjmp	.+4      	; 0xf72 <TurnOtherCheckers+0x380>
     f6e:	d1 34       	cpi	r29, 0x41	; 65
     f70:	40 f4       	brcc	.+16     	; 0xf82 <TurnOtherCheckers+0x390>
     f72:	88 e4       	ldi	r24, 0x48	; 72
     f74:	8f 15       	cp	r24, r15
     f76:	08 f4       	brcc	.+2      	; 0xf7a <TurnOtherCheckers+0x388>
     f78:	88 c0       	rjmp	.+272    	; 0x108a <TurnOtherCheckers+0x498>
     f7a:	88 e0       	ldi	r24, 0x08	; 8
     f7c:	8c 15       	cp	r24, r12
     f7e:	80 f5       	brcc	.+96     	; 0xfe0 <TurnOtherCheckers+0x3ee>
     f80:	84 c0       	rjmp	.+264    	; 0x108a <TurnOtherCheckers+0x498>
     f82:	bb 20       	and	r11, r11
     f84:	b1 f3       	breq	.-20     	; 0xf72 <TurnOtherCheckers+0x380>
     f86:	da 15       	cp	r29, r10
     f88:	a0 f7       	brcc	.-24     	; 0xf72 <TurnOtherCheckers+0x380>
     f8a:	98 01       	movw	r18, r16
     f8c:	4d 2d       	mov	r20, r13
     f8e:	6b 2d       	mov	r22, r11
     f90:	8a 2d       	mov	r24, r10
     f92:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
     f96:	ba 94       	dec	r11
     f98:	aa 94       	dec	r10
     f9a:	da 15       	cp	r29, r10
     f9c:	50 f7       	brcc	.-44     	; 0xf72 <TurnOtherCheckers+0x380>
     f9e:	b1 10       	cpse	r11, r1
     fa0:	f4 cf       	rjmp	.-24     	; 0xf8a <TurnOtherCheckers+0x398>
     fa2:	e7 cf       	rjmp	.-50     	; 0xf72 <TurnOtherCheckers+0x380>
     fa4:	8d 2f       	mov	r24, r29
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	01 96       	adiw	r24, 0x01	; 1
     faa:	89 34       	cpi	r24, 0x49	; 73
     fac:	91 05       	cpc	r25, r1
     fae:	7c f4       	brge	.+30     	; 0xfce <TurnOtherCheckers+0x3dc>
     fb0:	8e 2d       	mov	r24, r14
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	01 96       	adiw	r24, 0x01	; 1
     fb6:	09 97       	sbiw	r24, 0x09	; 9
     fb8:	54 f4       	brge	.+20     	; 0xfce <TurnOtherCheckers+0x3dc>
     fba:	a8 01       	movw	r20, r16
     fbc:	61 e0       	ldi	r22, 0x01	; 1
     fbe:	6e 0d       	add	r22, r14
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	8d 0f       	add	r24, r29
     fc4:	0e 94 bf 00 	call	0x17e	; 0x17e <readCell>
     fc8:	d8 12       	cpse	r13, r24
     fca:	01 c0       	rjmp	.+2      	; 0xfce <TurnOtherCheckers+0x3dc>
     fcc:	ba 2c       	mov	r11, r10
     fce:	df 5f       	subi	r29, 0xFF	; 255
     fd0:	e3 94       	inc	r14
     fd2:	d9 34       	cpi	r29, 0x49	; 73
     fd4:	09 f4       	brne	.+2      	; 0xfd8 <TurnOtherCheckers+0x3e6>
     fd6:	59 c0       	rjmp	.+178    	; 0x108a <TurnOtherCheckers+0x498>
     fd8:	89 e0       	ldi	r24, 0x09	; 9
     fda:	e8 12       	cpse	r14, r24
     fdc:	06 c0       	rjmp	.+12     	; 0xfea <TurnOtherCheckers+0x3f8>
     fde:	36 c0       	rjmp	.+108    	; 0x104c <TurnOtherCheckers+0x45a>
     fe0:	ec 2c       	mov	r14, r12
     fe2:	df 2d       	mov	r29, r15
     fe4:	b1 2c       	mov	r11, r1
     fe6:	aa 24       	eor	r10, r10
     fe8:	a3 94       	inc	r10
     fea:	a8 01       	movw	r20, r16
     fec:	6e 2d       	mov	r22, r14
     fee:	8d 2f       	mov	r24, r29
     ff0:	0e 94 bf 00 	call	0x17e	; 0x17e <readCell>
     ff4:	c8 13       	cpse	r28, r24
     ff6:	04 c0       	rjmp	.+8      	; 0x1000 <TurnOtherCheckers+0x40e>
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	b8 12       	cpse	r11, r24
     ffc:	d3 cf       	rjmp	.-90     	; 0xfa4 <TurnOtherCheckers+0x3b2>
     ffe:	42 c0       	rjmp	.+132    	; 0x1084 <TurnOtherCheckers+0x492>
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	b8 12       	cpse	r11, r24
    1004:	42 c0       	rjmp	.+132    	; 0x108a <TurnOtherCheckers+0x498>
    1006:	3e c0       	rjmp	.+124    	; 0x1084 <TurnOtherCheckers+0x492>
    1008:	fd 16       	cp	r15, r29
    100a:	08 f0       	brcs	.+2      	; 0x100e <TurnOtherCheckers+0x41c>
    100c:	3e c0       	rjmp	.+124    	; 0x108a <TurnOtherCheckers+0x498>
    100e:	98 01       	movw	r18, r16
    1010:	4d 2d       	mov	r20, r13
    1012:	6c 2d       	mov	r22, r12
    1014:	8f 2d       	mov	r24, r15
    1016:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
    101a:	c3 94       	inc	r12
    101c:	f3 94       	inc	r15
    101e:	fd 16       	cp	r15, r29
    1020:	a0 f5       	brcc	.+104    	; 0x108a <TurnOtherCheckers+0x498>
    1022:	89 e0       	ldi	r24, 0x09	; 9
    1024:	c8 12       	cpse	r12, r24
    1026:	f3 cf       	rjmp	.-26     	; 0x100e <TurnOtherCheckers+0x41c>
    1028:	30 c0       	rjmp	.+96     	; 0x108a <TurnOtherCheckers+0x498>
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	98 12       	cpse	r9, r24
    102e:	0e cf       	rjmp	.-484    	; 0xe4c <TurnOtherCheckers+0x25a>
    1030:	14 cf       	rjmp	.-472    	; 0xe5a <TurnOtherCheckers+0x268>
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	98 12       	cpse	r9, r24
    1036:	1c c0       	rjmp	.+56     	; 0x1070 <TurnOtherCheckers+0x47e>
    1038:	57 cf       	rjmp	.-338    	; 0xee8 <TurnOtherCheckers+0x2f6>
    103a:	80 e4       	ldi	r24, 0x40	; 64
    103c:	8a 15       	cp	r24, r10
    103e:	08 f4       	brcc	.+2      	; 0x1042 <TurnOtherCheckers+0x450>
    1040:	83 cf       	rjmp	.-250    	; 0xf48 <TurnOtherCheckers+0x356>
    1042:	97 cf       	rjmp	.-210    	; 0xf72 <TurnOtherCheckers+0x380>
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	98 12       	cpse	r9, r24
    1048:	94 cf       	rjmp	.-216    	; 0xf72 <TurnOtherCheckers+0x380>
    104a:	9b cf       	rjmp	.-202    	; 0xf82 <TurnOtherCheckers+0x390>
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	b8 12       	cpse	r11, r24
    1050:	1c c0       	rjmp	.+56     	; 0x108a <TurnOtherCheckers+0x498>
    1052:	da cf       	rjmp	.-76     	; 0x1008 <TurnOtherCheckers+0x416>
    1054:	f3 94       	inc	r15
    1056:	88 e4       	ldi	r24, 0x48	; 72
    1058:	8f 15       	cp	r24, r15
    105a:	08 f0       	brcs	.+2      	; 0x105e <TurnOtherCheckers+0x46c>
    105c:	9e ce       	rjmp	.-708    	; 0xd9a <TurnOtherCheckers+0x1a8>
    105e:	f6 ce       	rjmp	.-532    	; 0xe4c <TurnOtherCheckers+0x25a>
    1060:	d1 34       	cpi	r29, 0x41	; 65
    1062:	08 f4       	brcc	.+2      	; 0x1066 <TurnOtherCheckers+0x474>
    1064:	f3 ce       	rjmp	.-538    	; 0xe4c <TurnOtherCheckers+0x25a>
    1066:	f9 ce       	rjmp	.-526    	; 0xe5a <TurnOtherCheckers+0x268>
    1068:	d9 34       	cpi	r29, 0x49	; 73
    106a:	08 f0       	brcs	.+2      	; 0x106e <TurnOtherCheckers+0x47c>
    106c:	36 cf       	rjmp	.-404    	; 0xeda <TurnOtherCheckers+0x2e8>
    106e:	3c cf       	rjmp	.-392    	; 0xee8 <TurnOtherCheckers+0x2f6>
    1070:	80 e4       	ldi	r24, 0x40	; 64
    1072:	8a 15       	cp	r24, r10
    1074:	08 f4       	brcc	.+2      	; 0x1078 <TurnOtherCheckers+0x486>
    1076:	68 cf       	rjmp	.-304    	; 0xf48 <TurnOtherCheckers+0x356>
    1078:	7c cf       	rjmp	.-264    	; 0xf72 <TurnOtherCheckers+0x380>
    107a:	80 e4       	ldi	r24, 0x40	; 64
    107c:	8a 15       	cp	r24, r10
    107e:	08 f4       	brcc	.+2      	; 0x1082 <TurnOtherCheckers+0x490>
    1080:	30 cf       	rjmp	.-416    	; 0xee2 <TurnOtherCheckers+0x2f0>
    1082:	03 c0       	rjmp	.+6      	; 0x108a <TurnOtherCheckers+0x498>
    1084:	d9 34       	cpi	r29, 0x49	; 73
    1086:	08 f4       	brcc	.+2      	; 0x108a <TurnOtherCheckers+0x498>
    1088:	bf cf       	rjmp	.-130    	; 0x1008 <TurnOtherCheckers+0x416>
    108a:	df 91       	pop	r29
    108c:	cf 91       	pop	r28
    108e:	1f 91       	pop	r17
    1090:	0f 91       	pop	r16
    1092:	ff 90       	pop	r15
    1094:	ef 90       	pop	r14
    1096:	df 90       	pop	r13
    1098:	cf 90       	pop	r12
    109a:	bf 90       	pop	r11
    109c:	af 90       	pop	r10
    109e:	9f 90       	pop	r9
    10a0:	8f 90       	pop	r8
    10a2:	7f 90       	pop	r7
    10a4:	08 95       	ret

000010a6 <clearValidMoves>:
    10a6:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <blackCount>
    10aa:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__data_end>
    10ae:	ee e9       	ldi	r30, 0x9E	; 158
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	a6 e7       	ldi	r26, 0x76	; 118
    10b4:	b0 e0       	ldi	r27, 0x00	; 0
    10b6:	86 ea       	ldi	r24, 0xA6	; 166
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	11 92       	st	Z+, r1
    10bc:	1d 92       	st	X+, r1
    10be:	e8 17       	cp	r30, r24
    10c0:	f9 07       	cpc	r31, r25
    10c2:	d9 f7       	brne	.-10     	; 0x10ba <clearValidMoves+0x14>
    10c4:	08 95       	ret

000010c6 <tableInit>:
    10c6:	e6 ea       	ldi	r30, 0xA6	; 166
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	86 eb       	ldi	r24, 0xB6	; 182
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	11 92       	st	Z+, r1
    10d0:	e8 17       	cp	r30, r24
    10d2:	f9 07       	cpc	r31, r25
    10d4:	e1 f7       	brne	.-8      	; 0x10ce <tableInit+0x8>
    10d6:	0e 94 53 08 	call	0x10a6	; 0x10a6 <clearValidMoves>
    10da:	26 ea       	ldi	r18, 0xA6	; 166
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	47 e5       	ldi	r20, 0x57	; 87
    10e0:	64 e0       	ldi	r22, 0x04	; 4
    10e2:	84 e4       	ldi	r24, 0x44	; 68
    10e4:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
    10e8:	26 ea       	ldi	r18, 0xA6	; 166
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	42 e4       	ldi	r20, 0x42	; 66
    10ee:	65 e0       	ldi	r22, 0x05	; 5
    10f0:	84 e4       	ldi	r24, 0x44	; 68
    10f2:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
    10f6:	26 ea       	ldi	r18, 0xA6	; 166
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	42 e4       	ldi	r20, 0x42	; 66
    10fc:	64 e0       	ldi	r22, 0x04	; 4
    10fe:	85 e4       	ldi	r24, 0x45	; 69
    1100:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
    1104:	26 ea       	ldi	r18, 0xA6	; 166
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	47 e5       	ldi	r20, 0x57	; 87
    110a:	65 e0       	ldi	r22, 0x05	; 5
    110c:	85 e4       	ldi	r24, 0x45	; 69
    110e:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
    1112:	08 95       	ret

00001114 <scanCopyChessBoard>:
		}
	}
}

uint8_t scanCopyChessBoard(char mine,uint8_t chessBoard[])
{
    1114:	fb 01       	movw	r30, r22
    1116:	9b 01       	movw	r18, r22
    1118:	20 5f       	subi	r18, 0xF0	; 240
    111a:	3f 4f       	sbci	r19, 0xFF	; 255
	uint8_t buffer = 0 ;
	uint8_t temp1 = 0 ;
	uint8_t temp2 = 0 ;
	uint8_t mineCount = 0 ;
    111c:	40 e0       	ldi	r20, 0x00	; 0
	
	for (uint8_t index = 0 ; index < SIZE ; index++)
	{
		buffer = chessBoard[index] ;
    111e:	91 91       	ld	r25, Z+
		/* First column in half byte */
		temp1 = buffer & 0b00010000 ;								/* Checks for enabled position in chessboard */
		temp1 = (temp1 >> 4) ;
		if (temp1 == 1)
    1120:	94 ff       	sbrs	r25, 4
    1122:	09 c0       	rjmp	.+18     	; 0x1136 <scanCopyChessBoard+0x22>
		{
			temp2 = buffer & 0b00000001 ;							/* Checks the colour of this checker */
			if (temp2 == 1)
    1124:	90 ff       	sbrs	r25, 0
    1126:	04 c0       	rjmp	.+8      	; 0x1130 <scanCopyChessBoard+0x1c>
			{
				/* Black checker */
				if (mine == 'B')
    1128:	82 34       	cpi	r24, 0x42	; 66
    112a:	29 f4       	brne	.+10     	; 0x1136 <scanCopyChessBoard+0x22>
				{
					mineCount++ ;
    112c:	4f 5f       	subi	r20, 0xFF	; 255
    112e:	03 c0       	rjmp	.+6      	; 0x1136 <scanCopyChessBoard+0x22>
				}
			}
			else
			{
				/* White checker */
				if (mine == 'W')
    1130:	87 35       	cpi	r24, 0x57	; 87
    1132:	09 f4       	brne	.+2      	; 0x1136 <scanCopyChessBoard+0x22>
				{
					mineCount++ ;
    1134:	4f 5f       	subi	r20, 0xFF	; 255
		}
		
		/* Second column in half byte */
		temp1 = buffer & 0b00100000 ;
		temp1 = (temp1 >> 5) ;
		if (temp1 == 1)
    1136:	95 ff       	sbrs	r25, 5
    1138:	09 c0       	rjmp	.+18     	; 0x114c <scanCopyChessBoard+0x38>
		{
			/* Enabled position. There is a checker */
			temp2 = buffer & 0b00000010 ;
			temp2 = (temp2 >> 1) ;
			if (temp2 == 1)
    113a:	91 ff       	sbrs	r25, 1
    113c:	04 c0       	rjmp	.+8      	; 0x1146 <scanCopyChessBoard+0x32>
			{
				/* Black checker */
				if (mine == 'B')
    113e:	82 34       	cpi	r24, 0x42	; 66
    1140:	29 f4       	brne	.+10     	; 0x114c <scanCopyChessBoard+0x38>
				{
					mineCount++ ;
    1142:	4f 5f       	subi	r20, 0xFF	; 255
    1144:	03 c0       	rjmp	.+6      	; 0x114c <scanCopyChessBoard+0x38>
				}
			}
			else
			{
				/* White checker */
				if (mine == 'W')
    1146:	87 35       	cpi	r24, 0x57	; 87
    1148:	09 f4       	brne	.+2      	; 0x114c <scanCopyChessBoard+0x38>
				{
					mineCount++ ;
    114a:	4f 5f       	subi	r20, 0xFF	; 255
		}
		
		/* Third column in half byte */
		temp1 = buffer & 0b01000000 ;
		temp1 = (temp1 >> 6) ;
		if (temp1 == 1)
    114c:	96 ff       	sbrs	r25, 6
    114e:	09 c0       	rjmp	.+18     	; 0x1162 <scanCopyChessBoard+0x4e>
		{
			/* There is a checker */
			temp2 = buffer & 0b00000100 ;
			temp2 = (temp2 >> 2) ;
			if (temp2 == 1)
    1150:	92 ff       	sbrs	r25, 2
    1152:	04 c0       	rjmp	.+8      	; 0x115c <scanCopyChessBoard+0x48>
			{
				/* Black checker */
				if (mine == 'B')
    1154:	82 34       	cpi	r24, 0x42	; 66
    1156:	29 f4       	brne	.+10     	; 0x1162 <scanCopyChessBoard+0x4e>
				{
					mineCount++ ;
    1158:	4f 5f       	subi	r20, 0xFF	; 255
    115a:	03 c0       	rjmp	.+6      	; 0x1162 <scanCopyChessBoard+0x4e>
				}
			}
			else
			{
				/* White checker */
				if (mine == 'W')
    115c:	87 35       	cpi	r24, 0x57	; 87
    115e:	09 f4       	brne	.+2      	; 0x1162 <scanCopyChessBoard+0x4e>
				{
					mineCount++ ;
    1160:	4f 5f       	subi	r20, 0xFF	; 255
		}
		
		/* Fourth column in half byte */
		temp1 = buffer & 0b10000000 ;
		temp1 = (temp1 >> 7) ;
		if (temp1)
    1162:	99 23       	and	r25, r25
    1164:	4c f4       	brge	.+18     	; 0x1178 <scanCopyChessBoard+0x64>
		{
			/* There is a checker */
			temp2 = buffer & 0b00001000 ;
			temp2 = (temp2 >> 3) ;
			if (temp2 == 1)
    1166:	93 ff       	sbrs	r25, 3
    1168:	04 c0       	rjmp	.+8      	; 0x1172 <scanCopyChessBoard+0x5e>
			{
				/* Black checker */
				if (mine == 'B')
    116a:	82 34       	cpi	r24, 0x42	; 66
    116c:	29 f4       	brne	.+10     	; 0x1178 <scanCopyChessBoard+0x64>
				{
					mineCount++ ;
    116e:	4f 5f       	subi	r20, 0xFF	; 255
    1170:	03 c0       	rjmp	.+6      	; 0x1178 <scanCopyChessBoard+0x64>
				}
			}
			else
			{
				/* White checker */
				if (mine == 'W')
    1172:	87 35       	cpi	r24, 0x57	; 87
    1174:	09 f4       	brne	.+2      	; 0x1178 <scanCopyChessBoard+0x64>
				{
					mineCount++ ;
    1176:	4f 5f       	subi	r20, 0xFF	; 255
	uint8_t buffer = 0 ;
	uint8_t temp1 = 0 ;
	uint8_t temp2 = 0 ;
	uint8_t mineCount = 0 ;
	
	for (uint8_t index = 0 ; index < SIZE ; index++)
    1178:	e2 17       	cp	r30, r18
    117a:	f3 07       	cpc	r31, r19
    117c:	81 f6       	brne	.-96     	; 0x111e <scanCopyChessBoard+0xa>
		
	}
	
	return mineCount ;
	
    117e:	84 2f       	mov	r24, r20
    1180:	08 95       	ret

00001182 <Tactics>:
	}
	return count ;
}

void Tactics(char mine)
{
    1182:	af 92       	push	r10
    1184:	bf 92       	push	r11
    1186:	df 92       	push	r13
    1188:	ef 92       	push	r14
    118a:	ff 92       	push	r15
    118c:	0f 93       	push	r16
    118e:	1f 93       	push	r17
    1190:	cf 93       	push	r28
    1192:	df 93       	push	r29
    1194:	f8 2e       	mov	r15, r24
    1196:	0f 2e       	mov	r0, r31
    1198:	fe e9       	ldi	r31, 0x9E	; 158
    119a:	af 2e       	mov	r10, r31
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	bf 2e       	mov	r11, r31
    11a0:	f0 2d       	mov	r31, r0
    11a2:	d1 e4       	ldi	r29, 0x41	; 65
	uint8_t buffer = 0 ;
	uint8_t temp = 0;
	uint8_t count = 0 ;
	uint8_t max = 0 ;
    11a4:	d1 2c       	mov	r13, r1

void Tactics(char mine)
{
	uint8_t buffer = 0 ;
	uint8_t temp = 0;
	uint8_t count = 0 ;
    11a6:	e1 2c       	mov	r14, r1
	uint8_t column = 0 ;
	for (uint8_t index = 0; index < SIZE/2; index++)
	{
		/* First check line */
		line = 65 + index ;
		buffer = mineValidtable[index] ;
    11a8:	f5 01       	movw	r30, r10
    11aa:	c1 91       	ld	r28, Z+
    11ac:	5f 01       	movw	r10, r30
		/* Check column */
		temp = buffer & 0b00000001 ;
		if (temp == 1)
    11ae:	c0 ff       	sbrs	r28, 0
    11b0:	29 c1       	rjmp	.+594    	; 0x1404 <Tactics+0x282>
		{
			/* First Valid in this line */
			column = 1 ;
			count++ ;
    11b2:	e3 94       	inc	r14
			switch(count)
    11b4:	8e 2d       	mov	r24, r14
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	fc 01       	movw	r30, r24
    11ba:	31 97       	sbiw	r30, 0x01	; 1
    11bc:	e8 30       	cpi	r30, 0x08	; 8
    11be:	f1 05       	cpc	r31, r1
    11c0:	08 f0       	brcs	.+2      	; 0x11c4 <Tactics+0x42>
    11c2:	04 c1       	rjmp	.+520    	; 0x13cc <Tactics+0x24a>
    11c4:	e6 5d       	subi	r30, 0xD6	; 214
    11c6:	ff 4f       	sbci	r31, 0xFF	; 255
    11c8:	0c 94 a1 14 	jmp	0x2942	; 0x2942 <__tablejump2__>
			{
				case 1:
					setChecker(line,column,mine,table1) ;
    11cc:	26 eb       	ldi	r18, 0xB6	; 182
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	4f 2d       	mov	r20, r15
    11d2:	61 e0       	ldi	r22, 0x01	; 1
    11d4:	8d 2f       	mov	r24, r29
    11d6:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
					TurnOtherCheckers(line,column,enemy,mine,table1) ;
    11da:	06 eb       	ldi	r16, 0xB6	; 182
    11dc:	10 e0       	ldi	r17, 0x00	; 0
    11de:	2f 2d       	mov	r18, r15
    11e0:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    11e4:	61 e0       	ldi	r22, 0x01	; 1
    11e6:	8d 2f       	mov	r24, r29
    11e8:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
					checkers = scanCopyChessBoard(mine,table1) ;
    11ec:	b8 01       	movw	r22, r16
    11ee:	8f 2d       	mov	r24, r15
    11f0:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
					if (max < checkers)
    11f4:	d8 16       	cp	r13, r24
    11f6:	10 f0       	brcs	.+4      	; 0x11fc <Tactics+0x7a>
    11f8:	0c 94 59 12 	jmp	0x24b2	; 0x24b2 <Tactics+0x1330>
					{
						max = checkers ;
						myLine = line ;
    11fc:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
						myColumn = column ;
    1200:	91 e0       	ldi	r25, 0x01	; 1
    1202:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
					setChecker(line,column,mine,table1) ;
					TurnOtherCheckers(line,column,enemy,mine,table1) ;
					checkers = scanCopyChessBoard(mine,table1) ;
					if (max < checkers)
					{
						max = checkers ;
    1206:	d8 2e       	mov	r13, r24
    1208:	0c 94 59 12 	jmp	0x24b2	; 0x24b2 <Tactics+0x1330>
						myColumn = column ;
					}
				break;
				
				case 2:
					setChecker(line,column,mine,table2) ;
    120c:	26 e0       	ldi	r18, 0x06	; 6
    120e:	31 e0       	ldi	r19, 0x01	; 1
    1210:	4f 2d       	mov	r20, r15
    1212:	61 e0       	ldi	r22, 0x01	; 1
    1214:	8d 2f       	mov	r24, r29
    1216:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
					TurnOtherCheckers(line,column,enemy,mine,table2) ;
    121a:	06 e0       	ldi	r16, 0x06	; 6
    121c:	11 e0       	ldi	r17, 0x01	; 1
    121e:	2f 2d       	mov	r18, r15
    1220:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    1224:	61 e0       	ldi	r22, 0x01	; 1
    1226:	8d 2f       	mov	r24, r29
    1228:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
					checkers = scanCopyChessBoard(mine,table2) ;
    122c:	b8 01       	movw	r22, r16
    122e:	8f 2d       	mov	r24, r15
    1230:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
					if (max < checkers)
    1234:	d8 16       	cp	r13, r24
    1236:	10 f0       	brcs	.+4      	; 0x123c <Tactics+0xba>
    1238:	0c 94 60 12 	jmp	0x24c0	; 0x24c0 <Tactics+0x133e>
					{
						max = checkers ;
						myLine = line ;
    123c:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
						myColumn = column ;
    1240:	91 e0       	ldi	r25, 0x01	; 1
    1242:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
					setChecker(line,column,mine,table2) ;
					TurnOtherCheckers(line,column,enemy,mine,table2) ;
					checkers = scanCopyChessBoard(mine,table2) ;
					if (max < checkers)
					{
						max = checkers ;
    1246:	d8 2e       	mov	r13, r24
    1248:	0c 94 60 12 	jmp	0x24c0	; 0x24c0 <Tactics+0x133e>
						myColumn = column ;
					}
				break;
				
				case 3:
					setChecker(line,column,mine,table3) ;
    124c:	26 e6       	ldi	r18, 0x66	; 102
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	4f 2d       	mov	r20, r15
    1252:	61 e0       	ldi	r22, 0x01	; 1
    1254:	8d 2f       	mov	r24, r29
    1256:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
					TurnOtherCheckers(line,column,enemy,mine,table3) ;
    125a:	06 e6       	ldi	r16, 0x66	; 102
    125c:	10 e0       	ldi	r17, 0x00	; 0
    125e:	2f 2d       	mov	r18, r15
    1260:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    1264:	61 e0       	ldi	r22, 0x01	; 1
    1266:	8d 2f       	mov	r24, r29
    1268:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
					checkers = scanCopyChessBoard(mine,table3) ;
    126c:	b8 01       	movw	r22, r16
    126e:	8f 2d       	mov	r24, r15
    1270:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
					if (max < checkers)
    1274:	d8 16       	cp	r13, r24
    1276:	10 f0       	brcs	.+4      	; 0x127c <Tactics+0xfa>
    1278:	0c 94 64 12 	jmp	0x24c8	; 0x24c8 <Tactics+0x1346>
					{
						max = checkers ;
						myLine = line ;
    127c:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
						myColumn = column ;
    1280:	91 e0       	ldi	r25, 0x01	; 1
    1282:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
					setChecker(line,column,mine,table3) ;
					TurnOtherCheckers(line,column,enemy,mine,table3) ;
					checkers = scanCopyChessBoard(mine,table3) ;
					if (max < checkers)
					{
						max = checkers ;
    1286:	d8 2e       	mov	r13, r24
    1288:	0c 94 64 12 	jmp	0x24c8	; 0x24c8 <Tactics+0x1346>
						myColumn = column ;
					}
				break;
				
				case 4:
					setChecker(line,column,mine,table4) ;
    128c:	26 ee       	ldi	r18, 0xE6	; 230
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	4f 2d       	mov	r20, r15
    1292:	61 e0       	ldi	r22, 0x01	; 1
    1294:	8d 2f       	mov	r24, r29
    1296:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
					TurnOtherCheckers(line,column,enemy,mine,table4) ;
    129a:	06 ee       	ldi	r16, 0xE6	; 230
    129c:	10 e0       	ldi	r17, 0x00	; 0
    129e:	2f 2d       	mov	r18, r15
    12a0:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    12a4:	61 e0       	ldi	r22, 0x01	; 1
    12a6:	8d 2f       	mov	r24, r29
    12a8:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
					checkers = scanCopyChessBoard(mine,table4) ;
    12ac:	b8 01       	movw	r22, r16
    12ae:	8f 2d       	mov	r24, r15
    12b0:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
					if (max < checkers)
    12b4:	d8 16       	cp	r13, r24
    12b6:	10 f0       	brcs	.+4      	; 0x12bc <Tactics+0x13a>
    12b8:	0c 94 67 12 	jmp	0x24ce	; 0x24ce <Tactics+0x134c>
					{
						max = checkers ;
						myLine = line ;
    12bc:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
						myColumn = column ;
    12c0:	91 e0       	ldi	r25, 0x01	; 1
    12c2:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
					setChecker(line,column,mine,table4) ;
					TurnOtherCheckers(line,column,enemy,mine,table4) ;
					checkers = scanCopyChessBoard(mine,table4) ;
					if (max < checkers)
					{
						max = checkers ;
    12c6:	d8 2e       	mov	r13, r24
    12c8:	0c 94 67 12 	jmp	0x24ce	; 0x24ce <Tactics+0x134c>
						myColumn = column ;
					}
				break;
				
				case 5:
					setChecker(line,column,mine,table5) ;
    12cc:	26 ef       	ldi	r18, 0xF6	; 246
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	4f 2d       	mov	r20, r15
    12d2:	61 e0       	ldi	r22, 0x01	; 1
    12d4:	8d 2f       	mov	r24, r29
    12d6:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
					TurnOtherCheckers(line,column,enemy,mine,table5) ;
    12da:	06 ef       	ldi	r16, 0xF6	; 246
    12dc:	10 e0       	ldi	r17, 0x00	; 0
    12de:	2f 2d       	mov	r18, r15
    12e0:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    12e4:	61 e0       	ldi	r22, 0x01	; 1
    12e6:	8d 2f       	mov	r24, r29
    12e8:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
					checkers = scanCopyChessBoard(mine,table5) ;
    12ec:	b8 01       	movw	r22, r16
    12ee:	8f 2d       	mov	r24, r15
    12f0:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
					if (max < checkers)
    12f4:	d8 16       	cp	r13, r24
    12f6:	10 f0       	brcs	.+4      	; 0x12fc <Tactics+0x17a>
    12f8:	0c 94 6a 12 	jmp	0x24d4	; 0x24d4 <Tactics+0x1352>
					{
						max = checkers ;
						myLine = line ;
    12fc:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
						myColumn = column ;
    1300:	91 e0       	ldi	r25, 0x01	; 1
    1302:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
					setChecker(line,column,mine,table5) ;
					TurnOtherCheckers(line,column,enemy,mine,table5) ;
					checkers = scanCopyChessBoard(mine,table5) ;
					if (max < checkers)
					{
						max = checkers ;
    1306:	d8 2e       	mov	r13, r24
    1308:	0c 94 6a 12 	jmp	0x24d4	; 0x24d4 <Tactics+0x1352>
						myColumn = column ;
					}
				break;
				
				case 6:
					setChecker(line,column,mine,table6) ;
    130c:	2e e7       	ldi	r18, 0x7E	; 126
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	4f 2d       	mov	r20, r15
    1312:	61 e0       	ldi	r22, 0x01	; 1
    1314:	8d 2f       	mov	r24, r29
    1316:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
					TurnOtherCheckers(line,column,enemy,mine,table6) ;
    131a:	0e e7       	ldi	r16, 0x7E	; 126
    131c:	10 e0       	ldi	r17, 0x00	; 0
    131e:	2f 2d       	mov	r18, r15
    1320:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    1324:	61 e0       	ldi	r22, 0x01	; 1
    1326:	8d 2f       	mov	r24, r29
    1328:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
					checkers = scanCopyChessBoard(mine,table6) ;
    132c:	b8 01       	movw	r22, r16
    132e:	8f 2d       	mov	r24, r15
    1330:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
					if (max < checkers)
    1334:	d8 16       	cp	r13, r24
    1336:	10 f0       	brcs	.+4      	; 0x133c <Tactics+0x1ba>
    1338:	0c 94 6d 12 	jmp	0x24da	; 0x24da <Tactics+0x1358>
					{
						max = checkers ;
						myLine = line ;
    133c:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
						myColumn = column ;
    1340:	91 e0       	ldi	r25, 0x01	; 1
    1342:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
					setChecker(line,column,mine,table6) ;
					TurnOtherCheckers(line,column,enemy,mine,table6) ;
					checkers = scanCopyChessBoard(mine,table6) ;
					if (max < checkers)
					{
						max = checkers ;
    1346:	d8 2e       	mov	r13, r24
    1348:	0c 94 6d 12 	jmp	0x24da	; 0x24da <Tactics+0x1358>
						myColumn = column ;
					}
				break;
				
				case 7:
					setChecker(line,column,mine,table7) ;
    134c:	26 ec       	ldi	r18, 0xC6	; 198
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	4f 2d       	mov	r20, r15
    1352:	61 e0       	ldi	r22, 0x01	; 1
    1354:	8d 2f       	mov	r24, r29
    1356:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
					TurnOtherCheckers(line,column,enemy,mine,table7) ;
    135a:	06 ec       	ldi	r16, 0xC6	; 198
    135c:	10 e0       	ldi	r17, 0x00	; 0
    135e:	2f 2d       	mov	r18, r15
    1360:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    1364:	61 e0       	ldi	r22, 0x01	; 1
    1366:	8d 2f       	mov	r24, r29
    1368:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
					checkers = scanCopyChessBoard(mine,table7) ;
    136c:	b8 01       	movw	r22, r16
    136e:	8f 2d       	mov	r24, r15
    1370:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
					if (max < checkers)
    1374:	d8 16       	cp	r13, r24
    1376:	10 f0       	brcs	.+4      	; 0x137c <Tactics+0x1fa>
    1378:	0c 94 56 12 	jmp	0x24ac	; 0x24ac <Tactics+0x132a>
					{
						max = checkers ;
						myLine = line ;
    137c:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
						myColumn = column ;
    1380:	91 e0       	ldi	r25, 0x01	; 1
    1382:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
					setChecker(line,column,mine,table7) ;
					TurnOtherCheckers(line,column,enemy,mine,table7) ;
					checkers = scanCopyChessBoard(mine,table7) ;
					if (max < checkers)
					{
						max = checkers ;
    1386:	d8 2e       	mov	r13, r24
    1388:	0c 94 56 12 	jmp	0x24ac	; 0x24ac <Tactics+0x132a>
						myColumn = column ;
					}
				break;
				
				case 8:
				setChecker(line,column,mine,table8) ;
    138c:	2e e8       	ldi	r18, 0x8E	; 142
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	4f 2d       	mov	r20, r15
    1392:	61 e0       	ldi	r22, 0x01	; 1
    1394:	8d 2f       	mov	r24, r29
    1396:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table8) ;
    139a:	0e e8       	ldi	r16, 0x8E	; 142
    139c:	10 e0       	ldi	r17, 0x00	; 0
    139e:	2f 2d       	mov	r18, r15
    13a0:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    13a4:	61 e0       	ldi	r22, 0x01	; 1
    13a6:	8d 2f       	mov	r24, r29
    13a8:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table8) ;
    13ac:	b8 01       	movw	r22, r16
    13ae:	8f 2d       	mov	r24, r15
    13b0:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
				if (max < checkers)
    13b4:	d8 16       	cp	r13, r24
    13b6:	10 f0       	brcs	.+4      	; 0x13bc <Tactics+0x23a>
    13b8:	0c 94 5d 12 	jmp	0x24ba	; 0x24ba <Tactics+0x1338>
				{
					max = checkers ;
					myLine = line ;
    13bc:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    13c0:	91 e0       	ldi	r25, 0x01	; 1
    13c2:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table8) ;
				TurnOtherCheckers(line,column,enemy,mine,table8) ;
				checkers = scanCopyChessBoard(mine,table8) ;
				if (max < checkers)
				{
					max = checkers ;
    13c6:	d8 2e       	mov	r13, r24
    13c8:	0c 94 5d 12 	jmp	0x24ba	; 0x24ba <Tactics+0x1338>
					myColumn = column ;
				}
				break; 
				*/
				default:
				setChecker(line,column,mine,table9) ;
    13cc:	26 ed       	ldi	r18, 0xD6	; 214
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	4f 2d       	mov	r20, r15
    13d2:	61 e0       	ldi	r22, 0x01	; 1
    13d4:	8d 2f       	mov	r24, r29
    13d6:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
    13da:	06 ed       	ldi	r16, 0xD6	; 214
    13dc:	10 e0       	ldi	r17, 0x00	; 0
    13de:	2f 2d       	mov	r18, r15
    13e0:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    13e4:	61 e0       	ldi	r22, 0x01	; 1
    13e6:	8d 2f       	mov	r24, r29
    13e8:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table9) ;
    13ec:	b8 01       	movw	r22, r16
    13ee:	8f 2d       	mov	r24, r15
    13f0:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
				if (max < checkers)
    13f4:	d8 16       	cp	r13, r24
    13f6:	30 f4       	brcc	.+12     	; 0x1404 <Tactics+0x282>
				{
					max = checkers ;
					myLine = line ;
    13f8:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    13fc:	91 e0       	ldi	r25, 0x01	; 1
    13fe:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table9) ;
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
				checkers = scanCopyChessBoard(mine,table9) ;
				if (max < checkers)
				{
					max = checkers ;
    1402:	d8 2e       	mov	r13, r24
		}
		
		/* Second valid in this line */
		temp = buffer & 0b00000010 ;
		temp = (temp >> 1) ;
		if (temp == 1)
    1404:	c1 ff       	sbrs	r28, 1
    1406:	23 c1       	rjmp	.+582    	; 0x164e <Tactics+0x4cc>
		{
			column = 2 ;
			count++ ;
    1408:	e3 94       	inc	r14
			switch(count)
    140a:	8e 2d       	mov	r24, r14
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	fc 01       	movw	r30, r24
    1410:	31 97       	sbiw	r30, 0x01	; 1
    1412:	e8 30       	cpi	r30, 0x08	; 8
    1414:	f1 05       	cpc	r31, r1
    1416:	08 f0       	brcs	.+2      	; 0x141a <Tactics+0x298>
    1418:	fe c0       	rjmp	.+508    	; 0x1616 <Tactics+0x494>
    141a:	ee 5c       	subi	r30, 0xCE	; 206
    141c:	ff 4f       	sbci	r31, 0xFF	; 255
    141e:	0c 94 a1 14 	jmp	0x2942	; 0x2942 <__tablejump2__>
			{
				case 1:
				setChecker(line,column,mine,table1) ;
    1422:	26 eb       	ldi	r18, 0xB6	; 182
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	4f 2d       	mov	r20, r15
    1428:	62 e0       	ldi	r22, 0x02	; 2
    142a:	8d 2f       	mov	r24, r29
    142c:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table1) ;
    1430:	06 eb       	ldi	r16, 0xB6	; 182
    1432:	10 e0       	ldi	r17, 0x00	; 0
    1434:	2f 2d       	mov	r18, r15
    1436:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    143a:	62 e0       	ldi	r22, 0x02	; 2
    143c:	8d 2f       	mov	r24, r29
    143e:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table1) ;
    1442:	b8 01       	movw	r22, r16
    1444:	8f 2d       	mov	r24, r15
    1446:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
				if (max < checkers)
    144a:	d8 16       	cp	r13, r24
    144c:	10 f0       	brcs	.+4      	; 0x1452 <Tactics+0x2d0>
    144e:	0c 94 7c 12 	jmp	0x24f8	; 0x24f8 <Tactics+0x1376>
				{
					max = checkers ;
					myLine = line ;
    1452:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    1456:	92 e0       	ldi	r25, 0x02	; 2
    1458:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table1) ;
				TurnOtherCheckers(line,column,enemy,mine,table1) ;
				checkers = scanCopyChessBoard(mine,table1) ;
				if (max < checkers)
				{
					max = checkers ;
    145c:	d8 2e       	mov	r13, r24
    145e:	0c 94 7c 12 	jmp	0x24f8	; 0x24f8 <Tactics+0x1376>
					myColumn = column ;
				}
				break;
				
				case 2:
				setChecker(line,column,mine,table2) ;
    1462:	26 e0       	ldi	r18, 0x06	; 6
    1464:	31 e0       	ldi	r19, 0x01	; 1
    1466:	4f 2d       	mov	r20, r15
    1468:	62 e0       	ldi	r22, 0x02	; 2
    146a:	8d 2f       	mov	r24, r29
    146c:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table2) ;
    1470:	06 e0       	ldi	r16, 0x06	; 6
    1472:	11 e0       	ldi	r17, 0x01	; 1
    1474:	2f 2d       	mov	r18, r15
    1476:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    147a:	62 e0       	ldi	r22, 0x02	; 2
    147c:	8d 2f       	mov	r24, r29
    147e:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table2) ;
    1482:	b8 01       	movw	r22, r16
    1484:	8f 2d       	mov	r24, r15
    1486:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
				if (max < checkers)
    148a:	d8 16       	cp	r13, r24
    148c:	10 f0       	brcs	.+4      	; 0x1492 <Tactics+0x310>
    148e:	0c 94 82 12 	jmp	0x2504	; 0x2504 <Tactics+0x1382>
				{
					max = checkers ;
					myLine = line ;
    1492:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    1496:	92 e0       	ldi	r25, 0x02	; 2
    1498:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table2) ;
				TurnOtherCheckers(line,column,enemy,mine,table2) ;
				checkers = scanCopyChessBoard(mine,table2) ;
				if (max < checkers)
				{
					max = checkers ;
    149c:	d8 2e       	mov	r13, r24
    149e:	0c 94 82 12 	jmp	0x2504	; 0x2504 <Tactics+0x1382>
					myColumn = column ;
				}
				break;
				
				case 3:
				setChecker(line,column,mine,table3) ;
    14a2:	26 e6       	ldi	r18, 0x66	; 102
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	4f 2d       	mov	r20, r15
    14a8:	62 e0       	ldi	r22, 0x02	; 2
    14aa:	8d 2f       	mov	r24, r29
    14ac:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table3) ;
    14b0:	06 e6       	ldi	r16, 0x66	; 102
    14b2:	10 e0       	ldi	r17, 0x00	; 0
    14b4:	2f 2d       	mov	r18, r15
    14b6:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    14ba:	62 e0       	ldi	r22, 0x02	; 2
    14bc:	8d 2f       	mov	r24, r29
    14be:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table3) ;
    14c2:	b8 01       	movw	r22, r16
    14c4:	8f 2d       	mov	r24, r15
    14c6:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
				if (max < checkers)
    14ca:	d8 16       	cp	r13, r24
    14cc:	10 f0       	brcs	.+4      	; 0x14d2 <Tactics+0x350>
    14ce:	0c 94 85 12 	jmp	0x250a	; 0x250a <Tactics+0x1388>
				{
					max = checkers ;
					myLine = line ;
    14d2:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    14d6:	92 e0       	ldi	r25, 0x02	; 2
    14d8:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table3) ;
				TurnOtherCheckers(line,column,enemy,mine,table3) ;
				checkers = scanCopyChessBoard(mine,table3) ;
				if (max < checkers)
				{
					max = checkers ;
    14dc:	d8 2e       	mov	r13, r24
    14de:	0c 94 85 12 	jmp	0x250a	; 0x250a <Tactics+0x1388>
					myColumn = column ;
				}
				break;
				
				case 4:
				setChecker(line,column,mine,table4) ;
    14e2:	26 ee       	ldi	r18, 0xE6	; 230
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	4f 2d       	mov	r20, r15
    14e8:	62 e0       	ldi	r22, 0x02	; 2
    14ea:	8d 2f       	mov	r24, r29
    14ec:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table4) ;
    14f0:	06 ee       	ldi	r16, 0xE6	; 230
    14f2:	10 e0       	ldi	r17, 0x00	; 0
    14f4:	2f 2d       	mov	r18, r15
    14f6:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    14fa:	62 e0       	ldi	r22, 0x02	; 2
    14fc:	8d 2f       	mov	r24, r29
    14fe:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table4) ;
    1502:	b8 01       	movw	r22, r16
    1504:	8f 2d       	mov	r24, r15
    1506:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
				if (max < checkers)
    150a:	d8 16       	cp	r13, r24
    150c:	08 f0       	brcs	.+2      	; 0x1510 <Tactics+0x38e>
    150e:	e8 c7       	rjmp	.+4048   	; 0x24e0 <Tactics+0x135e>
				{
					max = checkers ;
					myLine = line ;
    1510:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    1514:	92 e0       	ldi	r25, 0x02	; 2
    1516:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table4) ;
				TurnOtherCheckers(line,column,enemy,mine,table4) ;
				checkers = scanCopyChessBoard(mine,table4) ;
				if (max < checkers)
				{
					max = checkers ;
    151a:	d8 2e       	mov	r13, r24
    151c:	e1 c7       	rjmp	.+4034   	; 0x24e0 <Tactics+0x135e>
					myColumn = column ;
				}
				break;
				
				case 5:
				setChecker(line,column,mine,table5) ;
    151e:	26 ef       	ldi	r18, 0xF6	; 246
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	4f 2d       	mov	r20, r15
    1524:	62 e0       	ldi	r22, 0x02	; 2
    1526:	8d 2f       	mov	r24, r29
    1528:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table5) ;
    152c:	06 ef       	ldi	r16, 0xF6	; 246
    152e:	10 e0       	ldi	r17, 0x00	; 0
    1530:	2f 2d       	mov	r18, r15
    1532:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    1536:	62 e0       	ldi	r22, 0x02	; 2
    1538:	8d 2f       	mov	r24, r29
    153a:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table5) ;
    153e:	b8 01       	movw	r22, r16
    1540:	8f 2d       	mov	r24, r15
    1542:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
				if (max < checkers)
    1546:	d8 16       	cp	r13, r24
    1548:	08 f0       	brcs	.+2      	; 0x154c <Tactics+0x3ca>
    154a:	cd c7       	rjmp	.+3994   	; 0x24e6 <Tactics+0x1364>
				{
					max = checkers ;
					myLine = line ;
    154c:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    1550:	92 e0       	ldi	r25, 0x02	; 2
    1552:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table5) ;
				TurnOtherCheckers(line,column,enemy,mine,table5) ;
				checkers = scanCopyChessBoard(mine,table5) ;
				if (max < checkers)
				{
					max = checkers ;
    1556:	d8 2e       	mov	r13, r24
    1558:	c6 c7       	rjmp	.+3980   	; 0x24e6 <Tactics+0x1364>
					myColumn = column ;
				}
				break;
				
				case 6:
				setChecker(line,column,mine,table6) ;
    155a:	2e e7       	ldi	r18, 0x7E	; 126
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	4f 2d       	mov	r20, r15
    1560:	62 e0       	ldi	r22, 0x02	; 2
    1562:	8d 2f       	mov	r24, r29
    1564:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table6) ;
    1568:	0e e7       	ldi	r16, 0x7E	; 126
    156a:	10 e0       	ldi	r17, 0x00	; 0
    156c:	2f 2d       	mov	r18, r15
    156e:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    1572:	62 e0       	ldi	r22, 0x02	; 2
    1574:	8d 2f       	mov	r24, r29
    1576:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table6) ;
    157a:	b8 01       	movw	r22, r16
    157c:	8f 2d       	mov	r24, r15
    157e:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
				if (max < checkers)
    1582:	d8 16       	cp	r13, r24
    1584:	08 f0       	brcs	.+2      	; 0x1588 <Tactics+0x406>
    1586:	b2 c7       	rjmp	.+3940   	; 0x24ec <Tactics+0x136a>
				{
					max = checkers ;
					myLine = line ;
    1588:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    158c:	92 e0       	ldi	r25, 0x02	; 2
    158e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table6) ;
				TurnOtherCheckers(line,column,enemy,mine,table6) ;
				checkers = scanCopyChessBoard(mine,table6) ;
				if (max < checkers)
				{
					max = checkers ;
    1592:	d8 2e       	mov	r13, r24
    1594:	ab c7       	rjmp	.+3926   	; 0x24ec <Tactics+0x136a>
					myColumn = column ;
				}
				break;
				
				case 7:
				setChecker(line,column,mine,table7) ;
    1596:	26 ec       	ldi	r18, 0xC6	; 198
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	4f 2d       	mov	r20, r15
    159c:	62 e0       	ldi	r22, 0x02	; 2
    159e:	8d 2f       	mov	r24, r29
    15a0:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table7) ;
    15a4:	06 ec       	ldi	r16, 0xC6	; 198
    15a6:	10 e0       	ldi	r17, 0x00	; 0
    15a8:	2f 2d       	mov	r18, r15
    15aa:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    15ae:	62 e0       	ldi	r22, 0x02	; 2
    15b0:	8d 2f       	mov	r24, r29
    15b2:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table7) ;
    15b6:	b8 01       	movw	r22, r16
    15b8:	8f 2d       	mov	r24, r15
    15ba:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
				if (max < checkers)
    15be:	d8 16       	cp	r13, r24
    15c0:	08 f0       	brcs	.+2      	; 0x15c4 <Tactics+0x442>
    15c2:	97 c7       	rjmp	.+3886   	; 0x24f2 <Tactics+0x1370>
				{
					max = checkers ;
					myLine = line ;
    15c4:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    15c8:	92 e0       	ldi	r25, 0x02	; 2
    15ca:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table7) ;
				TurnOtherCheckers(line,column,enemy,mine,table7) ;
				checkers = scanCopyChessBoard(mine,table7) ;
				if (max < checkers)
				{
					max = checkers ;
    15ce:	d8 2e       	mov	r13, r24
    15d0:	90 c7       	rjmp	.+3872   	; 0x24f2 <Tactics+0x1370>
					myColumn = column ;
				}
				break;
				
				case 8:
				setChecker(line,column,mine,table8) ;
    15d2:	2e e8       	ldi	r18, 0x8E	; 142
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	4f 2d       	mov	r20, r15
    15d8:	62 e0       	ldi	r22, 0x02	; 2
    15da:	8d 2f       	mov	r24, r29
    15dc:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table8) ;
    15e0:	0e e8       	ldi	r16, 0x8E	; 142
    15e2:	10 e0       	ldi	r17, 0x00	; 0
    15e4:	2f 2d       	mov	r18, r15
    15e6:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    15ea:	62 e0       	ldi	r22, 0x02	; 2
    15ec:	8d 2f       	mov	r24, r29
    15ee:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table8) ;
    15f2:	b8 01       	movw	r22, r16
    15f4:	8f 2d       	mov	r24, r15
    15f6:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
				if (max < checkers)
    15fa:	d8 16       	cp	r13, r24
    15fc:	08 f0       	brcs	.+2      	; 0x1600 <Tactics+0x47e>
    15fe:	7f c7       	rjmp	.+3838   	; 0x24fe <Tactics+0x137c>
				{
					max = checkers ;
					myLine = line ;
    1600:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    1604:	92 e0       	ldi	r25, 0x02	; 2
    1606:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table8) ;
				TurnOtherCheckers(line,column,enemy,mine,table8) ;
				checkers = scanCopyChessBoard(mine,table8) ;
				if (max < checkers)
				{
					max = checkers ;
    160a:	d8 2e       	mov	r13, r24
    160c:	78 c7       	rjmp	.+3824   	; 0x24fe <Tactics+0x137c>
		temp = buffer & 0b00000010 ;
		temp = (temp >> 1) ;
		if (temp == 1)
		{
			column = 2 ;
			count++ ;
    160e:	0f 2e       	mov	r0, r31
    1610:	f9 e0       	ldi	r31, 0x09	; 9
    1612:	ef 2e       	mov	r14, r31
    1614:	f0 2d       	mov	r31, r0
					myColumn = column ;
				}
				break;
			*/
				default:
				setChecker(line,column,mine,table9) ;
    1616:	26 ed       	ldi	r18, 0xD6	; 214
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	4f 2d       	mov	r20, r15
    161c:	62 e0       	ldi	r22, 0x02	; 2
    161e:	8d 2f       	mov	r24, r29
    1620:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
    1624:	06 ed       	ldi	r16, 0xD6	; 214
    1626:	10 e0       	ldi	r17, 0x00	; 0
    1628:	2f 2d       	mov	r18, r15
    162a:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    162e:	62 e0       	ldi	r22, 0x02	; 2
    1630:	8d 2f       	mov	r24, r29
    1632:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table9) ;
    1636:	b8 01       	movw	r22, r16
    1638:	8f 2d       	mov	r24, r15
    163a:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
				if (max < checkers)
    163e:	d8 16       	cp	r13, r24
    1640:	30 f4       	brcc	.+12     	; 0x164e <Tactics+0x4cc>
				{
					max = checkers ;
					myLine = line ;
    1642:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    1646:	92 e0       	ldi	r25, 0x02	; 2
    1648:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table9) ;
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
				checkers = scanCopyChessBoard(mine,table9) ;
				if (max < checkers)
				{
					max = checkers ;
    164c:	d8 2e       	mov	r13, r24
			
		}
		/* Third valid move in this line */
		temp = buffer & 0b00000100 ;
		temp = (temp >> 2) ;
		if (temp == 1)
    164e:	c2 ff       	sbrs	r28, 2
    1650:	22 c1       	rjmp	.+580    	; 0x1896 <Tactics+0x714>
		{
			
			column = 3 ;
			count++ ;
    1652:	e3 94       	inc	r14
			switch(count)
    1654:	8e 2d       	mov	r24, r14
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	fc 01       	movw	r30, r24
    165a:	31 97       	sbiw	r30, 0x01	; 1
    165c:	e8 30       	cpi	r30, 0x08	; 8
    165e:	f1 05       	cpc	r31, r1
    1660:	08 f0       	brcs	.+2      	; 0x1664 <Tactics+0x4e2>
    1662:	fd c0       	rjmp	.+506    	; 0x185e <Tactics+0x6dc>
    1664:	e6 5c       	subi	r30, 0xC6	; 198
    1666:	ff 4f       	sbci	r31, 0xFF	; 255
    1668:	0c 94 a1 14 	jmp	0x2942	; 0x2942 <__tablejump2__>
			{
				case 1:
				setChecker(line,column,mine,table1) ;
    166c:	26 eb       	ldi	r18, 0xB6	; 182
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	4f 2d       	mov	r20, r15
    1672:	63 e0       	ldi	r22, 0x03	; 3
    1674:	8d 2f       	mov	r24, r29
    1676:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table1) ;
    167a:	06 eb       	ldi	r16, 0xB6	; 182
    167c:	10 e0       	ldi	r17, 0x00	; 0
    167e:	2f 2d       	mov	r18, r15
    1680:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    1684:	63 e0       	ldi	r22, 0x03	; 3
    1686:	8d 2f       	mov	r24, r29
    1688:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table1) ;
    168c:	b8 01       	movw	r22, r16
    168e:	8f 2d       	mov	r24, r15
    1690:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
				if (max < checkers)
    1694:	d8 16       	cp	r13, r24
    1696:	08 f0       	brcs	.+2      	; 0x169a <Tactics+0x518>
    1698:	3e c7       	rjmp	.+3708   	; 0x2516 <Tactics+0x1394>
				{
					max = checkers ;
					myLine = line ;
    169a:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    169e:	93 e0       	ldi	r25, 0x03	; 3
    16a0:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table1) ;
				TurnOtherCheckers(line,column,enemy,mine,table1) ;
				checkers = scanCopyChessBoard(mine,table1) ;
				if (max < checkers)
				{
					max = checkers ;
    16a4:	d8 2e       	mov	r13, r24
    16a6:	37 c7       	rjmp	.+3694   	; 0x2516 <Tactics+0x1394>
					myColumn = column ;
				}
				break;
				
				case 2:
				setChecker(line,column,mine,table2) ;
    16a8:	26 e0       	ldi	r18, 0x06	; 6
    16aa:	31 e0       	ldi	r19, 0x01	; 1
    16ac:	4f 2d       	mov	r20, r15
    16ae:	63 e0       	ldi	r22, 0x03	; 3
    16b0:	8d 2f       	mov	r24, r29
    16b2:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table2) ;
    16b6:	06 e0       	ldi	r16, 0x06	; 6
    16b8:	11 e0       	ldi	r17, 0x01	; 1
    16ba:	2f 2d       	mov	r18, r15
    16bc:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    16c0:	63 e0       	ldi	r22, 0x03	; 3
    16c2:	8d 2f       	mov	r24, r29
    16c4:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table2) ;
    16c8:	b8 01       	movw	r22, r16
    16ca:	8f 2d       	mov	r24, r15
    16cc:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
				if (max < checkers)
    16d0:	d8 16       	cp	r13, r24
    16d2:	08 f0       	brcs	.+2      	; 0x16d6 <Tactics+0x554>
    16d4:	26 c7       	rjmp	.+3660   	; 0x2522 <Tactics+0x13a0>
				{
					max = checkers ;
					myLine = line ;
    16d6:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    16da:	93 e0       	ldi	r25, 0x03	; 3
    16dc:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table2) ;
				TurnOtherCheckers(line,column,enemy,mine,table2) ;
				checkers = scanCopyChessBoard(mine,table2) ;
				if (max < checkers)
				{
					max = checkers ;
    16e0:	d8 2e       	mov	r13, r24
    16e2:	1f c7       	rjmp	.+3646   	; 0x2522 <Tactics+0x13a0>
					myColumn = column ;
				}
				break;
				
				case 3:
				setChecker(line,column,mine,table3) ;
    16e4:	26 e6       	ldi	r18, 0x66	; 102
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	4f 2d       	mov	r20, r15
    16ea:	63 e0       	ldi	r22, 0x03	; 3
    16ec:	8d 2f       	mov	r24, r29
    16ee:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table3) ;
    16f2:	06 e6       	ldi	r16, 0x66	; 102
    16f4:	10 e0       	ldi	r17, 0x00	; 0
    16f6:	2f 2d       	mov	r18, r15
    16f8:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    16fc:	63 e0       	ldi	r22, 0x03	; 3
    16fe:	8d 2f       	mov	r24, r29
    1700:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table3) ;
    1704:	b8 01       	movw	r22, r16
    1706:	8f 2d       	mov	r24, r15
    1708:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
				if (max < checkers)
    170c:	d8 16       	cp	r13, r24
    170e:	08 f0       	brcs	.+2      	; 0x1712 <Tactics+0x590>
    1710:	0b c7       	rjmp	.+3606   	; 0x2528 <Tactics+0x13a6>
				{
					max = checkers ;
					myLine = line ;
    1712:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    1716:	93 e0       	ldi	r25, 0x03	; 3
    1718:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table3) ;
				TurnOtherCheckers(line,column,enemy,mine,table3) ;
				checkers = scanCopyChessBoard(mine,table3) ;
				if (max < checkers)
				{
					max = checkers ;
    171c:	d8 2e       	mov	r13, r24
    171e:	04 c7       	rjmp	.+3592   	; 0x2528 <Tactics+0x13a6>
					myColumn = column ;
				}
				break;
				
				case 4:
				setChecker(line,column,mine,table4) ;
    1720:	26 ee       	ldi	r18, 0xE6	; 230
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	4f 2d       	mov	r20, r15
    1726:	63 e0       	ldi	r22, 0x03	; 3
    1728:	8d 2f       	mov	r24, r29
    172a:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table4) ;
    172e:	06 ee       	ldi	r16, 0xE6	; 230
    1730:	10 e0       	ldi	r17, 0x00	; 0
    1732:	2f 2d       	mov	r18, r15
    1734:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    1738:	63 e0       	ldi	r22, 0x03	; 3
    173a:	8d 2f       	mov	r24, r29
    173c:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table4) ;
    1740:	b8 01       	movw	r22, r16
    1742:	8f 2d       	mov	r24, r15
    1744:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
				if (max < checkers)
    1748:	d8 16       	cp	r13, r24
    174a:	08 f0       	brcs	.+2      	; 0x174e <Tactics+0x5cc>
    174c:	f0 c6       	rjmp	.+3552   	; 0x252e <Tactics+0x13ac>
				{
					max = checkers ;
					myLine = line ;
    174e:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    1752:	93 e0       	ldi	r25, 0x03	; 3
    1754:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table4) ;
				TurnOtherCheckers(line,column,enemy,mine,table4) ;
				checkers = scanCopyChessBoard(mine,table4) ;
				if (max < checkers)
				{
					max = checkers ;
    1758:	d8 2e       	mov	r13, r24
    175a:	e9 c6       	rjmp	.+3538   	; 0x252e <Tactics+0x13ac>
					myColumn = column ;
				}
				break;
				
				case 5:
				setChecker(line,column,mine,table5) ;
    175c:	26 ef       	ldi	r18, 0xF6	; 246
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	4f 2d       	mov	r20, r15
    1762:	63 e0       	ldi	r22, 0x03	; 3
    1764:	8d 2f       	mov	r24, r29
    1766:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table5) ;
    176a:	06 ef       	ldi	r16, 0xF6	; 246
    176c:	10 e0       	ldi	r17, 0x00	; 0
    176e:	2f 2d       	mov	r18, r15
    1770:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    1774:	63 e0       	ldi	r22, 0x03	; 3
    1776:	8d 2f       	mov	r24, r29
    1778:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table5) ;
    177c:	b8 01       	movw	r22, r16
    177e:	8f 2d       	mov	r24, r15
    1780:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
				if (max < checkers)
    1784:	d8 16       	cp	r13, r24
    1786:	08 f0       	brcs	.+2      	; 0x178a <Tactics+0x608>
    1788:	d5 c6       	rjmp	.+3498   	; 0x2534 <Tactics+0x13b2>
				{
					max = checkers ;
					myLine = line ;
    178a:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    178e:	93 e0       	ldi	r25, 0x03	; 3
    1790:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table5) ;
				TurnOtherCheckers(line,column,enemy,mine,table5) ;
				checkers = scanCopyChessBoard(mine,table5) ;
				if (max < checkers)
				{
					max = checkers ;
    1794:	d8 2e       	mov	r13, r24
    1796:	ce c6       	rjmp	.+3484   	; 0x2534 <Tactics+0x13b2>
					myColumn = column ;
				}
				break;
				
				case 6:
				setChecker(line,column,mine,table6) ;
    1798:	2e e7       	ldi	r18, 0x7E	; 126
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	4f 2d       	mov	r20, r15
    179e:	63 e0       	ldi	r22, 0x03	; 3
    17a0:	8d 2f       	mov	r24, r29
    17a2:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table6) ;
    17a6:	0e e7       	ldi	r16, 0x7E	; 126
    17a8:	10 e0       	ldi	r17, 0x00	; 0
    17aa:	2f 2d       	mov	r18, r15
    17ac:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    17b0:	63 e0       	ldi	r22, 0x03	; 3
    17b2:	8d 2f       	mov	r24, r29
    17b4:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table6) ;
    17b8:	b8 01       	movw	r22, r16
    17ba:	8f 2d       	mov	r24, r15
    17bc:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
				if (max < checkers)
    17c0:	d8 16       	cp	r13, r24
    17c2:	08 f0       	brcs	.+2      	; 0x17c6 <Tactics+0x644>
    17c4:	ba c6       	rjmp	.+3444   	; 0x253a <Tactics+0x13b8>
				{
					max = checkers ;
					myLine = line ;
    17c6:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    17ca:	93 e0       	ldi	r25, 0x03	; 3
    17cc:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table6) ;
				TurnOtherCheckers(line,column,enemy,mine,table6) ;
				checkers = scanCopyChessBoard(mine,table6) ;
				if (max < checkers)
				{
					max = checkers ;
    17d0:	d8 2e       	mov	r13, r24
    17d2:	b3 c6       	rjmp	.+3430   	; 0x253a <Tactics+0x13b8>
					myColumn = column ;
				}
				break;
				
				case 7:
				setChecker(line,column,mine,table7) ;
    17d4:	26 ec       	ldi	r18, 0xC6	; 198
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	4f 2d       	mov	r20, r15
    17da:	63 e0       	ldi	r22, 0x03	; 3
    17dc:	8d 2f       	mov	r24, r29
    17de:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table7) ;
    17e2:	06 ec       	ldi	r16, 0xC6	; 198
    17e4:	10 e0       	ldi	r17, 0x00	; 0
    17e6:	2f 2d       	mov	r18, r15
    17e8:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    17ec:	63 e0       	ldi	r22, 0x03	; 3
    17ee:	8d 2f       	mov	r24, r29
    17f0:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table7) ;
    17f4:	b8 01       	movw	r22, r16
    17f6:	8f 2d       	mov	r24, r15
    17f8:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
				if (max < checkers)
    17fc:	d8 16       	cp	r13, r24
    17fe:	08 f0       	brcs	.+2      	; 0x1802 <Tactics+0x680>
    1800:	87 c6       	rjmp	.+3342   	; 0x2510 <Tactics+0x138e>
				{
					max = checkers ;
					myLine = line ;
    1802:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    1806:	93 e0       	ldi	r25, 0x03	; 3
    1808:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table7) ;
				TurnOtherCheckers(line,column,enemy,mine,table7) ;
				checkers = scanCopyChessBoard(mine,table7) ;
				if (max < checkers)
				{
					max = checkers ;
    180c:	d8 2e       	mov	r13, r24
    180e:	80 c6       	rjmp	.+3328   	; 0x2510 <Tactics+0x138e>
					myColumn = column ;
				}
				break;
				
				case 8:
				setChecker(line,column,mine,table8) ;
    1810:	2e e8       	ldi	r18, 0x8E	; 142
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	4f 2d       	mov	r20, r15
    1816:	63 e0       	ldi	r22, 0x03	; 3
    1818:	8d 2f       	mov	r24, r29
    181a:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table8) ;
    181e:	0e e8       	ldi	r16, 0x8E	; 142
    1820:	10 e0       	ldi	r17, 0x00	; 0
    1822:	2f 2d       	mov	r18, r15
    1824:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    1828:	63 e0       	ldi	r22, 0x03	; 3
    182a:	8d 2f       	mov	r24, r29
    182c:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table8) ;
    1830:	b8 01       	movw	r22, r16
    1832:	8f 2d       	mov	r24, r15
    1834:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
				if (max < checkers)
    1838:	d8 16       	cp	r13, r24
    183a:	08 f0       	brcs	.+2      	; 0x183e <Tactics+0x6bc>
    183c:	6f c6       	rjmp	.+3294   	; 0x251c <Tactics+0x139a>
				{
					max = checkers ;
					myLine = line ;
    183e:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    1842:	93 e0       	ldi	r25, 0x03	; 3
    1844:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table8) ;
				TurnOtherCheckers(line,column,enemy,mine,table8) ;
				checkers = scanCopyChessBoard(mine,table8) ;
				if (max < checkers)
				{
					max = checkers ;
    1848:	d8 2e       	mov	r13, r24
    184a:	68 c6       	rjmp	.+3280   	; 0x251c <Tactics+0x139a>
		temp = (temp >> 2) ;
		if (temp == 1)
		{
			
			column = 3 ;
			count++ ;
    184c:	0f 2e       	mov	r0, r31
    184e:	f9 e0       	ldi	r31, 0x09	; 9
    1850:	ef 2e       	mov	r14, r31
    1852:	f0 2d       	mov	r31, r0
    1854:	04 c0       	rjmp	.+8      	; 0x185e <Tactics+0x6dc>
    1856:	0f 2e       	mov	r0, r31
    1858:	f9 e0       	ldi	r31, 0x09	; 9
    185a:	ef 2e       	mov	r14, r31
    185c:	f0 2d       	mov	r31, r0
				}
				break;
				*/
				
				default:
				setChecker(line,column,mine,table9) ;
    185e:	26 ed       	ldi	r18, 0xD6	; 214
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	4f 2d       	mov	r20, r15
    1864:	63 e0       	ldi	r22, 0x03	; 3
    1866:	8d 2f       	mov	r24, r29
    1868:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
    186c:	06 ed       	ldi	r16, 0xD6	; 214
    186e:	10 e0       	ldi	r17, 0x00	; 0
    1870:	2f 2d       	mov	r18, r15
    1872:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    1876:	63 e0       	ldi	r22, 0x03	; 3
    1878:	8d 2f       	mov	r24, r29
    187a:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table9) ;
    187e:	b8 01       	movw	r22, r16
    1880:	8f 2d       	mov	r24, r15
    1882:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
				if (max < checkers)
    1886:	d8 16       	cp	r13, r24
    1888:	30 f4       	brcc	.+12     	; 0x1896 <Tactics+0x714>
				{
					max = checkers ;
					myLine = line ;
    188a:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    188e:	93 e0       	ldi	r25, 0x03	; 3
    1890:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table9) ;
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
				checkers = scanCopyChessBoard(mine,table9) ;
				if (max < checkers)
				{
					max = checkers ;
    1894:	d8 2e       	mov	r13, r24
		}
		
		/* Fourth valid move in this line */
		temp = buffer & 0b00001000 ;
		temp = (temp >> 3) ;
		if (temp == 1)
    1896:	c3 ff       	sbrs	r28, 3
    1898:	22 c1       	rjmp	.+580    	; 0x1ade <Tactics+0x95c>
		{
			column = 4 ;
			count++ ;
    189a:	e3 94       	inc	r14
			switch(count)
    189c:	8e 2d       	mov	r24, r14
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	fc 01       	movw	r30, r24
    18a2:	31 97       	sbiw	r30, 0x01	; 1
    18a4:	e8 30       	cpi	r30, 0x08	; 8
    18a6:	f1 05       	cpc	r31, r1
    18a8:	08 f0       	brcs	.+2      	; 0x18ac <Tactics+0x72a>
    18aa:	fd c0       	rjmp	.+506    	; 0x1aa6 <Tactics+0x924>
    18ac:	ee 5b       	subi	r30, 0xBE	; 190
    18ae:	ff 4f       	sbci	r31, 0xFF	; 255
    18b0:	0c 94 a1 14 	jmp	0x2942	; 0x2942 <__tablejump2__>
			{
				case 1:
				setChecker(line,column,mine,table1) ;
    18b4:	26 eb       	ldi	r18, 0xB6	; 182
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	4f 2d       	mov	r20, r15
    18ba:	64 e0       	ldi	r22, 0x04	; 4
    18bc:	8d 2f       	mov	r24, r29
    18be:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table1) ;
    18c2:	06 eb       	ldi	r16, 0xB6	; 182
    18c4:	10 e0       	ldi	r17, 0x00	; 0
    18c6:	2f 2d       	mov	r18, r15
    18c8:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    18cc:	64 e0       	ldi	r22, 0x04	; 4
    18ce:	8d 2f       	mov	r24, r29
    18d0:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table1) ;
    18d4:	b8 01       	movw	r22, r16
    18d6:	8f 2d       	mov	r24, r15
    18d8:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
				if (max < checkers)
    18dc:	d8 16       	cp	r13, r24
    18de:	08 f0       	brcs	.+2      	; 0x18e2 <Tactics+0x760>
    18e0:	3e c6       	rjmp	.+3196   	; 0x255e <Tactics+0x13dc>
				{
					max = checkers ;
					myLine = line ;
    18e2:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    18e6:	94 e0       	ldi	r25, 0x04	; 4
    18e8:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table1) ;
				TurnOtherCheckers(line,column,enemy,mine,table1) ;
				checkers = scanCopyChessBoard(mine,table1) ;
				if (max < checkers)
				{
					max = checkers ;
    18ec:	d8 2e       	mov	r13, r24
    18ee:	37 c6       	rjmp	.+3182   	; 0x255e <Tactics+0x13dc>
					myColumn = column ;
				}
				break;
				
				case 2:
				setChecker(line,column,mine,table2) ;
    18f0:	26 e0       	ldi	r18, 0x06	; 6
    18f2:	31 e0       	ldi	r19, 0x01	; 1
    18f4:	4f 2d       	mov	r20, r15
    18f6:	64 e0       	ldi	r22, 0x04	; 4
    18f8:	8d 2f       	mov	r24, r29
    18fa:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table2) ;
    18fe:	06 e0       	ldi	r16, 0x06	; 6
    1900:	11 e0       	ldi	r17, 0x01	; 1
    1902:	2f 2d       	mov	r18, r15
    1904:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    1908:	64 e0       	ldi	r22, 0x04	; 4
    190a:	8d 2f       	mov	r24, r29
    190c:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table2) ;
    1910:	b8 01       	movw	r22, r16
    1912:	8f 2d       	mov	r24, r15
    1914:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
				if (max < checkers)
    1918:	d8 16       	cp	r13, r24
    191a:	08 f0       	brcs	.+2      	; 0x191e <Tactics+0x79c>
    191c:	26 c6       	rjmp	.+3148   	; 0x256a <Tactics+0x13e8>
				{
					max = checkers ;
					myLine = line ;
    191e:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    1922:	94 e0       	ldi	r25, 0x04	; 4
    1924:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table2) ;
				TurnOtherCheckers(line,column,enemy,mine,table2) ;
				checkers = scanCopyChessBoard(mine,table2) ;
				if (max < checkers)
				{
					max = checkers ;
    1928:	d8 2e       	mov	r13, r24
    192a:	1f c6       	rjmp	.+3134   	; 0x256a <Tactics+0x13e8>
					myColumn = column ;
				}
				break;
				
				case 3:
				setChecker(line,column,mine,table3) ;
    192c:	26 e6       	ldi	r18, 0x66	; 102
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	4f 2d       	mov	r20, r15
    1932:	64 e0       	ldi	r22, 0x04	; 4
    1934:	8d 2f       	mov	r24, r29
    1936:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table3) ;
    193a:	06 e6       	ldi	r16, 0x66	; 102
    193c:	10 e0       	ldi	r17, 0x00	; 0
    193e:	2f 2d       	mov	r18, r15
    1940:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    1944:	64 e0       	ldi	r22, 0x04	; 4
    1946:	8d 2f       	mov	r24, r29
    1948:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table3) ;
    194c:	b8 01       	movw	r22, r16
    194e:	8f 2d       	mov	r24, r15
    1950:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
				if (max < checkers)
    1954:	d8 16       	cp	r13, r24
    1956:	08 f0       	brcs	.+2      	; 0x195a <Tactics+0x7d8>
    1958:	f3 c5       	rjmp	.+3046   	; 0x2540 <Tactics+0x13be>
				{
					max = checkers ;
					myLine = line ;
    195a:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    195e:	94 e0       	ldi	r25, 0x04	; 4
    1960:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table3) ;
				TurnOtherCheckers(line,column,enemy,mine,table3) ;
				checkers = scanCopyChessBoard(mine,table3) ;
				if (max < checkers)
				{
					max = checkers ;
    1964:	d8 2e       	mov	r13, r24
    1966:	ec c5       	rjmp	.+3032   	; 0x2540 <Tactics+0x13be>
					myColumn = column ;
				}
				break;
				
				case 4:
				setChecker(line,column,mine,table4) ;
    1968:	26 ee       	ldi	r18, 0xE6	; 230
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	4f 2d       	mov	r20, r15
    196e:	64 e0       	ldi	r22, 0x04	; 4
    1970:	8d 2f       	mov	r24, r29
    1972:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table4) ;
    1976:	06 ee       	ldi	r16, 0xE6	; 230
    1978:	10 e0       	ldi	r17, 0x00	; 0
    197a:	2f 2d       	mov	r18, r15
    197c:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    1980:	64 e0       	ldi	r22, 0x04	; 4
    1982:	8d 2f       	mov	r24, r29
    1984:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table4) ;
    1988:	b8 01       	movw	r22, r16
    198a:	8f 2d       	mov	r24, r15
    198c:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
				if (max < checkers)
    1990:	d8 16       	cp	r13, r24
    1992:	08 f0       	brcs	.+2      	; 0x1996 <Tactics+0x814>
    1994:	d8 c5       	rjmp	.+2992   	; 0x2546 <Tactics+0x13c4>
				{
					max = checkers ;
					myLine = line ;
    1996:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    199a:	94 e0       	ldi	r25, 0x04	; 4
    199c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table4) ;
				TurnOtherCheckers(line,column,enemy,mine,table4) ;
				checkers = scanCopyChessBoard(mine,table4) ;
				if (max < checkers)
				{
					max = checkers ;
    19a0:	d8 2e       	mov	r13, r24
    19a2:	d1 c5       	rjmp	.+2978   	; 0x2546 <Tactics+0x13c4>
					myColumn = column ;
				}
				break;
				
				case 5:
				setChecker(line,column,mine,table5) ;
    19a4:	26 ef       	ldi	r18, 0xF6	; 246
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	4f 2d       	mov	r20, r15
    19aa:	64 e0       	ldi	r22, 0x04	; 4
    19ac:	8d 2f       	mov	r24, r29
    19ae:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table5) ;
    19b2:	06 ef       	ldi	r16, 0xF6	; 246
    19b4:	10 e0       	ldi	r17, 0x00	; 0
    19b6:	2f 2d       	mov	r18, r15
    19b8:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    19bc:	64 e0       	ldi	r22, 0x04	; 4
    19be:	8d 2f       	mov	r24, r29
    19c0:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table5) ;
    19c4:	b8 01       	movw	r22, r16
    19c6:	8f 2d       	mov	r24, r15
    19c8:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
				if (max < checkers)
    19cc:	d8 16       	cp	r13, r24
    19ce:	08 f0       	brcs	.+2      	; 0x19d2 <Tactics+0x850>
    19d0:	bd c5       	rjmp	.+2938   	; 0x254c <Tactics+0x13ca>
				{
					max = checkers ;
					myLine = line ;
    19d2:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    19d6:	94 e0       	ldi	r25, 0x04	; 4
    19d8:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table5) ;
				TurnOtherCheckers(line,column,enemy,mine,table5) ;
				checkers = scanCopyChessBoard(mine,table5) ;
				if (max < checkers)
				{
					max = checkers ;
    19dc:	d8 2e       	mov	r13, r24
    19de:	b6 c5       	rjmp	.+2924   	; 0x254c <Tactics+0x13ca>
					myColumn = column ;
				}
				break;
				
				case 6:
				setChecker(line,column,mine,table6) ;
    19e0:	2e e7       	ldi	r18, 0x7E	; 126
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	4f 2d       	mov	r20, r15
    19e6:	64 e0       	ldi	r22, 0x04	; 4
    19e8:	8d 2f       	mov	r24, r29
    19ea:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table6) ;
    19ee:	0e e7       	ldi	r16, 0x7E	; 126
    19f0:	10 e0       	ldi	r17, 0x00	; 0
    19f2:	2f 2d       	mov	r18, r15
    19f4:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    19f8:	64 e0       	ldi	r22, 0x04	; 4
    19fa:	8d 2f       	mov	r24, r29
    19fc:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table6) ;
    1a00:	b8 01       	movw	r22, r16
    1a02:	8f 2d       	mov	r24, r15
    1a04:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
				if (max < checkers)
    1a08:	d8 16       	cp	r13, r24
    1a0a:	08 f0       	brcs	.+2      	; 0x1a0e <Tactics+0x88c>
    1a0c:	a2 c5       	rjmp	.+2884   	; 0x2552 <Tactics+0x13d0>
				{
					max = checkers ;
					myLine = line ;
    1a0e:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    1a12:	94 e0       	ldi	r25, 0x04	; 4
    1a14:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table6) ;
				TurnOtherCheckers(line,column,enemy,mine,table6) ;
				checkers = scanCopyChessBoard(mine,table6) ;
				if (max < checkers)
				{
					max = checkers ;
    1a18:	d8 2e       	mov	r13, r24
    1a1a:	9b c5       	rjmp	.+2870   	; 0x2552 <Tactics+0x13d0>
					myColumn = column ;
				}
				break;
				
				case 7:
				setChecker(line,column,mine,table7) ;
    1a1c:	26 ec       	ldi	r18, 0xC6	; 198
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	4f 2d       	mov	r20, r15
    1a22:	64 e0       	ldi	r22, 0x04	; 4
    1a24:	8d 2f       	mov	r24, r29
    1a26:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table7) ;
    1a2a:	06 ec       	ldi	r16, 0xC6	; 198
    1a2c:	10 e0       	ldi	r17, 0x00	; 0
    1a2e:	2f 2d       	mov	r18, r15
    1a30:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    1a34:	64 e0       	ldi	r22, 0x04	; 4
    1a36:	8d 2f       	mov	r24, r29
    1a38:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table7) ;
    1a3c:	b8 01       	movw	r22, r16
    1a3e:	8f 2d       	mov	r24, r15
    1a40:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
				if (max < checkers)
    1a44:	d8 16       	cp	r13, r24
    1a46:	08 f0       	brcs	.+2      	; 0x1a4a <Tactics+0x8c8>
    1a48:	87 c5       	rjmp	.+2830   	; 0x2558 <Tactics+0x13d6>
				{
					max = checkers ;
					myLine = line ;
    1a4a:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    1a4e:	94 e0       	ldi	r25, 0x04	; 4
    1a50:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table7) ;
				TurnOtherCheckers(line,column,enemy,mine,table7) ;
				checkers = scanCopyChessBoard(mine,table7) ;
				if (max < checkers)
				{
					max = checkers ;
    1a54:	d8 2e       	mov	r13, r24
    1a56:	80 c5       	rjmp	.+2816   	; 0x2558 <Tactics+0x13d6>
					myColumn = column ;
				}
				break;
				
				case 8:
				setChecker(line,column,mine,table8) ;
    1a58:	2e e8       	ldi	r18, 0x8E	; 142
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	4f 2d       	mov	r20, r15
    1a5e:	64 e0       	ldi	r22, 0x04	; 4
    1a60:	8d 2f       	mov	r24, r29
    1a62:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table8) ;
    1a66:	0e e8       	ldi	r16, 0x8E	; 142
    1a68:	10 e0       	ldi	r17, 0x00	; 0
    1a6a:	2f 2d       	mov	r18, r15
    1a6c:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    1a70:	64 e0       	ldi	r22, 0x04	; 4
    1a72:	8d 2f       	mov	r24, r29
    1a74:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table8) ;
    1a78:	b8 01       	movw	r22, r16
    1a7a:	8f 2d       	mov	r24, r15
    1a7c:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
				if (max < checkers)
    1a80:	d8 16       	cp	r13, r24
    1a82:	08 f0       	brcs	.+2      	; 0x1a86 <Tactics+0x904>
    1a84:	6f c5       	rjmp	.+2782   	; 0x2564 <Tactics+0x13e2>
				{
					max = checkers ;
					myLine = line ;
    1a86:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    1a8a:	94 e0       	ldi	r25, 0x04	; 4
    1a8c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table8) ;
				TurnOtherCheckers(line,column,enemy,mine,table8) ;
				checkers = scanCopyChessBoard(mine,table8) ;
				if (max < checkers)
				{
					max = checkers ;
    1a90:	d8 2e       	mov	r13, r24
    1a92:	68 c5       	rjmp	.+2768   	; 0x2564 <Tactics+0x13e2>
		temp = buffer & 0b00001000 ;
		temp = (temp >> 3) ;
		if (temp == 1)
		{
			column = 4 ;
			count++ ;
    1a94:	0f 2e       	mov	r0, r31
    1a96:	f9 e0       	ldi	r31, 0x09	; 9
    1a98:	ef 2e       	mov	r14, r31
    1a9a:	f0 2d       	mov	r31, r0
    1a9c:	04 c0       	rjmp	.+8      	; 0x1aa6 <Tactics+0x924>
    1a9e:	0f 2e       	mov	r0, r31
    1aa0:	f9 e0       	ldi	r31, 0x09	; 9
    1aa2:	ef 2e       	mov	r14, r31
    1aa4:	f0 2d       	mov	r31, r0
					myColumn = column ;
				}
				break;
			*/
				default:
				setChecker(line,column,mine,table9) ;
    1aa6:	26 ed       	ldi	r18, 0xD6	; 214
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	4f 2d       	mov	r20, r15
    1aac:	64 e0       	ldi	r22, 0x04	; 4
    1aae:	8d 2f       	mov	r24, r29
    1ab0:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
    1ab4:	06 ed       	ldi	r16, 0xD6	; 214
    1ab6:	10 e0       	ldi	r17, 0x00	; 0
    1ab8:	2f 2d       	mov	r18, r15
    1aba:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    1abe:	64 e0       	ldi	r22, 0x04	; 4
    1ac0:	8d 2f       	mov	r24, r29
    1ac2:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table9) ;
    1ac6:	b8 01       	movw	r22, r16
    1ac8:	8f 2d       	mov	r24, r15
    1aca:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
				if (max < checkers)
    1ace:	d8 16       	cp	r13, r24
    1ad0:	30 f4       	brcc	.+12     	; 0x1ade <Tactics+0x95c>
				{
					max = checkers ;
					myLine = line ;
    1ad2:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    1ad6:	94 e0       	ldi	r25, 0x04	; 4
    1ad8:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table9) ;
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
				checkers = scanCopyChessBoard(mine,table9) ;
				if (max < checkers)
				{
					max = checkers ;
    1adc:	d8 2e       	mov	r13, r24
		}
		
		/* Fifth valid move in this line */
		temp = buffer & 0b00010000 ;
		temp = (temp >> 4) ;
		if (temp == 1)
    1ade:	c4 ff       	sbrs	r28, 4
    1ae0:	22 c1       	rjmp	.+580    	; 0x1d26 <Tactics+0xba4>
		{
			column = 5 ;
			count++ ;
    1ae2:	e3 94       	inc	r14
			switch(count)
    1ae4:	8e 2d       	mov	r24, r14
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	fc 01       	movw	r30, r24
    1aea:	31 97       	sbiw	r30, 0x01	; 1
    1aec:	e8 30       	cpi	r30, 0x08	; 8
    1aee:	f1 05       	cpc	r31, r1
    1af0:	08 f0       	brcs	.+2      	; 0x1af4 <Tactics+0x972>
    1af2:	fd c0       	rjmp	.+506    	; 0x1cee <Tactics+0xb6c>
    1af4:	e6 5b       	subi	r30, 0xB6	; 182
    1af6:	ff 4f       	sbci	r31, 0xFF	; 255
    1af8:	0c 94 a1 14 	jmp	0x2942	; 0x2942 <__tablejump2__>
			{
				case 1:
				setChecker(line,column,mine,table1) ;
    1afc:	26 eb       	ldi	r18, 0xB6	; 182
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	4f 2d       	mov	r20, r15
    1b02:	65 e0       	ldi	r22, 0x05	; 5
    1b04:	8d 2f       	mov	r24, r29
    1b06:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table1) ;
    1b0a:	06 eb       	ldi	r16, 0xB6	; 182
    1b0c:	10 e0       	ldi	r17, 0x00	; 0
    1b0e:	2f 2d       	mov	r18, r15
    1b10:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    1b14:	65 e0       	ldi	r22, 0x05	; 5
    1b16:	8d 2f       	mov	r24, r29
    1b18:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table1) ;
    1b1c:	b8 01       	movw	r22, r16
    1b1e:	8f 2d       	mov	r24, r15
    1b20:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
				if (max < checkers)
    1b24:	d8 16       	cp	r13, r24
    1b26:	08 f0       	brcs	.+2      	; 0x1b2a <Tactics+0x9a8>
    1b28:	29 c5       	rjmp	.+2642   	; 0x257c <Tactics+0x13fa>
				{
					max = checkers ;
					myLine = line ;
    1b2a:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    1b2e:	95 e0       	ldi	r25, 0x05	; 5
    1b30:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table1) ;
				TurnOtherCheckers(line,column,enemy,mine,table1) ;
				checkers = scanCopyChessBoard(mine,table1) ;
				if (max < checkers)
				{
					max = checkers ;
    1b34:	d8 2e       	mov	r13, r24
    1b36:	22 c5       	rjmp	.+2628   	; 0x257c <Tactics+0x13fa>
					myColumn = column ;
				}
				break;
				
				case 2:
				setChecker(line,column,mine,table2) ;
    1b38:	26 e0       	ldi	r18, 0x06	; 6
    1b3a:	31 e0       	ldi	r19, 0x01	; 1
    1b3c:	4f 2d       	mov	r20, r15
    1b3e:	65 e0       	ldi	r22, 0x05	; 5
    1b40:	8d 2f       	mov	r24, r29
    1b42:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table2) ;
    1b46:	06 e0       	ldi	r16, 0x06	; 6
    1b48:	11 e0       	ldi	r17, 0x01	; 1
    1b4a:	2f 2d       	mov	r18, r15
    1b4c:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    1b50:	65 e0       	ldi	r22, 0x05	; 5
    1b52:	8d 2f       	mov	r24, r29
    1b54:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table2) ;
    1b58:	b8 01       	movw	r22, r16
    1b5a:	8f 2d       	mov	r24, r15
    1b5c:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
				if (max < checkers)
    1b60:	d8 16       	cp	r13, r24
    1b62:	08 f0       	brcs	.+2      	; 0x1b66 <Tactics+0x9e4>
    1b64:	11 c5       	rjmp	.+2594   	; 0x2588 <Tactics+0x1406>
				{
					max = checkers ;
					myLine = line ;
    1b66:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    1b6a:	95 e0       	ldi	r25, 0x05	; 5
    1b6c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table2) ;
				TurnOtherCheckers(line,column,enemy,mine,table2) ;
				checkers = scanCopyChessBoard(mine,table2) ;
				if (max < checkers)
				{
					max = checkers ;
    1b70:	d8 2e       	mov	r13, r24
    1b72:	0a c5       	rjmp	.+2580   	; 0x2588 <Tactics+0x1406>
					myColumn = column ;
				}
				break;
				
				case 3:
				setChecker(line,column,mine,table3) ;
    1b74:	26 e6       	ldi	r18, 0x66	; 102
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	4f 2d       	mov	r20, r15
    1b7a:	65 e0       	ldi	r22, 0x05	; 5
    1b7c:	8d 2f       	mov	r24, r29
    1b7e:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table3) ;
    1b82:	06 e6       	ldi	r16, 0x66	; 102
    1b84:	10 e0       	ldi	r17, 0x00	; 0
    1b86:	2f 2d       	mov	r18, r15
    1b88:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    1b8c:	65 e0       	ldi	r22, 0x05	; 5
    1b8e:	8d 2f       	mov	r24, r29
    1b90:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table3) ;
    1b94:	b8 01       	movw	r22, r16
    1b96:	8f 2d       	mov	r24, r15
    1b98:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
				if (max < checkers)
    1b9c:	d8 16       	cp	r13, r24
    1b9e:	08 f0       	brcs	.+2      	; 0x1ba2 <Tactics+0xa20>
    1ba0:	f6 c4       	rjmp	.+2540   	; 0x258e <Tactics+0x140c>
				{
					max = checkers ;
					myLine = line ;
    1ba2:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    1ba6:	95 e0       	ldi	r25, 0x05	; 5
    1ba8:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table3) ;
				TurnOtherCheckers(line,column,enemy,mine,table3) ;
				checkers = scanCopyChessBoard(mine,table3) ;
				if (max < checkers)
				{
					max = checkers ;
    1bac:	d8 2e       	mov	r13, r24
    1bae:	ef c4       	rjmp	.+2526   	; 0x258e <Tactics+0x140c>
					myColumn = column ;
				}
				break;
				
				case 4:
				setChecker(line,column,mine,table4) ;
    1bb0:	26 ee       	ldi	r18, 0xE6	; 230
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	4f 2d       	mov	r20, r15
    1bb6:	65 e0       	ldi	r22, 0x05	; 5
    1bb8:	8d 2f       	mov	r24, r29
    1bba:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table4) ;
    1bbe:	06 ee       	ldi	r16, 0xE6	; 230
    1bc0:	10 e0       	ldi	r17, 0x00	; 0
    1bc2:	2f 2d       	mov	r18, r15
    1bc4:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    1bc8:	65 e0       	ldi	r22, 0x05	; 5
    1bca:	8d 2f       	mov	r24, r29
    1bcc:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table4) ;
    1bd0:	b8 01       	movw	r22, r16
    1bd2:	8f 2d       	mov	r24, r15
    1bd4:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
				if (max < checkers)
    1bd8:	d8 16       	cp	r13, r24
    1bda:	08 f0       	brcs	.+2      	; 0x1bde <Tactics+0xa5c>
    1bdc:	db c4       	rjmp	.+2486   	; 0x2594 <Tactics+0x1412>
				{
					max = checkers ;
					myLine = line ;
    1bde:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    1be2:	95 e0       	ldi	r25, 0x05	; 5
    1be4:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table4) ;
				TurnOtherCheckers(line,column,enemy,mine,table4) ;
				checkers = scanCopyChessBoard(mine,table4) ;
				if (max < checkers)
				{
					max = checkers ;
    1be8:	d8 2e       	mov	r13, r24
    1bea:	d4 c4       	rjmp	.+2472   	; 0x2594 <Tactics+0x1412>
					myColumn = column ;
				}
				break;
				
				case 5:
				setChecker(line,column,mine,table5) ;
    1bec:	26 ef       	ldi	r18, 0xF6	; 246
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	4f 2d       	mov	r20, r15
    1bf2:	65 e0       	ldi	r22, 0x05	; 5
    1bf4:	8d 2f       	mov	r24, r29
    1bf6:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table5) ;
    1bfa:	06 ef       	ldi	r16, 0xF6	; 246
    1bfc:	10 e0       	ldi	r17, 0x00	; 0
    1bfe:	2f 2d       	mov	r18, r15
    1c00:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    1c04:	65 e0       	ldi	r22, 0x05	; 5
    1c06:	8d 2f       	mov	r24, r29
    1c08:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table5) ;
    1c0c:	b8 01       	movw	r22, r16
    1c0e:	8f 2d       	mov	r24, r15
    1c10:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
				if (max < checkers)
    1c14:	d8 16       	cp	r13, r24
    1c16:	08 f0       	brcs	.+2      	; 0x1c1a <Tactics+0xa98>
    1c18:	c0 c4       	rjmp	.+2432   	; 0x259a <Tactics+0x1418>
				{
					max = checkers ;
					myLine = line ;
    1c1a:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    1c1e:	95 e0       	ldi	r25, 0x05	; 5
    1c20:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table5) ;
				TurnOtherCheckers(line,column,enemy,mine,table5) ;
				checkers = scanCopyChessBoard(mine,table5) ;
				if (max < checkers)
				{
					max = checkers ;
    1c24:	d8 2e       	mov	r13, r24
    1c26:	b9 c4       	rjmp	.+2418   	; 0x259a <Tactics+0x1418>
					myColumn = column ;
				}
				break;
				
				case 6:
				setChecker(line,column,mine,table6) ;
    1c28:	2e e7       	ldi	r18, 0x7E	; 126
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	4f 2d       	mov	r20, r15
    1c2e:	65 e0       	ldi	r22, 0x05	; 5
    1c30:	8d 2f       	mov	r24, r29
    1c32:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table6) ;
    1c36:	0e e7       	ldi	r16, 0x7E	; 126
    1c38:	10 e0       	ldi	r17, 0x00	; 0
    1c3a:	2f 2d       	mov	r18, r15
    1c3c:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    1c40:	65 e0       	ldi	r22, 0x05	; 5
    1c42:	8d 2f       	mov	r24, r29
    1c44:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table6) ;
    1c48:	b8 01       	movw	r22, r16
    1c4a:	8f 2d       	mov	r24, r15
    1c4c:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
				if (max < checkers)
    1c50:	d8 16       	cp	r13, r24
    1c52:	08 f0       	brcs	.+2      	; 0x1c56 <Tactics+0xad4>
    1c54:	8d c4       	rjmp	.+2330   	; 0x2570 <Tactics+0x13ee>
				{
					max = checkers ;
					myLine = line ;
    1c56:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    1c5a:	95 e0       	ldi	r25, 0x05	; 5
    1c5c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table6) ;
				TurnOtherCheckers(line,column,enemy,mine,table6) ;
				checkers = scanCopyChessBoard(mine,table6) ;
				if (max < checkers)
				{
					max = checkers ;
    1c60:	d8 2e       	mov	r13, r24
    1c62:	86 c4       	rjmp	.+2316   	; 0x2570 <Tactics+0x13ee>
					myColumn = column ;
				}
				break;
				
				case 7:
				setChecker(line,column,mine,table7) ;
    1c64:	26 ec       	ldi	r18, 0xC6	; 198
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	4f 2d       	mov	r20, r15
    1c6a:	65 e0       	ldi	r22, 0x05	; 5
    1c6c:	8d 2f       	mov	r24, r29
    1c6e:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table7) ;
    1c72:	06 ec       	ldi	r16, 0xC6	; 198
    1c74:	10 e0       	ldi	r17, 0x00	; 0
    1c76:	2f 2d       	mov	r18, r15
    1c78:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    1c7c:	65 e0       	ldi	r22, 0x05	; 5
    1c7e:	8d 2f       	mov	r24, r29
    1c80:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table7) ;
    1c84:	b8 01       	movw	r22, r16
    1c86:	8f 2d       	mov	r24, r15
    1c88:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
				if (max < checkers)
    1c8c:	d8 16       	cp	r13, r24
    1c8e:	08 f0       	brcs	.+2      	; 0x1c92 <Tactics+0xb10>
    1c90:	72 c4       	rjmp	.+2276   	; 0x2576 <Tactics+0x13f4>
				{
					max = checkers ;
					myLine = line ;
    1c92:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    1c96:	95 e0       	ldi	r25, 0x05	; 5
    1c98:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table7) ;
				TurnOtherCheckers(line,column,enemy,mine,table7) ;
				checkers = scanCopyChessBoard(mine,table7) ;
				if (max < checkers)
				{
					max = checkers ;
    1c9c:	d8 2e       	mov	r13, r24
    1c9e:	6b c4       	rjmp	.+2262   	; 0x2576 <Tactics+0x13f4>
					myColumn = column ;
				}
				break;
				
				case 8:
				setChecker(line,column,mine,table8) ;
    1ca0:	2e e8       	ldi	r18, 0x8E	; 142
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	4f 2d       	mov	r20, r15
    1ca6:	65 e0       	ldi	r22, 0x05	; 5
    1ca8:	8d 2f       	mov	r24, r29
    1caa:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table8) ;
    1cae:	0e e8       	ldi	r16, 0x8E	; 142
    1cb0:	10 e0       	ldi	r17, 0x00	; 0
    1cb2:	2f 2d       	mov	r18, r15
    1cb4:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    1cb8:	65 e0       	ldi	r22, 0x05	; 5
    1cba:	8d 2f       	mov	r24, r29
    1cbc:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table8) ;
    1cc0:	b8 01       	movw	r22, r16
    1cc2:	8f 2d       	mov	r24, r15
    1cc4:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
				if (max < checkers)
    1cc8:	d8 16       	cp	r13, r24
    1cca:	08 f0       	brcs	.+2      	; 0x1cce <Tactics+0xb4c>
    1ccc:	5a c4       	rjmp	.+2228   	; 0x2582 <Tactics+0x1400>
				{
					max = checkers ;
					myLine = line ;
    1cce:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    1cd2:	95 e0       	ldi	r25, 0x05	; 5
    1cd4:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table8) ;
				TurnOtherCheckers(line,column,enemy,mine,table8) ;
				checkers = scanCopyChessBoard(mine,table8) ;
				if (max < checkers)
				{
					max = checkers ;
    1cd8:	d8 2e       	mov	r13, r24
    1cda:	53 c4       	rjmp	.+2214   	; 0x2582 <Tactics+0x1400>
		temp = buffer & 0b00010000 ;
		temp = (temp >> 4) ;
		if (temp == 1)
		{
			column = 5 ;
			count++ ;
    1cdc:	0f 2e       	mov	r0, r31
    1cde:	f9 e0       	ldi	r31, 0x09	; 9
    1ce0:	ef 2e       	mov	r14, r31
    1ce2:	f0 2d       	mov	r31, r0
    1ce4:	04 c0       	rjmp	.+8      	; 0x1cee <Tactics+0xb6c>
    1ce6:	0f 2e       	mov	r0, r31
    1ce8:	f9 e0       	ldi	r31, 0x09	; 9
    1cea:	ef 2e       	mov	r14, r31
    1cec:	f0 2d       	mov	r31, r0
				}
				break;
				
				*/
				default:
				setChecker(line,column,mine,table9) ;
    1cee:	26 ed       	ldi	r18, 0xD6	; 214
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	4f 2d       	mov	r20, r15
    1cf4:	65 e0       	ldi	r22, 0x05	; 5
    1cf6:	8d 2f       	mov	r24, r29
    1cf8:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
    1cfc:	06 ed       	ldi	r16, 0xD6	; 214
    1cfe:	10 e0       	ldi	r17, 0x00	; 0
    1d00:	2f 2d       	mov	r18, r15
    1d02:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    1d06:	65 e0       	ldi	r22, 0x05	; 5
    1d08:	8d 2f       	mov	r24, r29
    1d0a:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table9) ;
    1d0e:	b8 01       	movw	r22, r16
    1d10:	8f 2d       	mov	r24, r15
    1d12:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
				if (max < checkers)
    1d16:	d8 16       	cp	r13, r24
    1d18:	30 f4       	brcc	.+12     	; 0x1d26 <Tactics+0xba4>
				{
					max = checkers ;
					myLine = line ;
    1d1a:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    1d1e:	95 e0       	ldi	r25, 0x05	; 5
    1d20:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table9) ;
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
				checkers = scanCopyChessBoard(mine,table9) ;
				if (max < checkers)
				{
					max = checkers ;
    1d24:	d8 2e       	mov	r13, r24
		}
		
		/* Sixth valid move in this line */
		temp = buffer & 0b00100000 ;
		temp = (temp >> 5) ;
		if (temp == 1)
    1d26:	c5 ff       	sbrs	r28, 5
    1d28:	22 c1       	rjmp	.+580    	; 0x1f6e <Tactics+0xdec>
		{
			column = 6 ;
			count++ ;
    1d2a:	e3 94       	inc	r14
			switch(count)
    1d2c:	8e 2d       	mov	r24, r14
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	fc 01       	movw	r30, r24
    1d32:	31 97       	sbiw	r30, 0x01	; 1
    1d34:	e8 30       	cpi	r30, 0x08	; 8
    1d36:	f1 05       	cpc	r31, r1
    1d38:	08 f0       	brcs	.+2      	; 0x1d3c <Tactics+0xbba>
    1d3a:	fd c0       	rjmp	.+506    	; 0x1f36 <Tactics+0xdb4>
    1d3c:	ee 5a       	subi	r30, 0xAE	; 174
    1d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d40:	0c 94 a1 14 	jmp	0x2942	; 0x2942 <__tablejump2__>
			{
				case 1:
				setChecker(line,column,mine,table1) ;
    1d44:	26 eb       	ldi	r18, 0xB6	; 182
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	4f 2d       	mov	r20, r15
    1d4a:	66 e0       	ldi	r22, 0x06	; 6
    1d4c:	8d 2f       	mov	r24, r29
    1d4e:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table1) ;
    1d52:	06 eb       	ldi	r16, 0xB6	; 182
    1d54:	10 e0       	ldi	r17, 0x00	; 0
    1d56:	2f 2d       	mov	r18, r15
    1d58:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    1d5c:	66 e0       	ldi	r22, 0x06	; 6
    1d5e:	8d 2f       	mov	r24, r29
    1d60:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table1) ;
    1d64:	b8 01       	movw	r22, r16
    1d66:	8f 2d       	mov	r24, r15
    1d68:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
				if (max < checkers)
    1d6c:	d8 16       	cp	r13, r24
    1d6e:	08 f0       	brcs	.+2      	; 0x1d72 <Tactics+0xbf0>
    1d70:	26 c4       	rjmp	.+2124   	; 0x25be <Tactics+0x143c>
				{
					max = checkers ;
					myLine = line ;
    1d72:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    1d76:	96 e0       	ldi	r25, 0x06	; 6
    1d78:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table1) ;
				TurnOtherCheckers(line,column,enemy,mine,table1) ;
				checkers = scanCopyChessBoard(mine,table1) ;
				if (max < checkers)
				{
					max = checkers ;
    1d7c:	d8 2e       	mov	r13, r24
    1d7e:	1f c4       	rjmp	.+2110   	; 0x25be <Tactics+0x143c>
					myColumn = column ;
				}
				break;
				
				case 2:
				setChecker(line,column,mine,table2) ;
    1d80:	26 e0       	ldi	r18, 0x06	; 6
    1d82:	31 e0       	ldi	r19, 0x01	; 1
    1d84:	4f 2d       	mov	r20, r15
    1d86:	66 e0       	ldi	r22, 0x06	; 6
    1d88:	8d 2f       	mov	r24, r29
    1d8a:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table2) ;
    1d8e:	06 e0       	ldi	r16, 0x06	; 6
    1d90:	11 e0       	ldi	r17, 0x01	; 1
    1d92:	2f 2d       	mov	r18, r15
    1d94:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    1d98:	66 e0       	ldi	r22, 0x06	; 6
    1d9a:	8d 2f       	mov	r24, r29
    1d9c:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table2) ;
    1da0:	b8 01       	movw	r22, r16
    1da2:	8f 2d       	mov	r24, r15
    1da4:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
				if (max < checkers)
    1da8:	d8 16       	cp	r13, r24
    1daa:	08 f0       	brcs	.+2      	; 0x1dae <Tactics+0xc2c>
    1dac:	0e c4       	rjmp	.+2076   	; 0x25ca <Tactics+0x1448>
				{
					max = checkers ;
					myLine = line ;
    1dae:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    1db2:	96 e0       	ldi	r25, 0x06	; 6
    1db4:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table2) ;
				TurnOtherCheckers(line,column,enemy,mine,table2) ;
				checkers = scanCopyChessBoard(mine,table2) ;
				if (max < checkers)
				{
					max = checkers ;
    1db8:	d8 2e       	mov	r13, r24
    1dba:	07 c4       	rjmp	.+2062   	; 0x25ca <Tactics+0x1448>
					myColumn = column ;
				}
				break;
				
				case 3:
				setChecker(line,column,mine,table3) ;
    1dbc:	26 e6       	ldi	r18, 0x66	; 102
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	4f 2d       	mov	r20, r15
    1dc2:	66 e0       	ldi	r22, 0x06	; 6
    1dc4:	8d 2f       	mov	r24, r29
    1dc6:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table3) ;
    1dca:	06 e6       	ldi	r16, 0x66	; 102
    1dcc:	10 e0       	ldi	r17, 0x00	; 0
    1dce:	2f 2d       	mov	r18, r15
    1dd0:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    1dd4:	66 e0       	ldi	r22, 0x06	; 6
    1dd6:	8d 2f       	mov	r24, r29
    1dd8:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table3) ;
    1ddc:	b8 01       	movw	r22, r16
    1dde:	8f 2d       	mov	r24, r15
    1de0:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
				if (max < checkers)
    1de4:	d8 16       	cp	r13, r24
    1de6:	08 f0       	brcs	.+2      	; 0x1dea <Tactics+0xc68>
    1de8:	db c3       	rjmp	.+1974   	; 0x25a0 <Tactics+0x141e>
				{
					max = checkers ;
					myLine = line ;
    1dea:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    1dee:	96 e0       	ldi	r25, 0x06	; 6
    1df0:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table3) ;
				TurnOtherCheckers(line,column,enemy,mine,table3) ;
				checkers = scanCopyChessBoard(mine,table3) ;
				if (max < checkers)
				{
					max = checkers ;
    1df4:	d8 2e       	mov	r13, r24
    1df6:	d4 c3       	rjmp	.+1960   	; 0x25a0 <Tactics+0x141e>
					myColumn = column ;
				}
				break;
				
				case 4:
				setChecker(line,column,mine,table4) ;
    1df8:	26 ee       	ldi	r18, 0xE6	; 230
    1dfa:	30 e0       	ldi	r19, 0x00	; 0
    1dfc:	4f 2d       	mov	r20, r15
    1dfe:	66 e0       	ldi	r22, 0x06	; 6
    1e00:	8d 2f       	mov	r24, r29
    1e02:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table4) ;
    1e06:	06 ee       	ldi	r16, 0xE6	; 230
    1e08:	10 e0       	ldi	r17, 0x00	; 0
    1e0a:	2f 2d       	mov	r18, r15
    1e0c:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    1e10:	66 e0       	ldi	r22, 0x06	; 6
    1e12:	8d 2f       	mov	r24, r29
    1e14:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table4) ;
    1e18:	b8 01       	movw	r22, r16
    1e1a:	8f 2d       	mov	r24, r15
    1e1c:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
				if (max < checkers)
    1e20:	d8 16       	cp	r13, r24
    1e22:	08 f0       	brcs	.+2      	; 0x1e26 <Tactics+0xca4>
    1e24:	c0 c3       	rjmp	.+1920   	; 0x25a6 <Tactics+0x1424>
				{
					max = checkers ;
					myLine = line ;
    1e26:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    1e2a:	96 e0       	ldi	r25, 0x06	; 6
    1e2c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table4) ;
				TurnOtherCheckers(line,column,enemy,mine,table4) ;
				checkers = scanCopyChessBoard(mine,table4) ;
				if (max < checkers)
				{
					max = checkers ;
    1e30:	d8 2e       	mov	r13, r24
    1e32:	b9 c3       	rjmp	.+1906   	; 0x25a6 <Tactics+0x1424>
					myColumn = column ;
				}
				break;
				
				case 5:
				setChecker(line,column,mine,table5) ;
    1e34:	26 ef       	ldi	r18, 0xF6	; 246
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	4f 2d       	mov	r20, r15
    1e3a:	66 e0       	ldi	r22, 0x06	; 6
    1e3c:	8d 2f       	mov	r24, r29
    1e3e:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table5) ;
    1e42:	06 ef       	ldi	r16, 0xF6	; 246
    1e44:	10 e0       	ldi	r17, 0x00	; 0
    1e46:	2f 2d       	mov	r18, r15
    1e48:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    1e4c:	66 e0       	ldi	r22, 0x06	; 6
    1e4e:	8d 2f       	mov	r24, r29
    1e50:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table5) ;
    1e54:	b8 01       	movw	r22, r16
    1e56:	8f 2d       	mov	r24, r15
    1e58:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
				if (max < checkers)
    1e5c:	d8 16       	cp	r13, r24
    1e5e:	08 f0       	brcs	.+2      	; 0x1e62 <Tactics+0xce0>
    1e60:	a5 c3       	rjmp	.+1866   	; 0x25ac <Tactics+0x142a>
				{
					max = checkers ;
					myLine = line ;
    1e62:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    1e66:	96 e0       	ldi	r25, 0x06	; 6
    1e68:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table5) ;
				TurnOtherCheckers(line,column,enemy,mine,table5) ;
				checkers = scanCopyChessBoard(mine,table5) ;
				if (max < checkers)
				{
					max = checkers ;
    1e6c:	d8 2e       	mov	r13, r24
    1e6e:	9e c3       	rjmp	.+1852   	; 0x25ac <Tactics+0x142a>
					myColumn = column ;
				}
				break;
				
				case 6:
				setChecker(line,column,mine,table6) ;
    1e70:	2e e7       	ldi	r18, 0x7E	; 126
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	4f 2d       	mov	r20, r15
    1e76:	66 e0       	ldi	r22, 0x06	; 6
    1e78:	8d 2f       	mov	r24, r29
    1e7a:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table6) ;
    1e7e:	0e e7       	ldi	r16, 0x7E	; 126
    1e80:	10 e0       	ldi	r17, 0x00	; 0
    1e82:	2f 2d       	mov	r18, r15
    1e84:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    1e88:	66 e0       	ldi	r22, 0x06	; 6
    1e8a:	8d 2f       	mov	r24, r29
    1e8c:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table6) ;
    1e90:	b8 01       	movw	r22, r16
    1e92:	8f 2d       	mov	r24, r15
    1e94:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
				if (max < checkers)
    1e98:	d8 16       	cp	r13, r24
    1e9a:	08 f0       	brcs	.+2      	; 0x1e9e <Tactics+0xd1c>
    1e9c:	8a c3       	rjmp	.+1812   	; 0x25b2 <Tactics+0x1430>
				{
					max = checkers ;
					myLine = line ;
    1e9e:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    1ea2:	96 e0       	ldi	r25, 0x06	; 6
    1ea4:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table6) ;
				TurnOtherCheckers(line,column,enemy,mine,table6) ;
				checkers = scanCopyChessBoard(mine,table6) ;
				if (max < checkers)
				{
					max = checkers ;
    1ea8:	d8 2e       	mov	r13, r24
    1eaa:	83 c3       	rjmp	.+1798   	; 0x25b2 <Tactics+0x1430>
					myColumn = column ;
				}
				break;
				
				case 7:
				setChecker(line,column,mine,table7) ;
    1eac:	26 ec       	ldi	r18, 0xC6	; 198
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	4f 2d       	mov	r20, r15
    1eb2:	66 e0       	ldi	r22, 0x06	; 6
    1eb4:	8d 2f       	mov	r24, r29
    1eb6:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table7) ;
    1eba:	06 ec       	ldi	r16, 0xC6	; 198
    1ebc:	10 e0       	ldi	r17, 0x00	; 0
    1ebe:	2f 2d       	mov	r18, r15
    1ec0:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    1ec4:	66 e0       	ldi	r22, 0x06	; 6
    1ec6:	8d 2f       	mov	r24, r29
    1ec8:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table7) ;
    1ecc:	b8 01       	movw	r22, r16
    1ece:	8f 2d       	mov	r24, r15
    1ed0:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
				if (max < checkers)
    1ed4:	d8 16       	cp	r13, r24
    1ed6:	08 f0       	brcs	.+2      	; 0x1eda <Tactics+0xd58>
    1ed8:	6f c3       	rjmp	.+1758   	; 0x25b8 <Tactics+0x1436>
				{
					max = checkers ;
					myLine = line ;
    1eda:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    1ede:	96 e0       	ldi	r25, 0x06	; 6
    1ee0:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table7) ;
				TurnOtherCheckers(line,column,enemy,mine,table7) ;
				checkers = scanCopyChessBoard(mine,table7) ;
				if (max < checkers)
				{
					max = checkers ;
    1ee4:	d8 2e       	mov	r13, r24
    1ee6:	68 c3       	rjmp	.+1744   	; 0x25b8 <Tactics+0x1436>
					myColumn = column ;
				}
				break;
				
				case 8:
				setChecker(line,column,mine,table8) ;
    1ee8:	2e e8       	ldi	r18, 0x8E	; 142
    1eea:	30 e0       	ldi	r19, 0x00	; 0
    1eec:	4f 2d       	mov	r20, r15
    1eee:	66 e0       	ldi	r22, 0x06	; 6
    1ef0:	8d 2f       	mov	r24, r29
    1ef2:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table8) ;
    1ef6:	0e e8       	ldi	r16, 0x8E	; 142
    1ef8:	10 e0       	ldi	r17, 0x00	; 0
    1efa:	2f 2d       	mov	r18, r15
    1efc:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    1f00:	66 e0       	ldi	r22, 0x06	; 6
    1f02:	8d 2f       	mov	r24, r29
    1f04:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table8) ;
    1f08:	b8 01       	movw	r22, r16
    1f0a:	8f 2d       	mov	r24, r15
    1f0c:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
				if (max < checkers)
    1f10:	d8 16       	cp	r13, r24
    1f12:	08 f0       	brcs	.+2      	; 0x1f16 <Tactics+0xd94>
    1f14:	57 c3       	rjmp	.+1710   	; 0x25c4 <Tactics+0x1442>
				{
					max = checkers ;
					myLine = line ;
    1f16:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    1f1a:	96 e0       	ldi	r25, 0x06	; 6
    1f1c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table8) ;
				TurnOtherCheckers(line,column,enemy,mine,table8) ;
				checkers = scanCopyChessBoard(mine,table8) ;
				if (max < checkers)
				{
					max = checkers ;
    1f20:	d8 2e       	mov	r13, r24
    1f22:	50 c3       	rjmp	.+1696   	; 0x25c4 <Tactics+0x1442>
		temp = buffer & 0b00100000 ;
		temp = (temp >> 5) ;
		if (temp == 1)
		{
			column = 6 ;
			count++ ;
    1f24:	0f 2e       	mov	r0, r31
    1f26:	f9 e0       	ldi	r31, 0x09	; 9
    1f28:	ef 2e       	mov	r14, r31
    1f2a:	f0 2d       	mov	r31, r0
    1f2c:	04 c0       	rjmp	.+8      	; 0x1f36 <Tactics+0xdb4>
    1f2e:	0f 2e       	mov	r0, r31
    1f30:	f9 e0       	ldi	r31, 0x09	; 9
    1f32:	ef 2e       	mov	r14, r31
    1f34:	f0 2d       	mov	r31, r0
				}
				break;
				
			*/
				default:
				setChecker(line,column,mine,table9) ;
    1f36:	26 ed       	ldi	r18, 0xD6	; 214
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	4f 2d       	mov	r20, r15
    1f3c:	66 e0       	ldi	r22, 0x06	; 6
    1f3e:	8d 2f       	mov	r24, r29
    1f40:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
    1f44:	06 ed       	ldi	r16, 0xD6	; 214
    1f46:	10 e0       	ldi	r17, 0x00	; 0
    1f48:	2f 2d       	mov	r18, r15
    1f4a:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    1f4e:	66 e0       	ldi	r22, 0x06	; 6
    1f50:	8d 2f       	mov	r24, r29
    1f52:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table9) ;
    1f56:	b8 01       	movw	r22, r16
    1f58:	8f 2d       	mov	r24, r15
    1f5a:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
				if (max < checkers)
    1f5e:	d8 16       	cp	r13, r24
    1f60:	30 f4       	brcc	.+12     	; 0x1f6e <Tactics+0xdec>
				{
					max = checkers ;
					myLine = line ;
    1f62:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    1f66:	96 e0       	ldi	r25, 0x06	; 6
    1f68:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table9) ;
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
				checkers = scanCopyChessBoard(mine,table9) ;
				if (max < checkers)
				{
					max = checkers ;
    1f6c:	d8 2e       	mov	r13, r24
		}
		
		/* Seventh valid move in this line */
		temp = buffer & 0b01000000 ;
		temp = (temp >> 6) ;
		if (temp == 1)
    1f6e:	c6 ff       	sbrs	r28, 6
    1f70:	3e c1       	rjmp	.+636    	; 0x21ee <Tactics+0x106c>
		{
			column = 7 ;
			count++ ;
    1f72:	e3 94       	inc	r14
			switch(count)
    1f74:	8e 2d       	mov	r24, r14
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	fc 01       	movw	r30, r24
    1f7a:	31 97       	sbiw	r30, 0x01	; 1
    1f7c:	e9 30       	cpi	r30, 0x09	; 9
    1f7e:	f1 05       	cpc	r31, r1
    1f80:	08 f0       	brcs	.+2      	; 0x1f84 <Tactics+0xe02>
    1f82:	19 c1       	rjmp	.+562    	; 0x21b6 <Tactics+0x1034>
    1f84:	e6 5a       	subi	r30, 0xA6	; 166
    1f86:	ff 4f       	sbci	r31, 0xFF	; 255
    1f88:	0c 94 a1 14 	jmp	0x2942	; 0x2942 <__tablejump2__>
			{
				case 1:
				setChecker(line,column,mine,table1) ;
    1f8c:	26 eb       	ldi	r18, 0xB6	; 182
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	4f 2d       	mov	r20, r15
    1f92:	67 e0       	ldi	r22, 0x07	; 7
    1f94:	8d 2f       	mov	r24, r29
    1f96:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table1) ;
    1f9a:	06 eb       	ldi	r16, 0xB6	; 182
    1f9c:	10 e0       	ldi	r17, 0x00	; 0
    1f9e:	2f 2d       	mov	r18, r15
    1fa0:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    1fa4:	67 e0       	ldi	r22, 0x07	; 7
    1fa6:	8d 2f       	mov	r24, r29
    1fa8:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table1) ;
    1fac:	b8 01       	movw	r22, r16
    1fae:	8f 2d       	mov	r24, r15
    1fb0:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
				if (max < checkers)
    1fb4:	d8 16       	cp	r13, r24
    1fb6:	08 f0       	brcs	.+2      	; 0x1fba <Tactics+0xe38>
    1fb8:	23 c3       	rjmp	.+1606   	; 0x2600 <Tactics+0x147e>
				{
					max = checkers ;
					myLine = line ;
    1fba:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    1fbe:	97 e0       	ldi	r25, 0x07	; 7
    1fc0:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table1) ;
				TurnOtherCheckers(line,column,enemy,mine,table1) ;
				checkers = scanCopyChessBoard(mine,table1) ;
				if (max < checkers)
				{
					max = checkers ;
    1fc4:	d8 2e       	mov	r13, r24
    1fc6:	1c c3       	rjmp	.+1592   	; 0x2600 <Tactics+0x147e>
					myColumn = column ;
				}
				break;
				
				case 2:
				setChecker(line,column,mine,table2) ;
    1fc8:	26 e0       	ldi	r18, 0x06	; 6
    1fca:	31 e0       	ldi	r19, 0x01	; 1
    1fcc:	4f 2d       	mov	r20, r15
    1fce:	67 e0       	ldi	r22, 0x07	; 7
    1fd0:	8d 2f       	mov	r24, r29
    1fd2:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table2) ;
    1fd6:	06 e0       	ldi	r16, 0x06	; 6
    1fd8:	11 e0       	ldi	r17, 0x01	; 1
    1fda:	2f 2d       	mov	r18, r15
    1fdc:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    1fe0:	67 e0       	ldi	r22, 0x07	; 7
    1fe2:	8d 2f       	mov	r24, r29
    1fe4:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table2) ;
    1fe8:	b8 01       	movw	r22, r16
    1fea:	8f 2d       	mov	r24, r15
    1fec:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
				if (max < checkers)
    1ff0:	d8 16       	cp	r13, r24
    1ff2:	08 f0       	brcs	.+2      	; 0x1ff6 <Tactics+0xe74>
    1ff4:	17 c3       	rjmp	.+1582   	; 0x2624 <Tactics+0x14a2>
				{
					max = checkers ;
					myLine = line ;
    1ff6:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    1ffa:	97 e0       	ldi	r25, 0x07	; 7
    1ffc:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table2) ;
				TurnOtherCheckers(line,column,enemy,mine,table2) ;
				checkers = scanCopyChessBoard(mine,table2) ;
				if (max < checkers)
				{
					max = checkers ;
    2000:	d8 2e       	mov	r13, r24
    2002:	10 c3       	rjmp	.+1568   	; 0x2624 <Tactics+0x14a2>
					myColumn = column ;
				}
				break;
				
				case 3:
				setChecker(line,column,mine,table3) ;
    2004:	26 e6       	ldi	r18, 0x66	; 102
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	4f 2d       	mov	r20, r15
    200a:	67 e0       	ldi	r22, 0x07	; 7
    200c:	8d 2f       	mov	r24, r29
    200e:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table3) ;
    2012:	06 e6       	ldi	r16, 0x66	; 102
    2014:	10 e0       	ldi	r17, 0x00	; 0
    2016:	2f 2d       	mov	r18, r15
    2018:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    201c:	67 e0       	ldi	r22, 0x07	; 7
    201e:	8d 2f       	mov	r24, r29
    2020:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table3) ;
    2024:	b8 01       	movw	r22, r16
    2026:	8f 2d       	mov	r24, r15
    2028:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
				if (max < checkers)
    202c:	d8 16       	cp	r13, r24
    202e:	08 f0       	brcs	.+2      	; 0x2032 <Tactics+0xeb0>
    2030:	00 c3       	rjmp	.+1536   	; 0x2632 <Tactics+0x14b0>
				{
					max = checkers ;
					myLine = line ;
    2032:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    2036:	97 e0       	ldi	r25, 0x07	; 7
    2038:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table3) ;
				TurnOtherCheckers(line,column,enemy,mine,table3) ;
				checkers = scanCopyChessBoard(mine,table3) ;
				if (max < checkers)
				{
					max = checkers ;
    203c:	d8 2e       	mov	r13, r24
    203e:	f9 c2       	rjmp	.+1522   	; 0x2632 <Tactics+0x14b0>
					myColumn = column ;
				}
				break;
				
				case 4:
				setChecker(line,column,mine,table4) ;
    2040:	26 ee       	ldi	r18, 0xE6	; 230
    2042:	30 e0       	ldi	r19, 0x00	; 0
    2044:	4f 2d       	mov	r20, r15
    2046:	67 e0       	ldi	r22, 0x07	; 7
    2048:	8d 2f       	mov	r24, r29
    204a:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table4) ;
    204e:	06 ee       	ldi	r16, 0xE6	; 230
    2050:	10 e0       	ldi	r17, 0x00	; 0
    2052:	2f 2d       	mov	r18, r15
    2054:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    2058:	67 e0       	ldi	r22, 0x07	; 7
    205a:	8d 2f       	mov	r24, r29
    205c:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table4) ;
    2060:	b8 01       	movw	r22, r16
    2062:	8f 2d       	mov	r24, r15
    2064:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
				if (max < checkers)
    2068:	d8 16       	cp	r13, r24
    206a:	08 f0       	brcs	.+2      	; 0x206e <Tactics+0xeec>
    206c:	ea c2       	rjmp	.+1492   	; 0x2642 <Tactics+0x14c0>
				{
					max = checkers ;
					myLine = line ;
    206e:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    2072:	97 e0       	ldi	r25, 0x07	; 7
    2074:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table4) ;
				TurnOtherCheckers(line,column,enemy,mine,table4) ;
				checkers = scanCopyChessBoard(mine,table4) ;
				if (max < checkers)
				{
					max = checkers ;
    2078:	d8 2e       	mov	r13, r24
    207a:	e3 c2       	rjmp	.+1478   	; 0x2642 <Tactics+0x14c0>
					myColumn = column ;
				}
				break;
				
				case 5:
				setChecker(line,column,mine,table5) ;
    207c:	26 ef       	ldi	r18, 0xF6	; 246
    207e:	30 e0       	ldi	r19, 0x00	; 0
    2080:	4f 2d       	mov	r20, r15
    2082:	67 e0       	ldi	r22, 0x07	; 7
    2084:	8d 2f       	mov	r24, r29
    2086:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table5) ;
    208a:	06 ef       	ldi	r16, 0xF6	; 246
    208c:	10 e0       	ldi	r17, 0x00	; 0
    208e:	2f 2d       	mov	r18, r15
    2090:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    2094:	67 e0       	ldi	r22, 0x07	; 7
    2096:	8d 2f       	mov	r24, r29
    2098:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table5) ;
    209c:	b8 01       	movw	r22, r16
    209e:	8f 2d       	mov	r24, r15
    20a0:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
				if (max < checkers)
    20a4:	d8 16       	cp	r13, r24
    20a6:	08 f0       	brcs	.+2      	; 0x20aa <Tactics+0xf28>
    20a8:	93 c2       	rjmp	.+1318   	; 0x25d0 <Tactics+0x144e>
				{
					max = checkers ;
					myLine = line ;
    20aa:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    20ae:	97 e0       	ldi	r25, 0x07	; 7
    20b0:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table5) ;
				TurnOtherCheckers(line,column,enemy,mine,table5) ;
				checkers = scanCopyChessBoard(mine,table5) ;
				if (max < checkers)
				{
					max = checkers ;
    20b4:	d8 2e       	mov	r13, r24
    20b6:	8c c2       	rjmp	.+1304   	; 0x25d0 <Tactics+0x144e>
					myColumn = column ;
				}
				break;
				
				case 6:
				setChecker(line,column,mine,table6) ;
    20b8:	2e e7       	ldi	r18, 0x7E	; 126
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	4f 2d       	mov	r20, r15
    20be:	67 e0       	ldi	r22, 0x07	; 7
    20c0:	8d 2f       	mov	r24, r29
    20c2:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table6) ;
    20c6:	0e e7       	ldi	r16, 0x7E	; 126
    20c8:	10 e0       	ldi	r17, 0x00	; 0
    20ca:	2f 2d       	mov	r18, r15
    20cc:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    20d0:	67 e0       	ldi	r22, 0x07	; 7
    20d2:	8d 2f       	mov	r24, r29
    20d4:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table6) ;
    20d8:	b8 01       	movw	r22, r16
    20da:	8f 2d       	mov	r24, r15
    20dc:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
				if (max < checkers)
    20e0:	d8 16       	cp	r13, r24
    20e2:	08 f0       	brcs	.+2      	; 0x20e6 <Tactics+0xf64>
    20e4:	7d c2       	rjmp	.+1274   	; 0x25e0 <Tactics+0x145e>
				{
					max = checkers ;
					myLine = line ;
    20e6:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    20ea:	97 e0       	ldi	r25, 0x07	; 7
    20ec:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table6) ;
				TurnOtherCheckers(line,column,enemy,mine,table6) ;
				checkers = scanCopyChessBoard(mine,table6) ;
				if (max < checkers)
				{
					max = checkers ;
    20f0:	d8 2e       	mov	r13, r24
    20f2:	76 c2       	rjmp	.+1260   	; 0x25e0 <Tactics+0x145e>
					myColumn = column ;
				}
				break;
				
				case 7:
				setChecker(line,column,mine,table7) ;
    20f4:	26 ec       	ldi	r18, 0xC6	; 198
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	4f 2d       	mov	r20, r15
    20fa:	67 e0       	ldi	r22, 0x07	; 7
    20fc:	8d 2f       	mov	r24, r29
    20fe:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table7) ;
    2102:	06 ec       	ldi	r16, 0xC6	; 198
    2104:	10 e0       	ldi	r17, 0x00	; 0
    2106:	2f 2d       	mov	r18, r15
    2108:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    210c:	67 e0       	ldi	r22, 0x07	; 7
    210e:	8d 2f       	mov	r24, r29
    2110:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table7) ;
    2114:	b8 01       	movw	r22, r16
    2116:	8f 2d       	mov	r24, r15
    2118:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
				if (max < checkers)
    211c:	d8 16       	cp	r13, r24
    211e:	08 f0       	brcs	.+2      	; 0x2122 <Tactics+0xfa0>
    2120:	67 c2       	rjmp	.+1230   	; 0x25f0 <Tactics+0x146e>
				{
					max = checkers ;
					myLine = line ;
    2122:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    2126:	97 e0       	ldi	r25, 0x07	; 7
    2128:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table7) ;
				TurnOtherCheckers(line,column,enemy,mine,table7) ;
				checkers = scanCopyChessBoard(mine,table7) ;
				if (max < checkers)
				{
					max = checkers ;
    212c:	d8 2e       	mov	r13, r24
    212e:	60 c2       	rjmp	.+1216   	; 0x25f0 <Tactics+0x146e>
					myColumn = column ;
				}
				break;
				
				case 8:
				setChecker(line,column,mine,table8) ;
    2130:	2e e8       	ldi	r18, 0x8E	; 142
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	4f 2d       	mov	r20, r15
    2136:	67 e0       	ldi	r22, 0x07	; 7
    2138:	8d 2f       	mov	r24, r29
    213a:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table8) ;
    213e:	0e e8       	ldi	r16, 0x8E	; 142
    2140:	10 e0       	ldi	r17, 0x00	; 0
    2142:	2f 2d       	mov	r18, r15
    2144:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    2148:	67 e0       	ldi	r22, 0x07	; 7
    214a:	8d 2f       	mov	r24, r29
    214c:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table8) ;
    2150:	b8 01       	movw	r22, r16
    2152:	8f 2d       	mov	r24, r15
    2154:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
				if (max < checkers)
    2158:	d8 16       	cp	r13, r24
    215a:	08 f0       	brcs	.+2      	; 0x215e <Tactics+0xfdc>
    215c:	57 c2       	rjmp	.+1198   	; 0x260c <Tactics+0x148a>
				{
					max = checkers ;
					myLine = line ;
    215e:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    2162:	97 e0       	ldi	r25, 0x07	; 7
    2164:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table8) ;
				TurnOtherCheckers(line,column,enemy,mine,table8) ;
				checkers = scanCopyChessBoard(mine,table8) ;
				if (max < checkers)
				{
					max = checkers ;
    2168:	d8 2e       	mov	r13, r24
		temp = buffer & 0b01000000 ;
		temp = (temp >> 6) ;
		if (temp == 1)
		{
			column = 7 ;
			count++ ;
    216a:	68 94       	set
    216c:	ee 24       	eor	r14, r14
    216e:	e3 f8       	bld	r14, 3
    2170:	55 c2       	rjmp	.+1194   	; 0x261c <Tactics+0x149a>
					myColumn = column ;
				}
				break;
				
				case 9:
				setChecker(line,column,mine,table9) ;
    2172:	26 ed       	ldi	r18, 0xD6	; 214
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	4f 2d       	mov	r20, r15
    2178:	67 e0       	ldi	r22, 0x07	; 7
    217a:	8d 2f       	mov	r24, r29
    217c:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
    2180:	06 ed       	ldi	r16, 0xD6	; 214
    2182:	10 e0       	ldi	r17, 0x00	; 0
    2184:	2f 2d       	mov	r18, r15
    2186:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    218a:	67 e0       	ldi	r22, 0x07	; 7
    218c:	8d 2f       	mov	r24, r29
    218e:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table9) ;
    2192:	b8 01       	movw	r22, r16
    2194:	8f 2d       	mov	r24, r15
    2196:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
				if (max < checkers)
    219a:	d8 16       	cp	r13, r24
    219c:	08 f0       	brcs	.+2      	; 0x21a0 <Tactics+0x101e>
    219e:	3a c2       	rjmp	.+1140   	; 0x2614 <Tactics+0x1492>
				{
					max = checkers ;
					myLine = line ;
    21a0:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    21a4:	97 e0       	ldi	r25, 0x07	; 7
    21a6:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table9) ;
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
				checkers = scanCopyChessBoard(mine,table9) ;
				if (max < checkers)
				{
					max = checkers ;
    21aa:	d8 2e       	mov	r13, r24
		temp = buffer & 0b01000000 ;
		temp = (temp >> 6) ;
		if (temp == 1)
		{
			column = 7 ;
			count++ ;
    21ac:	0f 2e       	mov	r0, r31
    21ae:	f9 e0       	ldi	r31, 0x09	; 9
    21b0:	ef 2e       	mov	r14, r31
    21b2:	f0 2d       	mov	r31, r0
    21b4:	33 c2       	rjmp	.+1126   	; 0x261c <Tactics+0x149a>
				}
				break;
				
				*/
				default:
				setChecker(line,column,mine,table9) ;
    21b6:	26 ed       	ldi	r18, 0xD6	; 214
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	4f 2d       	mov	r20, r15
    21bc:	67 e0       	ldi	r22, 0x07	; 7
    21be:	8d 2f       	mov	r24, r29
    21c0:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
    21c4:	06 ed       	ldi	r16, 0xD6	; 214
    21c6:	10 e0       	ldi	r17, 0x00	; 0
    21c8:	2f 2d       	mov	r18, r15
    21ca:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    21ce:	67 e0       	ldi	r22, 0x07	; 7
    21d0:	8d 2f       	mov	r24, r29
    21d2:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table9) ;
    21d6:	b8 01       	movw	r22, r16
    21d8:	8f 2d       	mov	r24, r15
    21da:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
				if (max < checkers)
    21de:	d8 16       	cp	r13, r24
    21e0:	30 f4       	brcc	.+12     	; 0x21ee <Tactics+0x106c>
				{
					max = checkers ;
					myLine = line ;
    21e2:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    21e6:	97 e0       	ldi	r25, 0x07	; 7
    21e8:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table9) ;
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
				checkers = scanCopyChessBoard(mine,table9) ;
				if (max < checkers)
				{
					max = checkers ;
    21ec:	d8 2e       	mov	r13, r24
		}
		
		/* Eighth valid move in this line */
		temp = buffer & 0b10000000 ;
		temp = (temp >> 7) ;
		if (temp == 1)
    21ee:	cc 23       	and	r28, r28
    21f0:	0c f0       	brlt	.+2      	; 0x21f4 <Tactics+0x1072>
    21f2:	56 c1       	rjmp	.+684    	; 0x24a0 <Tactics+0x131e>
		{
			column = 8 ;
			count++ ;
    21f4:	e3 94       	inc	r14
			switch(count)
    21f6:	8e 2d       	mov	r24, r14
    21f8:	90 e0       	ldi	r25, 0x00	; 0
    21fa:	fc 01       	movw	r30, r24
    21fc:	31 97       	sbiw	r30, 0x01	; 1
    21fe:	e8 30       	cpi	r30, 0x08	; 8
    2200:	f1 05       	cpc	r31, r1
    2202:	08 f0       	brcs	.+2      	; 0x2206 <Tactics+0x1084>
    2204:	11 c1       	rjmp	.+546    	; 0x2428 <Tactics+0x12a6>
    2206:	ed 59       	subi	r30, 0x9D	; 157
    2208:	ff 4f       	sbci	r31, 0xFF	; 255
    220a:	0c 94 a1 14 	jmp	0x2942	; 0x2942 <__tablejump2__>
			{
				case 1:
				setChecker(line,column,mine,table1) ;
    220e:	26 eb       	ldi	r18, 0xB6	; 182
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	4f 2d       	mov	r20, r15
    2214:	68 e0       	ldi	r22, 0x08	; 8
    2216:	8d 2f       	mov	r24, r29
    2218:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table1) ;
    221c:	06 eb       	ldi	r16, 0xB6	; 182
    221e:	10 e0       	ldi	r17, 0x00	; 0
    2220:	2f 2d       	mov	r18, r15
    2222:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    2226:	68 e0       	ldi	r22, 0x08	; 8
    2228:	8d 2f       	mov	r24, r29
    222a:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table1) ;
    222e:	b8 01       	movw	r22, r16
    2230:	8f 2d       	mov	r24, r15
    2232:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
				if (max < checkers)
    2236:	d8 16       	cp	r13, r24
    2238:	08 f0       	brcs	.+2      	; 0x223c <Tactics+0x10ba>
    223a:	32 c1       	rjmp	.+612    	; 0x24a0 <Tactics+0x131e>
				{
					max = checkers ;
					myLine = line ;
    223c:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    2240:	98 e0       	ldi	r25, 0x08	; 8
    2242:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table1) ;
				TurnOtherCheckers(line,column,enemy,mine,table1) ;
				checkers = scanCopyChessBoard(mine,table1) ;
				if (max < checkers)
				{
					max = checkers ;
    2246:	d8 2e       	mov	r13, r24
    2248:	2b c1       	rjmp	.+598    	; 0x24a0 <Tactics+0x131e>
					myColumn = column ;
				}
				break;
				
				case 2:
				setChecker(line,column,mine,table2) ;
    224a:	26 e0       	ldi	r18, 0x06	; 6
    224c:	31 e0       	ldi	r19, 0x01	; 1
    224e:	4f 2d       	mov	r20, r15
    2250:	68 e0       	ldi	r22, 0x08	; 8
    2252:	8d 2f       	mov	r24, r29
    2254:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table2) ;
    2258:	06 e0       	ldi	r16, 0x06	; 6
    225a:	11 e0       	ldi	r17, 0x01	; 1
    225c:	2f 2d       	mov	r18, r15
    225e:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    2262:	68 e0       	ldi	r22, 0x08	; 8
    2264:	8d 2f       	mov	r24, r29
    2266:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table2) ;
    226a:	b8 01       	movw	r22, r16
    226c:	8f 2d       	mov	r24, r15
    226e:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
				if (max < checkers)
    2272:	d8 16       	cp	r13, r24
    2274:	08 f0       	brcs	.+2      	; 0x2278 <Tactics+0x10f6>
    2276:	f5 c0       	rjmp	.+490    	; 0x2462 <Tactics+0x12e0>
				{
					max = checkers ;
					myLine = line ;
    2278:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    227c:	98 e0       	ldi	r25, 0x08	; 8
    227e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table2) ;
				TurnOtherCheckers(line,column,enemy,mine,table2) ;
				checkers = scanCopyChessBoard(mine,table2) ;
				if (max < checkers)
				{
					max = checkers ;
    2282:	d8 2e       	mov	r13, r24
		temp = buffer & 0b10000000 ;
		temp = (temp >> 7) ;
		if (temp == 1)
		{
			column = 8 ;
			count++ ;
    2284:	68 94       	set
    2286:	ee 24       	eor	r14, r14
    2288:	e1 f8       	bld	r14, 1
    228a:	0a c1       	rjmp	.+532    	; 0x24a0 <Tactics+0x131e>
					myColumn = column ;
				}
				break;
				
				case 3:
				setChecker(line,column,mine,table3) ;
    228c:	26 e6       	ldi	r18, 0x66	; 102
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	4f 2d       	mov	r20, r15
    2292:	68 e0       	ldi	r22, 0x08	; 8
    2294:	8d 2f       	mov	r24, r29
    2296:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table3) ;
    229a:	06 e6       	ldi	r16, 0x66	; 102
    229c:	10 e0       	ldi	r17, 0x00	; 0
    229e:	2f 2d       	mov	r18, r15
    22a0:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    22a4:	68 e0       	ldi	r22, 0x08	; 8
    22a6:	8d 2f       	mov	r24, r29
    22a8:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table3) ;
    22ac:	b8 01       	movw	r22, r16
    22ae:	8f 2d       	mov	r24, r15
    22b0:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
				if (max < checkers)
    22b4:	d8 16       	cp	r13, r24
    22b6:	08 f0       	brcs	.+2      	; 0x22ba <Tactics+0x1138>
    22b8:	d8 c0       	rjmp	.+432    	; 0x246a <Tactics+0x12e8>
				{
					max = checkers ;
					myLine = line ;
    22ba:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    22be:	98 e0       	ldi	r25, 0x08	; 8
    22c0:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table3) ;
				TurnOtherCheckers(line,column,enemy,mine,table3) ;
				checkers = scanCopyChessBoard(mine,table3) ;
				if (max < checkers)
				{
					max = checkers ;
    22c4:	d8 2e       	mov	r13, r24
		temp = buffer & 0b10000000 ;
		temp = (temp >> 7) ;
		if (temp == 1)
		{
			column = 8 ;
			count++ ;
    22c6:	0f 2e       	mov	r0, r31
    22c8:	f3 e0       	ldi	r31, 0x03	; 3
    22ca:	ef 2e       	mov	r14, r31
    22cc:	f0 2d       	mov	r31, r0
    22ce:	e8 c0       	rjmp	.+464    	; 0x24a0 <Tactics+0x131e>
					myColumn = column ;
				}
				break;
				
				case 4:
				setChecker(line,column,mine,table4) ;
    22d0:	26 ee       	ldi	r18, 0xE6	; 230
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	4f 2d       	mov	r20, r15
    22d6:	68 e0       	ldi	r22, 0x08	; 8
    22d8:	8d 2f       	mov	r24, r29
    22da:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table4) ;
    22de:	06 ee       	ldi	r16, 0xE6	; 230
    22e0:	10 e0       	ldi	r17, 0x00	; 0
    22e2:	2f 2d       	mov	r18, r15
    22e4:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    22e8:	68 e0       	ldi	r22, 0x08	; 8
    22ea:	8d 2f       	mov	r24, r29
    22ec:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table4) ;
    22f0:	b8 01       	movw	r22, r16
    22f2:	8f 2d       	mov	r24, r15
    22f4:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
				if (max < checkers)
    22f8:	d8 16       	cp	r13, r24
    22fa:	08 f0       	brcs	.+2      	; 0x22fe <Tactics+0x117c>
    22fc:	bb c0       	rjmp	.+374    	; 0x2474 <Tactics+0x12f2>
				{
					max = checkers ;
					myLine = line ;
    22fe:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    2302:	98 e0       	ldi	r25, 0x08	; 8
    2304:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table4) ;
				TurnOtherCheckers(line,column,enemy,mine,table4) ;
				checkers = scanCopyChessBoard(mine,table4) ;
				if (max < checkers)
				{
					max = checkers ;
    2308:	d8 2e       	mov	r13, r24
		temp = buffer & 0b10000000 ;
		temp = (temp >> 7) ;
		if (temp == 1)
		{
			column = 8 ;
			count++ ;
    230a:	68 94       	set
    230c:	ee 24       	eor	r14, r14
    230e:	e2 f8       	bld	r14, 2
    2310:	c7 c0       	rjmp	.+398    	; 0x24a0 <Tactics+0x131e>
					myColumn = column ;
				}
				break;
				
				case 5:
				setChecker(line,column,mine,table5) ;
    2312:	26 ef       	ldi	r18, 0xF6	; 246
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	4f 2d       	mov	r20, r15
    2318:	68 e0       	ldi	r22, 0x08	; 8
    231a:	8d 2f       	mov	r24, r29
    231c:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table5) ;
    2320:	06 ef       	ldi	r16, 0xF6	; 246
    2322:	10 e0       	ldi	r17, 0x00	; 0
    2324:	2f 2d       	mov	r18, r15
    2326:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    232a:	68 e0       	ldi	r22, 0x08	; 8
    232c:	8d 2f       	mov	r24, r29
    232e:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table5) ;
    2332:	b8 01       	movw	r22, r16
    2334:	8f 2d       	mov	r24, r15
    2336:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
				if (max < checkers)
    233a:	d8 16       	cp	r13, r24
    233c:	08 f0       	brcs	.+2      	; 0x2340 <Tactics+0x11be>
    233e:	9e c0       	rjmp	.+316    	; 0x247c <Tactics+0x12fa>
				{
					max = checkers ;
					myLine = line ;
    2340:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    2344:	98 e0       	ldi	r25, 0x08	; 8
    2346:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table5) ;
				TurnOtherCheckers(line,column,enemy,mine,table5) ;
				checkers = scanCopyChessBoard(mine,table5) ;
				if (max < checkers)
				{
					max = checkers ;
    234a:	d8 2e       	mov	r13, r24
		temp = buffer & 0b10000000 ;
		temp = (temp >> 7) ;
		if (temp == 1)
		{
			column = 8 ;
			count++ ;
    234c:	0f 2e       	mov	r0, r31
    234e:	f5 e0       	ldi	r31, 0x05	; 5
    2350:	ef 2e       	mov	r14, r31
    2352:	f0 2d       	mov	r31, r0
    2354:	a5 c0       	rjmp	.+330    	; 0x24a0 <Tactics+0x131e>
					myColumn = column ;
				}
				break;
				
				case 6:
				setChecker(line,column,mine,table6) ;
    2356:	2e e7       	ldi	r18, 0x7E	; 126
    2358:	30 e0       	ldi	r19, 0x00	; 0
    235a:	4f 2d       	mov	r20, r15
    235c:	68 e0       	ldi	r22, 0x08	; 8
    235e:	8d 2f       	mov	r24, r29
    2360:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table6) ;
    2364:	0e e7       	ldi	r16, 0x7E	; 126
    2366:	10 e0       	ldi	r17, 0x00	; 0
    2368:	2f 2d       	mov	r18, r15
    236a:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    236e:	68 e0       	ldi	r22, 0x08	; 8
    2370:	8d 2f       	mov	r24, r29
    2372:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table6) ;
    2376:	b8 01       	movw	r22, r16
    2378:	8f 2d       	mov	r24, r15
    237a:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
				if (max < checkers)
    237e:	d8 16       	cp	r13, r24
    2380:	08 f0       	brcs	.+2      	; 0x2384 <Tactics+0x1202>
    2382:	81 c0       	rjmp	.+258    	; 0x2486 <Tactics+0x1304>
				{
					max = checkers ;
					myLine = line ;
    2384:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    2388:	98 e0       	ldi	r25, 0x08	; 8
    238a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table6) ;
				TurnOtherCheckers(line,column,enemy,mine,table6) ;
				checkers = scanCopyChessBoard(mine,table6) ;
				if (max < checkers)
				{
					max = checkers ;
    238e:	d8 2e       	mov	r13, r24
		temp = buffer & 0b10000000 ;
		temp = (temp >> 7) ;
		if (temp == 1)
		{
			column = 8 ;
			count++ ;
    2390:	0f 2e       	mov	r0, r31
    2392:	f6 e0       	ldi	r31, 0x06	; 6
    2394:	ef 2e       	mov	r14, r31
    2396:	f0 2d       	mov	r31, r0
    2398:	83 c0       	rjmp	.+262    	; 0x24a0 <Tactics+0x131e>
					myColumn = column ;
				}
				break;
				
				case 7:
				setChecker(line,column,mine,table7) ;
    239a:	26 ec       	ldi	r18, 0xC6	; 198
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	4f 2d       	mov	r20, r15
    23a0:	68 e0       	ldi	r22, 0x08	; 8
    23a2:	8d 2f       	mov	r24, r29
    23a4:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table7) ;
    23a8:	06 ec       	ldi	r16, 0xC6	; 198
    23aa:	10 e0       	ldi	r17, 0x00	; 0
    23ac:	2f 2d       	mov	r18, r15
    23ae:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    23b2:	68 e0       	ldi	r22, 0x08	; 8
    23b4:	8d 2f       	mov	r24, r29
    23b6:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table7) ;
    23ba:	b8 01       	movw	r22, r16
    23bc:	8f 2d       	mov	r24, r15
    23be:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
				if (max < checkers)
    23c2:	d8 16       	cp	r13, r24
    23c4:	08 f0       	brcs	.+2      	; 0x23c8 <Tactics+0x1246>
    23c6:	64 c0       	rjmp	.+200    	; 0x2490 <Tactics+0x130e>
				{
					max = checkers ;
					myLine = line ;
    23c8:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    23cc:	98 e0       	ldi	r25, 0x08	; 8
    23ce:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table7) ;
				TurnOtherCheckers(line,column,enemy,mine,table7) ;
				checkers = scanCopyChessBoard(mine,table7) ;
				if (max < checkers)
				{
					max = checkers ;
    23d2:	d8 2e       	mov	r13, r24
		temp = buffer & 0b10000000 ;
		temp = (temp >> 7) ;
		if (temp == 1)
		{
			column = 8 ;
			count++ ;
    23d4:	0f 2e       	mov	r0, r31
    23d6:	f7 e0       	ldi	r31, 0x07	; 7
    23d8:	ef 2e       	mov	r14, r31
    23da:	f0 2d       	mov	r31, r0
    23dc:	61 c0       	rjmp	.+194    	; 0x24a0 <Tactics+0x131e>
					myColumn = column ;
				}
				break;
				
				case 8:
				setChecker(line,column,mine,table8) ;
    23de:	2e e8       	ldi	r18, 0x8E	; 142
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	4f 2d       	mov	r20, r15
    23e4:	68 e0       	ldi	r22, 0x08	; 8
    23e6:	8d 2f       	mov	r24, r29
    23e8:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table8) ;
    23ec:	0e e8       	ldi	r16, 0x8E	; 142
    23ee:	10 e0       	ldi	r17, 0x00	; 0
    23f0:	2f 2d       	mov	r18, r15
    23f2:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    23f6:	68 e0       	ldi	r22, 0x08	; 8
    23f8:	8d 2f       	mov	r24, r29
    23fa:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table8) ;
    23fe:	b8 01       	movw	r22, r16
    2400:	8f 2d       	mov	r24, r15
    2402:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
				if (max < checkers)
    2406:	d8 16       	cp	r13, r24
    2408:	08 f0       	brcs	.+2      	; 0x240c <Tactics+0x128a>
    240a:	47 c0       	rjmp	.+142    	; 0x249a <Tactics+0x1318>
				{
					max = checkers ;
					myLine = line ;
    240c:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    2410:	98 e0       	ldi	r25, 0x08	; 8
    2412:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table8) ;
				TurnOtherCheckers(line,column,enemy,mine,table8) ;
				checkers = scanCopyChessBoard(mine,table8) ;
				if (max < checkers)
				{
					max = checkers ;
    2416:	d8 2e       	mov	r13, r24
		temp = buffer & 0b10000000 ;
		temp = (temp >> 7) ;
		if (temp == 1)
		{
			column = 8 ;
			count++ ;
    2418:	68 94       	set
    241a:	ee 24       	eor	r14, r14
    241c:	e3 f8       	bld	r14, 3
    241e:	40 c0       	rjmp	.+128    	; 0x24a0 <Tactics+0x131e>
    2420:	0f 2e       	mov	r0, r31
    2422:	f9 e0       	ldi	r31, 0x09	; 9
    2424:	ef 2e       	mov	r14, r31
    2426:	f0 2d       	mov	r31, r0
				}
				break;
				
				*/
				default:
				setChecker(line,column,mine,table9) ;
    2428:	26 ed       	ldi	r18, 0xD6	; 214
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	4f 2d       	mov	r20, r15
    242e:	68 e0       	ldi	r22, 0x08	; 8
    2430:	8d 2f       	mov	r24, r29
    2432:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
    2436:	06 ed       	ldi	r16, 0xD6	; 214
    2438:	10 e0       	ldi	r17, 0x00	; 0
    243a:	2f 2d       	mov	r18, r15
    243c:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    2440:	68 e0       	ldi	r22, 0x08	; 8
    2442:	8d 2f       	mov	r24, r29
    2444:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table9) ;
    2448:	b8 01       	movw	r22, r16
    244a:	8f 2d       	mov	r24, r15
    244c:	0e 94 8a 08 	call	0x1114	; 0x1114 <scanCopyChessBoard>
				if (max < checkers)
    2450:	d8 16       	cp	r13, r24
    2452:	30 f5       	brcc	.+76     	; 0x24a0 <Tactics+0x131e>
				{
					max = checkers ;
					myLine = line ;
    2454:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    2458:	98 e0       	ldi	r25, 0x08	; 8
    245a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table9) ;
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
				checkers = scanCopyChessBoard(mine,table9) ;
				if (max < checkers)
				{
					max = checkers ;
    245e:	d8 2e       	mov	r13, r24
    2460:	1f c0       	rjmp	.+62     	; 0x24a0 <Tactics+0x131e>
		temp = buffer & 0b10000000 ;
		temp = (temp >> 7) ;
		if (temp == 1)
		{
			column = 8 ;
			count++ ;
    2462:	68 94       	set
    2464:	ee 24       	eor	r14, r14
    2466:	e1 f8       	bld	r14, 1
    2468:	1b c0       	rjmp	.+54     	; 0x24a0 <Tactics+0x131e>
    246a:	0f 2e       	mov	r0, r31
    246c:	f3 e0       	ldi	r31, 0x03	; 3
    246e:	ef 2e       	mov	r14, r31
    2470:	f0 2d       	mov	r31, r0
    2472:	16 c0       	rjmp	.+44     	; 0x24a0 <Tactics+0x131e>
    2474:	68 94       	set
    2476:	ee 24       	eor	r14, r14
    2478:	e2 f8       	bld	r14, 2
    247a:	12 c0       	rjmp	.+36     	; 0x24a0 <Tactics+0x131e>
    247c:	0f 2e       	mov	r0, r31
    247e:	f5 e0       	ldi	r31, 0x05	; 5
    2480:	ef 2e       	mov	r14, r31
    2482:	f0 2d       	mov	r31, r0
    2484:	0d c0       	rjmp	.+26     	; 0x24a0 <Tactics+0x131e>
    2486:	0f 2e       	mov	r0, r31
    2488:	f6 e0       	ldi	r31, 0x06	; 6
    248a:	ef 2e       	mov	r14, r31
    248c:	f0 2d       	mov	r31, r0
    248e:	08 c0       	rjmp	.+16     	; 0x24a0 <Tactics+0x131e>
    2490:	0f 2e       	mov	r0, r31
    2492:	f7 e0       	ldi	r31, 0x07	; 7
    2494:	ef 2e       	mov	r14, r31
    2496:	f0 2d       	mov	r31, r0
    2498:	03 c0       	rjmp	.+6      	; 0x24a0 <Tactics+0x131e>
    249a:	68 94       	set
    249c:	ee 24       	eor	r14, r14
    249e:	e3 f8       	bld	r14, 3
    24a0:	df 5f       	subi	r29, 0xFF	; 255
	uint8_t count = 0 ;
	uint8_t max = 0 ;
	uint8_t checkers = 0 ;
	char line = (char) 0 ;
	uint8_t column = 0 ;
	for (uint8_t index = 0; index < SIZE/2; index++)
    24a2:	d9 34       	cpi	r29, 0x49	; 73
    24a4:	11 f0       	breq	.+4      	; 0x24aa <Tactics+0x1328>
    24a6:	0c 94 d4 08 	jmp	0x11a8	; 0x11a8 <Tactics+0x26>
    24aa:	e7 c1       	rjmp	.+974    	; 0x287a <Tactics+0x16f8>
		}
		
		/* Second valid in this line */
		temp = buffer & 0b00000010 ;
		temp = (temp >> 1) ;
		if (temp == 1)
    24ac:	c1 ff       	sbrs	r28, 1
    24ae:	d9 c0       	rjmp	.+434    	; 0x2662 <Tactics+0x14e0>
    24b0:	90 c8       	rjmp	.-3808   	; 0x15d2 <Tactics+0x450>
    24b2:	c1 ff       	sbrs	r28, 1
    24b4:	d9 c0       	rjmp	.+434    	; 0x2668 <Tactics+0x14e6>
    24b6:	0c 94 31 0a 	jmp	0x1462	; 0x1462 <Tactics+0x2e0>
    24ba:	c1 ff       	sbrs	r28, 1
    24bc:	d8 c0       	rjmp	.+432    	; 0x266e <Tactics+0x14ec>
    24be:	a7 c8       	rjmp	.-3762   	; 0x160e <Tactics+0x48c>
    24c0:	c1 ff       	sbrs	r28, 1
    24c2:	d8 c0       	rjmp	.+432    	; 0x2674 <Tactics+0x14f2>
    24c4:	0c 94 51 0a 	jmp	0x14a2	; 0x14a2 <Tactics+0x320>
    24c8:	c1 ff       	sbrs	r28, 1
    24ca:	d7 c0       	rjmp	.+430    	; 0x267a <Tactics+0x14f8>
    24cc:	0a c8       	rjmp	.-4076   	; 0x14e2 <Tactics+0x360>
    24ce:	c1 ff       	sbrs	r28, 1
    24d0:	bf c0       	rjmp	.+382    	; 0x2650 <Tactics+0x14ce>
    24d2:	25 c8       	rjmp	.-4022   	; 0x151e <Tactics+0x39c>
    24d4:	c1 ff       	sbrs	r28, 1
    24d6:	bf c0       	rjmp	.+382    	; 0x2656 <Tactics+0x14d4>
    24d8:	40 c8       	rjmp	.-3968   	; 0x155a <Tactics+0x3d8>
    24da:	c1 ff       	sbrs	r28, 1
    24dc:	bf c0       	rjmp	.+382    	; 0x265c <Tactics+0x14da>
    24de:	5b c8       	rjmp	.-3914   	; 0x1596 <Tactics+0x414>
			
		}
		/* Third valid move in this line */
		temp = buffer & 0b00000100 ;
		temp = (temp >> 2) ;
		if (temp == 1)
    24e0:	c2 ff       	sbrs	r28, 2
    24e2:	eb c0       	rjmp	.+470    	; 0x26ba <Tactics+0x1538>
    24e4:	3b c9       	rjmp	.-3466   	; 0x175c <Tactics+0x5da>
    24e6:	c2 ff       	sbrs	r28, 2
    24e8:	ee c0       	rjmp	.+476    	; 0x26c6 <Tactics+0x1544>
    24ea:	56 c9       	rjmp	.-3412   	; 0x1798 <Tactics+0x616>
    24ec:	c2 ff       	sbrs	r28, 2
    24ee:	f2 c0       	rjmp	.+484    	; 0x26d4 <Tactics+0x1552>
    24f0:	71 c9       	rjmp	.-3358   	; 0x17d4 <Tactics+0x652>
    24f2:	c2 ff       	sbrs	r28, 2
    24f4:	c5 c0       	rjmp	.+394    	; 0x2680 <Tactics+0x14fe>
    24f6:	8c c9       	rjmp	.-3304   	; 0x1810 <Tactics+0x68e>
    24f8:	c2 ff       	sbrs	r28, 2
    24fa:	c9 c0       	rjmp	.+402    	; 0x268e <Tactics+0x150c>
    24fc:	d5 c8       	rjmp	.-3670   	; 0x16a8 <Tactics+0x526>
    24fe:	c2 ff       	sbrs	r28, 2
    2500:	c9 c0       	rjmp	.+402    	; 0x2694 <Tactics+0x1512>
    2502:	a4 c9       	rjmp	.-3256   	; 0x184c <Tactics+0x6ca>
    2504:	c2 ff       	sbrs	r28, 2
    2506:	cc c0       	rjmp	.+408    	; 0x26a0 <Tactics+0x151e>
    2508:	ed c8       	rjmp	.-3622   	; 0x16e4 <Tactics+0x562>
    250a:	c2 ff       	sbrs	r28, 2
    250c:	cf c0       	rjmp	.+414    	; 0x26ac <Tactics+0x152a>
    250e:	08 c9       	rjmp	.-3568   	; 0x1720 <Tactics+0x59e>
		}
		
		/* Fourth valid move in this line */
		temp = buffer & 0b00001000 ;
		temp = (temp >> 3) ;
		if (temp == 1)
    2510:	c3 ff       	sbrs	r28, 3
    2512:	02 c1       	rjmp	.+516    	; 0x2718 <Tactics+0x1596>
    2514:	a1 ca       	rjmp	.-2750   	; 0x1a58 <Tactics+0x8d6>
    2516:	c3 ff       	sbrs	r28, 3
    2518:	06 c1       	rjmp	.+524    	; 0x2726 <Tactics+0x15a4>
    251a:	ea c9       	rjmp	.-3116   	; 0x18f0 <Tactics+0x76e>
    251c:	c3 ff       	sbrs	r28, 3
    251e:	06 c1       	rjmp	.+524    	; 0x272c <Tactics+0x15aa>
    2520:	b9 ca       	rjmp	.-2702   	; 0x1a94 <Tactics+0x912>
    2522:	c3 ff       	sbrs	r28, 3
    2524:	09 c1       	rjmp	.+530    	; 0x2738 <Tactics+0x15b6>
    2526:	02 ca       	rjmp	.-3068   	; 0x192c <Tactics+0x7aa>
    2528:	c3 ff       	sbrs	r28, 3
    252a:	db c0       	rjmp	.+438    	; 0x26e2 <Tactics+0x1560>
    252c:	1d ca       	rjmp	.-3014   	; 0x1968 <Tactics+0x7e6>
    252e:	c3 ff       	sbrs	r28, 3
    2530:	df c0       	rjmp	.+446    	; 0x26f0 <Tactics+0x156e>
    2532:	38 ca       	rjmp	.-2960   	; 0x19a4 <Tactics+0x822>
    2534:	c3 ff       	sbrs	r28, 3
    2536:	e2 c0       	rjmp	.+452    	; 0x26fc <Tactics+0x157a>
    2538:	53 ca       	rjmp	.-2906   	; 0x19e0 <Tactics+0x85e>
    253a:	c3 ff       	sbrs	r28, 3
    253c:	e6 c0       	rjmp	.+460    	; 0x270a <Tactics+0x1588>
    253e:	6e ca       	rjmp	.-2852   	; 0x1a1c <Tactics+0x89a>
		}
		
		/* Fifth valid move in this line */
		temp = buffer & 0b00010000 ;
		temp = (temp >> 4) ;
		if (temp == 1)
    2540:	c4 ff       	sbrs	r28, 4
    2542:	1d c1       	rjmp	.+570    	; 0x277e <Tactics+0x15fc>
    2544:	35 cb       	rjmp	.-2454   	; 0x1bb0 <Tactics+0xa2e>
    2546:	c4 ff       	sbrs	r28, 4
    2548:	21 c1       	rjmp	.+578    	; 0x278c <Tactics+0x160a>
    254a:	50 cb       	rjmp	.-2400   	; 0x1bec <Tactics+0xa6a>
    254c:	c4 ff       	sbrs	r28, 4
    254e:	24 c1       	rjmp	.+584    	; 0x2798 <Tactics+0x1616>
    2550:	6b cb       	rjmp	.-2346   	; 0x1c28 <Tactics+0xaa6>
    2552:	c4 ff       	sbrs	r28, 4
    2554:	f7 c0       	rjmp	.+494    	; 0x2744 <Tactics+0x15c2>
    2556:	86 cb       	rjmp	.-2292   	; 0x1c64 <Tactics+0xae2>
    2558:	c4 ff       	sbrs	r28, 4
    255a:	fb c0       	rjmp	.+502    	; 0x2752 <Tactics+0x15d0>
    255c:	a1 cb       	rjmp	.-2238   	; 0x1ca0 <Tactics+0xb1e>
    255e:	c4 ff       	sbrs	r28, 4
    2560:	ff c0       	rjmp	.+510    	; 0x2760 <Tactics+0x15de>
    2562:	ea ca       	rjmp	.-2604   	; 0x1b38 <Tactics+0x9b6>
    2564:	c4 ff       	sbrs	r28, 4
    2566:	ff c0       	rjmp	.+510    	; 0x2766 <Tactics+0x15e4>
    2568:	b9 cb       	rjmp	.-2190   	; 0x1cdc <Tactics+0xb5a>
    256a:	c4 ff       	sbrs	r28, 4
    256c:	02 c1       	rjmp	.+516    	; 0x2772 <Tactics+0x15f0>
    256e:	02 cb       	rjmp	.-2556   	; 0x1b74 <Tactics+0x9f2>
		}
		
		/* Sixth valid move in this line */
		temp = buffer & 0b00100000 ;
		temp = (temp >> 5) ;
		if (temp == 1)
    2570:	c5 ff       	sbrs	r28, 5
    2572:	2d c1       	rjmp	.+602    	; 0x27ce <Tactics+0x164c>
    2574:	9b cc       	rjmp	.-1738   	; 0x1eac <Tactics+0xd2a>
    2576:	c5 ff       	sbrs	r28, 5
    2578:	31 c1       	rjmp	.+610    	; 0x27dc <Tactics+0x165a>
    257a:	b6 cc       	rjmp	.-1684   	; 0x1ee8 <Tactics+0xd66>
    257c:	c5 ff       	sbrs	r28, 5
    257e:	35 c1       	rjmp	.+618    	; 0x27ea <Tactics+0x1668>
    2580:	ff cb       	rjmp	.-2050   	; 0x1d80 <Tactics+0xbfe>
    2582:	c5 ff       	sbrs	r28, 5
    2584:	35 c1       	rjmp	.+618    	; 0x27f0 <Tactics+0x166e>
    2586:	ce cc       	rjmp	.-1636   	; 0x1f24 <Tactics+0xda2>
    2588:	c5 ff       	sbrs	r28, 5
    258a:	38 c1       	rjmp	.+624    	; 0x27fc <Tactics+0x167a>
    258c:	17 cc       	rjmp	.-2002   	; 0x1dbc <Tactics+0xc3a>
    258e:	c5 ff       	sbrs	r28, 5
    2590:	0a c1       	rjmp	.+532    	; 0x27a6 <Tactics+0x1624>
    2592:	32 cc       	rjmp	.-1948   	; 0x1df8 <Tactics+0xc76>
    2594:	c5 ff       	sbrs	r28, 5
    2596:	0e c1       	rjmp	.+540    	; 0x27b4 <Tactics+0x1632>
    2598:	4d cc       	rjmp	.-1894   	; 0x1e34 <Tactics+0xcb2>
    259a:	c5 ff       	sbrs	r28, 5
    259c:	11 c1       	rjmp	.+546    	; 0x27c0 <Tactics+0x163e>
    259e:	68 cc       	rjmp	.-1840   	; 0x1e70 <Tactics+0xcee>
		}
		
		/* Seventh valid move in this line */
		temp = buffer & 0b01000000 ;
		temp = (temp >> 6) ;
		if (temp == 1)
    25a0:	c6 ff       	sbrs	r28, 6
    25a2:	5c c1       	rjmp	.+696    	; 0x285c <Tactics+0x16da>
    25a4:	4d cd       	rjmp	.-1382   	; 0x2040 <Tactics+0xebe>
    25a6:	c6 ff       	sbrs	r28, 6
    25a8:	61 c1       	rjmp	.+706    	; 0x286c <Tactics+0x16ea>
    25aa:	68 cd       	rjmp	.-1328   	; 0x207c <Tactics+0xefa>
    25ac:	c6 ff       	sbrs	r28, 6
    25ae:	2c c1       	rjmp	.+600    	; 0x2808 <Tactics+0x1686>
    25b0:	83 cd       	rjmp	.-1274   	; 0x20b8 <Tactics+0xf36>
    25b2:	c6 ff       	sbrs	r28, 6
    25b4:	31 c1       	rjmp	.+610    	; 0x2818 <Tactics+0x1696>
    25b6:	9e cd       	rjmp	.-1220   	; 0x20f4 <Tactics+0xf72>
    25b8:	c6 ff       	sbrs	r28, 6
    25ba:	36 c1       	rjmp	.+620    	; 0x2828 <Tactics+0x16a6>
    25bc:	b9 cd       	rjmp	.-1166   	; 0x2130 <Tactics+0xfae>
    25be:	c6 ff       	sbrs	r28, 6
    25c0:	3b c1       	rjmp	.+630    	; 0x2838 <Tactics+0x16b6>
    25c2:	02 cd       	rjmp	.-1532   	; 0x1fc8 <Tactics+0xe46>
    25c4:	c6 ff       	sbrs	r28, 6
    25c6:	3c c1       	rjmp	.+632    	; 0x2840 <Tactics+0x16be>
    25c8:	d4 cd       	rjmp	.-1112   	; 0x2172 <Tactics+0xff0>
    25ca:	c6 ff       	sbrs	r28, 6
    25cc:	40 c1       	rjmp	.+640    	; 0x284e <Tactics+0x16cc>
    25ce:	1a cd       	rjmp	.-1484   	; 0x2004 <Tactics+0xe82>
		}
		
		/* Eighth valid move in this line */
		temp = buffer & 0b10000000 ;
		temp = (temp >> 7) ;
		if (temp == 1)
    25d0:	cc 23       	and	r28, r28
    25d2:	0c f4       	brge	.+2      	; 0x25d6 <Tactics+0x1454>
    25d4:	c0 ce       	rjmp	.-640    	; 0x2356 <Tactics+0x11d4>
    25d6:	0f 2e       	mov	r0, r31
    25d8:	f5 e0       	ldi	r31, 0x05	; 5
    25da:	ef 2e       	mov	r14, r31
    25dc:	f0 2d       	mov	r31, r0
    25de:	60 cf       	rjmp	.-320    	; 0x24a0 <Tactics+0x131e>
    25e0:	cc 23       	and	r28, r28
    25e2:	0c f4       	brge	.+2      	; 0x25e6 <Tactics+0x1464>
    25e4:	da ce       	rjmp	.-588    	; 0x239a <Tactics+0x1218>
    25e6:	0f 2e       	mov	r0, r31
    25e8:	f6 e0       	ldi	r31, 0x06	; 6
    25ea:	ef 2e       	mov	r14, r31
    25ec:	f0 2d       	mov	r31, r0
    25ee:	58 cf       	rjmp	.-336    	; 0x24a0 <Tactics+0x131e>
    25f0:	cc 23       	and	r28, r28
    25f2:	0c f4       	brge	.+2      	; 0x25f6 <Tactics+0x1474>
    25f4:	f4 ce       	rjmp	.-536    	; 0x23de <Tactics+0x125c>
    25f6:	0f 2e       	mov	r0, r31
    25f8:	f7 e0       	ldi	r31, 0x07	; 7
    25fa:	ef 2e       	mov	r14, r31
    25fc:	f0 2d       	mov	r31, r0
    25fe:	50 cf       	rjmp	.-352    	; 0x24a0 <Tactics+0x131e>
    2600:	cc 23       	and	r28, r28
    2602:	0c f0       	brlt	.+2      	; 0x2606 <Tactics+0x1484>
    2604:	4d cf       	rjmp	.-358    	; 0x24a0 <Tactics+0x131e>
    2606:	21 ce       	rjmp	.-958    	; 0x224a <Tactics+0x10c8>
		{
			column = 8 ;
			count++ ;
    2608:	e3 94       	inc	r14
    260a:	0e cf       	rjmp	.-484    	; 0x2428 <Tactics+0x12a6>
		temp = buffer & 0b01000000 ;
		temp = (temp >> 6) ;
		if (temp == 1)
		{
			column = 7 ;
			count++ ;
    260c:	68 94       	set
    260e:	ee 24       	eor	r14, r14
    2610:	e3 f8       	bld	r14, 3
    2612:	04 c0       	rjmp	.+8      	; 0x261c <Tactics+0x149a>
    2614:	0f 2e       	mov	r0, r31
    2616:	f9 e0       	ldi	r31, 0x09	; 9
    2618:	ef 2e       	mov	r14, r31
    261a:	f0 2d       	mov	r31, r0
		}
		
		/* Eighth valid move in this line */
		temp = buffer & 0b10000000 ;
		temp = (temp >> 7) ;
		if (temp == 1)
    261c:	cc 23       	and	r28, r28
    261e:	0c f0       	brlt	.+2      	; 0x2622 <Tactics+0x14a0>
    2620:	3f cf       	rjmp	.-386    	; 0x24a0 <Tactics+0x131e>
    2622:	f2 cf       	rjmp	.-28     	; 0x2608 <Tactics+0x1486>
    2624:	cc 23       	and	r28, r28
    2626:	0c f4       	brge	.+2      	; 0x262a <Tactics+0x14a8>
    2628:	31 ce       	rjmp	.-926    	; 0x228c <Tactics+0x110a>
    262a:	68 94       	set
    262c:	ee 24       	eor	r14, r14
    262e:	e1 f8       	bld	r14, 1
    2630:	37 cf       	rjmp	.-402    	; 0x24a0 <Tactics+0x131e>
    2632:	cc 23       	and	r28, r28
    2634:	0c f4       	brge	.+2      	; 0x2638 <Tactics+0x14b6>
    2636:	4c ce       	rjmp	.-872    	; 0x22d0 <Tactics+0x114e>
    2638:	0f 2e       	mov	r0, r31
    263a:	f3 e0       	ldi	r31, 0x03	; 3
    263c:	ef 2e       	mov	r14, r31
    263e:	f0 2d       	mov	r31, r0
    2640:	2f cf       	rjmp	.-418    	; 0x24a0 <Tactics+0x131e>
    2642:	cc 23       	and	r28, r28
    2644:	0c f4       	brge	.+2      	; 0x2648 <Tactics+0x14c6>
    2646:	65 ce       	rjmp	.-822    	; 0x2312 <Tactics+0x1190>
    2648:	68 94       	set
    264a:	ee 24       	eor	r14, r14
    264c:	e2 f8       	bld	r14, 2
    264e:	28 cf       	rjmp	.-432    	; 0x24a0 <Tactics+0x131e>
			
		}
		/* Third valid move in this line */
		temp = buffer & 0b00000100 ;
		temp = (temp >> 2) ;
		if (temp == 1)
    2650:	c2 ff       	sbrs	r28, 2
    2652:	21 c9       	rjmp	.-3518   	; 0x1896 <Tactics+0x714>
    2654:	83 c8       	rjmp	.-3834   	; 0x175c <Tactics+0x5da>
    2656:	c2 ff       	sbrs	r28, 2
    2658:	1e c9       	rjmp	.-3524   	; 0x1896 <Tactics+0x714>
    265a:	9e c8       	rjmp	.-3780   	; 0x1798 <Tactics+0x616>
    265c:	c2 ff       	sbrs	r28, 2
    265e:	1b c9       	rjmp	.-3530   	; 0x1896 <Tactics+0x714>
    2660:	b9 c8       	rjmp	.-3726   	; 0x17d4 <Tactics+0x652>
    2662:	c2 ff       	sbrs	r28, 2
    2664:	18 c9       	rjmp	.-3536   	; 0x1896 <Tactics+0x714>
    2666:	d4 c8       	rjmp	.-3672   	; 0x1810 <Tactics+0x68e>
    2668:	c2 ff       	sbrs	r28, 2
    266a:	15 c9       	rjmp	.-3542   	; 0x1896 <Tactics+0x714>
    266c:	1d c8       	rjmp	.-4038   	; 0x16a8 <Tactics+0x526>
    266e:	c2 ff       	sbrs	r28, 2
    2670:	12 c9       	rjmp	.-3548   	; 0x1896 <Tactics+0x714>
    2672:	f1 c8       	rjmp	.-3614   	; 0x1856 <Tactics+0x6d4>
    2674:	c2 ff       	sbrs	r28, 2
    2676:	0f c9       	rjmp	.-3554   	; 0x1896 <Tactics+0x714>
    2678:	35 c8       	rjmp	.-3990   	; 0x16e4 <Tactics+0x562>
    267a:	c2 ff       	sbrs	r28, 2
    267c:	0c c9       	rjmp	.-3560   	; 0x1896 <Tactics+0x714>
    267e:	50 c8       	rjmp	.-3936   	; 0x1720 <Tactics+0x59e>
		}
		
		/* Fourth valid move in this line */
		temp = buffer & 0b00001000 ;
		temp = (temp >> 3) ;
		if (temp == 1)
    2680:	c3 fd       	sbrc	r28, 3
    2682:	ea c9       	rjmp	.-3116   	; 0x1a58 <Tactics+0x8d6>
    2684:	0f 2e       	mov	r0, r31
    2686:	f7 e0       	ldi	r31, 0x07	; 7
    2688:	ef 2e       	mov	r14, r31
    268a:	f0 2d       	mov	r31, r0
    268c:	28 ca       	rjmp	.-2992   	; 0x1ade <Tactics+0x95c>
    268e:	c3 ff       	sbrs	r28, 3
    2690:	26 ca       	rjmp	.-2996   	; 0x1ade <Tactics+0x95c>
    2692:	2e c9       	rjmp	.-3492   	; 0x18f0 <Tactics+0x76e>
    2694:	c3 fd       	sbrc	r28, 3
    2696:	03 ca       	rjmp	.-3066   	; 0x1a9e <Tactics+0x91c>
    2698:	68 94       	set
    269a:	ee 24       	eor	r14, r14
    269c:	e3 f8       	bld	r14, 3
    269e:	1f ca       	rjmp	.-3010   	; 0x1ade <Tactics+0x95c>
    26a0:	c3 fd       	sbrc	r28, 3
    26a2:	44 c9       	rjmp	.-3448   	; 0x192c <Tactics+0x7aa>
    26a4:	68 94       	set
    26a6:	ee 24       	eor	r14, r14
    26a8:	e1 f8       	bld	r14, 1
    26aa:	19 ca       	rjmp	.-3022   	; 0x1ade <Tactics+0x95c>
    26ac:	c3 fd       	sbrc	r28, 3
    26ae:	5c c9       	rjmp	.-3400   	; 0x1968 <Tactics+0x7e6>
    26b0:	0f 2e       	mov	r0, r31
    26b2:	f3 e0       	ldi	r31, 0x03	; 3
    26b4:	ef 2e       	mov	r14, r31
    26b6:	f0 2d       	mov	r31, r0
    26b8:	12 ca       	rjmp	.-3036   	; 0x1ade <Tactics+0x95c>
    26ba:	c3 fd       	sbrc	r28, 3
    26bc:	73 c9       	rjmp	.-3354   	; 0x19a4 <Tactics+0x822>
    26be:	68 94       	set
    26c0:	ee 24       	eor	r14, r14
    26c2:	e2 f8       	bld	r14, 2
    26c4:	0c ca       	rjmp	.-3048   	; 0x1ade <Tactics+0x95c>
    26c6:	c3 fd       	sbrc	r28, 3
    26c8:	8b c9       	rjmp	.-3306   	; 0x19e0 <Tactics+0x85e>
    26ca:	0f 2e       	mov	r0, r31
    26cc:	f5 e0       	ldi	r31, 0x05	; 5
    26ce:	ef 2e       	mov	r14, r31
    26d0:	f0 2d       	mov	r31, r0
    26d2:	05 ca       	rjmp	.-3062   	; 0x1ade <Tactics+0x95c>
    26d4:	c3 fd       	sbrc	r28, 3
    26d6:	a2 c9       	rjmp	.-3260   	; 0x1a1c <Tactics+0x89a>
    26d8:	0f 2e       	mov	r0, r31
    26da:	f6 e0       	ldi	r31, 0x06	; 6
    26dc:	ef 2e       	mov	r14, r31
    26de:	f0 2d       	mov	r31, r0
    26e0:	fe c9       	rjmp	.-3076   	; 0x1ade <Tactics+0x95c>
		}
		
		/* Fifth valid move in this line */
		temp = buffer & 0b00010000 ;
		temp = (temp >> 4) ;
		if (temp == 1)
    26e2:	c4 fd       	sbrc	r28, 4
    26e4:	65 ca       	rjmp	.-2870   	; 0x1bb0 <Tactics+0xa2e>
    26e6:	0f 2e       	mov	r0, r31
    26e8:	f3 e0       	ldi	r31, 0x03	; 3
    26ea:	ef 2e       	mov	r14, r31
    26ec:	f0 2d       	mov	r31, r0
    26ee:	1b cb       	rjmp	.-2506   	; 0x1d26 <Tactics+0xba4>
    26f0:	c4 fd       	sbrc	r28, 4
    26f2:	7c ca       	rjmp	.-2824   	; 0x1bec <Tactics+0xa6a>
    26f4:	68 94       	set
    26f6:	ee 24       	eor	r14, r14
    26f8:	e2 f8       	bld	r14, 2
    26fa:	15 cb       	rjmp	.-2518   	; 0x1d26 <Tactics+0xba4>
    26fc:	c4 fd       	sbrc	r28, 4
    26fe:	94 ca       	rjmp	.-2776   	; 0x1c28 <Tactics+0xaa6>
    2700:	0f 2e       	mov	r0, r31
    2702:	f5 e0       	ldi	r31, 0x05	; 5
    2704:	ef 2e       	mov	r14, r31
    2706:	f0 2d       	mov	r31, r0
    2708:	0e cb       	rjmp	.-2532   	; 0x1d26 <Tactics+0xba4>
    270a:	c4 fd       	sbrc	r28, 4
    270c:	ab ca       	rjmp	.-2730   	; 0x1c64 <Tactics+0xae2>
    270e:	0f 2e       	mov	r0, r31
    2710:	f6 e0       	ldi	r31, 0x06	; 6
    2712:	ef 2e       	mov	r14, r31
    2714:	f0 2d       	mov	r31, r0
    2716:	07 cb       	rjmp	.-2546   	; 0x1d26 <Tactics+0xba4>
    2718:	c4 fd       	sbrc	r28, 4
    271a:	c2 ca       	rjmp	.-2684   	; 0x1ca0 <Tactics+0xb1e>
    271c:	0f 2e       	mov	r0, r31
    271e:	f7 e0       	ldi	r31, 0x07	; 7
    2720:	ef 2e       	mov	r14, r31
    2722:	f0 2d       	mov	r31, r0
    2724:	00 cb       	rjmp	.-2560   	; 0x1d26 <Tactics+0xba4>
    2726:	c4 ff       	sbrs	r28, 4
    2728:	fe ca       	rjmp	.-2564   	; 0x1d26 <Tactics+0xba4>
    272a:	06 ca       	rjmp	.-3060   	; 0x1b38 <Tactics+0x9b6>
    272c:	c4 fd       	sbrc	r28, 4
    272e:	db ca       	rjmp	.-2634   	; 0x1ce6 <Tactics+0xb64>
    2730:	68 94       	set
    2732:	ee 24       	eor	r14, r14
    2734:	e3 f8       	bld	r14, 3
    2736:	f7 ca       	rjmp	.-2578   	; 0x1d26 <Tactics+0xba4>
    2738:	c4 fd       	sbrc	r28, 4
    273a:	1c ca       	rjmp	.-3016   	; 0x1b74 <Tactics+0x9f2>
    273c:	68 94       	set
    273e:	ee 24       	eor	r14, r14
    2740:	e1 f8       	bld	r14, 1
    2742:	f1 ca       	rjmp	.-2590   	; 0x1d26 <Tactics+0xba4>
		}
		
		/* Sixth valid move in this line */
		temp = buffer & 0b00100000 ;
		temp = (temp >> 5) ;
		if (temp == 1)
    2744:	c5 fd       	sbrc	r28, 5
    2746:	b2 cb       	rjmp	.-2204   	; 0x1eac <Tactics+0xd2a>
    2748:	0f 2e       	mov	r0, r31
    274a:	f6 e0       	ldi	r31, 0x06	; 6
    274c:	ef 2e       	mov	r14, r31
    274e:	f0 2d       	mov	r31, r0
    2750:	0e cc       	rjmp	.-2020   	; 0x1f6e <Tactics+0xdec>
    2752:	c5 fd       	sbrc	r28, 5
    2754:	c9 cb       	rjmp	.-2158   	; 0x1ee8 <Tactics+0xd66>
    2756:	0f 2e       	mov	r0, r31
    2758:	f7 e0       	ldi	r31, 0x07	; 7
    275a:	ef 2e       	mov	r14, r31
    275c:	f0 2d       	mov	r31, r0
    275e:	07 cc       	rjmp	.-2034   	; 0x1f6e <Tactics+0xdec>
    2760:	c5 ff       	sbrs	r28, 5
    2762:	05 cc       	rjmp	.-2038   	; 0x1f6e <Tactics+0xdec>
    2764:	0d cb       	rjmp	.-2534   	; 0x1d80 <Tactics+0xbfe>
    2766:	c5 fd       	sbrc	r28, 5
    2768:	e2 cb       	rjmp	.-2108   	; 0x1f2e <Tactics+0xdac>
    276a:	68 94       	set
    276c:	ee 24       	eor	r14, r14
    276e:	e3 f8       	bld	r14, 3
    2770:	fe cb       	rjmp	.-2052   	; 0x1f6e <Tactics+0xdec>
    2772:	c5 fd       	sbrc	r28, 5
    2774:	23 cb       	rjmp	.-2490   	; 0x1dbc <Tactics+0xc3a>
    2776:	68 94       	set
    2778:	ee 24       	eor	r14, r14
    277a:	e1 f8       	bld	r14, 1
    277c:	f8 cb       	rjmp	.-2064   	; 0x1f6e <Tactics+0xdec>
    277e:	c5 fd       	sbrc	r28, 5
    2780:	3b cb       	rjmp	.-2442   	; 0x1df8 <Tactics+0xc76>
    2782:	0f 2e       	mov	r0, r31
    2784:	f3 e0       	ldi	r31, 0x03	; 3
    2786:	ef 2e       	mov	r14, r31
    2788:	f0 2d       	mov	r31, r0
    278a:	f1 cb       	rjmp	.-2078   	; 0x1f6e <Tactics+0xdec>
    278c:	c5 fd       	sbrc	r28, 5
    278e:	52 cb       	rjmp	.-2396   	; 0x1e34 <Tactics+0xcb2>
    2790:	68 94       	set
    2792:	ee 24       	eor	r14, r14
    2794:	e2 f8       	bld	r14, 2
    2796:	eb cb       	rjmp	.-2090   	; 0x1f6e <Tactics+0xdec>
    2798:	c5 fd       	sbrc	r28, 5
    279a:	6a cb       	rjmp	.-2348   	; 0x1e70 <Tactics+0xcee>
    279c:	0f 2e       	mov	r0, r31
    279e:	f5 e0       	ldi	r31, 0x05	; 5
    27a0:	ef 2e       	mov	r14, r31
    27a2:	f0 2d       	mov	r31, r0
    27a4:	e4 cb       	rjmp	.-2104   	; 0x1f6e <Tactics+0xdec>
		}
		
		/* Seventh valid move in this line */
		temp = buffer & 0b01000000 ;
		temp = (temp >> 6) ;
		if (temp == 1)
    27a6:	c6 fd       	sbrc	r28, 6
    27a8:	4b cc       	rjmp	.-1898   	; 0x2040 <Tactics+0xebe>
    27aa:	0f 2e       	mov	r0, r31
    27ac:	f3 e0       	ldi	r31, 0x03	; 3
    27ae:	ef 2e       	mov	r14, r31
    27b0:	f0 2d       	mov	r31, r0
    27b2:	1d cd       	rjmp	.-1478   	; 0x21ee <Tactics+0x106c>
    27b4:	c6 fd       	sbrc	r28, 6
    27b6:	62 cc       	rjmp	.-1852   	; 0x207c <Tactics+0xefa>
    27b8:	68 94       	set
    27ba:	ee 24       	eor	r14, r14
    27bc:	e2 f8       	bld	r14, 2
    27be:	17 cd       	rjmp	.-1490   	; 0x21ee <Tactics+0x106c>
    27c0:	c6 fd       	sbrc	r28, 6
    27c2:	7a cc       	rjmp	.-1804   	; 0x20b8 <Tactics+0xf36>
    27c4:	0f 2e       	mov	r0, r31
    27c6:	f5 e0       	ldi	r31, 0x05	; 5
    27c8:	ef 2e       	mov	r14, r31
    27ca:	f0 2d       	mov	r31, r0
    27cc:	10 cd       	rjmp	.-1504   	; 0x21ee <Tactics+0x106c>
    27ce:	c6 fd       	sbrc	r28, 6
    27d0:	91 cc       	rjmp	.-1758   	; 0x20f4 <Tactics+0xf72>
    27d2:	0f 2e       	mov	r0, r31
    27d4:	f6 e0       	ldi	r31, 0x06	; 6
    27d6:	ef 2e       	mov	r14, r31
    27d8:	f0 2d       	mov	r31, r0
    27da:	09 cd       	rjmp	.-1518   	; 0x21ee <Tactics+0x106c>
    27dc:	c6 fd       	sbrc	r28, 6
    27de:	a8 cc       	rjmp	.-1712   	; 0x2130 <Tactics+0xfae>
    27e0:	0f 2e       	mov	r0, r31
    27e2:	f7 e0       	ldi	r31, 0x07	; 7
    27e4:	ef 2e       	mov	r14, r31
    27e6:	f0 2d       	mov	r31, r0
    27e8:	02 cd       	rjmp	.-1532   	; 0x21ee <Tactics+0x106c>
    27ea:	c6 ff       	sbrs	r28, 6
    27ec:	00 cd       	rjmp	.-1536   	; 0x21ee <Tactics+0x106c>
    27ee:	ec cb       	rjmp	.-2088   	; 0x1fc8 <Tactics+0xe46>
    27f0:	c6 fd       	sbrc	r28, 6
    27f2:	bf cc       	rjmp	.-1666   	; 0x2172 <Tactics+0xff0>
    27f4:	68 94       	set
    27f6:	ee 24       	eor	r14, r14
    27f8:	e3 f8       	bld	r14, 3
    27fa:	f9 cc       	rjmp	.-1550   	; 0x21ee <Tactics+0x106c>
    27fc:	c6 fd       	sbrc	r28, 6
    27fe:	02 cc       	rjmp	.-2044   	; 0x2004 <Tactics+0xe82>
    2800:	68 94       	set
    2802:	ee 24       	eor	r14, r14
    2804:	e1 f8       	bld	r14, 1
    2806:	f3 cc       	rjmp	.-1562   	; 0x21ee <Tactics+0x106c>
		}
		
		/* Eighth valid move in this line */
		temp = buffer & 0b10000000 ;
		temp = (temp >> 7) ;
		if (temp == 1)
    2808:	cc 23       	and	r28, r28
    280a:	0c f4       	brge	.+2      	; 0x280e <Tactics+0x168c>
    280c:	a4 cd       	rjmp	.-1208   	; 0x2356 <Tactics+0x11d4>
    280e:	0f 2e       	mov	r0, r31
    2810:	f5 e0       	ldi	r31, 0x05	; 5
    2812:	ef 2e       	mov	r14, r31
    2814:	f0 2d       	mov	r31, r0
    2816:	44 ce       	rjmp	.-888    	; 0x24a0 <Tactics+0x131e>
    2818:	cc 23       	and	r28, r28
    281a:	0c f4       	brge	.+2      	; 0x281e <Tactics+0x169c>
    281c:	be cd       	rjmp	.-1156   	; 0x239a <Tactics+0x1218>
    281e:	0f 2e       	mov	r0, r31
    2820:	f6 e0       	ldi	r31, 0x06	; 6
    2822:	ef 2e       	mov	r14, r31
    2824:	f0 2d       	mov	r31, r0
    2826:	3c ce       	rjmp	.-904    	; 0x24a0 <Tactics+0x131e>
    2828:	cc 23       	and	r28, r28
    282a:	0c f4       	brge	.+2      	; 0x282e <Tactics+0x16ac>
    282c:	d8 cd       	rjmp	.-1104   	; 0x23de <Tactics+0x125c>
    282e:	0f 2e       	mov	r0, r31
    2830:	f7 e0       	ldi	r31, 0x07	; 7
    2832:	ef 2e       	mov	r14, r31
    2834:	f0 2d       	mov	r31, r0
    2836:	34 ce       	rjmp	.-920    	; 0x24a0 <Tactics+0x131e>
    2838:	cc 23       	and	r28, r28
    283a:	0c f0       	brlt	.+2      	; 0x283e <Tactics+0x16bc>
    283c:	31 ce       	rjmp	.-926    	; 0x24a0 <Tactics+0x131e>
    283e:	05 cd       	rjmp	.-1526   	; 0x224a <Tactics+0x10c8>
    2840:	cc 23       	and	r28, r28
    2842:	0c f4       	brge	.+2      	; 0x2846 <Tactics+0x16c4>
    2844:	ed cd       	rjmp	.-1062   	; 0x2420 <Tactics+0x129e>
    2846:	68 94       	set
    2848:	ee 24       	eor	r14, r14
    284a:	e3 f8       	bld	r14, 3
    284c:	29 ce       	rjmp	.-942    	; 0x24a0 <Tactics+0x131e>
    284e:	cc 23       	and	r28, r28
    2850:	0c f4       	brge	.+2      	; 0x2854 <Tactics+0x16d2>
    2852:	1c cd       	rjmp	.-1480   	; 0x228c <Tactics+0x110a>
    2854:	68 94       	set
    2856:	ee 24       	eor	r14, r14
    2858:	e1 f8       	bld	r14, 1
    285a:	22 ce       	rjmp	.-956    	; 0x24a0 <Tactics+0x131e>
    285c:	cc 23       	and	r28, r28
    285e:	0c f4       	brge	.+2      	; 0x2862 <Tactics+0x16e0>
    2860:	37 cd       	rjmp	.-1426   	; 0x22d0 <Tactics+0x114e>
    2862:	0f 2e       	mov	r0, r31
    2864:	f3 e0       	ldi	r31, 0x03	; 3
    2866:	ef 2e       	mov	r14, r31
    2868:	f0 2d       	mov	r31, r0
    286a:	1a ce       	rjmp	.-972    	; 0x24a0 <Tactics+0x131e>
    286c:	cc 23       	and	r28, r28
    286e:	0c f4       	brge	.+2      	; 0x2872 <Tactics+0x16f0>
    2870:	50 cd       	rjmp	.-1376   	; 0x2312 <Tactics+0x1190>
    2872:	68 94       	set
    2874:	ee 24       	eor	r14, r14
    2876:	e2 f8       	bld	r14, 2
    2878:	13 ce       	rjmp	.-986    	; 0x24a0 <Tactics+0x131e>
				break;
			}
			
		}
	}
}
    287a:	df 91       	pop	r29
    287c:	cf 91       	pop	r28
    287e:	1f 91       	pop	r17
    2880:	0f 91       	pop	r16
    2882:	ff 90       	pop	r15
    2884:	ef 90       	pop	r14
    2886:	df 90       	pop	r13
    2888:	bf 90       	pop	r11
    288a:	af 90       	pop	r10
    288c:	08 95       	ret

0000288e <main>:
char myLine = 'A' ;
uint8_t myColumn = 1 ;

int main(void)
{
	tableInit() ;
    288e:	0e 94 63 08 	call	0x10c6	; 0x10c6 <tableInit>
	mine = 'W' ;
    2892:	87 e5       	ldi	r24, 0x57	; 87
    2894:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <mine>
	enemy = 'B' ;
    2898:	82 e4       	ldi	r24, 0x42	; 66
    289a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <enemy>
	DDRB = 255 ; 
    289e:	8f ef       	ldi	r24, 0xFF	; 255
    28a0:	87 bb       	out	0x17, r24	; 23
	PORTB = 0 ;
    28a2:	18 ba       	out	0x18, r1	; 24
	
	scanChessboard(mine) ;
    28a4:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <mine>
    28a8:	0e 94 04 05 	call	0xa08	; 0xa08 <scanChessboard>
	
	if (checkEnemyMove('E',6) == 1)
    28ac:	66 e0       	ldi	r22, 0x06	; 6
    28ae:	85 e4       	ldi	r24, 0x45	; 69
    28b0:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <checkEnemyMove>
    28b4:	81 30       	cpi	r24, 0x01	; 1
    28b6:	91 f4       	brne	.+36     	; 0x28dc <main+0x4e>
	{
		setChecker('E',6,enemy,table) ;
    28b8:	26 ea       	ldi	r18, 0xA6	; 166
    28ba:	30 e0       	ldi	r19, 0x00	; 0
    28bc:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <enemy>
    28c0:	66 e0       	ldi	r22, 0x06	; 6
    28c2:	85 e4       	ldi	r24, 0x45	; 69
    28c4:	0e 94 8a 00 	call	0x114	; 0x114 <setChecker>
		TurnOtherCheckers('E',6,mine,enemy,table) ;
    28c8:	06 ea       	ldi	r16, 0xA6	; 166
    28ca:	10 e0       	ldi	r17, 0x00	; 0
    28cc:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <enemy>
    28d0:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <mine>
    28d4:	66 e0       	ldi	r22, 0x06	; 6
    28d6:	85 e4       	ldi	r24, 0x45	; 69
    28d8:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TurnOtherCheckers>
	}
	clearValidMoves() ;
    28dc:	0e 94 53 08 	call	0x10a6	; 0x10a6 <clearValidMoves>
	scanChessboard(mine) ;
    28e0:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <mine>
    28e4:	0e 94 04 05 	call	0xa08	; 0xa08 <scanChessboard>
	Tactics(mine) ;
    28e8:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <mine>
    28ec:	0e 94 c1 08 	call	0x1182	; 0x1182 <Tactics>
	
	if (myLine == 'F' && myColumn == 4)
    28f0:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <myLine>
    28f4:	86 34       	cpi	r24, 0x46	; 70
    28f6:	71 f4       	brne	.+28     	; 0x2914 <main+0x86>
    28f8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
    28fc:	84 30       	cpi	r24, 0x04	; 4
    28fe:	21 f4       	brne	.+8      	; 0x2908 <main+0x7a>
	{
		PORTB |= 255 ;
    2900:	88 b3       	in	r24, 0x18	; 24
    2902:	8f ef       	ldi	r24, 0xFF	; 255
    2904:	88 bb       	out	0x18, r24	; 24
    2906:	1c c0       	rjmp	.+56     	; 0x2940 <main+0xb2>
	}
	else if (myLine == 'F' && myColumn == 6)
    2908:	86 30       	cpi	r24, 0x06	; 6
    290a:	c1 f4       	brne	.+48     	; 0x293c <main+0xae>
	{
		PORTB |= 255 ;
    290c:	88 b3       	in	r24, 0x18	; 24
    290e:	8f ef       	ldi	r24, 0xFF	; 255
    2910:	88 bb       	out	0x18, r24	; 24
    2912:	16 c0       	rjmp	.+44     	; 0x2940 <main+0xb2>
	}
	else if (myLine == 'D' && myColumn == 6)
    2914:	84 34       	cpi	r24, 0x44	; 68
    2916:	41 f4       	brne	.+16     	; 0x2928 <main+0x9a>
    2918:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
    291c:	86 30       	cpi	r24, 0x06	; 6
    291e:	71 f4       	brne	.+28     	; 0x293c <main+0xae>
	{
		PORTB |= 255 ;
    2920:	88 b3       	in	r24, 0x18	; 24
    2922:	8f ef       	ldi	r24, 0xFF	; 255
    2924:	88 bb       	out	0x18, r24	; 24
    2926:	0c c0       	rjmp	.+24     	; 0x2940 <main+0xb2>
	}
	else if (myLine == 'H' && myColumn == 5)
    2928:	88 34       	cpi	r24, 0x48	; 72
    292a:	41 f4       	brne	.+16     	; 0x293c <main+0xae>
    292c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
    2930:	85 30       	cpi	r24, 0x05	; 5
    2932:	21 f4       	brne	.+8      	; 0x293c <main+0xae>
	{
		PORTB |= 255 ;
    2934:	88 b3       	in	r24, 0x18	; 24
    2936:	8f ef       	ldi	r24, 0xFF	; 255
    2938:	88 bb       	out	0x18, r24	; 24
    293a:	02 c0       	rjmp	.+4      	; 0x2940 <main+0xb2>
	}
	else
	{
		PORTB |= 0 ;
    293c:	88 b3       	in	r24, 0x18	; 24
    293e:	88 bb       	out	0x18, r24	; 24
    2940:	ff cf       	rjmp	.-2      	; 0x2940 <main+0xb2>

00002942 <__tablejump2__>:
    2942:	ee 0f       	add	r30, r30
    2944:	ff 1f       	adc	r31, r31
    2946:	05 90       	lpm	r0, Z+
    2948:	f4 91       	lpm	r31, Z
    294a:	e0 2d       	mov	r30, r0
    294c:	09 94       	ijmp

0000294e <_exit>:
    294e:	f8 94       	cli

00002950 <__stop_program>:
    2950:	ff cf       	rjmp	.-2      	; 0x2950 <__stop_program>
