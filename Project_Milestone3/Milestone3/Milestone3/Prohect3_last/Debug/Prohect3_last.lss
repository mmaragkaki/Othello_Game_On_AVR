
Prohect3_last.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000217c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  0000217c  00002210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000136  00800078  00800078  00002228  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002228  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002258  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00002294  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003910  00000000  00000000  0000239c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d3  00000000  00000000  00005cac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001e71  00000000  00000000  0000647f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003d0  00000000  00000000  000082f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ff  00000000  00000000  000086c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002f57  00000000  00000000  00008cbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  0000bc16  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 9a 00 	jmp	0x134	; 0x134 <__ctors_end>
       4:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
       8:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
       c:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
      10:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
      14:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
      18:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__vector_6>
      1c:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
      20:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
      24:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
      28:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
      2c:	0c 94 86 10 	jmp	0x210c	; 0x210c <__vector_11>
      30:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
      34:	0c 94 b9 00 	jmp	0x172	; 0x172 <__vector_13>
      38:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
      3c:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
      40:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
      44:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
      48:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
      4c:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
      50:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
      54:	7c 09       	sbc	r23, r12
      56:	86 09       	sbc	r24, r6
      58:	90 09       	sbc	r25, r0
      5a:	9a 09       	sbc	r25, r10
      5c:	a4 09       	sbc	r26, r4
      5e:	ae 09       	sbc	r26, r14
      60:	b8 09       	sbc	r27, r8
      62:	c2 09       	sbc	r28, r2
      64:	cc 09       	sbc	r28, r12
      66:	d6 09       	sbc	r29, r6
      68:	e0 09       	sbc	r30, r0
      6a:	ea 09       	sbc	r30, r10
      6c:	f4 09       	sbc	r31, r4
      6e:	fe 09       	sbc	r31, r14
      70:	44 0a       	sbc	r4, r20
      72:	4e 0a       	sbc	r4, r30
      74:	58 0a       	sbc	r5, r24
      76:	62 0a       	sbc	r6, r18
      78:	6c 0a       	sbc	r6, r28
      7a:	76 0a       	sbc	r7, r22
      7c:	80 0a       	sbc	r8, r16
      7e:	8a 0a       	sbc	r8, r26
      80:	c6 0a       	sbc	r12, r22
      82:	94 0a       	sbc	r9, r20
      84:	9e 0a       	sbc	r9, r30
      86:	a8 0a       	sbc	r10, r24
      88:	b2 0a       	sbc	r11, r18
      8a:	bc 0a       	sbc	r11, r28
      8c:	f1 0a       	sbc	r15, r17
      8e:	fb 0a       	sbc	r15, r27
      90:	05 0b       	sbc	r16, r21
      92:	0f 0b       	sbc	r16, r31
      94:	19 0b       	sbc	r17, r25
      96:	23 0b       	sbc	r18, r19
      98:	2d 0b       	sbc	r18, r29
      9a:	37 0b       	sbc	r19, r23
      9c:	73 0b       	sbc	r23, r19
      9e:	41 0b       	sbc	r20, r17
      a0:	4b 0b       	sbc	r20, r27
      a2:	55 0b       	sbc	r21, r21
      a4:	5f 0b       	sbc	r21, r31
      a6:	69 0b       	sbc	r22, r25
      a8:	9e 0b       	sbc	r25, r30
      aa:	a8 0b       	sbc	r26, r24
      ac:	b2 0b       	sbc	r27, r18
      ae:	bc 0b       	sbc	r27, r28
      b0:	c6 0b       	sbc	r28, r22
      b2:	d0 0b       	sbc	r29, r16
      b4:	da 0b       	sbc	r29, r26
      b6:	e4 0b       	sbc	r30, r20
      b8:	20 0c       	add	r2, r0
      ba:	ee 0b       	sbc	r30, r30
      bc:	f8 0b       	sbc	r31, r24
      be:	02 0c       	add	r0, r2
      c0:	0c 0c       	add	r0, r12
      c2:	16 0c       	add	r1, r6
      c4:	4b 0c       	add	r4, r11
      c6:	55 0c       	add	r5, r5
      c8:	5f 0c       	add	r5, r15
      ca:	69 0c       	add	r6, r9
      cc:	73 0c       	add	r7, r3
      ce:	7d 0c       	add	r7, r13
      d0:	87 0c       	add	r8, r7
      d2:	91 0c       	add	r9, r1
      d4:	cd 0c       	add	r12, r13
      d6:	9b 0c       	add	r9, r11
      d8:	a5 0c       	add	r10, r5
      da:	af 0c       	add	r10, r15
      dc:	b9 0c       	add	r11, r9
      de:	c3 0c       	add	r12, r3
      e0:	f8 0c       	add	r15, r8
      e2:	02 0d       	add	r16, r2
      e4:	0c 0d       	add	r16, r12
      e6:	16 0d       	add	r17, r6
      e8:	20 0d       	add	r18, r0
      ea:	2a 0d       	add	r18, r10
      ec:	34 0d       	add	r19, r4
      ee:	3e 0d       	add	r19, r14
      f0:	7a 0d       	add	r23, r10
      f2:	48 0d       	add	r20, r8
      f4:	52 0d       	add	r21, r2
      f6:	5c 0d       	add	r21, r12
      f8:	66 0d       	add	r22, r6
      fa:	70 0d       	add	r23, r0
      fc:	a5 0d       	add	r26, r5
      fe:	af 0d       	add	r26, r15
     100:	b9 0d       	add	r27, r9
     102:	c3 0d       	add	r28, r3
     104:	cd 0d       	add	r28, r13
     106:	d7 0d       	add	r29, r7
     108:	e1 0d       	add	r30, r1
     10a:	eb 0d       	add	r30, r11
     10c:	27 0e       	add	r2, r23
     10e:	f5 0d       	add	r31, r5
     110:	ff 0d       	add	r31, r15
     112:	09 0e       	add	r0, r25
     114:	13 0e       	add	r1, r19
     116:	1d 0e       	add	r1, r29
     118:	52 0e       	add	r5, r18
     11a:	5c 0e       	add	r5, r28
     11c:	66 0e       	add	r6, r22
     11e:	70 0e       	add	r7, r16
     120:	7a 0e       	add	r7, r26
     122:	84 0e       	add	r8, r20
     124:	8e 0e       	add	r8, r30
     126:	98 0e       	add	r9, r24
     128:	d4 0e       	add	r13, r20
     12a:	a2 0e       	add	r10, r18
     12c:	ac 0e       	add	r10, r28
     12e:	b6 0e       	add	r11, r22
     130:	c0 0e       	add	r12, r16
     132:	ca 0e       	add	r12, r26

00000134 <__ctors_end>:
     134:	11 24       	eor	r1, r1
     136:	1f be       	out	0x3f, r1	; 63
     138:	cf e5       	ldi	r28, 0x5F	; 95
     13a:	d4 e0       	ldi	r29, 0x04	; 4
     13c:	de bf       	out	0x3e, r29	; 62
     13e:	cd bf       	out	0x3d, r28	; 61

00000140 <__do_copy_data>:
     140:	10 e0       	ldi	r17, 0x00	; 0
     142:	a0 e6       	ldi	r26, 0x60	; 96
     144:	b0 e0       	ldi	r27, 0x00	; 0
     146:	ec e7       	ldi	r30, 0x7C	; 124
     148:	f1 e2       	ldi	r31, 0x21	; 33
     14a:	02 c0       	rjmp	.+4      	; 0x150 <__do_copy_data+0x10>
     14c:	05 90       	lpm	r0, Z+
     14e:	0d 92       	st	X+, r0
     150:	a8 37       	cpi	r26, 0x78	; 120
     152:	b1 07       	cpc	r27, r17
     154:	d9 f7       	brne	.-10     	; 0x14c <__do_copy_data+0xc>

00000156 <__do_clear_bss>:
     156:	21 e0       	ldi	r18, 0x01	; 1
     158:	a8 e7       	ldi	r26, 0x78	; 120
     15a:	b0 e0       	ldi	r27, 0x00	; 0
     15c:	01 c0       	rjmp	.+2      	; 0x160 <.do_clear_bss_start>

0000015e <.do_clear_bss_loop>:
     15e:	1d 92       	st	X+, r1

00000160 <.do_clear_bss_start>:
     160:	ae 3a       	cpi	r26, 0xAE	; 174
     162:	b2 07       	cpc	r27, r18
     164:	e1 f7       	brne	.-8      	; 0x15e <.do_clear_bss_loop>
     166:	0e 94 3d 01 	call	0x27a	; 0x27a <main>
     16a:	0c 94 bc 10 	jmp	0x2178	; 0x2178 <_exit>

0000016e <__bad_interrupt>:
     16e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000172 <__vector_13>:
		default:
		c = '9' ;
		break;
	}
	return c ;
}
     172:	1f 92       	push	r1
     174:	0f 92       	push	r0
     176:	0f b6       	in	r0, 0x3f	; 63
     178:	0f 92       	push	r0
     17a:	11 24       	eor	r1, r1
     17c:	8f 93       	push	r24
     17e:	9f 93       	push	r25
     180:	ef 93       	push	r30
     182:	ff 93       	push	r31
     184:	5d 9b       	sbis	0x0b, 5	; 11
     186:	1a c0       	rjmp	.+52     	; 0x1bc <__vector_13+0x4a>
     188:	e0 91 7b 00 	lds	r30, 0x007B	; 0x80007b <TxreadPos>
     18c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <TxwritePos>
     190:	e8 17       	cp	r30, r24
     192:	50 f4       	brcc	.+20     	; 0x1a8 <__vector_13+0x36>
     194:	f0 e0       	ldi	r31, 0x00	; 0
     196:	e2 5e       	subi	r30, 0xE2	; 226
     198:	fe 4f       	sbci	r31, 0xFE	; 254
     19a:	80 81       	ld	r24, Z
     19c:	8c b9       	out	0x0c, r24	; 12
     19e:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <TxreadPos>
     1a2:	8f 5f       	subi	r24, 0xFF	; 255
     1a4:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <TxreadPos>
     1a8:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <TxreadPos>
     1ac:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <TxwritePos>
     1b0:	98 13       	cpse	r25, r24
     1b2:	04 c0       	rjmp	.+8      	; 0x1bc <__vector_13+0x4a>
     1b4:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <TxreadPos>
     1b8:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <TxwritePos>
     1bc:	ff 91       	pop	r31
     1be:	ef 91       	pop	r30
     1c0:	9f 91       	pop	r25
     1c2:	8f 91       	pop	r24
     1c4:	0f 90       	pop	r0
     1c6:	0f be       	out	0x3f, r0	; 63
     1c8:	0f 90       	pop	r0
     1ca:	1f 90       	pop	r1
     1cc:	18 95       	reti

000001ce <__vector_6>:
     1ce:	1f 92       	push	r1
     1d0:	0f 92       	push	r0
     1d2:	0f b6       	in	r0, 0x3f	; 63
     1d4:	0f 92       	push	r0
     1d6:	11 24       	eor	r1, r1
     1d8:	8f 93       	push	r24
     1da:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__data_end>
     1de:	8f 5f       	subi	r24, 0xFF	; 255
     1e0:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__data_end>
     1e4:	8f 91       	pop	r24
     1e6:	0f 90       	pop	r0
     1e8:	0f be       	out	0x3f, r0	; 63
     1ea:	0f 90       	pop	r0
     1ec:	1f 90       	pop	r1
     1ee:	18 95       	reti

000001f0 <init_Tx>:
     1f0:	90 bd       	out	0x20, r25	; 32
     1f2:	89 b9       	out	0x09, r24	; 9
     1f4:	80 e2       	ldi	r24, 0x20	; 32
     1f6:	8b b9       	out	0x0b, r24	; 11
     1f8:	88 e4       	ldi	r24, 0x48	; 72
     1fa:	8a b9       	out	0x0a, r24	; 10
     1fc:	86 e8       	ldi	r24, 0x86	; 134
     1fe:	80 bd       	out	0x20, r24	; 32
     200:	08 95       	ret

00000202 <init_Rx>:
     202:	8a b1       	in	r24, 0x0a	; 10
     204:	80 69       	ori	r24, 0x90	; 144
     206:	8a b9       	out	0x0a, r24	; 10
     208:	08 95       	ret

0000020a <writeByte>:
     20a:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <TxwritePos>
     20e:	e9 2f       	mov	r30, r25
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	e2 5e       	subi	r30, 0xE2	; 226
     214:	fe 4f       	sbci	r31, 0xFE	; 254
     216:	80 83       	st	Z, r24
     218:	9f 5f       	subi	r25, 0xFF	; 255
     21a:	90 31       	cpi	r25, 0x10	; 16
     21c:	19 f0       	breq	.+6      	; 0x224 <writeByte+0x1a>
     21e:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <TxwritePos>
     222:	02 c0       	rjmp	.+4      	; 0x228 <writeByte+0x1e>
     224:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <TxwritePos>
     228:	5d 9b       	sbis	0x0b, 5	; 11
     22a:	0c c0       	rjmp	.+24     	; 0x244 <writeByte+0x3a>
     22c:	e0 91 7b 00 	lds	r30, 0x007B	; 0x80007b <TxreadPos>
     230:	f0 e0       	ldi	r31, 0x00	; 0
     232:	e2 5e       	subi	r30, 0xE2	; 226
     234:	fe 4f       	sbci	r31, 0xFE	; 254
     236:	80 81       	ld	r24, Z
     238:	8c b9       	out	0x0c, r24	; 12
     23a:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <TxreadPos>
     23e:	8f 5f       	subi	r24, 0xFF	; 255
     240:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <TxreadPos>
     244:	08 95       	ret

00000246 <readByte>:
     246:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <RxwritePos>
     24a:	91 31       	cpi	r25, 0x11	; 17
     24c:	40 f4       	brcc	.+16     	; 0x25e <readByte+0x18>
     24e:	e9 2f       	mov	r30, r25
     250:	f0 e0       	ldi	r31, 0x00	; 0
     252:	e2 58       	subi	r30, 0x82	; 130
     254:	fe 4f       	sbci	r31, 0xFE	; 254
     256:	80 83       	st	Z, r24
     258:	9f 5f       	subi	r25, 0xFF	; 255
     25a:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <RxwritePos>
     25e:	08 95       	ret

00000260 <timerInit>:
     260:	1d bc       	out	0x2d, r1	; 45
     262:	1c bc       	out	0x2c, r1	; 44
     264:	8e b5       	in	r24, 0x2e	; 46
     266:	88 60       	ori	r24, 0x08	; 8
     268:	8e bd       	out	0x2e, r24	; 46
     26a:	86 e9       	ldi	r24, 0x96	; 150
     26c:	98 e9       	ldi	r25, 0x98	; 152
     26e:	9b bd       	out	0x2b, r25	; 43
     270:	8a bd       	out	0x2a, r24	; 42
     272:	89 b7       	in	r24, 0x39	; 57
     274:	80 61       	ori	r24, 0x10	; 16
     276:	89 bf       	out	0x39, r24	; 57
     278:	08 95       	ret

0000027a <main>:
     27a:	80 e4       	ldi	r24, 0x40	; 64
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <init_Tx>
     282:	0e 94 01 01 	call	0x202	; 0x202 <init_Rx>
     286:	87 b3       	in	r24, 0x17	; 23
     288:	8f 62       	ori	r24, 0x2F	; 47
     28a:	87 bb       	out	0x17, r24	; 23
     28c:	88 b3       	in	r24, 0x18	; 24
     28e:	8f 62       	ori	r24, 0x2F	; 47
     290:	88 bb       	out	0x18, r24	; 24
     292:	0e 94 30 01 	call	0x260	; 0x260 <timerInit>
     296:	78 94       	sei
     298:	ff cf       	rjmp	.-2      	; 0x298 <main+0x1e>

0000029a <asciiToInteger>:
     29a:	80 53       	subi	r24, 0x30	; 48
     29c:	89 30       	cpi	r24, 0x09	; 9
     29e:	30 f4       	brcc	.+12     	; 0x2ac <asciiToInteger+0x12>
     2a0:	e8 2f       	mov	r30, r24
     2a2:	f0 e0       	ldi	r31, 0x00	; 0
     2a4:	e2 59       	subi	r30, 0x92	; 146
     2a6:	ff 4f       	sbci	r31, 0xFF	; 255
     2a8:	80 81       	ld	r24, Z
     2aa:	08 95       	ret
     2ac:	89 e0       	ldi	r24, 0x09	; 9
     2ae:	08 95       	ret

000002b0 <updateRxBuffer>:
     2b0:	e0 91 79 00 	lds	r30, 0x0079	; 0x800079 <RxwritePos>
     2b4:	f0 e0       	ldi	r31, 0x00	; 0
     2b6:	e2 58       	subi	r30, 0x82	; 130
     2b8:	fe 4f       	sbci	r31, 0xFE	; 254
     2ba:	cf 01       	movw	r24, r30
     2bc:	8e 57       	subi	r24, 0x7E	; 126
     2be:	91 40       	sbci	r25, 0x01	; 1
     2c0:	40 97       	sbiw	r24, 0x10	; 16
     2c2:	14 f4       	brge	.+4      	; 0x2c8 <updateRxBuffer+0x18>
     2c4:	11 92       	st	Z+, r1
     2c6:	f9 cf       	rjmp	.-14     	; 0x2ba <updateRxBuffer+0xa>
     2c8:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <RxwritePos>
     2cc:	08 95       	ret

000002ce <MyMove>:
		writeByte('\r') ;
	}
}

void MyMove(char c, uint8_t column)
{
     2ce:	cf 93       	push	r28
     2d0:	df 93       	push	r29
     2d2:	d8 2f       	mov	r29, r24
     2d4:	c6 2f       	mov	r28, r22
	/* MyMove */
	/*writeString("MM B5\r") ; */
	writeByte('M') ;
     2d6:	8d e4       	ldi	r24, 0x4D	; 77
     2d8:	0e 94 05 01 	call	0x20a	; 0x20a <writeByte>
	writeByte('M') ;
     2dc:	8d e4       	ldi	r24, 0x4D	; 77
     2de:	0e 94 05 01 	call	0x20a	; 0x20a <writeByte>
	writeByte(' ') ;
     2e2:	80 e2       	ldi	r24, 0x20	; 32
     2e4:	0e 94 05 01 	call	0x20a	; 0x20a <writeByte>
	writeByte(c) ;
     2e8:	8d 2f       	mov	r24, r29
     2ea:	0e 94 05 01 	call	0x20a	; 0x20a <writeByte>
     2ee:	c9 30       	cpi	r28, 0x09	; 9
     2f0:	30 f4       	brcc	.+12     	; 0x2fe <MyMove+0x30>
     2f2:	ec 2f       	mov	r30, r28
     2f4:	f0 e0       	ldi	r31, 0x00	; 0
     2f6:	eb 59       	subi	r30, 0x9B	; 155
     2f8:	ff 4f       	sbci	r31, 0xFF	; 255
     2fa:	80 81       	ld	r24, Z
     2fc:	01 c0       	rjmp	.+2      	; 0x300 <MyMove+0x32>
     2fe:	89 e3       	ldi	r24, 0x39	; 57
	writeByte(intToAscii(column)) ;
     300:	0e 94 05 01 	call	0x20a	; 0x20a <writeByte>
	writeByte('\r') ;
     304:	8d e0       	ldi	r24, 0x0D	; 13
}
     306:	df 91       	pop	r29
     308:	cf 91       	pop	r28
	writeByte('M') ;
	writeByte('M') ;
	writeByte(' ') ;
	writeByte(c) ;
	writeByte(intToAscii(column)) ;
	writeByte('\r') ;
     30a:	0c 94 05 01 	jmp	0x20a	; 0x20a <writeByte>

0000030e <setChecker>:
	setChecker('E',5,'W',table) ;
}

void setChecker(char c,uint8_t column,char player,uint8_t chessboard[])
{
	uint8_t index = ((c - 65) << 1) ;										/* initial index calculation for byte - array */
     30e:	81 54       	subi	r24, 0x41	; 65
     310:	88 0f       	add	r24, r24
	uint8_t bit = column - 1 ;												/* initial bit that we must enable - disable chess-table cell */
	uint8_t buffer = 0 ;													/* buffer to read the specific byte from memory */
	uint8_t temp = 0 ;
	if (column > 4)
     312:	65 30       	cpi	r22, 0x05	; 5
     314:	10 f4       	brcc	.+4      	; 0x31a <setChecker+0xc>
}

void setChecker(char c,uint8_t column,char player,uint8_t chessboard[])
{
	uint8_t index = ((c - 65) << 1) ;										/* initial index calculation for byte - array */
	uint8_t bit = column - 1 ;												/* initial bit that we must enable - disable chess-table cell */
     316:	61 50       	subi	r22, 0x01	; 1
     318:	02 c0       	rjmp	.+4      	; 0x31e <setChecker+0x10>
	uint8_t buffer = 0 ;													/* buffer to read the specific byte from memory */
	uint8_t temp = 0 ;
	if (column > 4)
	{
		index++ ;
     31a:	8f 5f       	subi	r24, 0xFF	; 255
		bit = bit - 4 ;														/* if column > 4 jump to the next memory position */
     31c:	65 50       	subi	r22, 0x05	; 5
	}
	buffer = chessboard[index] ;
     31e:	d9 01       	movw	r26, r18
     320:	a8 0f       	add	r26, r24
     322:	b1 1d       	adc	r27, r1
     324:	2c 91       	ld	r18, X
     326:	e6 2f       	mov	r30, r22
     328:	f0 e0       	ldi	r31, 0x00	; 0
	switch(player)
     32a:	42 34       	cpi	r20, 0x42	; 66
     32c:	71 f4       	brne	.+28     	; 0x34a <setChecker+0x3c>
	{
		case 'B':														   /* case black: enable cell and valid bit */
		buffer |= (1 << bit) | (1 << (4 + bit)) ;
     32e:	34 96       	adiw	r30, 0x04	; 4
     330:	41 e0       	ldi	r20, 0x01	; 1
     332:	50 e0       	ldi	r21, 0x00	; 0
     334:	ca 01       	movw	r24, r20
     336:	01 c0       	rjmp	.+2      	; 0x33a <setChecker+0x2c>
     338:	88 0f       	add	r24, r24
     33a:	ea 95       	dec	r30
     33c:	ea f7       	brpl	.-6      	; 0x338 <setChecker+0x2a>
     33e:	82 2b       	or	r24, r18
     340:	01 c0       	rjmp	.+2      	; 0x344 <setChecker+0x36>
     342:	44 0f       	add	r20, r20
     344:	6a 95       	dec	r22
     346:	ea f7       	brpl	.-6      	; 0x342 <setChecker+0x34>
     348:	0e c0       	rjmp	.+28     	; 0x366 <setChecker+0x58>
		break;
		default:														  /* case white: reset cell and enable valid bit */
		temp |= (1 << bit) ;
     34a:	81 e0       	ldi	r24, 0x01	; 1
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	ac 01       	movw	r20, r24
     350:	01 c0       	rjmp	.+2      	; 0x354 <setChecker+0x46>
     352:	44 0f       	add	r20, r20
     354:	6a 95       	dec	r22
     356:	ea f7       	brpl	.-6      	; 0x352 <setChecker+0x44>
		temp = ~ temp ;
		buffer = buffer & temp ;
		buffer |= (1 << (4 + bit)) ;
     358:	34 96       	adiw	r30, 0x04	; 4
     35a:	01 c0       	rjmp	.+2      	; 0x35e <setChecker+0x50>
     35c:	88 0f       	add	r24, r24
     35e:	ea 95       	dec	r30
     360:	ea f7       	brpl	.-6      	; 0x35c <setChecker+0x4e>
     362:	40 95       	com	r20
     364:	42 23       	and	r20, r18
     366:	84 2b       	or	r24, r20
		break;
	}
	chessboard[index] = buffer ;
     368:	8c 93       	st	X, r24
     36a:	08 95       	ret

0000036c <readCell>:
	}
}

char readCell(char c,uint8_t column,uint8_t chessboard[])
{
	uint8_t index = ((c - 65) << 1) ;								/* find appropriate index from ascii code */
     36c:	81 54       	subi	r24, 0x41	; 65
     36e:	88 0f       	add	r24, r24
	uint8_t bit = column - 1 ;										/* find initial bit position from the column */
	uint8_t buffer = 0 ;
	char retC = 'E' ;
	if (column > 4)													/* if column > jump to the next position for the half byte */
     370:	65 30       	cpi	r22, 0x05	; 5
     372:	10 f4       	brcc	.+4      	; 0x378 <readCell+0xc>
}

char readCell(char c,uint8_t column,uint8_t chessboard[])
{
	uint8_t index = ((c - 65) << 1) ;								/* find appropriate index from ascii code */
	uint8_t bit = column - 1 ;										/* find initial bit position from the column */
     374:	61 50       	subi	r22, 0x01	; 1
     376:	02 c0       	rjmp	.+4      	; 0x37c <readCell+0x10>
	uint8_t buffer = 0 ;
	char retC = 'E' ;
	if (column > 4)													/* if column > jump to the next position for the half byte */
	{
		index++ ;
     378:	8f 5f       	subi	r24, 0xFF	; 255
		bit = bit - 4 ;
     37a:	65 50       	subi	r22, 0x05	; 5
	}
	buffer = chessboard[index] ;											/* read data from memory cell and store into buffer */
     37c:	fa 01       	movw	r30, r20
     37e:	e8 0f       	add	r30, r24
     380:	f1 1d       	adc	r31, r1
	if (!(buffer & (1 << (4+bit))))									/* if the enable bit of this bit position is zero then this is empty position */
     382:	80 81       	ld	r24, Z
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	24 e0       	ldi	r18, 0x04	; 4
     388:	26 0f       	add	r18, r22
     38a:	ac 01       	movw	r20, r24
     38c:	02 c0       	rjmp	.+4      	; 0x392 <readCell+0x26>
     38e:	55 95       	asr	r21
     390:	47 95       	ror	r20
     392:	2a 95       	dec	r18
     394:	e2 f7       	brpl	.-8      	; 0x38e <readCell+0x22>
     396:	40 ff       	sbrs	r20, 0
     398:	09 c0       	rjmp	.+18     	; 0x3ac <readCell+0x40>
	{
		retC = 'E' ;
	}
	else if (buffer & (1 << bit))								   /* if enable-bit is 1 and the bit-pos is 1 then this is black */
     39a:	02 c0       	rjmp	.+4      	; 0x3a0 <readCell+0x34>
     39c:	95 95       	asr	r25
     39e:	87 95       	ror	r24
     3a0:	6a 95       	dec	r22
     3a2:	e2 f7       	brpl	.-8      	; 0x39c <readCell+0x30>
     3a4:	80 fd       	sbrc	r24, 0
     3a6:	04 c0       	rjmp	.+8      	; 0x3b0 <readCell+0x44>
	{
		retC = 'B' ;
	}
	else                                                           /* if only the enable-bit is asserted then this is white */
	{
		retC = 'W' ;
     3a8:	87 e5       	ldi	r24, 0x57	; 87
     3aa:	08 95       	ret
		bit = bit - 4 ;
	}
	buffer = chessboard[index] ;											/* read data from memory cell and store into buffer */
	if (!(buffer & (1 << (4+bit))))									/* if the enable bit of this bit position is zero then this is empty position */
	{
		retC = 'E' ;
     3ac:	85 e4       	ldi	r24, 0x45	; 69
     3ae:	08 95       	ret
	}
	else if (buffer & (1 << bit))								   /* if enable-bit is 1 and the bit-pos is 1 then this is black */
	{
		retC = 'B' ;
     3b0:	82 e4       	ldi	r24, 0x42	; 66
	else                                                           /* if only the enable-bit is asserted then this is white */
	{
		retC = 'W' ;
	}
	return retC ;
}
     3b2:	08 95       	ret

000003b4 <checkEnemyMove>:

uint8_t checkEnemyMove(char c, uint8_t column)
{
	uint8_t index = c - 65 ;
	uint8_t bit = column - 1 ;
	uint8_t buffer = enemyValidtable[index] ;
     3b4:	81 54       	subi	r24, 0x41	; 65
     3b6:	e8 2f       	mov	r30, r24
     3b8:	f0 e0       	ldi	r31, 0x00	; 0
     3ba:	e2 57       	subi	r30, 0x72	; 114
     3bc:	ff 4f       	sbci	r31, 0xFF	; 255
	buffer = (buffer >> bit);
     3be:	80 81       	ld	r24, Z
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	61 50       	subi	r22, 0x01	; 1
     3c4:	02 c0       	rjmp	.+4      	; 0x3ca <checkEnemyMove+0x16>
     3c6:	95 95       	asr	r25
     3c8:	87 95       	ror	r24
     3ca:	6a 95       	dec	r22
     3cc:	e2 f7       	brpl	.-8      	; 0x3c6 <checkEnemyMove+0x12>
		return 1;
	}else
	{
		return 0;
	}
}
     3ce:	81 70       	andi	r24, 0x01	; 1
     3d0:	08 95       	ret

000003d2 <insertMineValid>:

void insertMineValid(char c,uint8_t column)					/* This stores a mine valid move into the validtable */
{
	uint8_t index = c - 65 ;
	uint8_t bit = column - 1 ;
	uint8_t buffer = mineValidtable[index] ;
     3d2:	81 54       	subi	r24, 0x41	; 65
     3d4:	e8 2f       	mov	r30, r24
     3d6:	f0 e0       	ldi	r31, 0x00	; 0
	buffer |= (1 << bit) ;
     3d8:	61 50       	subi	r22, 0x01	; 1
     3da:	81 e0       	ldi	r24, 0x01	; 1
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	01 c0       	rjmp	.+2      	; 0x3e2 <insertMineValid+0x10>
     3e0:	88 0f       	add	r24, r24
     3e2:	6a 95       	dec	r22
     3e4:	ea f7       	brpl	.-6      	; 0x3e0 <insertMineValid+0xe>

void insertMineValid(char c,uint8_t column)					/* This stores a mine valid move into the validtable */
{
	uint8_t index = c - 65 ;
	uint8_t bit = column - 1 ;
	uint8_t buffer = mineValidtable[index] ;
     3e6:	ea 54       	subi	r30, 0x4A	; 74
     3e8:	ff 4f       	sbci	r31, 0xFF	; 255
	buffer |= (1 << bit) ;
     3ea:	90 81       	ld	r25, Z
     3ec:	89 2b       	or	r24, r25
	mineValidtable[index] = buffer ;
     3ee:	80 83       	st	Z, r24
     3f0:	08 95       	ret

000003f2 <insertEnemyValid>:

void insertEnemyValid(char c,uint8_t column)					/* This stores a mine valid move into the validtable */
{
	uint8_t index = c - 65 ;
	uint8_t bit = column - 1 ;
	uint8_t buffer = enemyValidtable[index] ;
     3f2:	81 54       	subi	r24, 0x41	; 65
     3f4:	e8 2f       	mov	r30, r24
     3f6:	f0 e0       	ldi	r31, 0x00	; 0
	buffer |= (1 << bit) ;
     3f8:	61 50       	subi	r22, 0x01	; 1
     3fa:	81 e0       	ldi	r24, 0x01	; 1
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	01 c0       	rjmp	.+2      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     400:	88 0f       	add	r24, r24
     402:	6a 95       	dec	r22
     404:	ea f7       	brpl	.-6      	; 0x400 <__LOCK_REGION_LENGTH__>

void insertEnemyValid(char c,uint8_t column)					/* This stores a mine valid move into the validtable */
{
	uint8_t index = c - 65 ;
	uint8_t bit = column - 1 ;
	uint8_t buffer = enemyValidtable[index] ;
     406:	e2 57       	subi	r30, 0x72	; 114
     408:	ff 4f       	sbci	r31, 0xFF	; 255
	buffer |= (1 << bit) ;
     40a:	90 81       	ld	r25, Z
     40c:	89 2b       	or	r24, r25
	enemyValidtable[index] = buffer ;
     40e:	80 83       	st	Z, r24
     410:	08 95       	ret

00000412 <checkAvailable>:
	}
	return retC ;
}

void checkAvailable(char c,uint8_t j,char player,char mine)
{
     412:	9f 92       	push	r9
     414:	af 92       	push	r10
     416:	bf 92       	push	r11
     418:	cf 92       	push	r12
     41a:	df 92       	push	r13
     41c:	ef 92       	push	r14
     41e:	ff 92       	push	r15
     420:	0f 93       	push	r16
     422:	1f 93       	push	r17
     424:	cf 93       	push	r28
     426:	df 93       	push	r29
     428:	c8 2f       	mov	r28, r24
     42a:	d6 2f       	mov	r29, r22
     42c:	c4 2e       	mov	r12, r20
     42e:	02 2f       	mov	r16, r18
     430:	11 e0       	ldi	r17, 0x01	; 1
     432:	16 0f       	add	r17, r22
	uint8_t found = 0 ;
	uint8_t i = j ;
	uint8_t coltemp = j ;
	switch (player)
     434:	82 e4       	ldi	r24, 0x42	; 66
	{
		case 'B':
		/* check right of the enemy - checker for other my own checkers */
		i++ ;
     436:	f1 2e       	mov	r15, r17
	return retC ;
}

void checkAvailable(char c,uint8_t j,char player,char mine)
{
	uint8_t found = 0 ;
     438:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t i = j ;
	uint8_t coltemp = j ;
	switch (player)
     43a:	48 13       	cpse	r20, r24
     43c:	a9 c1       	rjmp	.+850    	; 0x790 <__stack+0x331>
	{
		case 'B':
		/* check right of the enemy - checker for other my own checkers */
		i++ ;
		while (i <= 8 && found == 0 && readCell(c,i,table) != 'E')
     43e:	88 e0       	ldi	r24, 0x08	; 8
     440:	8f 15       	cp	r24, r15
     442:	80 f0       	brcs	.+32     	; 0x464 <__stack+0x5>
     444:	91 11       	cpse	r25, r1
     446:	10 c0       	rjmp	.+32     	; 0x468 <__stack+0x9>
     448:	4e ec       	ldi	r20, 0xCE	; 206
     44a:	50 e0       	ldi	r21, 0x00	; 0
     44c:	6f 2d       	mov	r22, r15
     44e:	8c 2f       	mov	r24, r28
     450:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     454:	85 34       	cpi	r24, 0x45	; 69
     456:	01 f1       	breq	.+64     	; 0x498 <__stack+0x39>
		{
			
			if (readCell(c,i,table) == 'B')
			{
				found = 1 ;
     458:	91 e0       	ldi	r25, 0x01	; 1
     45a:	82 34       	cpi	r24, 0x42	; 66
     45c:	09 f0       	breq	.+2      	; 0x460 <__stack+0x1>
     45e:	90 e0       	ldi	r25, 0x00	; 0
			}
			i++ ;
     460:	f3 94       	inc	r15
     462:	ed cf       	rjmp	.-38     	; 0x43e <checkAvailable+0x2c>
		}
		if (found == 1 && j-1 > 0)
     464:	91 30       	cpi	r25, 0x01	; 1
     466:	c1 f4       	brne	.+48     	; 0x498 <__stack+0x39>
     468:	8d 2f       	mov	r24, r29
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	02 97       	sbiw	r24, 0x02	; 2
     46e:	a4 f0       	brlt	.+40     	; 0x498 <__stack+0x39>
		{
			if (readCell(c,j-1,table) == 'E')
     470:	ff 24       	eor	r15, r15
     472:	fa 94       	dec	r15
     474:	fd 0e       	add	r15, r29
     476:	4e ec       	ldi	r20, 0xCE	; 206
     478:	50 e0       	ldi	r21, 0x00	; 0
     47a:	6f 2d       	mov	r22, r15
     47c:	8c 2f       	mov	r24, r28
     47e:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     482:	85 34       	cpi	r24, 0x45	; 69
     484:	49 f4       	brne	.+18     	; 0x498 <__stack+0x39>
			{
				/* Available move c, j-1 */						/* The valid move is one left */
				if (mine == player)								/* If the colour is mine */
				{												/* then save this available move as mine */
					insertMineValid(c,j-1) ;
     486:	6f 2d       	mov	r22, r15
     488:	8c 2f       	mov	r24, r28
		if (found == 1 && j-1 > 0)
		{
			if (readCell(c,j-1,table) == 'E')
			{
				/* Available move c, j-1 */						/* The valid move is one left */
				if (mine == player)								/* If the colour is mine */
     48a:	02 34       	cpi	r16, 0x42	; 66
     48c:	19 f4       	brne	.+6      	; 0x494 <__stack+0x35>
				{												/* then save this available move as mine */
					insertMineValid(c,j-1) ;
     48e:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <insertMineValid>
     492:	02 c0       	rjmp	.+4      	; 0x498 <__stack+0x39>
				}
				else                                           /* else save this move as enemy available move */
				{
					insertEnemyValid(c,j-1) ;
     494:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <insertEnemyValid>
			}
		}
		
		found = 0 ;												/* check left of the enemy - checker for other my own checkers */
		i = j ;
		i-- ;
     498:	dd 24       	eor	r13, r13
     49a:	da 94       	dec	r13
     49c:	dd 0e       	add	r13, r29
     49e:	fd 2c       	mov	r15, r13
				}
				
			}
		}
		
		found = 0 ;												/* check left of the enemy - checker for other my own checkers */
     4a0:	90 e0       	ldi	r25, 0x00	; 0
		i = j ;
		i-- ;
		while (i > 1 && found == 0 && readCell(c,i,table) != 'E')
     4a2:	81 e0       	ldi	r24, 0x01	; 1
     4a4:	8f 15       	cp	r24, r15
     4a6:	80 f4       	brcc	.+32     	; 0x4c8 <__stack+0x69>
     4a8:	91 11       	cpse	r25, r1
     4aa:	10 c0       	rjmp	.+32     	; 0x4cc <__stack+0x6d>
     4ac:	4e ec       	ldi	r20, 0xCE	; 206
     4ae:	50 e0       	ldi	r21, 0x00	; 0
     4b0:	6f 2d       	mov	r22, r15
     4b2:	8c 2f       	mov	r24, r28
     4b4:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     4b8:	85 34       	cpi	r24, 0x45	; 69
     4ba:	e9 f0       	breq	.+58     	; 0x4f6 <__stack+0x97>
		{
			
			if (readCell(c,i,table) == 'B')
			{
				found = 1 ;
     4bc:	91 e0       	ldi	r25, 0x01	; 1
     4be:	82 34       	cpi	r24, 0x42	; 66
     4c0:	09 f0       	breq	.+2      	; 0x4c4 <__stack+0x65>
     4c2:	90 e0       	ldi	r25, 0x00	; 0
			}
			i-- ;
     4c4:	fa 94       	dec	r15
     4c6:	ed cf       	rjmp	.-38     	; 0x4a2 <__stack+0x43>
			
		}
		if (found == 1 && j+1 < 9)
     4c8:	91 30       	cpi	r25, 0x01	; 1
     4ca:	a9 f4       	brne	.+42     	; 0x4f6 <__stack+0x97>
     4cc:	8d 2f       	mov	r24, r29
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	08 97       	sbiw	r24, 0x08	; 8
     4d2:	8c f4       	brge	.+34     	; 0x4f6 <__stack+0x97>
		{
			if (readCell(c,j+1,table) == 'E')
     4d4:	4e ec       	ldi	r20, 0xCE	; 206
     4d6:	50 e0       	ldi	r21, 0x00	; 0
     4d8:	61 2f       	mov	r22, r17
     4da:	8c 2f       	mov	r24, r28
     4dc:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     4e0:	85 34       	cpi	r24, 0x45	; 69
     4e2:	49 f4       	brne	.+18     	; 0x4f6 <__stack+0x97>
			{
				/* Available move c, j+1 */							/* The valid move is one right */
				if (mine == player)									/* If the colour is mine */
				{                                                   /* then save this move as mine available */
					insertMineValid(c,j+1) ;
     4e4:	61 2f       	mov	r22, r17
     4e6:	8c 2f       	mov	r24, r28
		if (found == 1 && j+1 < 9)
		{
			if (readCell(c,j+1,table) == 'E')
			{
				/* Available move c, j+1 */							/* The valid move is one right */
				if (mine == player)									/* If the colour is mine */
     4e8:	02 34       	cpi	r16, 0x42	; 66
     4ea:	19 f4       	brne	.+6      	; 0x4f2 <__stack+0x93>
				{                                                   /* then save this move as mine available */
					insertMineValid(c,j+1) ;
     4ec:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <insertMineValid>
     4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <__stack+0x97>
				}
				else                                               /* else save it as opponents available move */
				{
					insertEnemyValid(c,j+1) ;
     4f2:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <insertEnemyValid>
			}
		}
		
		found = 0 ;											 /* check up of the enemy - checker for other my own checkers */
		i = c ;
		i-- ;
     4f6:	ee 24       	eor	r14, r14
     4f8:	ea 94       	dec	r14
     4fa:	ec 0e       	add	r14, r28
     4fc:	fe 2c       	mov	r15, r14
					insertEnemyValid(c,j+1) ;
				}
			}
		}
		
		found = 0 ;											 /* check up of the enemy - checker for other my own checkers */
     4fe:	90 e0       	ldi	r25, 0x00	; 0
		i = c ;
		i-- ;
		while (i > '@' && found == 0 && readCell(i,j,table) != 'E')
     500:	80 e4       	ldi	r24, 0x40	; 64
     502:	8f 15       	cp	r24, r15
     504:	80 f4       	brcc	.+32     	; 0x526 <__stack+0xc7>
     506:	91 11       	cpse	r25, r1
     508:	10 c0       	rjmp	.+32     	; 0x52a <__stack+0xcb>
     50a:	4e ec       	ldi	r20, 0xCE	; 206
     50c:	50 e0       	ldi	r21, 0x00	; 0
     50e:	6d 2f       	mov	r22, r29
     510:	8f 2d       	mov	r24, r15
     512:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     516:	85 34       	cpi	r24, 0x45	; 69
     518:	09 f1       	breq	.+66     	; 0x55c <__stack+0xfd>
		{
			
			if (readCell(i,j,table) == 'B')
			{
				found = 1 ;
     51a:	91 e0       	ldi	r25, 0x01	; 1
     51c:	82 34       	cpi	r24, 0x42	; 66
     51e:	09 f0       	breq	.+2      	; 0x522 <__stack+0xc3>
     520:	90 e0       	ldi	r25, 0x00	; 0
			}
			i-- ;
     522:	fa 94       	dec	r15
     524:	ed cf       	rjmp	.-38     	; 0x500 <__stack+0xa1>
		}
		if (found == 1 && c+1 < 'I')
     526:	91 30       	cpi	r25, 0x01	; 1
     528:	c9 f4       	brne	.+50     	; 0x55c <__stack+0xfd>
     52a:	8c 2f       	mov	r24, r28
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	88 34       	cpi	r24, 0x48	; 72
     530:	91 05       	cpc	r25, r1
     532:	a4 f4       	brge	.+40     	; 0x55c <__stack+0xfd>
		{
			if (readCell(c+1,j,table) == 'E')
     534:	ff 24       	eor	r15, r15
     536:	f3 94       	inc	r15
     538:	fc 0e       	add	r15, r28
     53a:	4e ec       	ldi	r20, 0xCE	; 206
     53c:	50 e0       	ldi	r21, 0x00	; 0
     53e:	6d 2f       	mov	r22, r29
     540:	8f 2d       	mov	r24, r15
     542:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     546:	85 34       	cpi	r24, 0x45	; 69
     548:	49 f4       	brne	.+18     	; 0x55c <__stack+0xfd>
			{
				/* Valid pos c+1, j */
				if (mine == player)
				{
					insertMineValid(c+1,j) ;
     54a:	6d 2f       	mov	r22, r29
     54c:	8f 2d       	mov	r24, r15
		if (found == 1 && c+1 < 'I')
		{
			if (readCell(c+1,j,table) == 'E')
			{
				/* Valid pos c+1, j */
				if (mine == player)
     54e:	02 34       	cpi	r16, 0x42	; 66
     550:	19 f4       	brne	.+6      	; 0x558 <__stack+0xf9>
				{
					insertMineValid(c+1,j) ;
     552:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <insertMineValid>
     556:	02 c0       	rjmp	.+4      	; 0x55c <__stack+0xfd>
				}
				else
				{
					insertEnemyValid(c+1,j) ;
     558:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <insertEnemyValid>
			}
		}
		
		found = 0 ;										   /* check down of the enemy - checker for other my own checkers */
		i = c ;
		i++ ;
     55c:	ff 24       	eor	r15, r15
     55e:	f3 94       	inc	r15
     560:	fc 0e       	add	r15, r28
     562:	cf 2c       	mov	r12, r15
					insertEnemyValid(c+1,j) ;
				}
			}
		}
		
		found = 0 ;										   /* check down of the enemy - checker for other my own checkers */
     564:	90 e0       	ldi	r25, 0x00	; 0
		i = c ;
		i++ ;
		while (i < 'I' && found == 0 && readCell(i,j,table) != 'E')
     566:	88 e4       	ldi	r24, 0x48	; 72
     568:	8c 15       	cp	r24, r12
     56a:	80 f0       	brcs	.+32     	; 0x58c <__stack+0x12d>
     56c:	91 11       	cpse	r25, r1
     56e:	10 c0       	rjmp	.+32     	; 0x590 <__stack+0x131>
     570:	4e ec       	ldi	r20, 0xCE	; 206
     572:	50 e0       	ldi	r21, 0x00	; 0
     574:	6d 2f       	mov	r22, r29
     576:	8c 2d       	mov	r24, r12
     578:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     57c:	85 34       	cpi	r24, 0x45	; 69
     57e:	d9 f0       	breq	.+54     	; 0x5b6 <__stack+0x157>
		{
			if (readCell(i,j,table) == 'B')
			{
				found = 1 ;
     580:	91 e0       	ldi	r25, 0x01	; 1
     582:	82 34       	cpi	r24, 0x42	; 66
     584:	09 f0       	breq	.+2      	; 0x588 <__stack+0x129>
     586:	90 e0       	ldi	r25, 0x00	; 0
			}
			i++ ;
     588:	c3 94       	inc	r12
     58a:	ed cf       	rjmp	.-38     	; 0x566 <__stack+0x107>
		}
		if (found == 1 && c - 1 > '@')
     58c:	91 30       	cpi	r25, 0x01	; 1
     58e:	99 f4       	brne	.+38     	; 0x5b6 <__stack+0x157>
     590:	8c 2f       	mov	r24, r28
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	82 34       	cpi	r24, 0x42	; 66
     596:	91 05       	cpc	r25, r1
     598:	74 f0       	brlt	.+28     	; 0x5b6 <__stack+0x157>
		{
			if (readCell(c-1,j,table) == 'E')
     59a:	4e ec       	ldi	r20, 0xCE	; 206
     59c:	50 e0       	ldi	r21, 0x00	; 0
     59e:	6d 2f       	mov	r22, r29
     5a0:	8e 2d       	mov	r24, r14
     5a2:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     5a6:	85 34       	cpi	r24, 0x45	; 69
     5a8:	31 f4       	brne	.+12     	; 0x5b6 <__stack+0x157>
			{
				/* Valid pos c-1,j */
				if (mine == player)
				{
					insertMineValid(c-1,j) ;
     5aa:	6d 2f       	mov	r22, r29
     5ac:	8e 2d       	mov	r24, r14
		if (found == 1 && c - 1 > '@')
		{
			if (readCell(c-1,j,table) == 'E')
			{
				/* Valid pos c-1,j */
				if (mine == player)
     5ae:	02 34       	cpi	r16, 0x42	; 66
     5b0:	31 f4       	brne	.+12     	; 0x5be <__stack+0x15f>
				{
					insertMineValid(c-1,j) ;
     5b2:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <insertMineValid>
					insertEnemyValid(c+1,j) ;
				}
			}
		}
		
		found = 0 ;										   /* check down of the enemy - checker for other my own checkers */
     5b6:	a1 2e       	mov	r10, r17
     5b8:	be 2c       	mov	r11, r14
     5ba:	c1 2c       	mov	r12, r1
     5bc:	17 c0       	rjmp	.+46     	; 0x5ec <__stack+0x18d>
				{
					insertMineValid(c-1,j) ;
				}
				else
				{
					insertEnemyValid(c-1,j) ;
     5be:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <insertEnemyValid>
     5c2:	f9 cf       	rjmp	.-14     	; 0x5b6 <__stack+0x157>
		/* check main diagon up */
		found = 0 ;
		i = c ;
		i-- ;
		coltemp++ ;
		while (i > '@' && coltemp < 9 && (readCell(i,coltemp,table) != 'E') && found == 0)
     5c4:	88 e0       	ldi	r24, 0x08	; 8
     5c6:	8a 15       	cp	r24, r10
     5c8:	a0 f0       	brcs	.+40     	; 0x5f2 <__stack+0x193>
     5ca:	4e ec       	ldi	r20, 0xCE	; 206
     5cc:	50 e0       	ldi	r21, 0x00	; 0
     5ce:	6a 2d       	mov	r22, r10
     5d0:	8b 2d       	mov	r24, r11
     5d2:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     5d6:	85 34       	cpi	r24, 0x45	; 69
     5d8:	61 f0       	breq	.+24     	; 0x5f2 <__stack+0x193>
     5da:	c1 10       	cpse	r12, r1
     5dc:	0d c0       	rjmp	.+26     	; 0x5f8 <__stack+0x199>
		{
			if (readCell(i,coltemp,table) == 'B')
			{
				found = 1 ;
     5de:	cc 24       	eor	r12, r12
     5e0:	c3 94       	inc	r12
     5e2:	82 34       	cpi	r24, 0x42	; 66
     5e4:	09 f0       	breq	.+2      	; 0x5e8 <__stack+0x189>
     5e6:	c1 2c       	mov	r12, r1
			}
			i-- ;
     5e8:	ba 94       	dec	r11
			coltemp++ ;
     5ea:	a3 94       	inc	r10
		/* check main diagon up */
		found = 0 ;
		i = c ;
		i-- ;
		coltemp++ ;
		while (i > '@' && coltemp < 9 && (readCell(i,coltemp,table) != 'E') && found == 0)
     5ec:	80 e4       	ldi	r24, 0x40	; 64
     5ee:	8b 15       	cp	r24, r11
     5f0:	48 f3       	brcs	.-46     	; 0x5c4 <__stack+0x165>
				found = 1 ;
			}
			i-- ;
			coltemp++ ;
		}
		if (found == 1 && (c+1 < 'I') && (j-1 > 0))
     5f2:	81 e0       	ldi	r24, 0x01	; 1
     5f4:	c8 12       	cpse	r12, r24
     5f6:	17 c0       	rjmp	.+46     	; 0x626 <__stack+0x1c7>
     5f8:	8c 2f       	mov	r24, r28
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	88 34       	cpi	r24, 0x48	; 72
     5fe:	91 05       	cpc	r25, r1
     600:	94 f4       	brge	.+36     	; 0x626 <__stack+0x1c7>
     602:	8d 2f       	mov	r24, r29
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	02 97       	sbiw	r24, 0x02	; 2
     608:	74 f0       	brlt	.+28     	; 0x626 <__stack+0x1c7>
		{
			if (readCell(c+1,j-1,table) == 'E')
     60a:	4e ec       	ldi	r20, 0xCE	; 206
     60c:	50 e0       	ldi	r21, 0x00	; 0
     60e:	6d 2d       	mov	r22, r13
     610:	8f 2d       	mov	r24, r15
     612:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     616:	85 34       	cpi	r24, 0x45	; 69
     618:	31 f4       	brne	.+12     	; 0x626 <__stack+0x1c7>
			{
				/* Valid pos c+1,j-1 */
				if (mine == player)
				{
					insertMineValid(c+1,j-1) ;
     61a:	6d 2d       	mov	r22, r13
     61c:	8f 2d       	mov	r24, r15
		if (found == 1 && (c+1 < 'I') && (j-1 > 0))
		{
			if (readCell(c+1,j-1,table) == 'E')
			{
				/* Valid pos c+1,j-1 */
				if (mine == player)
     61e:	02 34       	cpi	r16, 0x42	; 66
     620:	31 f4       	brne	.+12     	; 0x62e <__stack+0x1cf>
				{
					insertMineValid(c+1,j-1) ;
     622:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <insertMineValid>
					insertEnemyValid(c+1,j) ;
				}
			}
		}
		
		found = 0 ;										   /* check down of the enemy - checker for other my own checkers */
     626:	bd 2c       	mov	r11, r13
     628:	cf 2c       	mov	r12, r15
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	15 c0       	rjmp	.+42     	; 0x658 <__stack+0x1f9>
				{
					insertMineValid(c+1,j-1) ;
				}
				else
				{
					insertEnemyValid(c+1,j-1) ;
     62e:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <insertEnemyValid>
     632:	f9 cf       	rjmp	.-14     	; 0x626 <__stack+0x1c7>
		found = 0 ;
		i = c ;
		coltemp = j ;
		i++ ;
		coltemp-- ;
		while((i < 'I') && (coltemp > 0) && (found == 0) && (readCell(i,coltemp,table) != 'E'))
     634:	bb 20       	and	r11, r11
     636:	99 f0       	breq	.+38     	; 0x65e <__stack+0x1ff>
     638:	91 11       	cpse	r25, r1
     63a:	13 c0       	rjmp	.+38     	; 0x662 <__stack+0x203>
     63c:	4e ec       	ldi	r20, 0xCE	; 206
     63e:	50 e0       	ldi	r21, 0x00	; 0
     640:	6b 2d       	mov	r22, r11
     642:	8c 2d       	mov	r24, r12
     644:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     648:	85 34       	cpi	r24, 0x45	; 69
     64a:	11 f1       	breq	.+68     	; 0x690 <__stack+0x231>
		{
			if (readCell(i,coltemp,table) == 'B')
			{
				found = 1 ;
     64c:	91 e0       	ldi	r25, 0x01	; 1
     64e:	82 34       	cpi	r24, 0x42	; 66
     650:	09 f0       	breq	.+2      	; 0x654 <__stack+0x1f5>
     652:	90 e0       	ldi	r25, 0x00	; 0
			}
			i++ ;
     654:	c3 94       	inc	r12
			coltemp-- ;
     656:	ba 94       	dec	r11
		found = 0 ;
		i = c ;
		coltemp = j ;
		i++ ;
		coltemp-- ;
		while((i < 'I') && (coltemp > 0) && (found == 0) && (readCell(i,coltemp,table) != 'E'))
     658:	88 e4       	ldi	r24, 0x48	; 72
     65a:	8c 15       	cp	r24, r12
     65c:	58 f7       	brcc	.-42     	; 0x634 <__stack+0x1d5>
				found = 1 ;
			}
			i++ ;
			coltemp-- ;
		}
		if (found == 1 && (c-1 > '@') && (j+1 < 9))
     65e:	91 30       	cpi	r25, 0x01	; 1
     660:	b9 f4       	brne	.+46     	; 0x690 <__stack+0x231>
     662:	8c 2f       	mov	r24, r28
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	82 34       	cpi	r24, 0x42	; 66
     668:	91 05       	cpc	r25, r1
     66a:	94 f0       	brlt	.+36     	; 0x690 <__stack+0x231>
     66c:	8d 2f       	mov	r24, r29
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	08 97       	sbiw	r24, 0x08	; 8
     672:	74 f4       	brge	.+28     	; 0x690 <__stack+0x231>
		{
			if (readCell(c-1,j+1,table) == 'E')
     674:	4e ec       	ldi	r20, 0xCE	; 206
     676:	50 e0       	ldi	r21, 0x00	; 0
     678:	61 2f       	mov	r22, r17
     67a:	8e 2d       	mov	r24, r14
     67c:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     680:	85 34       	cpi	r24, 0x45	; 69
     682:	31 f4       	brne	.+12     	; 0x690 <__stack+0x231>
			{
				/* Valid pos c-1, j+1 */
				if (player == mine)
				{
					insertMineValid(c-1,j+1) ;
     684:	61 2f       	mov	r22, r17
     686:	8e 2d       	mov	r24, r14
		if (found == 1 && (c-1 > '@') && (j+1 < 9))
		{
			if (readCell(c-1,j+1,table) == 'E')
			{
				/* Valid pos c-1, j+1 */
				if (player == mine)
     688:	02 34       	cpi	r16, 0x42	; 66
     68a:	39 f4       	brne	.+14     	; 0x69a <__stack+0x23b>
				{
					insertMineValid(c-1,j+1) ;
     68c:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <insertMineValid>
					insertEnemyValid(c+1,j) ;
				}
			}
		}
		
		found = 0 ;										   /* check down of the enemy - checker for other my own checkers */
     690:	cd 2c       	mov	r12, r13
     692:	b1 2c       	mov	r11, r1
     694:	ac 2e       	mov	r10, r28
     696:	ad 1a       	sub	r10, r29
     698:	14 c0       	rjmp	.+40     	; 0x6c2 <__stack+0x263>
				{
					insertMineValid(c-1,j+1) ;
				}
				else
				{
					insertEnemyValid(c-1,j+1) ;
     69a:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <insertEnemyValid>
     69e:	f8 cf       	rjmp	.-16     	; 0x690 <__stack+0x231>
		found = 0 ;
		i = c ;
		coltemp = j ;
		i-- ;
		coltemp-- ;
		while((i > '@') && (coltemp > 0) && (readCell(i,coltemp,table) != 'E') && (found == 0))
     6a0:	cc 20       	and	r12, r12
     6a2:	99 f0       	breq	.+38     	; 0x6ca <__stack+0x26b>
     6a4:	4e ec       	ldi	r20, 0xCE	; 206
     6a6:	50 e0       	ldi	r21, 0x00	; 0
     6a8:	6c 2d       	mov	r22, r12
     6aa:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     6ae:	85 34       	cpi	r24, 0x45	; 69
     6b0:	61 f0       	breq	.+24     	; 0x6ca <__stack+0x26b>
     6b2:	b1 10       	cpse	r11, r1
     6b4:	0d c0       	rjmp	.+26     	; 0x6d0 <__stack+0x271>
		{
			if (readCell(i,coltemp,table) == 'B')
			{
				found = 1 ;
     6b6:	bb 24       	eor	r11, r11
     6b8:	b3 94       	inc	r11
     6ba:	82 34       	cpi	r24, 0x42	; 66
     6bc:	09 f0       	breq	.+2      	; 0x6c0 <__stack+0x261>
     6be:	b1 2c       	mov	r11, r1
			}
			i-- ;
			coltemp-- ;
     6c0:	ca 94       	dec	r12
     6c2:	8a 2d       	mov	r24, r10
     6c4:	8c 0d       	add	r24, r12
		found = 0 ;
		i = c ;
		coltemp = j ;
		i-- ;
		coltemp-- ;
		while((i > '@') && (coltemp > 0) && (readCell(i,coltemp,table) != 'E') && (found == 0))
     6c6:	81 34       	cpi	r24, 0x41	; 65
     6c8:	58 f7       	brcc	.-42     	; 0x6a0 <__stack+0x241>
				found = 1 ;
			}
			i-- ;
			coltemp-- ;
		}
		if (found == 1 && (c+1 < 'I') && (j+1 < 9))
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	b8 12       	cpse	r11, r24
     6ce:	17 c0       	rjmp	.+46     	; 0x6fe <__stack+0x29f>
     6d0:	8c 2f       	mov	r24, r28
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	88 34       	cpi	r24, 0x48	; 72
     6d6:	91 05       	cpc	r25, r1
     6d8:	94 f4       	brge	.+36     	; 0x6fe <__stack+0x29f>
     6da:	8d 2f       	mov	r24, r29
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	08 97       	sbiw	r24, 0x08	; 8
     6e0:	74 f4       	brge	.+28     	; 0x6fe <__stack+0x29f>
		{
			if (readCell(c+1,j+1,table) == 'E')
     6e2:	4e ec       	ldi	r20, 0xCE	; 206
     6e4:	50 e0       	ldi	r21, 0x00	; 0
     6e6:	61 2f       	mov	r22, r17
     6e8:	8f 2d       	mov	r24, r15
     6ea:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     6ee:	85 34       	cpi	r24, 0x45	; 69
     6f0:	31 f4       	brne	.+12     	; 0x6fe <__stack+0x29f>
			{
				/* Valid move c+1,j+1 */
				if (player == mine)
				{
					insertMineValid(c+1,j+1) ;
     6f2:	61 2f       	mov	r22, r17
     6f4:	8f 2d       	mov	r24, r15
		if (found == 1 && (c+1 < 'I') && (j+1 < 9))
		{
			if (readCell(c+1,j+1,table) == 'E')
			{
				/* Valid move c+1,j+1 */
				if (player == mine)
     6f6:	02 34       	cpi	r16, 0x42	; 66
     6f8:	31 f4       	brne	.+12     	; 0x706 <__stack+0x2a7>
				{
					insertMineValid(c+1,j+1) ;
     6fa:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <insertMineValid>
					insertEnemyValid(c+1,j) ;
				}
			}
		}
		
		found = 0 ;										   /* check down of the enemy - checker for other my own checkers */
     6fe:	10 e0       	ldi	r17, 0x00	; 0
     700:	cd 2e       	mov	r12, r29
     702:	cc 1a       	sub	r12, r28
     704:	13 c0       	rjmp	.+38     	; 0x72c <__stack+0x2cd>
				{
					insertMineValid(c+1,j+1) ;
				}
				else
				{
					insertEnemyValid(c+1,j+1) ;
     706:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <insertEnemyValid>
     70a:	f9 cf       	rjmp	.-14     	; 0x6fe <__stack+0x29f>
		found = 0 ;
		i = c ;
		coltemp = j ;
		i++ ;
		coltemp++ ;
		while ((i < 'I') && (coltemp < 9) && (readCell(i,coltemp,table) != 'E') && (found == 0))
     70c:	69 30       	cpi	r22, 0x09	; 9
     70e:	98 f4       	brcc	.+38     	; 0x736 <__stack+0x2d7>
     710:	4e ec       	ldi	r20, 0xCE	; 206
     712:	50 e0       	ldi	r21, 0x00	; 0
     714:	8f 2d       	mov	r24, r15
     716:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     71a:	85 34       	cpi	r24, 0x45	; 69
     71c:	61 f0       	breq	.+24     	; 0x736 <__stack+0x2d7>
     71e:	11 11       	cpse	r17, r1
     720:	0d c0       	rjmp	.+26     	; 0x73c <__stack+0x2dd>
		{
			if (readCell(i,coltemp,table) == 'B')
			{
				found = 1 ;
     722:	11 e0       	ldi	r17, 0x01	; 1
     724:	82 34       	cpi	r24, 0x42	; 66
     726:	09 f0       	breq	.+2      	; 0x72a <__stack+0x2cb>
     728:	10 e0       	ldi	r17, 0x00	; 0
			}
			i++ ;
     72a:	f3 94       	inc	r15
     72c:	6c 2d       	mov	r22, r12
     72e:	6f 0d       	add	r22, r15
		found = 0 ;
		i = c ;
		coltemp = j ;
		i++ ;
		coltemp++ ;
		while ((i < 'I') && (coltemp < 9) && (readCell(i,coltemp,table) != 'E') && (found == 0))
     730:	88 e4       	ldi	r24, 0x48	; 72
     732:	8f 15       	cp	r24, r15
     734:	58 f7       	brcc	.-42     	; 0x70c <__stack+0x2ad>
				found = 1 ;
			}
			i++ ;
			coltemp++ ;
		}
		if ((found == 1) && (c-1 > '@') && (j-1 > 0))
     736:	11 30       	cpi	r17, 0x01	; 1
     738:	09 f0       	breq	.+2      	; 0x73c <__stack+0x2dd>
     73a:	c8 c1       	rjmp	.+912    	; 0xacc <__stack+0x66d>
     73c:	8c 2f       	mov	r24, r28
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	82 34       	cpi	r24, 0x42	; 66
     742:	91 05       	cpc	r25, r1
     744:	0c f4       	brge	.+2      	; 0x748 <__stack+0x2e9>
     746:	c2 c1       	rjmp	.+900    	; 0xacc <__stack+0x66d>
     748:	6d 2f       	mov	r22, r29
     74a:	70 e0       	ldi	r23, 0x00	; 0
     74c:	62 30       	cpi	r22, 0x02	; 2
     74e:	71 05       	cpc	r23, r1
     750:	0c f4       	brge	.+2      	; 0x754 <__stack+0x2f5>
     752:	bc c1       	rjmp	.+888    	; 0xacc <__stack+0x66d>
		{
			if (readCell(c-1,j-1,table) == 'E')
     754:	4e ec       	ldi	r20, 0xCE	; 206
     756:	50 e0       	ldi	r21, 0x00	; 0
     758:	6d 2d       	mov	r22, r13
     75a:	8e 2d       	mov	r24, r14
     75c:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     760:	85 34       	cpi	r24, 0x45	; 69
     762:	09 f0       	breq	.+2      	; 0x766 <__stack+0x307>
     764:	b3 c1       	rjmp	.+870    	; 0xacc <__stack+0x66d>
			{
				/* Valid pos c-1,j-1 */
				if (player == mine)
				{
					insertMineValid(c-1,j-1) ;
     766:	6d 2d       	mov	r22, r13
     768:	8e 2d       	mov	r24, r14
		if ((found == 1) && (c-1 > '@') && (j-1 > 0))
		{
			if (readCell(c-1,j-1,table) == 'E')
			{
				/* Valid pos c-1,j-1 */
				if (player == mine)
     76a:	02 34       	cpi	r16, 0x42	; 66
     76c:	09 f0       	breq	.+2      	; 0x770 <__stack+0x311>
     76e:	a1 c1       	rjmp	.+834    	; 0xab2 <__stack+0x653>
     770:	93 c1       	rjmp	.+806    	; 0xa98 <__stack+0x639>
		break;
		/* check available moves for white player */
		default:
		/* check right of the enemy - checker for other my own checkers */
		i++ ;
		while (i <= 8 && found == 0 && readCell(c,i,table) != 'E')
     772:	91 11       	cpse	r25, r1
     774:	12 c0       	rjmp	.+36     	; 0x79a <__stack+0x33b>
     776:	4e ec       	ldi	r20, 0xCE	; 206
     778:	50 e0       	ldi	r21, 0x00	; 0
     77a:	6f 2d       	mov	r22, r15
     77c:	8c 2f       	mov	r24, r28
     77e:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     782:	85 34       	cpi	r24, 0x45	; 69
     784:	11 f1       	breq	.+68     	; 0x7ca <__stack+0x36b>
		{
			
			if (readCell(c,i,table) == 'W')
			{
				found = 1 ;
     786:	91 e0       	ldi	r25, 0x01	; 1
     788:	87 35       	cpi	r24, 0x57	; 87
     78a:	09 f0       	breq	.+2      	; 0x78e <__stack+0x32f>
     78c:	90 e0       	ldi	r25, 0x00	; 0
			}
			i++ ;
     78e:	f3 94       	inc	r15
		break;
		/* check available moves for white player */
		default:
		/* check right of the enemy - checker for other my own checkers */
		i++ ;
		while (i <= 8 && found == 0 && readCell(c,i,table) != 'E')
     790:	88 e0       	ldi	r24, 0x08	; 8
     792:	8f 15       	cp	r24, r15
     794:	70 f7       	brcc	.-36     	; 0x772 <__stack+0x313>
			{
				found = 1 ;
			}
			i++ ;
		}
		if (found == 1 && j-1 > 0)
     796:	91 30       	cpi	r25, 0x01	; 1
     798:	c1 f4       	brne	.+48     	; 0x7ca <__stack+0x36b>
     79a:	8d 2f       	mov	r24, r29
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	02 97       	sbiw	r24, 0x02	; 2
     7a0:	a4 f0       	brlt	.+40     	; 0x7ca <__stack+0x36b>
		{
			if (readCell(c,j-1,table) == 'E')
     7a2:	ff 24       	eor	r15, r15
     7a4:	fa 94       	dec	r15
     7a6:	fd 0e       	add	r15, r29
     7a8:	4e ec       	ldi	r20, 0xCE	; 206
     7aa:	50 e0       	ldi	r21, 0x00	; 0
     7ac:	6f 2d       	mov	r22, r15
     7ae:	8c 2f       	mov	r24, r28
     7b0:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     7b4:	85 34       	cpi	r24, 0x45	; 69
     7b6:	49 f4       	brne	.+18     	; 0x7ca <__stack+0x36b>
			{
				/* Available move c, j-1 */						/* The valid move is one left */
				if (mine == player)
				{
					insertMineValid(c,j-1) ;
     7b8:	6f 2d       	mov	r22, r15
     7ba:	8c 2f       	mov	r24, r28
		if (found == 1 && j-1 > 0)
		{
			if (readCell(c,j-1,table) == 'E')
			{
				/* Available move c, j-1 */						/* The valid move is one left */
				if (mine == player)
     7bc:	c0 12       	cpse	r12, r16
     7be:	03 c0       	rjmp	.+6      	; 0x7c6 <__stack+0x367>
				{
					insertMineValid(c,j-1) ;
     7c0:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <insertMineValid>
     7c4:	02 c0       	rjmp	.+4      	; 0x7ca <__stack+0x36b>
				}
				else
				{
					insertEnemyValid(c,j-1) ;
     7c6:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <insertEnemyValid>
			}
		}
		
		found = 0 ;												/* check left of the enemy - checker for other my own checkers */
		i = j ;
		i-- ;
     7ca:	dd 24       	eor	r13, r13
     7cc:	da 94       	dec	r13
     7ce:	dd 0e       	add	r13, r29
     7d0:	fd 2c       	mov	r15, r13
					insertEnemyValid(c,j-1) ;
				}
			}
		}
		
		found = 0 ;												/* check left of the enemy - checker for other my own checkers */
     7d2:	90 e0       	ldi	r25, 0x00	; 0
		i = j ;
		i-- ;
		while (i > 1 && found == 0 && readCell(c,i,table) != 'E')
     7d4:	81 e0       	ldi	r24, 0x01	; 1
     7d6:	8f 15       	cp	r24, r15
     7d8:	80 f4       	brcc	.+32     	; 0x7fa <__stack+0x39b>
     7da:	91 11       	cpse	r25, r1
     7dc:	10 c0       	rjmp	.+32     	; 0x7fe <__stack+0x39f>
     7de:	4e ec       	ldi	r20, 0xCE	; 206
     7e0:	50 e0       	ldi	r21, 0x00	; 0
     7e2:	6f 2d       	mov	r22, r15
     7e4:	8c 2f       	mov	r24, r28
     7e6:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     7ea:	85 34       	cpi	r24, 0x45	; 69
     7ec:	e9 f0       	breq	.+58     	; 0x828 <__stack+0x3c9>
		{
			
			if (readCell(c,i,table) == 'W')
			{
				found = 1 ;
     7ee:	91 e0       	ldi	r25, 0x01	; 1
     7f0:	87 35       	cpi	r24, 0x57	; 87
     7f2:	09 f0       	breq	.+2      	; 0x7f6 <__stack+0x397>
     7f4:	90 e0       	ldi	r25, 0x00	; 0
			}
			i-- ;
     7f6:	fa 94       	dec	r15
     7f8:	ed cf       	rjmp	.-38     	; 0x7d4 <__stack+0x375>
			
		}
		if (found == 1 && j+1 < 9)
     7fa:	91 30       	cpi	r25, 0x01	; 1
     7fc:	a9 f4       	brne	.+42     	; 0x828 <__stack+0x3c9>
     7fe:	8d 2f       	mov	r24, r29
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	08 97       	sbiw	r24, 0x08	; 8
     804:	8c f4       	brge	.+34     	; 0x828 <__stack+0x3c9>
		{
			if (readCell(c,j+1,table) == 'E')
     806:	4e ec       	ldi	r20, 0xCE	; 206
     808:	50 e0       	ldi	r21, 0x00	; 0
     80a:	61 2f       	mov	r22, r17
     80c:	8c 2f       	mov	r24, r28
     80e:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     812:	85 34       	cpi	r24, 0x45	; 69
     814:	49 f4       	brne	.+18     	; 0x828 <__stack+0x3c9>
			{
				/* Available move c, j+1 */					/* The valid move is one right */
				if (mine == player)
				{
					insertMineValid(c,j+1) ;
     816:	61 2f       	mov	r22, r17
     818:	8c 2f       	mov	r24, r28
		if (found == 1 && j+1 < 9)
		{
			if (readCell(c,j+1,table) == 'E')
			{
				/* Available move c, j+1 */					/* The valid move is one right */
				if (mine == player)
     81a:	c0 12       	cpse	r12, r16
     81c:	03 c0       	rjmp	.+6      	; 0x824 <__stack+0x3c5>
				{
					insertMineValid(c,j+1) ;
     81e:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <insertMineValid>
     822:	02 c0       	rjmp	.+4      	; 0x828 <__stack+0x3c9>
				}
				else
				{
					insertEnemyValid(c,j+1) ;
     824:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <insertEnemyValid>
			}
		}
		
		found = 0 ;											 /* check up of the enemy - checker for other my own checkers */
		i = c ;
		i-- ;
     828:	ee 24       	eor	r14, r14
     82a:	ea 94       	dec	r14
     82c:	ec 0e       	add	r14, r28
     82e:	fe 2c       	mov	r15, r14
					insertEnemyValid(c,j+1) ;
				}
			}
		}
		
		found = 0 ;											 /* check up of the enemy - checker for other my own checkers */
     830:	90 e0       	ldi	r25, 0x00	; 0
		i = c ;
		i-- ;
		while (i > '@' && found == 0 && readCell(i,j,table) != 'E')
     832:	80 e4       	ldi	r24, 0x40	; 64
     834:	8f 15       	cp	r24, r15
     836:	80 f4       	brcc	.+32     	; 0x858 <__stack+0x3f9>
     838:	91 11       	cpse	r25, r1
     83a:	10 c0       	rjmp	.+32     	; 0x85c <__stack+0x3fd>
     83c:	4e ec       	ldi	r20, 0xCE	; 206
     83e:	50 e0       	ldi	r21, 0x00	; 0
     840:	6d 2f       	mov	r22, r29
     842:	8f 2d       	mov	r24, r15
     844:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     848:	85 34       	cpi	r24, 0x45	; 69
     84a:	09 f1       	breq	.+66     	; 0x88e <__stack+0x42f>
		{
			
			if (readCell(i,j,table) == 'W')
			{
				found = 1 ;
     84c:	91 e0       	ldi	r25, 0x01	; 1
     84e:	87 35       	cpi	r24, 0x57	; 87
     850:	09 f0       	breq	.+2      	; 0x854 <__stack+0x3f5>
     852:	90 e0       	ldi	r25, 0x00	; 0
			}
			i-- ;
     854:	fa 94       	dec	r15
     856:	ed cf       	rjmp	.-38     	; 0x832 <__stack+0x3d3>
		}
		if (found == 1 && c+1 < 'I')
     858:	91 30       	cpi	r25, 0x01	; 1
     85a:	c9 f4       	brne	.+50     	; 0x88e <__stack+0x42f>
     85c:	8c 2f       	mov	r24, r28
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	88 34       	cpi	r24, 0x48	; 72
     862:	91 05       	cpc	r25, r1
     864:	a4 f4       	brge	.+40     	; 0x88e <__stack+0x42f>
		{
			if (readCell(c+1,j,table) == 'E')
     866:	ff 24       	eor	r15, r15
     868:	f3 94       	inc	r15
     86a:	fc 0e       	add	r15, r28
     86c:	4e ec       	ldi	r20, 0xCE	; 206
     86e:	50 e0       	ldi	r21, 0x00	; 0
     870:	6d 2f       	mov	r22, r29
     872:	8f 2d       	mov	r24, r15
     874:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     878:	85 34       	cpi	r24, 0x45	; 69
     87a:	49 f4       	brne	.+18     	; 0x88e <__stack+0x42f>
			{
				/* Valid pos c+1, j */
				if (mine == player)
				{
					insertMineValid(c+1,j) ;
     87c:	6d 2f       	mov	r22, r29
     87e:	8f 2d       	mov	r24, r15
		if (found == 1 && c+1 < 'I')
		{
			if (readCell(c+1,j,table) == 'E')
			{
				/* Valid pos c+1, j */
				if (mine == player)
     880:	c0 12       	cpse	r12, r16
     882:	03 c0       	rjmp	.+6      	; 0x88a <__stack+0x42b>
				{
					insertMineValid(c+1,j) ;
     884:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <insertMineValid>
     888:	02 c0       	rjmp	.+4      	; 0x88e <__stack+0x42f>
				}
				else
				{
					insertEnemyValid(c+1,j) ;
     88a:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <insertEnemyValid>
			}
		}
		
		found = 0 ;										   /* check down of the enemy - checker for other my own checkers */
		i = c ;
		i++ ;
     88e:	ff 24       	eor	r15, r15
     890:	f3 94       	inc	r15
     892:	fc 0e       	add	r15, r28
     894:	bf 2c       	mov	r11, r15
					insertEnemyValid(c+1,j) ;
				}
			}
		}
		
		found = 0 ;										   /* check down of the enemy - checker for other my own checkers */
     896:	90 e0       	ldi	r25, 0x00	; 0
		i = c ;
		i++ ;
		while (i < 'I' && found == 0 && readCell(i,j,table) != 'E')
     898:	88 e4       	ldi	r24, 0x48	; 72
     89a:	8b 15       	cp	r24, r11
     89c:	80 f0       	brcs	.+32     	; 0x8be <__stack+0x45f>
     89e:	91 11       	cpse	r25, r1
     8a0:	10 c0       	rjmp	.+32     	; 0x8c2 <__stack+0x463>
     8a2:	4e ec       	ldi	r20, 0xCE	; 206
     8a4:	50 e0       	ldi	r21, 0x00	; 0
     8a6:	6d 2f       	mov	r22, r29
     8a8:	8b 2d       	mov	r24, r11
     8aa:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     8ae:	85 34       	cpi	r24, 0x45	; 69
     8b0:	d9 f0       	breq	.+54     	; 0x8e8 <__stack+0x489>
		{
			if (readCell(i,j,table) == 'W')
			{
				found = 1 ;
     8b2:	91 e0       	ldi	r25, 0x01	; 1
     8b4:	87 35       	cpi	r24, 0x57	; 87
     8b6:	09 f0       	breq	.+2      	; 0x8ba <__stack+0x45b>
     8b8:	90 e0       	ldi	r25, 0x00	; 0
			}
			i++ ;
     8ba:	b3 94       	inc	r11
     8bc:	ed cf       	rjmp	.-38     	; 0x898 <__stack+0x439>
		}
		if (found == 1 && c - 1 > '@')
     8be:	91 30       	cpi	r25, 0x01	; 1
     8c0:	99 f4       	brne	.+38     	; 0x8e8 <__stack+0x489>
     8c2:	8c 2f       	mov	r24, r28
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	82 34       	cpi	r24, 0x42	; 66
     8c8:	91 05       	cpc	r25, r1
     8ca:	74 f0       	brlt	.+28     	; 0x8e8 <__stack+0x489>
		{
			if (readCell(c-1,j,table) == 'E')
     8cc:	4e ec       	ldi	r20, 0xCE	; 206
     8ce:	50 e0       	ldi	r21, 0x00	; 0
     8d0:	6d 2f       	mov	r22, r29
     8d2:	8e 2d       	mov	r24, r14
     8d4:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     8d8:	85 34       	cpi	r24, 0x45	; 69
     8da:	31 f4       	brne	.+12     	; 0x8e8 <__stack+0x489>
			{
				/* Valid pos c-1,j */
				if (mine == player)
				{
					insertMineValid(c-1,j) ;
     8dc:	6d 2f       	mov	r22, r29
     8de:	8e 2d       	mov	r24, r14
		if (found == 1 && c - 1 > '@')
		{
			if (readCell(c-1,j,table) == 'E')
			{
				/* Valid pos c-1,j */
				if (mine == player)
     8e0:	c0 12       	cpse	r12, r16
     8e2:	06 c0       	rjmp	.+12     	; 0x8f0 <__stack+0x491>
				{
					insertMineValid(c-1,j) ;
     8e4:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <insertMineValid>
					insertEnemyValid(c+1,j) ;
				}
			}
		}
		
		found = 0 ;										   /* check down of the enemy - checker for other my own checkers */
     8e8:	91 2e       	mov	r9, r17
     8ea:	ae 2c       	mov	r10, r14
     8ec:	b1 2c       	mov	r11, r1
     8ee:	17 c0       	rjmp	.+46     	; 0x91e <__stack+0x4bf>
				{
					insertMineValid(c-1,j) ;
				}
				else
				{
					insertEnemyValid(c-1,j) ;
     8f0:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <insertEnemyValid>
     8f4:	f9 cf       	rjmp	.-14     	; 0x8e8 <__stack+0x489>
		/* check main diagonal up */
		found = 0 ;
		i = c ;
		i-- ;
		coltemp++ ;
		while (i > '@' && coltemp < 9 && (readCell(i,coltemp,table) != 'E') && found == 0)
     8f6:	88 e0       	ldi	r24, 0x08	; 8
     8f8:	89 15       	cp	r24, r9
     8fa:	a0 f0       	brcs	.+40     	; 0x924 <__stack+0x4c5>
     8fc:	4e ec       	ldi	r20, 0xCE	; 206
     8fe:	50 e0       	ldi	r21, 0x00	; 0
     900:	69 2d       	mov	r22, r9
     902:	8a 2d       	mov	r24, r10
     904:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     908:	85 34       	cpi	r24, 0x45	; 69
     90a:	61 f0       	breq	.+24     	; 0x924 <__stack+0x4c5>
     90c:	b1 10       	cpse	r11, r1
     90e:	0d c0       	rjmp	.+26     	; 0x92a <__stack+0x4cb>
		{
			if (readCell(i,coltemp,table) == 'W')
			{
				found = 1 ;
     910:	bb 24       	eor	r11, r11
     912:	b3 94       	inc	r11
     914:	87 35       	cpi	r24, 0x57	; 87
     916:	09 f0       	breq	.+2      	; 0x91a <__stack+0x4bb>
     918:	b1 2c       	mov	r11, r1
			}
			i-- ;
     91a:	aa 94       	dec	r10
			coltemp++ ;
     91c:	93 94       	inc	r9
		/* check main diagonal up */
		found = 0 ;
		i = c ;
		i-- ;
		coltemp++ ;
		while (i > '@' && coltemp < 9 && (readCell(i,coltemp,table) != 'E') && found == 0)
     91e:	80 e4       	ldi	r24, 0x40	; 64
     920:	8a 15       	cp	r24, r10
     922:	48 f3       	brcs	.-46     	; 0x8f6 <__stack+0x497>
				found = 1 ;
			}
			i-- ;
			coltemp++ ;
		}
		if (found == 1 && (c+1 < 'I') && (j-1 > 0))
     924:	81 e0       	ldi	r24, 0x01	; 1
     926:	b8 12       	cpse	r11, r24
     928:	17 c0       	rjmp	.+46     	; 0x958 <__stack+0x4f9>
     92a:	8c 2f       	mov	r24, r28
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	88 34       	cpi	r24, 0x48	; 72
     930:	91 05       	cpc	r25, r1
     932:	94 f4       	brge	.+36     	; 0x958 <__stack+0x4f9>
     934:	8d 2f       	mov	r24, r29
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	02 97       	sbiw	r24, 0x02	; 2
     93a:	74 f0       	brlt	.+28     	; 0x958 <__stack+0x4f9>
		{
			if (readCell(c+1,j-1,table) == 'E')
     93c:	4e ec       	ldi	r20, 0xCE	; 206
     93e:	50 e0       	ldi	r21, 0x00	; 0
     940:	6d 2d       	mov	r22, r13
     942:	8f 2d       	mov	r24, r15
     944:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     948:	85 34       	cpi	r24, 0x45	; 69
     94a:	31 f4       	brne	.+12     	; 0x958 <__stack+0x4f9>
			{
				/* Valid pos c+1,j-1 */
				if (mine == player)
				{
					insertMineValid(c+1,j-1) ;
     94c:	6d 2d       	mov	r22, r13
     94e:	8f 2d       	mov	r24, r15
		if (found == 1 && (c+1 < 'I') && (j-1 > 0))
		{
			if (readCell(c+1,j-1,table) == 'E')
			{
				/* Valid pos c+1,j-1 */
				if (mine == player)
     950:	c0 12       	cpse	r12, r16
     952:	06 c0       	rjmp	.+12     	; 0x960 <__stack+0x501>
				{
					insertMineValid(c+1,j-1) ;
     954:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <insertMineValid>
					insertEnemyValid(c+1,j) ;
				}
			}
		}
		
		found = 0 ;										   /* check down of the enemy - checker for other my own checkers */
     958:	ad 2c       	mov	r10, r13
     95a:	bf 2c       	mov	r11, r15
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	15 c0       	rjmp	.+42     	; 0x98a <__stack+0x52b>
				{
					insertMineValid(c+1,j-1) ;
				}
				else
				{
					insertEnemyValid(c+1,j-1) ;
     960:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <insertEnemyValid>
     964:	f9 cf       	rjmp	.-14     	; 0x958 <__stack+0x4f9>
		found = 0 ;
		i = c ;
		coltemp = j ;
		i++ ;
		coltemp-- ;
		while((i < 'I') && (coltemp > 0) && (found == 0) && (readCell(i,coltemp,table) != 'E'))
     966:	aa 20       	and	r10, r10
     968:	99 f0       	breq	.+38     	; 0x990 <__stack+0x531>
     96a:	91 11       	cpse	r25, r1
     96c:	13 c0       	rjmp	.+38     	; 0x994 <__stack+0x535>
     96e:	4e ec       	ldi	r20, 0xCE	; 206
     970:	50 e0       	ldi	r21, 0x00	; 0
     972:	6a 2d       	mov	r22, r10
     974:	8b 2d       	mov	r24, r11
     976:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     97a:	85 34       	cpi	r24, 0x45	; 69
     97c:	11 f1       	breq	.+68     	; 0x9c2 <__stack+0x563>
		{
			if (readCell(i,coltemp,table) == 'W')
			{
				found = 1 ;
     97e:	91 e0       	ldi	r25, 0x01	; 1
     980:	87 35       	cpi	r24, 0x57	; 87
     982:	09 f0       	breq	.+2      	; 0x986 <__stack+0x527>
     984:	90 e0       	ldi	r25, 0x00	; 0
			}
			i++ ;
     986:	b3 94       	inc	r11
			coltemp-- ;
     988:	aa 94       	dec	r10
		found = 0 ;
		i = c ;
		coltemp = j ;
		i++ ;
		coltemp-- ;
		while((i < 'I') && (coltemp > 0) && (found == 0) && (readCell(i,coltemp,table) != 'E'))
     98a:	88 e4       	ldi	r24, 0x48	; 72
     98c:	8b 15       	cp	r24, r11
     98e:	58 f7       	brcc	.-42     	; 0x966 <__stack+0x507>
				found = 1 ;
			}
			i++ ;
			coltemp-- ;
		}
		if (found == 1 && (c-1 > '@') && (j+1 < 9))
     990:	91 30       	cpi	r25, 0x01	; 1
     992:	b9 f4       	brne	.+46     	; 0x9c2 <__stack+0x563>
     994:	8c 2f       	mov	r24, r28
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	82 34       	cpi	r24, 0x42	; 66
     99a:	91 05       	cpc	r25, r1
     99c:	94 f0       	brlt	.+36     	; 0x9c2 <__stack+0x563>
     99e:	8d 2f       	mov	r24, r29
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	08 97       	sbiw	r24, 0x08	; 8
     9a4:	74 f4       	brge	.+28     	; 0x9c2 <__stack+0x563>
		{
			if (readCell(c-1,j+1,table) == 'E')
     9a6:	4e ec       	ldi	r20, 0xCE	; 206
     9a8:	50 e0       	ldi	r21, 0x00	; 0
     9aa:	61 2f       	mov	r22, r17
     9ac:	8e 2d       	mov	r24, r14
     9ae:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     9b2:	85 34       	cpi	r24, 0x45	; 69
     9b4:	31 f4       	brne	.+12     	; 0x9c2 <__stack+0x563>
			{
				/* Valid pos c-1, j+1 */
				if (player == mine)
				{
					insertMineValid(c-1,j+1) ;
     9b6:	61 2f       	mov	r22, r17
     9b8:	8e 2d       	mov	r24, r14
		if (found == 1 && (c-1 > '@') && (j+1 < 9))
		{
			if (readCell(c-1,j+1,table) == 'E')
			{
				/* Valid pos c-1, j+1 */
				if (player == mine)
     9ba:	c0 12       	cpse	r12, r16
     9bc:	07 c0       	rjmp	.+14     	; 0x9cc <__stack+0x56d>
				{
					insertMineValid(c-1,j+1) ;
     9be:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <insertMineValid>
					insertEnemyValid(c+1,j) ;
				}
			}
		}
		
		found = 0 ;										   /* check down of the enemy - checker for other my own checkers */
     9c2:	bd 2c       	mov	r11, r13
     9c4:	a1 2c       	mov	r10, r1
     9c6:	9c 2e       	mov	r9, r28
     9c8:	9d 1a       	sub	r9, r29
     9ca:	14 c0       	rjmp	.+40     	; 0x9f4 <__stack+0x595>
				{
					insertMineValid(c-1,j+1) ;
				}
				else
				{
					insertEnemyValid(c-1,j+1) ;
     9cc:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <insertEnemyValid>
     9d0:	f8 cf       	rjmp	.-16     	; 0x9c2 <__stack+0x563>
		found = 0 ;
		i = c ;
		coltemp = j ;
		i-- ;
		coltemp-- ;
		while((i > '@') && (coltemp > 0) && (readCell(i,coltemp,table) != 'E') && (found == 0))
     9d2:	bb 20       	and	r11, r11
     9d4:	99 f0       	breq	.+38     	; 0x9fc <__stack+0x59d>
     9d6:	4e ec       	ldi	r20, 0xCE	; 206
     9d8:	50 e0       	ldi	r21, 0x00	; 0
     9da:	6b 2d       	mov	r22, r11
     9dc:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     9e0:	85 34       	cpi	r24, 0x45	; 69
     9e2:	61 f0       	breq	.+24     	; 0x9fc <__stack+0x59d>
     9e4:	a1 10       	cpse	r10, r1
     9e6:	0d c0       	rjmp	.+26     	; 0xa02 <__stack+0x5a3>
		{
			if (readCell(i,coltemp,table) == 'W')
			{
				found = 1 ;
     9e8:	aa 24       	eor	r10, r10
     9ea:	a3 94       	inc	r10
     9ec:	87 35       	cpi	r24, 0x57	; 87
     9ee:	09 f0       	breq	.+2      	; 0x9f2 <__stack+0x593>
     9f0:	a1 2c       	mov	r10, r1
			}
			i-- ;
			coltemp-- ;
     9f2:	ba 94       	dec	r11
     9f4:	89 2d       	mov	r24, r9
     9f6:	8b 0d       	add	r24, r11
		found = 0 ;
		i = c ;
		coltemp = j ;
		i-- ;
		coltemp-- ;
		while((i > '@') && (coltemp > 0) && (readCell(i,coltemp,table) != 'E') && (found == 0))
     9f8:	81 34       	cpi	r24, 0x41	; 65
     9fa:	58 f7       	brcc	.-42     	; 0x9d2 <__stack+0x573>
				found = 1 ;
			}
			i-- ;
			coltemp-- ;
		}
		if (found == 1 && (c+1 < 'I') && (j+1 < 9))
     9fc:	81 e0       	ldi	r24, 0x01	; 1
     9fe:	a8 12       	cpse	r10, r24
     a00:	17 c0       	rjmp	.+46     	; 0xa30 <__stack+0x5d1>
     a02:	8c 2f       	mov	r24, r28
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	88 34       	cpi	r24, 0x48	; 72
     a08:	91 05       	cpc	r25, r1
     a0a:	94 f4       	brge	.+36     	; 0xa30 <__stack+0x5d1>
     a0c:	8d 2f       	mov	r24, r29
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	08 97       	sbiw	r24, 0x08	; 8
     a12:	74 f4       	brge	.+28     	; 0xa30 <__stack+0x5d1>
		{
			if (readCell(c+1,j+1,table) == 'E')
     a14:	4e ec       	ldi	r20, 0xCE	; 206
     a16:	50 e0       	ldi	r21, 0x00	; 0
     a18:	61 2f       	mov	r22, r17
     a1a:	8f 2d       	mov	r24, r15
     a1c:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     a20:	85 34       	cpi	r24, 0x45	; 69
     a22:	31 f4       	brne	.+12     	; 0xa30 <__stack+0x5d1>
			{
				/* Valid move c+1,j+1 */
				if (player == mine)
				{
					insertMineValid(c+1,j+1) ;
     a24:	61 2f       	mov	r22, r17
     a26:	8f 2d       	mov	r24, r15
		if (found == 1 && (c+1 < 'I') && (j+1 < 9))
		{
			if (readCell(c+1,j+1,table) == 'E')
			{
				/* Valid move c+1,j+1 */
				if (player == mine)
     a28:	c0 12       	cpse	r12, r16
     a2a:	06 c0       	rjmp	.+12     	; 0xa38 <__stack+0x5d9>
				{
					insertMineValid(c+1,j+1) ;
     a2c:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <insertMineValid>
					insertEnemyValid(c+1,j) ;
				}
			}
		}
		
		found = 0 ;										   /* check down of the enemy - checker for other my own checkers */
     a30:	10 e0       	ldi	r17, 0x00	; 0
     a32:	bd 2e       	mov	r11, r29
     a34:	bc 1a       	sub	r11, r28
     a36:	13 c0       	rjmp	.+38     	; 0xa5e <__stack+0x5ff>
				{
					insertMineValid(c+1,j+1) ;
				}
				else
				{
					insertEnemyValid(c+1,j+1) ;
     a38:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <insertEnemyValid>
     a3c:	f9 cf       	rjmp	.-14     	; 0xa30 <__stack+0x5d1>
		found = 0 ;
		i = c ;
		coltemp = j ;
		i++ ;
		coltemp++ ;
		while ((i < 'I') && (coltemp < 9) && (readCell(i,coltemp,table) != 'E') && (found == 0))
     a3e:	69 30       	cpi	r22, 0x09	; 9
     a40:	98 f4       	brcc	.+38     	; 0xa68 <__stack+0x609>
     a42:	4e ec       	ldi	r20, 0xCE	; 206
     a44:	50 e0       	ldi	r21, 0x00	; 0
     a46:	8f 2d       	mov	r24, r15
     a48:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     a4c:	85 34       	cpi	r24, 0x45	; 69
     a4e:	61 f0       	breq	.+24     	; 0xa68 <__stack+0x609>
     a50:	11 11       	cpse	r17, r1
     a52:	0c c0       	rjmp	.+24     	; 0xa6c <__stack+0x60d>
		{
			if (readCell(i,coltemp,table) == 'W')
			{
				found = 1 ;
     a54:	11 e0       	ldi	r17, 0x01	; 1
     a56:	87 35       	cpi	r24, 0x57	; 87
     a58:	09 f0       	breq	.+2      	; 0xa5c <__stack+0x5fd>
     a5a:	10 e0       	ldi	r17, 0x00	; 0
			}
			i++ ;
     a5c:	f3 94       	inc	r15
     a5e:	6b 2d       	mov	r22, r11
     a60:	6f 0d       	add	r22, r15
		found = 0 ;
		i = c ;
		coltemp = j ;
		i++ ;
		coltemp++ ;
		while ((i < 'I') && (coltemp < 9) && (readCell(i,coltemp,table) != 'E') && (found == 0))
     a62:	88 e4       	ldi	r24, 0x48	; 72
     a64:	8f 15       	cp	r24, r15
     a66:	58 f7       	brcc	.-42     	; 0xa3e <__stack+0x5df>
				found = 1 ;
			}
			i++ ;
			coltemp++ ;
		}
		if ((found == 1) && (c-1 > '@') && (j-1 > 0))
     a68:	11 30       	cpi	r17, 0x01	; 1
     a6a:	81 f5       	brne	.+96     	; 0xacc <__stack+0x66d>
     a6c:	8c 2f       	mov	r24, r28
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	82 34       	cpi	r24, 0x42	; 66
     a72:	91 05       	cpc	r25, r1
     a74:	5c f1       	brlt	.+86     	; 0xacc <__stack+0x66d>
     a76:	6d 2f       	mov	r22, r29
     a78:	70 e0       	ldi	r23, 0x00	; 0
     a7a:	62 30       	cpi	r22, 0x02	; 2
     a7c:	71 05       	cpc	r23, r1
     a7e:	34 f1       	brlt	.+76     	; 0xacc <__stack+0x66d>
		{
			if (readCell(c-1,j-1,table) == 'E')
     a80:	4e ec       	ldi	r20, 0xCE	; 206
     a82:	50 e0       	ldi	r21, 0x00	; 0
     a84:	6d 2d       	mov	r22, r13
     a86:	8e 2d       	mov	r24, r14
     a88:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     a8c:	85 34       	cpi	r24, 0x45	; 69
     a8e:	f1 f4       	brne	.+60     	; 0xacc <__stack+0x66d>
			{
				/* Valid pos c-1,j-1 */
				if (player == mine)
				{
					insertMineValid(c-1,j-1) ;
     a90:	6d 2d       	mov	r22, r13
     a92:	8e 2d       	mov	r24, r14
		if ((found == 1) && (c-1 > '@') && (j-1 > 0))
		{
			if (readCell(c-1,j-1,table) == 'E')
			{
				/* Valid pos c-1,j-1 */
				if (player == mine)
     a94:	c0 12       	cpse	r12, r16
     a96:	0d c0       	rjmp	.+26     	; 0xab2 <__stack+0x653>
		}
		
		break;
	}
	
}
     a98:	df 91       	pop	r29
     a9a:	cf 91       	pop	r28
     a9c:	1f 91       	pop	r17
     a9e:	0f 91       	pop	r16
     aa0:	ff 90       	pop	r15
     aa2:	ef 90       	pop	r14
     aa4:	df 90       	pop	r13
     aa6:	cf 90       	pop	r12
     aa8:	bf 90       	pop	r11
     aaa:	af 90       	pop	r10
     aac:	9f 90       	pop	r9
			if (readCell(c-1,j-1,table) == 'E')
			{
				/* Valid pos c-1,j-1 */
				if (player == mine)
				{
					insertMineValid(c-1,j-1) ;
     aae:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <insertMineValid>
		}
		
		break;
	}
	
}
     ab2:	df 91       	pop	r29
     ab4:	cf 91       	pop	r28
     ab6:	1f 91       	pop	r17
     ab8:	0f 91       	pop	r16
     aba:	ff 90       	pop	r15
     abc:	ef 90       	pop	r14
     abe:	df 90       	pop	r13
     ac0:	cf 90       	pop	r12
     ac2:	bf 90       	pop	r11
     ac4:	af 90       	pop	r10
     ac6:	9f 90       	pop	r9
				{
					insertMineValid(c-1,j-1) ;
				}
				else
				{
					insertEnemyValid(c-1,j-1) ;
     ac8:	0c 94 f9 01 	jmp	0x3f2	; 0x3f2 <insertEnemyValid>
		}
		
		break;
	}
	
}
     acc:	df 91       	pop	r29
     ace:	cf 91       	pop	r28
     ad0:	1f 91       	pop	r17
     ad2:	0f 91       	pop	r16
     ad4:	ff 90       	pop	r15
     ad6:	ef 90       	pop	r14
     ad8:	df 90       	pop	r13
     ada:	cf 90       	pop	r12
     adc:	bf 90       	pop	r11
     ade:	af 90       	pop	r10
     ae0:	9f 90       	pop	r9
     ae2:	08 95       	ret

00000ae4 <scanChessboard>:
	}
	chessboard[index] = buffer ;
}

void scanChessboard(char mine)								/* This function scans the whole chessboard for white checkers */
{
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	cf 93       	push	r28
     aee:	df 93       	push	r29
     af0:	18 2f       	mov	r17, r24
     af2:	8e ec       	ldi	r24, 0xCE	; 206
     af4:	e8 2e       	mov	r14, r24
     af6:	80 e0       	ldi	r24, 0x00	; 0
     af8:	f8 2e       	mov	r15, r24
	char c = 0 ;											/* For every one white checker checks for my available moves */
	uint8_t j = 0 ;											/* and stores them in a parallel memory board the validtable */
	uint8_t buffer = 0 ;
	uint8_t temp = 0 ;
	for (uint8_t index = 0; index < SIZE ; index++)
     afa:	d0 e0       	ldi	r29, 0x00	; 0
	{
		c = 65 + (index >> 1) ;								/* Convert the index into specific ascii that we want to scan */
     afc:	cd 2f       	mov	r28, r29
     afe:	c6 95       	lsr	r28
     b00:	cf 5b       	subi	r28, 0xBF	; 191
		buffer = table[index] ;								/* Read the data-byte and store it into a buffer */
     b02:	f7 01       	movw	r30, r14
     b04:	01 91       	ld	r16, Z+
     b06:	7f 01       	movw	r14, r30
		temp = buffer & 0b00010000 ;						/* Find the column which depends on the enabled-bits */
		if (temp == 0b00010000)
     b08:	04 ff       	sbrs	r16, 4
     b0a:	19 c0       	rjmp	.+50     	; 0xb3e <scanChessboard+0x5a>
		{
			j = 1 ;
			if (index % 2 == 1)								/* In the odd number indexes there are the second half-bytes */
     b0c:	d0 ff       	sbrs	r29, 0
     b0e:	02 c0       	rjmp	.+4      	; 0xb14 <scanChessboard+0x30>
			{                                               /* Opposite, in the even number indexes there are the first half-bytes */
				j = j + 4 ;
     b10:	65 e0       	ldi	r22, 0x05	; 5
     b12:	01 c0       	rjmp	.+2      	; 0xb16 <scanChessboard+0x32>
		c = 65 + (index >> 1) ;								/* Convert the index into specific ascii that we want to scan */
		buffer = table[index] ;								/* Read the data-byte and store it into a buffer */
		temp = buffer & 0b00010000 ;						/* Find the column which depends on the enabled-bits */
		if (temp == 0b00010000)
		{
			j = 1 ;
     b14:	61 e0       	ldi	r22, 0x01	; 1
			{                                               /* Opposite, in the even number indexes there are the first half-bytes */
				j = j + 4 ;
			}
			/* scan for white player available moves */
			temp = buffer & 0b00000001 ;
			if (temp == 1)
     b16:	00 ff       	sbrs	r16, 0
     b18:	08 c0       	rjmp	.+16     	; 0xb2a <scanChessboard+0x46>
			{
				blackCount++ ;
     b1a:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <blackCount>
     b1e:	8f 5f       	subi	r24, 0xFF	; 255
     b20:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <blackCount>
				checkAvailable(c,j,'W',mine) ;
     b24:	21 2f       	mov	r18, r17
     b26:	47 e5       	ldi	r20, 0x57	; 87
     b28:	07 c0       	rjmp	.+14     	; 0xb38 <scanChessboard+0x54>
			}
			/* scan for black player available moves */
			else
			{
				whiteCount++ ;
     b2a:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <whiteCount>
     b2e:	8f 5f       	subi	r24, 0xFF	; 255
     b30:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <whiteCount>
				checkAvailable(c,j,'B',mine) ;
     b34:	21 2f       	mov	r18, r17
     b36:	42 e4       	ldi	r20, 0x42	; 66
     b38:	8c 2f       	mov	r24, r28
     b3a:	0e 94 09 02 	call	0x412	; 0x412 <checkAvailable>
			}
			
		}
		temp = buffer & 0b00100000 ;
		if (temp == 0b00100000)
     b3e:	05 ff       	sbrs	r16, 5
     b40:	19 c0       	rjmp	.+50     	; 0xb74 <scanChessboard+0x90>
		{
			j = 2 ;
			if (index % 2 == 1)
     b42:	d0 ff       	sbrs	r29, 0
     b44:	02 c0       	rjmp	.+4      	; 0xb4a <scanChessboard+0x66>
			{
				j = j + 4 ;
     b46:	66 e0       	ldi	r22, 0x06	; 6
     b48:	01 c0       	rjmp	.+2      	; 0xb4c <scanChessboard+0x68>
			
		}
		temp = buffer & 0b00100000 ;
		if (temp == 0b00100000)
		{
			j = 2 ;
     b4a:	62 e0       	ldi	r22, 0x02	; 2
				j = j + 4 ;
			}
			/* scan for white player available moves */
			temp = buffer & 0b00000010 ;
			temp = (temp >> 1) ;
			if (temp == 1)
     b4c:	01 ff       	sbrs	r16, 1
     b4e:	08 c0       	rjmp	.+16     	; 0xb60 <scanChessboard+0x7c>
			{
				blackCount++ ;
     b50:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <blackCount>
     b54:	8f 5f       	subi	r24, 0xFF	; 255
     b56:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <blackCount>
				checkAvailable(c,j,'W',mine) ;
     b5a:	21 2f       	mov	r18, r17
     b5c:	47 e5       	ldi	r20, 0x57	; 87
     b5e:	07 c0       	rjmp	.+14     	; 0xb6e <scanChessboard+0x8a>
			}
			/* scan for black player available moves */
			else
			{
				whiteCount++ ;
     b60:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <whiteCount>
     b64:	8f 5f       	subi	r24, 0xFF	; 255
     b66:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <whiteCount>
				checkAvailable(c,j,'B',mine) ;
     b6a:	21 2f       	mov	r18, r17
     b6c:	42 e4       	ldi	r20, 0x42	; 66
     b6e:	8c 2f       	mov	r24, r28
     b70:	0e 94 09 02 	call	0x412	; 0x412 <checkAvailable>
			}
		}
		temp = buffer & 0b01000000 ;
		if (temp == 0b01000000)
     b74:	06 ff       	sbrs	r16, 6
     b76:	19 c0       	rjmp	.+50     	; 0xbaa <scanChessboard+0xc6>
		{
			j = 3 ;
			if (index % 2 == 1)
     b78:	d0 ff       	sbrs	r29, 0
     b7a:	02 c0       	rjmp	.+4      	; 0xb80 <scanChessboard+0x9c>
			{
				j = j + 4 ;
     b7c:	67 e0       	ldi	r22, 0x07	; 7
     b7e:	01 c0       	rjmp	.+2      	; 0xb82 <scanChessboard+0x9e>
			}
		}
		temp = buffer & 0b01000000 ;
		if (temp == 0b01000000)
		{
			j = 3 ;
     b80:	63 e0       	ldi	r22, 0x03	; 3
				j = j + 4 ;
			}
			/* scan for white player available moves */
			temp = buffer & 0b00000100 ;
			temp = (temp >> 2) ;
			if (temp == 1)
     b82:	02 ff       	sbrs	r16, 2
     b84:	08 c0       	rjmp	.+16     	; 0xb96 <scanChessboard+0xb2>
			{
				blackCount++ ;
     b86:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <blackCount>
     b8a:	8f 5f       	subi	r24, 0xFF	; 255
     b8c:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <blackCount>
				checkAvailable(c,j,'W',mine) ;
     b90:	21 2f       	mov	r18, r17
     b92:	47 e5       	ldi	r20, 0x57	; 87
     b94:	07 c0       	rjmp	.+14     	; 0xba4 <scanChessboard+0xc0>
			}
			/* scan for black player available moves */
			else
			{
				whiteCount++ ;
     b96:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <whiteCount>
     b9a:	8f 5f       	subi	r24, 0xFF	; 255
     b9c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <whiteCount>
				checkAvailable(c,j,'B',mine) ;
     ba0:	21 2f       	mov	r18, r17
     ba2:	42 e4       	ldi	r20, 0x42	; 66
     ba4:	8c 2f       	mov	r24, r28
     ba6:	0e 94 09 02 	call	0x412	; 0x412 <checkAvailable>
			}
		}
		temp = buffer & 0b10000000 ;
		if (temp == 0b10000000)
     baa:	07 ff       	sbrs	r16, 7
     bac:	19 c0       	rjmp	.+50     	; 0xbe0 <scanChessboard+0xfc>
		{
			j = 4 ;
			if (index % 2 == 1)
     bae:	d0 ff       	sbrs	r29, 0
     bb0:	02 c0       	rjmp	.+4      	; 0xbb6 <scanChessboard+0xd2>
			{
				j = j + 4 ;
     bb2:	68 e0       	ldi	r22, 0x08	; 8
     bb4:	01 c0       	rjmp	.+2      	; 0xbb8 <scanChessboard+0xd4>
			}
		}
		temp = buffer & 0b10000000 ;
		if (temp == 0b10000000)
		{
			j = 4 ;
     bb6:	64 e0       	ldi	r22, 0x04	; 4
				j = j + 4 ;
			}
			/* scan for white player available moves */
			temp = buffer & 0b00001000 ;
			temp = (temp >> 3) ;
			if (temp == 1)
     bb8:	03 ff       	sbrs	r16, 3
     bba:	08 c0       	rjmp	.+16     	; 0xbcc <scanChessboard+0xe8>
			{
				blackCount++ ;
     bbc:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <blackCount>
     bc0:	8f 5f       	subi	r24, 0xFF	; 255
     bc2:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <blackCount>
				checkAvailable(c,j,'W',mine) ;
     bc6:	21 2f       	mov	r18, r17
     bc8:	47 e5       	ldi	r20, 0x57	; 87
     bca:	07 c0       	rjmp	.+14     	; 0xbda <scanChessboard+0xf6>
			}
			/* scan for white player available moves */
			else
			{
				whiteCount++ ;
     bcc:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <whiteCount>
     bd0:	8f 5f       	subi	r24, 0xFF	; 255
     bd2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <whiteCount>
				checkAvailable(c,j,'B',mine) ;
     bd6:	21 2f       	mov	r18, r17
     bd8:	42 e4       	ldi	r20, 0x42	; 66
     bda:	8c 2f       	mov	r24, r28
     bdc:	0e 94 09 02 	call	0x412	; 0x412 <checkAvailable>
{
	char c = 0 ;											/* For every one white checker checks for my available moves */
	uint8_t j = 0 ;											/* and stores them in a parallel memory board the validtable */
	uint8_t buffer = 0 ;
	uint8_t temp = 0 ;
	for (uint8_t index = 0; index < SIZE ; index++)
     be0:	df 5f       	subi	r29, 0xFF	; 255
     be2:	d0 31       	cpi	r29, 0x10	; 16
     be4:	09 f0       	breq	.+2      	; 0xbe8 <scanChessboard+0x104>
     be6:	8a cf       	rjmp	.-236    	; 0xafc <scanChessboard+0x18>
				checkAvailable(c,j,'B',mine) ;
			}
		}
		
	}
}
     be8:	df 91       	pop	r29
     bea:	cf 91       	pop	r28
     bec:	1f 91       	pop	r17
     bee:	0f 91       	pop	r16
     bf0:	ff 90       	pop	r15
     bf2:	ef 90       	pop	r14
     bf4:	08 95       	ret

00000bf6 <TurnOtherCheckers>:
	enemyValidtable[index] = buffer ;
}


void TurnOtherCheckers(char c,uint8_t column,char enemy,char player,uint8_t chessboard[])
{
     bf6:	5f 92       	push	r5
     bf8:	6f 92       	push	r6
     bfa:	7f 92       	push	r7
     bfc:	8f 92       	push	r8
     bfe:	9f 92       	push	r9
     c00:	af 92       	push	r10
     c02:	bf 92       	push	r11
     c04:	cf 92       	push	r12
     c06:	df 92       	push	r13
     c08:	ef 92       	push	r14
     c0a:	ff 92       	push	r15
     c0c:	0f 93       	push	r16
     c0e:	1f 93       	push	r17
     c10:	cf 93       	push	r28
     c12:	df 93       	push	r29
     c14:	c8 2e       	mov	r12, r24
     c16:	f6 2e       	mov	r15, r22
     c18:	94 2e       	mov	r9, r20
     c1a:	c2 2f       	mov	r28, r18
	char row = c;
	uint8_t col = column;
	uint8_t found = 0;
	/*Check for players checkers from right*/
	col++;
     c1c:	aa 24       	eor	r10, r10
     c1e:	a3 94       	inc	r10
     c20:	a6 0e       	add	r10, r22
     c22:	da 2d       	mov	r29, r10

void TurnOtherCheckers(char c,uint8_t column,char enemy,char player,uint8_t chessboard[])
{
	char row = c;
	uint8_t col = column;
	uint8_t found = 0;
     c24:	e1 2c       	mov	r14, r1
	/*Check for players checkers from right*/
	col++;
	while (col < 9 && readCell(row,col,chessboard) == enemy && found == 0)
     c26:	d9 30       	cpi	r29, 0x09	; 9
     c28:	28 f0       	brcs	.+10     	; 0xc34 <TurnOtherCheckers+0x3e>
		}
	}
	/*Check for players checkers from left*/
	found = 0 ;
	col = column;
	col--;
     c2a:	df ef       	ldi	r29, 0xFF	; 255
     c2c:	df 0d       	add	r29, r15
     c2e:	ed 2e       	mov	r14, r29
		{
			setChecker(c,i,player,chessboard);
		}
	}
	/*Check for players checkers from left*/
	found = 0 ;
     c30:	d1 2c       	mov	r13, r1
	col = column;
	col--;
	while (col > 0 && readCell(row,col,chessboard) == enemy && found == 0)
     c32:	37 c0       	rjmp	.+110    	; 0xca2 <TurnOtherCheckers+0xac>
	char row = c;
	uint8_t col = column;
	uint8_t found = 0;
	/*Check for players checkers from right*/
	col++;
	while (col < 9 && readCell(row,col,chessboard) == enemy && found == 0)
     c34:	a8 01       	movw	r20, r16
     c36:	6d 2f       	mov	r22, r29
     c38:	8c 2d       	mov	r24, r12
     c3a:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     c3e:	89 11       	cpse	r24, r9
     c40:	12 c0       	rjmp	.+36     	; 0xc66 <TurnOtherCheckers+0x70>
     c42:	e1 10       	cpse	r14, r1
     c44:	13 c0       	rjmp	.+38     	; 0xc6c <TurnOtherCheckers+0x76>
     c46:	dd 24       	eor	r13, r13
     c48:	d3 94       	inc	r13
     c4a:	dd 0e       	add	r13, r29
	{
		if (col+1 < 9)
     c4c:	d8 30       	cpi	r29, 0x08	; 8
     c4e:	49 f0       	breq	.+18     	; 0xc62 <TurnOtherCheckers+0x6c>
		{
			if(readCell(row,(col+1),chessboard) == player)
     c50:	a8 01       	movw	r20, r16
     c52:	6d 2d       	mov	r22, r13
     c54:	8c 2d       	mov	r24, r12
     c56:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     c5a:	ee 24       	eor	r14, r14
     c5c:	e3 94       	inc	r14
     c5e:	8c 13       	cpse	r24, r28
     c60:	e1 2c       	mov	r14, r1
			{
				found = 1;
			}
		}
		col++;
     c62:	dd 2d       	mov	r29, r13
     c64:	e0 cf       	rjmp	.-64     	; 0xc26 <TurnOtherCheckers+0x30>
	}
	if(found == 1 && (col < 9))
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	e8 12       	cpse	r14, r24
     c6a:	df cf       	rjmp	.-66     	; 0xc2a <TurnOtherCheckers+0x34>
{
	char row = c;
	uint8_t col = column;
	uint8_t found = 0;
	/*Check for players checkers from right*/
	col++;
     c6c:	ea 2c       	mov	r14, r10
		}
		col++;
	}
	if(found == 1 && (col < 9))
	{
		for(uint8_t i = (column + 1); i < col; i++)
     c6e:	ed 16       	cp	r14, r29
     c70:	e0 f6       	brcc	.-72     	; 0xc2a <TurnOtherCheckers+0x34>
		{
			setChecker(c,i,player,chessboard);
     c72:	98 01       	movw	r18, r16
     c74:	4c 2f       	mov	r20, r28
     c76:	6e 2d       	mov	r22, r14
     c78:	8c 2d       	mov	r24, r12
     c7a:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
		}
		col++;
	}
	if(found == 1 && (col < 9))
	{
		for(uint8_t i = (column + 1); i < col; i++)
     c7e:	e3 94       	inc	r14
     c80:	f6 cf       	rjmp	.-20     	; 0xc6e <TurnOtherCheckers+0x78>
	}
	/*Check for players checkers from left*/
	found = 0 ;
	col = column;
	col--;
	while (col > 0 && readCell(row,col,chessboard) == enemy && found == 0)
     c82:	a8 01       	movw	r20, r16
     c84:	6e 2d       	mov	r22, r14
     c86:	8c 2d       	mov	r24, r12
     c88:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     c8c:	98 12       	cpse	r9, r24
     c8e:	17 c0       	rjmp	.+46     	; 0xcbe <TurnOtherCheckers+0xc8>
     c90:	d1 10       	cpse	r13, r1
     c92:	1e c0       	rjmp	.+60     	; 0xcd0 <TurnOtherCheckers+0xda>
     c94:	bb 24       	eor	r11, r11
     c96:	ba 94       	dec	r11
     c98:	be 0c       	add	r11, r14
	{
		if (col-1 > 0)
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	e8 12       	cpse	r14, r24
     c9e:	04 c0       	rjmp	.+8      	; 0xca8 <TurnOtherCheckers+0xb2>
			if(readCell(row,(col-1),chessboard) == player)
			{
				found = 1;
			}
		}
		col--;
     ca0:	eb 2c       	mov	r14, r11
	}
	/*Check for players checkers from left*/
	found = 0 ;
	col = column;
	col--;
	while (col > 0 && readCell(row,col,chessboard) == enemy && found == 0)
     ca2:	e1 10       	cpse	r14, r1
     ca4:	ee cf       	rjmp	.-36     	; 0xc82 <TurnOtherCheckers+0x8c>
     ca6:	0b c0       	rjmp	.+22     	; 0xcbe <TurnOtherCheckers+0xc8>
	{
		if (col-1 > 0)
		{
			if(readCell(row,(col-1),chessboard) == player)
     ca8:	a8 01       	movw	r20, r16
     caa:	6b 2d       	mov	r22, r11
     cac:	8c 2d       	mov	r24, r12
     cae:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     cb2:	dd 24       	eor	r13, r13
     cb4:	d3 94       	inc	r13
     cb6:	c8 17       	cp	r28, r24
     cb8:	99 f3       	breq	.-26     	; 0xca0 <TurnOtherCheckers+0xaa>
     cba:	d1 2c       	mov	r13, r1
     cbc:	f1 cf       	rjmp	.-30     	; 0xca0 <TurnOtherCheckers+0xaa>
				found = 1;
			}
		}
		col--;
	}
	if(found == 1 && (column - 1 > 0))
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	d8 16       	cp	r13, r24
     cc2:	31 f0       	breq	.+12     	; 0xcd0 <TurnOtherCheckers+0xda>
		}
	}
	/*Check for players checkers from up*/
	found = 0 ;
	col = column;
	row-- ;
     cc4:	dd 24       	eor	r13, r13
     cc6:	da 94       	dec	r13
     cc8:	dc 0c       	add	r13, r12
     cca:	ed 2c       	mov	r14, r13
		{
			setChecker(c,i,player,chessboard);
		}
	}
	/*Check for players checkers from up*/
	found = 0 ;
     ccc:	b1 2c       	mov	r11, r1
	col = column;
	row-- ;
	while (row > '@' && readCell(row,col,chessboard) == enemy && found == 0)
     cce:	1f c0       	rjmp	.+62     	; 0xd0e <TurnOtherCheckers+0x118>
				found = 1;
			}
		}
		col--;
	}
	if(found == 1 && (column - 1 > 0))
     cd0:	8f 2d       	mov	r24, r15
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	02 97       	sbiw	r24, 0x02	; 2
     cd6:	b4 f3       	brlt	.-20     	; 0xcc4 <TurnOtherCheckers+0xce>
		}
	}
	/*Check for players checkers from left*/
	found = 0 ;
	col = column;
	col--;
     cd8:	dd 2e       	mov	r13, r29
		}
		col--;
	}
	if(found == 1 && (column - 1 > 0))
	{
		for(uint8_t i = (column -1); i > col; i--)
     cda:	ed 14       	cp	r14, r13
     cdc:	98 f7       	brcc	.-26     	; 0xcc4 <TurnOtherCheckers+0xce>
		{
			setChecker(c,i,player,chessboard);
     cde:	98 01       	movw	r18, r16
     ce0:	4c 2f       	mov	r20, r28
     ce2:	6d 2d       	mov	r22, r13
     ce4:	8c 2d       	mov	r24, r12
     ce6:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
		}
		col--;
	}
	if(found == 1 && (column - 1 > 0))
	{
		for(uint8_t i = (column -1); i > col; i--)
     cea:	da 94       	dec	r13
     cec:	f6 cf       	rjmp	.-20     	; 0xcda <TurnOtherCheckers+0xe4>
	}
	/*Check for players checkers from up*/
	found = 0 ;
	col = column;
	row-- ;
	while (row > '@' && readCell(row,col,chessboard) == enemy && found == 0)
     cee:	a8 01       	movw	r20, r16
     cf0:	6f 2d       	mov	r22, r15
     cf2:	8e 2d       	mov	r24, r14
     cf4:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     cf8:	98 12       	cpse	r9, r24
     cfa:	1d c0       	rjmp	.+58     	; 0xd36 <TurnOtherCheckers+0x140>
     cfc:	b1 10       	cpse	r11, r1
     cfe:	1e c0       	rjmp	.+60     	; 0xd3c <TurnOtherCheckers+0x146>
     d00:	88 24       	eor	r8, r8
     d02:	8a 94       	dec	r8
     d04:	8e 0c       	add	r8, r14
	{
		if (row - 1 > '@')
     d06:	81 e4       	ldi	r24, 0x41	; 65
     d08:	e8 12       	cpse	r14, r24
     d0a:	0a c0       	rjmp	.+20     	; 0xd20 <TurnOtherCheckers+0x12a>
			if(readCell((row-1),col,chessboard) == player)
			{
				found = 1;
			}
		}
		row--;
     d0c:	e8 2c       	mov	r14, r8
	}
	/*Check for players checkers from up*/
	found = 0 ;
	col = column;
	row-- ;
	while (row > '@' && readCell(row,col,chessboard) == enemy && found == 0)
     d0e:	80 e4       	ldi	r24, 0x40	; 64
     d10:	8e 15       	cp	r24, r14
     d12:	68 f3       	brcs	.-38     	; 0xcee <TurnOtherCheckers+0xf8>
	}
	/*Check for players checkers from down*/
	found = 0 ;
	row = c;
	col = column;
	row++ ;
     d14:	ee 24       	eor	r14, r14
     d16:	e3 94       	inc	r14
     d18:	ec 0c       	add	r14, r12
     d1a:	be 2c       	mov	r11, r14
		{
			setChecker(i,col,player,chessboard);
		}
	}
	/*Check for players checkers from down*/
	found = 0 ;
     d1c:	81 2c       	mov	r8, r1
	row = c;
	col = column;
	row++ ;
	while (row < 'I' && readCell(row,col,chessboard) == enemy && found == 0)
     d1e:	29 c0       	rjmp	.+82     	; 0xd72 <TurnOtherCheckers+0x17c>
	row-- ;
	while (row > '@' && readCell(row,col,chessboard) == enemy && found == 0)
	{
		if (row - 1 > '@')
		{
			if(readCell((row-1),col,chessboard) == player)
     d20:	a8 01       	movw	r20, r16
     d22:	6f 2d       	mov	r22, r15
     d24:	88 2d       	mov	r24, r8
     d26:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     d2a:	bb 24       	eor	r11, r11
     d2c:	b3 94       	inc	r11
     d2e:	c8 17       	cp	r28, r24
     d30:	69 f3       	breq	.-38     	; 0xd0c <TurnOtherCheckers+0x116>
     d32:	b1 2c       	mov	r11, r1
     d34:	eb cf       	rjmp	.-42     	; 0xd0c <TurnOtherCheckers+0x116>
				found = 1;
			}
		}
		row--;
	}
	if(found == 1 && (row > '@'))
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	b8 12       	cpse	r11, r24
     d3a:	ec cf       	rjmp	.-40     	; 0xd14 <TurnOtherCheckers+0x11e>
     d3c:	bd 2c       	mov	r11, r13
	{
		for(uint8_t i = (c -1); i > row; i--)
     d3e:	eb 14       	cp	r14, r11
     d40:	48 f7       	brcc	.-46     	; 0xd14 <TurnOtherCheckers+0x11e>
		{
			setChecker(i,col,player,chessboard);
     d42:	98 01       	movw	r18, r16
     d44:	4c 2f       	mov	r20, r28
     d46:	6f 2d       	mov	r22, r15
     d48:	8b 2d       	mov	r24, r11
     d4a:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
		}
		row--;
	}
	if(found == 1 && (row > '@'))
	{
		for(uint8_t i = (c -1); i > row; i--)
     d4e:	ba 94       	dec	r11
     d50:	f6 cf       	rjmp	.-20     	; 0xd3e <TurnOtherCheckers+0x148>
	/*Check for players checkers from down*/
	found = 0 ;
	row = c;
	col = column;
	row++ ;
	while (row < 'I' && readCell(row,col,chessboard) == enemy && found == 0)
     d52:	a8 01       	movw	r20, r16
     d54:	6f 2d       	mov	r22, r15
     d56:	8b 2d       	mov	r24, r11
     d58:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     d5c:	98 12       	cpse	r9, r24
     d5e:	18 c0       	rjmp	.+48     	; 0xd90 <TurnOtherCheckers+0x19a>
     d60:	81 10       	cpse	r8, r1
     d62:	19 c0       	rjmp	.+50     	; 0xd96 <TurnOtherCheckers+0x1a0>
     d64:	77 24       	eor	r7, r7
     d66:	73 94       	inc	r7
     d68:	7b 0c       	add	r7, r11
	{
		if (row + 1 < 'I')
     d6a:	88 e4       	ldi	r24, 0x48	; 72
     d6c:	b8 12       	cpse	r11, r24
     d6e:	05 c0       	rjmp	.+10     	; 0xd7a <TurnOtherCheckers+0x184>
			if(readCell((row+1),col,chessboard) == player)
			{
				found = 1;
			}
		}
		row++;
     d70:	b7 2c       	mov	r11, r7
	/*Check for players checkers from down*/
	found = 0 ;
	row = c;
	col = column;
	row++ ;
	while (row < 'I' && readCell(row,col,chessboard) == enemy && found == 0)
     d72:	88 e4       	ldi	r24, 0x48	; 72
     d74:	8b 15       	cp	r24, r11
     d76:	68 f7       	brcc	.-38     	; 0xd52 <TurnOtherCheckers+0x15c>
     d78:	10 c0       	rjmp	.+32     	; 0xd9a <TurnOtherCheckers+0x1a4>
	{
		if (row + 1 < 'I')
		{
			if(readCell((row+1),col,chessboard) == player)
     d7a:	a8 01       	movw	r20, r16
     d7c:	6f 2d       	mov	r22, r15
     d7e:	87 2d       	mov	r24, r7
     d80:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     d84:	88 24       	eor	r8, r8
     d86:	83 94       	inc	r8
     d88:	c8 17       	cp	r28, r24
     d8a:	91 f3       	breq	.-28     	; 0xd70 <TurnOtherCheckers+0x17a>
     d8c:	81 2c       	mov	r8, r1
     d8e:	f0 cf       	rjmp	.-32     	; 0xd70 <TurnOtherCheckers+0x17a>
				found = 1;
			}
		}
		row++;
	}
	if(found == 1 && (row < 'I'))
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	88 12       	cpse	r8, r24
     d94:	02 c0       	rjmp	.+4      	; 0xd9a <TurnOtherCheckers+0x1a4>
     d96:	8e 2c       	mov	r8, r14
     d98:	04 c0       	rjmp	.+8      	; 0xda2 <TurnOtherCheckers+0x1ac>
{
	char row = c;
	uint8_t col = column;
	uint8_t found = 0;
	/*Check for players checkers from right*/
	col++;
     d9a:	7a 2c       	mov	r7, r10
     d9c:	bd 2c       	mov	r11, r13
     d9e:	81 2c       	mov	r8, r1
     da0:	2e c0       	rjmp	.+92     	; 0xdfe <TurnOtherCheckers+0x208>
		}
		row++;
	}
	if(found == 1 && (row < 'I'))
	{
		for(uint8_t i = c+1; i < row; i++)
     da2:	8b 14       	cp	r8, r11
     da4:	d0 f7       	brcc	.-12     	; 0xd9a <TurnOtherCheckers+0x1a4>
		{
			setChecker(i,col,player,chessboard);
     da6:	98 01       	movw	r18, r16
     da8:	4c 2f       	mov	r20, r28
     daa:	6f 2d       	mov	r22, r15
     dac:	88 2d       	mov	r24, r8
     dae:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
		}
		row++;
	}
	if(found == 1 && (row < 'I'))
	{
		for(uint8_t i = c+1; i < row; i++)
     db2:	83 94       	inc	r8
     db4:	f6 cf       	rjmp	.-20     	; 0xda2 <TurnOtherCheckers+0x1ac>
	found = 0 ;
	row = c;
	col = column;
	row--;
	col++;
	while ((row > '@' && col < 9) && readCell(row,col,chessboard) == enemy && found != 1)
     db6:	88 e0       	ldi	r24, 0x08	; 8
     db8:	87 15       	cp	r24, r7
     dba:	38 f1       	brcs	.+78     	; 0xe0a <TurnOtherCheckers+0x214>
     dbc:	a8 01       	movw	r20, r16
     dbe:	67 2d       	mov	r22, r7
     dc0:	8b 2d       	mov	r24, r11
     dc2:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     dc6:	98 12       	cpse	r9, r24
     dc8:	20 c0       	rjmp	.+64     	; 0xe0a <TurnOtherCheckers+0x214>
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	88 16       	cp	r8, r24
     dce:	21 f1       	breq	.+72     	; 0xe18 <TurnOtherCheckers+0x222>
     dd0:	66 24       	eor	r6, r6
     dd2:	63 94       	inc	r6
     dd4:	67 0c       	add	r6, r7
     dd6:	55 24       	eor	r5, r5
     dd8:	5a 94       	dec	r5
     dda:	5b 0c       	add	r5, r11
	{
		if ((row - 1 > '@') && (col + 1 < 9))
     ddc:	81 e4       	ldi	r24, 0x41	; 65
     dde:	b8 16       	cp	r11, r24
     de0:	91 f0       	breq	.+36     	; 0xe06 <TurnOtherCheckers+0x210>
     de2:	88 e0       	ldi	r24, 0x08	; 8
     de4:	78 16       	cp	r7, r24
     de6:	79 f0       	breq	.+30     	; 0xe06 <TurnOtherCheckers+0x210>
		{
			if(readCell((row-1),(col+1),chessboard) == player)
     de8:	a8 01       	movw	r20, r16
     dea:	66 2d       	mov	r22, r6
     dec:	85 2d       	mov	r24, r5
     dee:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     df2:	88 24       	eor	r8, r8
     df4:	83 94       	inc	r8
     df6:	c8 13       	cpse	r28, r24
     df8:	06 c0       	rjmp	.+12     	; 0xe06 <TurnOtherCheckers+0x210>
			{
				found = 1;
			}
		}
		row--;
     dfa:	b5 2c       	mov	r11, r5
		col++;
     dfc:	76 2c       	mov	r7, r6
	found = 0 ;
	row = c;
	col = column;
	row--;
	col++;
	while ((row > '@' && col < 9) && readCell(row,col,chessboard) == enemy && found != 1)
     dfe:	80 e4       	ldi	r24, 0x40	; 64
     e00:	8b 15       	cp	r24, r11
     e02:	c8 f2       	brcs	.-78     	; 0xdb6 <TurnOtherCheckers+0x1c0>
     e04:	05 c0       	rjmp	.+10     	; 0xe10 <TurnOtherCheckers+0x21a>
     e06:	81 2c       	mov	r8, r1
     e08:	f8 cf       	rjmp	.-16     	; 0xdfa <TurnOtherCheckers+0x204>
		row--;
		col++;
	}
	col = column;
	col++ ;
	if(found == 1 && (row > '@') && (col < 9))
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	88 16       	cp	r8, r24
     e0e:	21 f0       	breq	.+8      	; 0xe18 <TurnOtherCheckers+0x222>
		}
	}
	/*Check for players checkers from left*/
	found = 0 ;
	col = column;
	col--;
     e10:	7d 2e       	mov	r7, r29
     e12:	8e 2c       	mov	r8, r14
     e14:	b1 2c       	mov	r11, r1
     e16:	33 c0       	rjmp	.+102    	; 0xe7e <TurnOtherCheckers+0x288>
		row--;
		col++;
	}
	col = column;
	col++ ;
	if(found == 1 && (row > '@') && (col < 9))
     e18:	88 e0       	ldi	r24, 0x08	; 8
     e1a:	8a 15       	cp	r24, r10
     e1c:	c8 f3       	brcs	.-14     	; 0xe10 <TurnOtherCheckers+0x21a>
     e1e:	8d 2c       	mov	r8, r13
     e20:	7a 2c       	mov	r7, r10
	{
		for(uint8_t i = c - 1; i > row; i--)
     e22:	b8 14       	cp	r11, r8
     e24:	a8 f7       	brcc	.-22     	; 0xe10 <TurnOtherCheckers+0x21a>
		{
			setChecker(i,col,player,chessboard);
     e26:	98 01       	movw	r18, r16
     e28:	4c 2f       	mov	r20, r28
     e2a:	67 2d       	mov	r22, r7
     e2c:	88 2d       	mov	r24, r8
     e2e:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
			col++;
     e32:	73 94       	inc	r7
	}
	col = column;
	col++ ;
	if(found == 1 && (row > '@') && (col < 9))
	{
		for(uint8_t i = c - 1; i > row; i--)
     e34:	8a 94       	dec	r8
     e36:	f5 cf       	rjmp	.-22     	; 0xe22 <TurnOtherCheckers+0x22c>
	found = 0 ;
	row = c;
	col = column;
	row++;
	col--;
	while ((row < 'I' && col > 0) && readCell(row,col,chessboard) == enemy && found != 1)
     e38:	77 20       	and	r7, r7
     e3a:	71 f1       	breq	.+92     	; 0xe98 <TurnOtherCheckers+0x2a2>
     e3c:	a8 01       	movw	r20, r16
     e3e:	67 2d       	mov	r22, r7
     e40:	88 2d       	mov	r24, r8
     e42:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     e46:	98 12       	cpse	r9, r24
     e48:	27 c0       	rjmp	.+78     	; 0xe98 <TurnOtherCheckers+0x2a2>
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	b8 16       	cp	r11, r24
     e4e:	39 f1       	breq	.+78     	; 0xe9e <TurnOtherCheckers+0x2a8>
     e50:	66 24       	eor	r6, r6
     e52:	6a 94       	dec	r6
     e54:	67 0c       	add	r6, r7
     e56:	55 24       	eor	r5, r5
     e58:	53 94       	inc	r5
     e5a:	58 0c       	add	r5, r8
	{
		if ((row + 1 < 'I') && (col - 1 > 0))
     e5c:	88 e4       	ldi	r24, 0x48	; 72
     e5e:	88 16       	cp	r8, r24
     e60:	91 f0       	breq	.+36     	; 0xe86 <TurnOtherCheckers+0x290>
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	78 16       	cp	r7, r24
     e66:	79 f0       	breq	.+30     	; 0xe86 <TurnOtherCheckers+0x290>
		{
			if(readCell((row+1),(col-1),chessboard) == player)
     e68:	a8 01       	movw	r20, r16
     e6a:	66 2d       	mov	r22, r6
     e6c:	85 2d       	mov	r24, r5
     e6e:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     e72:	bb 24       	eor	r11, r11
     e74:	b3 94       	inc	r11
     e76:	c8 13       	cpse	r28, r24
     e78:	06 c0       	rjmp	.+12     	; 0xe86 <TurnOtherCheckers+0x290>
			{
				found = 1;
			}
		}
		row++;
     e7a:	85 2c       	mov	r8, r5
		col--;
     e7c:	76 2c       	mov	r7, r6
	found = 0 ;
	row = c;
	col = column;
	row++;
	col--;
	while ((row < 'I' && col > 0) && readCell(row,col,chessboard) == enemy && found != 1)
     e7e:	88 e4       	ldi	r24, 0x48	; 72
     e80:	88 15       	cp	r24, r8
     e82:	d0 f6       	brcc	.-76     	; 0xe38 <TurnOtherCheckers+0x242>
     e84:	06 c0       	rjmp	.+12     	; 0xe92 <TurnOtherCheckers+0x29c>
     e86:	b1 2c       	mov	r11, r1
     e88:	f8 cf       	rjmp	.-16     	; 0xe7a <TurnOtherCheckers+0x284>
     e8a:	7e 2c       	mov	r7, r14
     e8c:	bd 2e       	mov	r11, r29
	}
	col = column;
	col-- ;
	if(found == 1 && (row < 'I') && (col > 0))
	{
		for(uint8_t i = c+1; ((i < row) && (col > 0));  i++)
     e8e:	78 14       	cp	r7, r8
     e90:	50 f0       	brcs	.+20     	; 0xea6 <TurnOtherCheckers+0x2b0>
     e92:	bd 2e       	mov	r11, r29
     e94:	81 2c       	mov	r8, r1
     e96:	35 c0       	rjmp	.+106    	; 0xf02 <TurnOtherCheckers+0x30c>
		row++;
		col--;
	}
	col = column;
	col-- ;
	if(found == 1 && (row < 'I') && (col > 0))
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	b8 12       	cpse	r11, r24
     e9c:	fa cf       	rjmp	.-12     	; 0xe92 <TurnOtherCheckers+0x29c>
     e9e:	d1 11       	cpse	r29, r1
     ea0:	f4 cf       	rjmp	.-24     	; 0xe8a <TurnOtherCheckers+0x294>
     ea2:	b1 2c       	mov	r11, r1
     ea4:	f7 cf       	rjmp	.-18     	; 0xe94 <TurnOtherCheckers+0x29e>
	{
		for(uint8_t i = c+1; ((i < row) && (col > 0));  i++)
     ea6:	bb 20       	and	r11, r11
     ea8:	a1 f3       	breq	.-24     	; 0xe92 <TurnOtherCheckers+0x29c>
		{
			setChecker(i,col,player,chessboard);
     eaa:	98 01       	movw	r18, r16
     eac:	4c 2f       	mov	r20, r28
     eae:	6b 2d       	mov	r22, r11
     eb0:	87 2d       	mov	r24, r7
     eb2:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
			col--;
     eb6:	ba 94       	dec	r11
	}
	col = column;
	col-- ;
	if(found == 1 && (row < 'I') && (col > 0))
	{
		for(uint8_t i = c+1; ((i < row) && (col > 0));  i++)
     eb8:	73 94       	inc	r7
     eba:	e9 cf       	rjmp	.-46     	; 0xe8e <TurnOtherCheckers+0x298>
	found = 0 ;
	row = c;
	col = column;
	row--;
	col--;
	while ((row > '@' && col > 0) && readCell(row,col,chessboard) == enemy && found != 1)
     ebc:	bb 20       	and	r11, r11
     ebe:	39 f1       	breq	.+78     	; 0xf0e <TurnOtherCheckers+0x318>
     ec0:	a8 01       	movw	r20, r16
     ec2:	6b 2d       	mov	r22, r11
     ec4:	8d 2d       	mov	r24, r13
     ec6:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     eca:	98 12       	cpse	r9, r24
     ecc:	20 c0       	rjmp	.+64     	; 0xf0e <TurnOtherCheckers+0x318>
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	88 16       	cp	r8, r24
     ed2:	01 f1       	breq	.+64     	; 0xf14 <TurnOtherCheckers+0x31e>
     ed4:	77 24       	eor	r7, r7
     ed6:	7a 94       	dec	r7
     ed8:	7b 0c       	add	r7, r11
     eda:	66 24       	eor	r6, r6
     edc:	6a 94       	dec	r6
     ede:	6d 0c       	add	r6, r13
	{
		if ((row - 1 > '@') && (col - 1 > 0))
     ee0:	81 e4       	ldi	r24, 0x41	; 65
     ee2:	d8 16       	cp	r13, r24
     ee4:	91 f0       	breq	.+36     	; 0xf0a <TurnOtherCheckers+0x314>
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	b8 16       	cp	r11, r24
     eea:	79 f0       	breq	.+30     	; 0xf0a <TurnOtherCheckers+0x314>
		{
			if(readCell((row-1),(col-1),chessboard) == player)
     eec:	a8 01       	movw	r20, r16
     eee:	67 2d       	mov	r22, r7
     ef0:	86 2d       	mov	r24, r6
     ef2:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     ef6:	88 24       	eor	r8, r8
     ef8:	83 94       	inc	r8
     efa:	c8 13       	cpse	r28, r24
     efc:	06 c0       	rjmp	.+12     	; 0xf0a <TurnOtherCheckers+0x314>
			{
				found = 1;
			}
		}
		row--;
     efe:	d6 2c       	mov	r13, r6
		col--;
     f00:	b7 2c       	mov	r11, r7
	found = 0 ;
	row = c;
	col = column;
	row--;
	col--;
	while ((row > '@' && col > 0) && readCell(row,col,chessboard) == enemy && found != 1)
     f02:	80 e4       	ldi	r24, 0x40	; 64
     f04:	8d 15       	cp	r24, r13
     f06:	d0 f2       	brcs	.-76     	; 0xebc <TurnOtherCheckers+0x2c6>
     f08:	0d c0       	rjmp	.+26     	; 0xf24 <TurnOtherCheckers+0x32e>
     f0a:	81 2c       	mov	r8, r1
     f0c:	f8 cf       	rjmp	.-16     	; 0xefe <TurnOtherCheckers+0x308>
		row--;
		col--;
	}
	col = column;
	col-- ;
	if(found == 1 && (row > '@') && (col > 0))
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	88 12       	cpse	r8, r24
     f12:	08 c0       	rjmp	.+16     	; 0xf24 <TurnOtherCheckers+0x32e>
     f14:	dd 23       	and	r29, r29
     f16:	31 f0       	breq	.+12     	; 0xf24 <TurnOtherCheckers+0x32e>
     f18:	bc 2c       	mov	r11, r12
     f1a:	bf 18       	sub	r11, r15
     f1c:	8b 2d       	mov	r24, r11
     f1e:	8d 0f       	add	r24, r29
	{
		for(uint8_t i = c-1; ((i > row) && (col > 0)); i--)
     f20:	d8 16       	cp	r13, r24
     f22:	20 f0       	brcs	.+8      	; 0xf2c <TurnOtherCheckers+0x336>
{
	char row = c;
	uint8_t col = column;
	uint8_t found = 0;
	/*Check for players checkers from right*/
	col++;
     f24:	ba 2c       	mov	r11, r10
     f26:	de 2c       	mov	r13, r14
     f28:	d0 e0       	ldi	r29, 0x00	; 0
     f2a:	2b c0       	rjmp	.+86     	; 0xf82 <TurnOtherCheckers+0x38c>
	}
	col = column;
	col-- ;
	if(found == 1 && (row > '@') && (col > 0))
	{
		for(uint8_t i = c-1; ((i > row) && (col > 0)); i--)
     f2c:	dd 23       	and	r29, r29
     f2e:	d1 f3       	breq	.-12     	; 0xf24 <TurnOtherCheckers+0x32e>
		{
			setChecker(i,col,player,chessboard);
     f30:	98 01       	movw	r18, r16
     f32:	4c 2f       	mov	r20, r28
     f34:	6d 2f       	mov	r22, r29
     f36:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
			col--;
     f3a:	d1 50       	subi	r29, 0x01	; 1
     f3c:	ef cf       	rjmp	.-34     	; 0xf1c <TurnOtherCheckers+0x326>
	found = 0 ;
	row = c;
	col = column;
	row++;
	col++;
	while ((row < 'I' && col < 9) && readCell(row,col,chessboard) == enemy && found != 1)
     f3e:	88 e0       	ldi	r24, 0x08	; 8
     f40:	8b 15       	cp	r24, r11
     f42:	28 f1       	brcs	.+74     	; 0xf8e <TurnOtherCheckers+0x398>
     f44:	a8 01       	movw	r20, r16
     f46:	6b 2d       	mov	r22, r11
     f48:	8d 2d       	mov	r24, r13
     f4a:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     f4e:	98 12       	cpse	r9, r24
     f50:	1e c0       	rjmp	.+60     	; 0xf8e <TurnOtherCheckers+0x398>
     f52:	d1 30       	cpi	r29, 0x01	; 1
     f54:	f1 f0       	breq	.+60     	; 0xf92 <TurnOtherCheckers+0x39c>
     f56:	88 24       	eor	r8, r8
     f58:	83 94       	inc	r8
     f5a:	8b 0c       	add	r8, r11
     f5c:	77 24       	eor	r7, r7
     f5e:	73 94       	inc	r7
     f60:	7d 0c       	add	r7, r13
	{
		if ((row+1 < 'I') && (col + 1 < 9))
     f62:	88 e4       	ldi	r24, 0x48	; 72
     f64:	d8 16       	cp	r13, r24
     f66:	89 f0       	breq	.+34     	; 0xf8a <TurnOtherCheckers+0x394>
     f68:	88 e0       	ldi	r24, 0x08	; 8
     f6a:	b8 16       	cp	r11, r24
     f6c:	71 f0       	breq	.+28     	; 0xf8a <TurnOtherCheckers+0x394>
		{
			if(readCell((row+1),(col+1),chessboard) == player)
     f6e:	a8 01       	movw	r20, r16
     f70:	68 2d       	mov	r22, r8
     f72:	87 2d       	mov	r24, r7
     f74:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     f78:	d1 e0       	ldi	r29, 0x01	; 1
     f7a:	c8 13       	cpse	r28, r24
     f7c:	06 c0       	rjmp	.+12     	; 0xf8a <TurnOtherCheckers+0x394>
			{
				found = 1;
			}
		}
		row++;
     f7e:	d7 2c       	mov	r13, r7
		col++;
     f80:	b8 2c       	mov	r11, r8
	found = 0 ;
	row = c;
	col = column;
	row++;
	col++;
	while ((row < 'I' && col < 9) && readCell(row,col,chessboard) == enemy && found != 1)
     f82:	88 e4       	ldi	r24, 0x48	; 72
     f84:	8d 15       	cp	r24, r13
     f86:	d8 f6       	brcc	.-74     	; 0xf3e <TurnOtherCheckers+0x348>
     f88:	15 c0       	rjmp	.+42     	; 0xfb4 <TurnOtherCheckers+0x3be>
     f8a:	d0 e0       	ldi	r29, 0x00	; 0
     f8c:	f8 cf       	rjmp	.-16     	; 0xf7e <TurnOtherCheckers+0x388>
		row++;
		col++;
	}
	col = column;
	col++ ;
	if(found == 1 && (row < 'I') && (col < 9))
     f8e:	d1 30       	cpi	r29, 0x01	; 1
     f90:	89 f4       	brne	.+34     	; 0xfb4 <TurnOtherCheckers+0x3be>
     f92:	88 e0       	ldi	r24, 0x08	; 8
     f94:	8a 15       	cp	r24, r10
     f96:	70 f0       	brcs	.+28     	; 0xfb4 <TurnOtherCheckers+0x3be>
     f98:	fc 18       	sub	r15, r12
     f9a:	6f 2d       	mov	r22, r15
     f9c:	6e 0d       	add	r22, r14
	{
		for(uint8_t i = c+1; ((i < row) && (col < 9)); i++)
     f9e:	ed 14       	cp	r14, r13
     fa0:	48 f4       	brcc	.+18     	; 0xfb4 <TurnOtherCheckers+0x3be>
     fa2:	69 30       	cpi	r22, 0x09	; 9
     fa4:	39 f0       	breq	.+14     	; 0xfb4 <TurnOtherCheckers+0x3be>
		{
			setChecker(i,col,player,chessboard);
     fa6:	98 01       	movw	r18, r16
     fa8:	4c 2f       	mov	r20, r28
     faa:	8e 2d       	mov	r24, r14
     fac:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
	}
	col = column;
	col++ ;
	if(found == 1 && (row < 'I') && (col < 9))
	{
		for(uint8_t i = c+1; ((i < row) && (col < 9)); i++)
     fb0:	e3 94       	inc	r14
     fb2:	f3 cf       	rjmp	.-26     	; 0xf9a <TurnOtherCheckers+0x3a4>
		{
			setChecker(i,col,player,chessboard);
			col++;
		}
	}
}
     fb4:	df 91       	pop	r29
     fb6:	cf 91       	pop	r28
     fb8:	1f 91       	pop	r17
     fba:	0f 91       	pop	r16
     fbc:	ff 90       	pop	r15
     fbe:	ef 90       	pop	r14
     fc0:	df 90       	pop	r13
     fc2:	cf 90       	pop	r12
     fc4:	bf 90       	pop	r11
     fc6:	af 90       	pop	r10
     fc8:	9f 90       	pop	r9
     fca:	8f 90       	pop	r8
     fcc:	7f 90       	pop	r7
     fce:	6f 90       	pop	r6
     fd0:	5f 90       	pop	r5
     fd2:	08 95       	ret

00000fd4 <clearValidMoves>:

void clearValidMoves(void)
{
	blackCount = 0 ;
     fd4:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <blackCount>
	whiteCount = 0 ;
     fd8:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <whiteCount>
     fdc:	e6 eb       	ldi	r30, 0xB6	; 182
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	ae e8       	ldi	r26, 0x8E	; 142
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
	for (uint8_t i = 0; i < SIZE / 2; i++)
	{
		mineValidtable[i] = 0 ;
     fe4:	11 92       	st	Z+, r1
		enemyValidtable[i] = 0 ;
     fe6:	1d 92       	st	X+, r1

void clearValidMoves(void)
{
	blackCount = 0 ;
	whiteCount = 0 ;
	for (uint8_t i = 0; i < SIZE / 2; i++)
     fe8:	80 e0       	ldi	r24, 0x00	; 0
     fea:	ee 3b       	cpi	r30, 0xBE	; 190
     fec:	f8 07       	cpc	r31, r24
     fee:	d1 f7       	brne	.-12     	; 0xfe4 <clearValidMoves+0x10>
	{
		mineValidtable[i] = 0 ;
		enemyValidtable[i] = 0 ;
	}
}
     ff0:	08 95       	ret

00000ff2 <tableInit>:




void tableInit(void)
{
     ff2:	ee ec       	ldi	r30, 0xCE	; 206
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
	for (uint8_t i = 0; i < SIZE; i++)
	{
		table[i] = 0 ;
     ff6:	11 92       	st	Z+, r1



void tableInit(void)
{
	for (uint8_t i = 0; i < SIZE; i++)
     ff8:	80 e0       	ldi	r24, 0x00	; 0
     ffa:	ee 3d       	cpi	r30, 0xDE	; 222
     ffc:	f8 07       	cpc	r31, r24
     ffe:	d9 f7       	brne	.-10     	; 0xff6 <tableInit+0x4>
	{
		table[i] = 0 ;
	}
	clearValidMoves();
    1000:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <clearValidMoves>
	if (column > 4)
	{
		index++ ;
		bit = bit - 4 ;														/* if column > 4 jump to the next memory position */
	}
	buffer = chessboard[index] ;
    1004:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <table+0x6>
		break;
		default:														  /* case white: reset cell and enable valid bit */
		temp |= (1 << bit) ;
		temp = ~ temp ;
		buffer = buffer & temp ;
		buffer |= (1 << (4 + bit)) ;
    1008:	87 7f       	andi	r24, 0xF7	; 247
    100a:	80 68       	ori	r24, 0x80	; 128
		break;
	}
	chessboard[index] = buffer ;
    100c:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <table+0x6>
	}
	buffer = chessboard[index] ;
	switch(player)
	{
		case 'B':														   /* case black: enable cell and valid bit */
		buffer |= (1 << bit) | (1 << (4 + bit)) ;
    1010:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <table+0x7>
    1014:	81 61       	ori	r24, 0x11	; 17
		temp = ~ temp ;
		buffer = buffer & temp ;
		buffer |= (1 << (4 + bit)) ;
		break;
	}
	chessboard[index] = buffer ;
    1016:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <table+0x7>
	}
	buffer = chessboard[index] ;
	switch(player)
	{
		case 'B':														   /* case black: enable cell and valid bit */
		buffer |= (1 << bit) | (1 << (4 + bit)) ;
    101a:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <table+0x8>
    101e:	88 68       	ori	r24, 0x88	; 136
		temp = ~ temp ;
		buffer = buffer & temp ;
		buffer |= (1 << (4 + bit)) ;
		break;
	}
	chessboard[index] = buffer ;
    1020:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <table+0x8>
	if (column > 4)
	{
		index++ ;
		bit = bit - 4 ;														/* if column > 4 jump to the next memory position */
	}
	buffer = chessboard[index] ;
    1024:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <table+0x9>
		break;
		default:														  /* case white: reset cell and enable valid bit */
		temp |= (1 << bit) ;
		temp = ~ temp ;
		buffer = buffer & temp ;
		buffer |= (1 << (4 + bit)) ;
    1028:	8e 7f       	andi	r24, 0xFE	; 254
    102a:	80 61       	ori	r24, 0x10	; 16
		break;
	}
	chessboard[index] = buffer ;
    102c:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <table+0x9>
    1030:	08 95       	ret

00001032 <countMineValidmoves>:
		enemyValidtable[i] = 0 ;
	}
}

uint8_t countMineValidmoves(void)
{
    1032:	e6 eb       	ldi	r30, 0xB6	; 182
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	2e eb       	ldi	r18, 0xBE	; 190
    1038:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t buffer = 0 ;
	uint8_t temp = 0 ;
	uint8_t i = 0 ;
	while (i < SIZE/2 && count == 0)
	{
		buffer = mineValidtable[i] ;
    103a:	91 91       	ld	r25, Z+
		temp = buffer & 0b00000001 ;
    103c:	89 2f       	mov	r24, r25
    103e:	81 70       	andi	r24, 0x01	; 1
		{
			count++ ;
		}
		temp = buffer & 0b00000010 ;
		temp = (temp >> 1) ;
		if (temp == 1)
    1040:	91 fd       	sbrc	r25, 1
		{
			count++ ;
    1042:	8f 5f       	subi	r24, 0xFF	; 255
		}
		temp = buffer & 0b00000100 ;
		temp = (temp >> 2) ;
		if (temp == 1)
    1044:	92 fd       	sbrc	r25, 2
		{
			count++ ;
    1046:	8f 5f       	subi	r24, 0xFF	; 255
		}
		temp = buffer & 0b00001000 ;
		temp = (temp >> 3) ;
		if (temp == 1)
    1048:	93 fd       	sbrc	r25, 3
		{
			count++ ;
    104a:	8f 5f       	subi	r24, 0xFF	; 255
		}
		temp = buffer & 0b00010000 ;
		temp = (temp >> 4) ;
		if (temp == 1)
    104c:	94 fd       	sbrc	r25, 4
		{
			count++ ;
    104e:	8f 5f       	subi	r24, 0xFF	; 255
		}
		temp = buffer & 0b00100000 ;
		temp = (temp >> 5) ;
		if (temp == 1)
    1050:	95 fd       	sbrc	r25, 5
		{
			count++ ;
    1052:	8f 5f       	subi	r24, 0xFF	; 255
		}
		temp = buffer & 0b01000000 ;
		temp = (temp >> 6) ;
		if (temp == 1)
    1054:	96 fd       	sbrc	r25, 6
		{
			count++ ;
    1056:	8f 5f       	subi	r24, 0xFF	; 255
		}
		temp = buffer & 0b10000000 ;
		temp = (temp >> 7) ;
		if (temp == 1)
    1058:	97 ff       	sbrs	r25, 7
    105a:	02 c0       	rjmp	.+4      	; 0x1060 <countMineValidmoves+0x2e>
		{
			count++ ;
    105c:	8f 5f       	subi	r24, 0xFF	; 255
    105e:	08 95       	ret
{
	uint8_t count = 0 ;
	uint8_t buffer = 0 ;
	uint8_t temp = 0 ;
	uint8_t i = 0 ;
	while (i < SIZE/2 && count == 0)
    1060:	2e 17       	cp	r18, r30
    1062:	3f 07       	cpc	r19, r31
    1064:	11 f0       	breq	.+4      	; 0x106a <countMineValidmoves+0x38>
    1066:	88 23       	and	r24, r24
    1068:	41 f3       	breq	.-48     	; 0x103a <countMineValidmoves+0x8>
		}
		
		i++ ;
	}
	return count ;
}
    106a:	08 95       	ret

0000106c <countEnemyValidmoves>:


uint8_t countEnemyValidmoves(void)
{
    106c:	ee e8       	ldi	r30, 0x8E	; 142
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	26 e9       	ldi	r18, 0x96	; 150
    1072:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t buffer = 0 ;
	uint8_t temp = 0 ;
	uint8_t i = 0 ;
	while (i < SIZE/2 && count == 0)
	{
		buffer = enemyValidtable[i] ;
    1074:	91 91       	ld	r25, Z+
		temp = buffer & 0b00000001 ;
    1076:	89 2f       	mov	r24, r25
    1078:	81 70       	andi	r24, 0x01	; 1
		{
			count++ ;
		}
		temp = buffer & 0b00000010 ;
		temp = (temp >> 1) ;
		if (temp == 1)
    107a:	91 fd       	sbrc	r25, 1
		{
			count++ ;
    107c:	8f 5f       	subi	r24, 0xFF	; 255
		}
		temp = buffer & 0b00000100 ;
		temp = (temp >> 2) ;
		if (temp == 1)
    107e:	92 fd       	sbrc	r25, 2
		{
			count++ ;
    1080:	8f 5f       	subi	r24, 0xFF	; 255
		}
		temp = buffer & 0b00001000 ;
		temp = (temp >> 3) ;
		if (temp == 1)
    1082:	93 fd       	sbrc	r25, 3
		{
			count++ ;
    1084:	8f 5f       	subi	r24, 0xFF	; 255
		}
		temp = buffer & 0b00010000 ;
		temp = (temp >> 4) ;
		if (temp == 1)
    1086:	94 fd       	sbrc	r25, 4
		{
			count++ ;
    1088:	8f 5f       	subi	r24, 0xFF	; 255
		}
		temp = buffer & 0b00100000 ;
		temp = (temp >> 5) ;
		if (temp == 1)
    108a:	95 fd       	sbrc	r25, 5
		{
			count++ ;
    108c:	8f 5f       	subi	r24, 0xFF	; 255
		}
		temp = buffer & 0b01000000 ;
		temp = (temp >> 6) ;
		if (temp == 1)
    108e:	96 fd       	sbrc	r25, 6
		{
			count++ ;
    1090:	8f 5f       	subi	r24, 0xFF	; 255
		}
		temp = buffer & 0b10000000 ;
		temp = (temp >> 7) ;
		if (temp == 1)
    1092:	97 ff       	sbrs	r25, 7
    1094:	02 c0       	rjmp	.+4      	; 0x109a <countEnemyValidmoves+0x2e>
		{
			count++ ;
    1096:	8f 5f       	subi	r24, 0xFF	; 255
    1098:	08 95       	ret
{
	uint8_t count = 0 ;
	uint8_t buffer = 0 ;
	uint8_t temp = 0 ;
	uint8_t i = 0 ;
	while (i < SIZE/2 && count == 0)
    109a:	2e 17       	cp	r18, r30
    109c:	3f 07       	cpc	r19, r31
    109e:	11 f0       	breq	.+4      	; 0x10a4 <countEnemyValidmoves+0x38>
    10a0:	88 23       	and	r24, r24
    10a2:	41 f3       	breq	.-48     	; 0x1074 <countEnemyValidmoves+0x8>
		}
		
		i++ ;
	}
	return count ;
}
    10a4:	08 95       	ret

000010a6 <checkWin>:


void checkWin(char mine, uint8_t black, uint8_t white)
{
	switch(mine)
    10a6:	82 34       	cpi	r24, 0x42	; 66
    10a8:	29 f4       	brne	.+10     	; 0x10b4 <checkWin+0xe>
	{
		case 'B':
			if (black > white)
    10aa:	46 17       	cp	r20, r22
    10ac:	28 f0       	brcs	.+10     	; 0x10b8 <checkWin+0x12>
				writeByte('N') ;
				writeByte('\r') ;
				
				PORTB &= 0b11111101 ;
			}
			else if (black < white)
    10ae:	64 17       	cp	r22, r20
    10b0:	d8 f4       	brcc	.+54     	; 0x10e8 <checkWin+0x42>
    10b2:	0f c0       	rjmp	.+30     	; 0x10d2 <checkWin+0x2c>
				
				PORTB &= 0b11110111 ;
			}
		break;
      default:
			if (white > black)
    10b4:	64 17       	cp	r22, r20
    10b6:	58 f4       	brcc	.+22     	; 0x10ce <checkWin+0x28>
			{
				/* I WIN TATA */
				writeByte('W') ;
    10b8:	87 e5       	ldi	r24, 0x57	; 87
    10ba:	0e 94 05 01 	call	0x20a	; 0x20a <writeByte>
				writeByte('N') ;
    10be:	8e e4       	ldi	r24, 0x4E	; 78
    10c0:	0e 94 05 01 	call	0x20a	; 0x20a <writeByte>
				writeByte('\r') ;
    10c4:	8d e0       	ldi	r24, 0x0D	; 13
    10c6:	0e 94 05 01 	call	0x20a	; 0x20a <writeByte>
				
				PORTB &= 0b11111101 ;
    10ca:	c1 98       	cbi	0x18, 1	; 24
    10cc:	08 95       	ret
			}
			else if (white < black)
    10ce:	46 17       	cp	r20, r22
    10d0:	58 f4       	brcc	.+22     	; 0x10e8 <checkWin+0x42>
			{
				/* I LOSE */
				writeByte('L') ;
    10d2:	8c e4       	ldi	r24, 0x4C	; 76
    10d4:	0e 94 05 01 	call	0x20a	; 0x20a <writeByte>
				writeByte('S') ;
    10d8:	83 e5       	ldi	r24, 0x53	; 83
    10da:	0e 94 05 01 	call	0x20a	; 0x20a <writeByte>
				writeByte('\r') ;
    10de:	8d e0       	ldi	r24, 0x0D	; 13
    10e0:	0e 94 05 01 	call	0x20a	; 0x20a <writeByte>
				
				PORTB &= 0b11111011 ;
    10e4:	c2 98       	cbi	0x18, 2	; 24
    10e6:	08 95       	ret
			}
			else
			{
				/* TIE */
				writeByte('T') ;
    10e8:	84 e5       	ldi	r24, 0x54	; 84
    10ea:	0e 94 05 01 	call	0x20a	; 0x20a <writeByte>
				writeByte('E') ;
    10ee:	85 e4       	ldi	r24, 0x45	; 69
    10f0:	0e 94 05 01 	call	0x20a	; 0x20a <writeByte>
				writeByte('\r') ;
    10f4:	8d e0       	ldi	r24, 0x0D	; 13
    10f6:	0e 94 05 01 	call	0x20a	; 0x20a <writeByte>
				
				PORTB &= 0b11110111 ;
    10fa:	c3 98       	cbi	0x18, 3	; 24
    10fc:	08 95       	ret

000010fe <copyChessboard>:
		break;
	}
}

void copyChessboard(void)
{
    10fe:	2f 92       	push	r2
    1100:	3f 92       	push	r3
    1102:	4f 92       	push	r4
    1104:	5f 92       	push	r5
    1106:	6f 92       	push	r6
    1108:	7f 92       	push	r7
    110a:	8f 92       	push	r8
    110c:	9f 92       	push	r9
    110e:	af 92       	push	r10
    1110:	bf 92       	push	r11
    1112:	cf 92       	push	r12
    1114:	df 92       	push	r13
    1116:	ef 92       	push	r14
    1118:	ff 92       	push	r15
    111a:	0f 93       	push	r16
    111c:	1f 93       	push	r17
    111e:	cf 93       	push	r28
    1120:	df 93       	push	r29
    1122:	cd b7       	in	r28, 0x3d	; 61
    1124:	de b7       	in	r29, 0x3e	; 62
    1126:	28 97       	sbiw	r28, 0x08	; 8
    1128:	0f b6       	in	r0, 0x3f	; 63
    112a:	f8 94       	cli
    112c:	de bf       	out	0x3e, r29	; 62
    112e:	0f be       	out	0x3f, r0	; 63
    1130:	cd bf       	out	0x3d, r28	; 61
    1132:	8e ec       	ldi	r24, 0xCE	; 206
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	9a 83       	std	Y+2, r25	; 0x02
    1138:	89 83       	std	Y+1, r24	; 0x01
    113a:	ae ee       	ldi	r26, 0xEE	; 238
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	bc 83       	std	Y+4, r27	; 0x04
    1140:	ab 83       	std	Y+3, r26	; 0x03
    1142:	8e e8       	ldi	r24, 0x8E	; 142
    1144:	48 2e       	mov	r4, r24
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	58 2e       	mov	r5, r24
    114a:	9e e7       	ldi	r25, 0x7E	; 126
    114c:	69 2e       	mov	r6, r25
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	79 2e       	mov	r7, r25
    1152:	2e e5       	ldi	r18, 0x5E	; 94
    1154:	82 2e       	mov	r8, r18
    1156:	21 e0       	ldi	r18, 0x01	; 1
    1158:	92 2e       	mov	r9, r18
    115a:	3e e6       	ldi	r19, 0x6E	; 110
    115c:	a3 2e       	mov	r10, r19
    115e:	31 e0       	ldi	r19, 0x01	; 1
    1160:	b3 2e       	mov	r11, r19
    1162:	46 e9       	ldi	r20, 0x96	; 150
    1164:	c4 2e       	mov	r12, r20
    1166:	40 e0       	ldi	r20, 0x00	; 0
    1168:	d4 2e       	mov	r13, r20
    116a:	5e ef       	ldi	r21, 0xFE	; 254
    116c:	e5 2e       	mov	r14, r21
    116e:	50 e0       	ldi	r21, 0x00	; 0
    1170:	f5 2e       	mov	r15, r21
    1172:	06 ea       	ldi	r16, 0xA6	; 166
    1174:	10 e0       	ldi	r17, 0x00	; 0
    1176:	6e e4       	ldi	r22, 0x4E	; 78
    1178:	71 e0       	ldi	r23, 0x01	; 1
    117a:	4e e9       	ldi	r20, 0x9E	; 158
    117c:	51 e0       	ldi	r21, 0x01	; 1
    117e:	2e e3       	ldi	r18, 0x3E	; 62
    1180:	31 e0       	ldi	r19, 0x01	; 1
    1182:	8e eb       	ldi	r24, 0xBE	; 190
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	ee ed       	ldi	r30, 0xDE	; 222
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	fe 83       	std	Y+6, r31	; 0x06
    118c:	ed 83       	std	Y+5, r30	; 0x05
    118e:	ae e2       	ldi	r26, 0x2E	; 46
    1190:	b1 e0       	ldi	r27, 0x01	; 1
    1192:	b8 87       	std	Y+8, r27	; 0x08
    1194:	af 83       	std	Y+7, r26	; 0x07
    1196:	ee e0       	ldi	r30, 0x0E	; 14
    1198:	f1 e0       	ldi	r31, 0x01	; 1
    119a:	a0 e1       	ldi	r26, 0x10	; 16
    119c:	3a 2e       	mov	r3, r26
	for (uint8_t i = 0; i < SIZE; i++)
	{
		table1[i] = table[i];
    119e:	a9 81       	ldd	r26, Y+1	; 0x01
    11a0:	ba 81       	ldd	r27, Y+2	; 0x02
    11a2:	2d 90       	ld	r2, X+
    11a4:	ba 83       	std	Y+2, r27	; 0x02
    11a6:	a9 83       	std	Y+1, r26	; 0x01
    11a8:	ab 81       	ldd	r26, Y+3	; 0x03
    11aa:	bc 81       	ldd	r27, Y+4	; 0x04
    11ac:	2d 92       	st	X+, r2
    11ae:	bc 83       	std	Y+4, r27	; 0x04
    11b0:	ab 83       	std	Y+3, r26	; 0x03
		table2[i] = table[i];
    11b2:	d2 01       	movw	r26, r4
    11b4:	2d 92       	st	X+, r2
    11b6:	2d 01       	movw	r4, r26
		table3[i] = table[i];
    11b8:	d3 01       	movw	r26, r6
    11ba:	2d 92       	st	X+, r2
    11bc:	3d 01       	movw	r6, r26
		table4[i] = table[i];
    11be:	d4 01       	movw	r26, r8
    11c0:	2d 92       	st	X+, r2
    11c2:	4d 01       	movw	r8, r26
		table5[i] = table[i];
    11c4:	d5 01       	movw	r26, r10
    11c6:	2d 92       	st	X+, r2
    11c8:	5d 01       	movw	r10, r26
		table6[i] = table[i];
    11ca:	d6 01       	movw	r26, r12
    11cc:	2d 92       	st	X+, r2
    11ce:	6d 01       	movw	r12, r26
		table7[i] = table[i];
    11d0:	d7 01       	movw	r26, r14
    11d2:	2d 92       	st	X+, r2
    11d4:	7d 01       	movw	r14, r26
		table8[i] = table[i];
    11d6:	d8 01       	movw	r26, r16
    11d8:	2d 92       	st	X+, r2
    11da:	8d 01       	movw	r16, r26
		table9[i] = table[i];
    11dc:	db 01       	movw	r26, r22
    11de:	2d 92       	st	X+, r2
    11e0:	bd 01       	movw	r22, r26
		table10[i] = table[i];
    11e2:	da 01       	movw	r26, r20
    11e4:	2d 92       	st	X+, r2
    11e6:	ad 01       	movw	r20, r26
		table11[i] = table[i];
    11e8:	d9 01       	movw	r26, r18
    11ea:	2d 92       	st	X+, r2
    11ec:	9d 01       	movw	r18, r26
		table12[i] = table[i];
    11ee:	dc 01       	movw	r26, r24
    11f0:	2d 92       	st	X+, r2
    11f2:	cd 01       	movw	r24, r26
		table13[i] = table[i];
    11f4:	ad 81       	ldd	r26, Y+5	; 0x05
    11f6:	be 81       	ldd	r27, Y+6	; 0x06
    11f8:	2d 92       	st	X+, r2
    11fa:	be 83       	std	Y+6, r27	; 0x06
    11fc:	ad 83       	std	Y+5, r26	; 0x05
		table14[i] = table[i];
    11fe:	af 81       	ldd	r26, Y+7	; 0x07
    1200:	b8 85       	ldd	r27, Y+8	; 0x08
    1202:	2d 92       	st	X+, r2
    1204:	b8 87       	std	Y+8, r27	; 0x08
    1206:	af 83       	std	Y+7, r26	; 0x07
		table15[i] = table[i]; 
    1208:	21 92       	st	Z+, r2
    120a:	3a 94       	dec	r3
	}
}

void copyChessboard(void)
{
	for (uint8_t i = 0; i < SIZE; i++)
    120c:	31 10       	cpse	r3, r1
    120e:	c7 cf       	rjmp	.-114    	; 0x119e <copyChessboard+0xa0>
		table13[i] = table[i];
		table14[i] = table[i];
		table15[i] = table[i]; 
	}
	
}
    1210:	28 96       	adiw	r28, 0x08	; 8
    1212:	0f b6       	in	r0, 0x3f	; 63
    1214:	f8 94       	cli
    1216:	de bf       	out	0x3e, r29	; 62
    1218:	0f be       	out	0x3f, r0	; 63
    121a:	cd bf       	out	0x3d, r28	; 61
    121c:	df 91       	pop	r29
    121e:	cf 91       	pop	r28
    1220:	1f 91       	pop	r17
    1222:	0f 91       	pop	r16
    1224:	ff 90       	pop	r15
    1226:	ef 90       	pop	r14
    1228:	df 90       	pop	r13
    122a:	cf 90       	pop	r12
    122c:	bf 90       	pop	r11
    122e:	af 90       	pop	r10
    1230:	9f 90       	pop	r9
    1232:	8f 90       	pop	r8
    1234:	7f 90       	pop	r7
    1236:	6f 90       	pop	r6
    1238:	5f 90       	pop	r5
    123a:	4f 90       	pop	r4
    123c:	3f 90       	pop	r3
    123e:	2f 90       	pop	r2
    1240:	08 95       	ret

00001242 <scanCopyChessBoard>:

uint8_t scanCopyChessBoard(char mine,uint8_t chessBoard[])
{
    1242:	98 2f       	mov	r25, r24
    1244:	ab 01       	movw	r20, r22
    1246:	40 5f       	subi	r20, 0xF0	; 240
    1248:	5f 4f       	sbci	r21, 0xFF	; 255
	uint8_t buffer = 0 ;
	uint8_t temp1 = 0 ;
	uint8_t temp2 = 0 ;
	uint8_t mineCount = 0 ;
    124a:	80 e0       	ldi	r24, 0x00	; 0
	
	for (uint8_t index = 0 ; index < SIZE ; index++)
	{
		buffer = chessBoard[index] ;
    124c:	fb 01       	movw	r30, r22
    124e:	21 91       	ld	r18, Z+
    1250:	bf 01       	movw	r22, r30
		/* First column in half byte */
		temp1 = buffer & 0b00010000 ;								/* Checks for enabled position in chessboard */
		temp1 = (temp1 >> 4) ;
		if (temp1 == 1)
    1252:	24 ff       	sbrs	r18, 4
    1254:	08 c0       	rjmp	.+16     	; 0x1266 <scanCopyChessBoard+0x24>
		{
			temp2 = buffer & 0b00000001 ;							/* Checks the colour of this checker */
			if (temp2 == 1)
    1256:	20 ff       	sbrs	r18, 0
    1258:	03 c0       	rjmp	.+6      	; 0x1260 <scanCopyChessBoard+0x1e>
			{
				/* Black checker */
				if (mine == 'B')
    125a:	92 34       	cpi	r25, 0x42	; 66
    125c:	21 f4       	brne	.+8      	; 0x1266 <scanCopyChessBoard+0x24>
    125e:	02 c0       	rjmp	.+4      	; 0x1264 <scanCopyChessBoard+0x22>
				}
			}
			else
			{
				/* White checker */
				if (mine == 'W')
    1260:	97 35       	cpi	r25, 0x57	; 87
    1262:	09 f4       	brne	.+2      	; 0x1266 <scanCopyChessBoard+0x24>
				{
					mineCount++ ;
    1264:	8f 5f       	subi	r24, 0xFF	; 255
		}
		
		/* Second column in half byte */
		temp1 = buffer & 0b00100000 ;
		temp1 = (temp1 >> 5) ;
		if (temp1 == 1)
    1266:	25 ff       	sbrs	r18, 5
    1268:	08 c0       	rjmp	.+16     	; 0x127a <scanCopyChessBoard+0x38>
		{
			/* Enabled position. There is a checker */
			temp2 = buffer & 0b00000010 ;
			temp2 = (temp2 >> 1) ;
			if (temp2 == 1)
    126a:	21 ff       	sbrs	r18, 1
    126c:	03 c0       	rjmp	.+6      	; 0x1274 <scanCopyChessBoard+0x32>
			{
				/* Black checker */
				if (mine == 'B')
    126e:	92 34       	cpi	r25, 0x42	; 66
    1270:	21 f4       	brne	.+8      	; 0x127a <scanCopyChessBoard+0x38>
    1272:	02 c0       	rjmp	.+4      	; 0x1278 <scanCopyChessBoard+0x36>
				}
			}
			else
			{
				/* White checker */
				if (mine == 'W')
    1274:	97 35       	cpi	r25, 0x57	; 87
    1276:	09 f4       	brne	.+2      	; 0x127a <scanCopyChessBoard+0x38>
				{
					mineCount++ ;
    1278:	8f 5f       	subi	r24, 0xFF	; 255
		}
		
		/* Third column in half byte */
		temp1 = buffer & 0b01000000 ;
		temp1 = (temp1 >> 6) ;
		if (temp1 == 1)
    127a:	26 ff       	sbrs	r18, 6
    127c:	08 c0       	rjmp	.+16     	; 0x128e <scanCopyChessBoard+0x4c>
		{
			/* There is a checker */
			temp2 = buffer & 0b00000100 ;
			temp2 = (temp2 >> 2) ;
			if (temp2 == 1)
    127e:	22 ff       	sbrs	r18, 2
    1280:	03 c0       	rjmp	.+6      	; 0x1288 <scanCopyChessBoard+0x46>
			{
				/* Black checker */
				if (mine == 'B')
    1282:	92 34       	cpi	r25, 0x42	; 66
    1284:	21 f4       	brne	.+8      	; 0x128e <scanCopyChessBoard+0x4c>
    1286:	02 c0       	rjmp	.+4      	; 0x128c <scanCopyChessBoard+0x4a>
				}
			}
			else
			{
				/* White checker */
				if (mine == 'W')
    1288:	97 35       	cpi	r25, 0x57	; 87
    128a:	09 f4       	brne	.+2      	; 0x128e <scanCopyChessBoard+0x4c>
				{
					mineCount++ ;
    128c:	8f 5f       	subi	r24, 0xFF	; 255
		}
		
		/* Fourth column in half byte */
		temp1 = buffer & 0b10000000 ;
		temp1 = (temp1 >> 7) ;
		if (temp1)
    128e:	27 ff       	sbrs	r18, 7
    1290:	08 c0       	rjmp	.+16     	; 0x12a2 <scanCopyChessBoard+0x60>
		{
			/* There is a checker */
			temp2 = buffer & 0b00001000 ;
			temp2 = (temp2 >> 3) ;
			if (temp2 == 1)
    1292:	23 ff       	sbrs	r18, 3
    1294:	03 c0       	rjmp	.+6      	; 0x129c <scanCopyChessBoard+0x5a>
			{
				/* Black checker */
				if (mine == 'B')
    1296:	92 34       	cpi	r25, 0x42	; 66
    1298:	21 f4       	brne	.+8      	; 0x12a2 <scanCopyChessBoard+0x60>
    129a:	02 c0       	rjmp	.+4      	; 0x12a0 <scanCopyChessBoard+0x5e>
				}
			}
			else
			{
				/* White checker */
				if (mine == 'W')
    129c:	97 35       	cpi	r25, 0x57	; 87
    129e:	09 f4       	brne	.+2      	; 0x12a2 <scanCopyChessBoard+0x60>
				{
					mineCount++ ;
    12a0:	8f 5f       	subi	r24, 0xFF	; 255
	uint8_t buffer = 0 ;
	uint8_t temp1 = 0 ;
	uint8_t temp2 = 0 ;
	uint8_t mineCount = 0 ;
	
	for (uint8_t index = 0 ; index < SIZE ; index++)
    12a2:	46 17       	cp	r20, r22
    12a4:	57 07       	cpc	r21, r23
    12a6:	91 f6       	brne	.-92     	; 0x124c <scanCopyChessBoard+0xa>
		
	}
	
	return mineCount ;
	
}
    12a8:	08 95       	ret

000012aa <Tactics>:


void Tactics(char mine)
{
    12aa:	af 92       	push	r10
    12ac:	bf 92       	push	r11
    12ae:	cf 92       	push	r12
    12b0:	df 92       	push	r13
    12b2:	ef 92       	push	r14
    12b4:	ff 92       	push	r15
    12b6:	0f 93       	push	r16
    12b8:	1f 93       	push	r17
    12ba:	cf 93       	push	r28
    12bc:	df 93       	push	r29
    12be:	d8 2f       	mov	r29, r24
    12c0:	86 eb       	ldi	r24, 0xB6	; 182
    12c2:	a8 2e       	mov	r10, r24
    12c4:	80 e0       	ldi	r24, 0x00	; 0
    12c6:	b8 2e       	mov	r11, r24
    12c8:	c1 e4       	ldi	r28, 0x41	; 65
	uint8_t buffer = 0 ;
	uint8_t temp = 0;
	uint8_t count = 0 ;
	uint8_t max = 0 ;
    12ca:	f1 2c       	mov	r15, r1

void Tactics(char mine)
{
	uint8_t buffer = 0 ;
	uint8_t temp = 0;
	uint8_t count = 0 ;
    12cc:	e1 2c       	mov	r14, r1
	uint8_t column = 0 ;
	for (uint8_t index = 0; index < SIZE/2; index++)
	{
		/* First check line */
		line = 65 + index ;
		buffer = mineValidtable[index] ;
    12ce:	f5 01       	movw	r30, r10
    12d0:	d1 90       	ld	r13, Z+
    12d2:	5f 01       	movw	r10, r30
		/* Check column */
		temp = buffer & 0b00000001 ;
		if (temp == 1)
    12d4:	fd 2d       	mov	r31, r13
    12d6:	f1 70       	andi	r31, 0x01	; 1
    12d8:	cf 2e       	mov	r12, r31
    12da:	d0 fe       	sbrs	r13, 0
    12dc:	c6 c0       	rjmp	.+396    	; 0x146a <Tactics+0x1c0>
		{
			/* First Valid in this line */
			column = 1 ;
			count++ ;
    12de:	e3 94       	inc	r14
			switch(count)
    12e0:	8e 2d       	mov	r24, r14
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	fc 01       	movw	r30, r24
    12e6:	31 97       	sbiw	r30, 0x01	; 1
    12e8:	ee 30       	cpi	r30, 0x0E	; 14
    12ea:	f1 05       	cpc	r31, r1
    12ec:	08 f0       	brcs	.+2      	; 0x12f0 <Tactics+0x46>
    12ee:	a2 c0       	rjmp	.+324    	; 0x1434 <Tactics+0x18a>
    12f0:	e6 5d       	subi	r30, 0xD6	; 214
    12f2:	ff 4f       	sbci	r31, 0xFF	; 255
    12f4:	0c 94 b6 10 	jmp	0x216c	; 0x216c <__tablejump2__>
			{
				case 1:
					setChecker(line,column,mine,table1) ;
    12f8:	2e ee       	ldi	r18, 0xEE	; 238
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	4d 2f       	mov	r20, r29
    12fe:	61 e0       	ldi	r22, 0x01	; 1
    1300:	8c 2f       	mov	r24, r28
    1302:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
					TurnOtherCheckers(line,column,enemy,mine,table1) ;
    1306:	0e ee       	ldi	r16, 0xEE	; 238
    1308:	10 e0       	ldi	r17, 0x00	; 0
    130a:	81 c0       	rjmp	.+258    	; 0x140e <Tactics+0x164>
						myColumn = column ;
					}
				break;
				
				case 2:
					setChecker(line,column,mine,table2) ;
    130c:	2e e8       	ldi	r18, 0x8E	; 142
    130e:	31 e0       	ldi	r19, 0x01	; 1
    1310:	4d 2f       	mov	r20, r29
    1312:	61 e0       	ldi	r22, 0x01	; 1
    1314:	8c 2f       	mov	r24, r28
    1316:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
					TurnOtherCheckers(line,column,enemy,mine,table2) ;
    131a:	0e e8       	ldi	r16, 0x8E	; 142
    131c:	11 e0       	ldi	r17, 0x01	; 1
    131e:	77 c0       	rjmp	.+238    	; 0x140e <Tactics+0x164>
						myColumn = column ;
					}
				break;
				
				case 3:
					setChecker(line,column,mine,table3) ;
    1320:	2e e7       	ldi	r18, 0x7E	; 126
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	4d 2f       	mov	r20, r29
    1326:	61 e0       	ldi	r22, 0x01	; 1
    1328:	8c 2f       	mov	r24, r28
    132a:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
					TurnOtherCheckers(line,column,enemy,mine,table3) ;
    132e:	0e e7       	ldi	r16, 0x7E	; 126
    1330:	10 e0       	ldi	r17, 0x00	; 0
    1332:	6d c0       	rjmp	.+218    	; 0x140e <Tactics+0x164>
						myColumn = column ;
					}
				break;
				
				case 4:
					setChecker(line,column,mine,table4) ;
    1334:	2e e5       	ldi	r18, 0x5E	; 94
    1336:	31 e0       	ldi	r19, 0x01	; 1
    1338:	4d 2f       	mov	r20, r29
    133a:	61 e0       	ldi	r22, 0x01	; 1
    133c:	8c 2f       	mov	r24, r28
    133e:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
					TurnOtherCheckers(line,column,enemy,mine,table4) ;
    1342:	0e e5       	ldi	r16, 0x5E	; 94
    1344:	11 e0       	ldi	r17, 0x01	; 1
    1346:	63 c0       	rjmp	.+198    	; 0x140e <Tactics+0x164>
						myColumn = column ;
					}
				break;
				
				case 5:
					setChecker(line,column,mine,table5) ;
    1348:	2e e6       	ldi	r18, 0x6E	; 110
    134a:	31 e0       	ldi	r19, 0x01	; 1
    134c:	4d 2f       	mov	r20, r29
    134e:	61 e0       	ldi	r22, 0x01	; 1
    1350:	8c 2f       	mov	r24, r28
    1352:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
					TurnOtherCheckers(line,column,enemy,mine,table5) ;
    1356:	0e e6       	ldi	r16, 0x6E	; 110
    1358:	11 e0       	ldi	r17, 0x01	; 1
    135a:	59 c0       	rjmp	.+178    	; 0x140e <Tactics+0x164>
						myColumn = column ;
					}
				break;
				
				case 6:
					setChecker(line,column,mine,table6) ;
    135c:	26 e9       	ldi	r18, 0x96	; 150
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	4d 2f       	mov	r20, r29
    1362:	61 e0       	ldi	r22, 0x01	; 1
    1364:	8c 2f       	mov	r24, r28
    1366:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
					TurnOtherCheckers(line,column,enemy,mine,table6) ;
    136a:	06 e9       	ldi	r16, 0x96	; 150
    136c:	10 e0       	ldi	r17, 0x00	; 0
    136e:	4f c0       	rjmp	.+158    	; 0x140e <Tactics+0x164>
						myColumn = column ;
					}
				break;
				
				case 7:
					setChecker(line,column,mine,table7) ;
    1370:	2e ef       	ldi	r18, 0xFE	; 254
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	4d 2f       	mov	r20, r29
    1376:	61 e0       	ldi	r22, 0x01	; 1
    1378:	8c 2f       	mov	r24, r28
    137a:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
					TurnOtherCheckers(line,column,enemy,mine,table7) ;
    137e:	0e ef       	ldi	r16, 0xFE	; 254
    1380:	10 e0       	ldi	r17, 0x00	; 0
    1382:	45 c0       	rjmp	.+138    	; 0x140e <Tactics+0x164>
						myColumn = column ;
					}
				break;
				
				case 8:
				setChecker(line,column,mine,table8) ;
    1384:	26 ea       	ldi	r18, 0xA6	; 166
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	4d 2f       	mov	r20, r29
    138a:	61 e0       	ldi	r22, 0x01	; 1
    138c:	8c 2f       	mov	r24, r28
    138e:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table8) ;
    1392:	06 ea       	ldi	r16, 0xA6	; 166
    1394:	10 e0       	ldi	r17, 0x00	; 0
    1396:	3b c0       	rjmp	.+118    	; 0x140e <Tactics+0x164>
					myColumn = column ;
				}
				break;
				
				case 9:
				setChecker(line,column,mine,table9) ;
    1398:	2e e4       	ldi	r18, 0x4E	; 78
    139a:	31 e0       	ldi	r19, 0x01	; 1
    139c:	4d 2f       	mov	r20, r29
    139e:	61 e0       	ldi	r22, 0x01	; 1
    13a0:	8c 2f       	mov	r24, r28
    13a2:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
    13a6:	0e e4       	ldi	r16, 0x4E	; 78
    13a8:	11 e0       	ldi	r17, 0x01	; 1
    13aa:	31 c0       	rjmp	.+98     	; 0x140e <Tactics+0x164>
					myColumn = column ;
				}
				break;
				
				case 10:
				setChecker(line,column,mine,table10) ;
    13ac:	2e e9       	ldi	r18, 0x9E	; 158
    13ae:	31 e0       	ldi	r19, 0x01	; 1
    13b0:	4d 2f       	mov	r20, r29
    13b2:	61 e0       	ldi	r22, 0x01	; 1
    13b4:	8c 2f       	mov	r24, r28
    13b6:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table10) ;
    13ba:	0e e9       	ldi	r16, 0x9E	; 158
    13bc:	11 e0       	ldi	r17, 0x01	; 1
    13be:	27 c0       	rjmp	.+78     	; 0x140e <Tactics+0x164>
					myColumn = column ;
				}
				break;
				
				case 11:
				setChecker(line,column,mine,table11) ;
    13c0:	2e e3       	ldi	r18, 0x3E	; 62
    13c2:	31 e0       	ldi	r19, 0x01	; 1
    13c4:	4d 2f       	mov	r20, r29
    13c6:	61 e0       	ldi	r22, 0x01	; 1
    13c8:	8c 2f       	mov	r24, r28
    13ca:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table11) ;
    13ce:	0e e3       	ldi	r16, 0x3E	; 62
    13d0:	11 e0       	ldi	r17, 0x01	; 1
    13d2:	1d c0       	rjmp	.+58     	; 0x140e <Tactics+0x164>
					myColumn = column ;
				}
				break;
				
				case 12:
				setChecker(line,column,mine,table12) ;
    13d4:	2e eb       	ldi	r18, 0xBE	; 190
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	4d 2f       	mov	r20, r29
    13da:	61 e0       	ldi	r22, 0x01	; 1
    13dc:	8c 2f       	mov	r24, r28
    13de:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table12) ;
    13e2:	0e eb       	ldi	r16, 0xBE	; 190
    13e4:	10 e0       	ldi	r17, 0x00	; 0
    13e6:	13 c0       	rjmp	.+38     	; 0x140e <Tactics+0x164>
					myColumn = column ;
				}
				break;
				
				case 13:
				setChecker(line,column,mine,table13) ;
    13e8:	2e ed       	ldi	r18, 0xDE	; 222
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	4d 2f       	mov	r20, r29
    13ee:	61 e0       	ldi	r22, 0x01	; 1
    13f0:	8c 2f       	mov	r24, r28
    13f2:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table13) ;
    13f6:	0e ed       	ldi	r16, 0xDE	; 222
    13f8:	10 e0       	ldi	r17, 0x00	; 0
    13fa:	09 c0       	rjmp	.+18     	; 0x140e <Tactics+0x164>
					myColumn = column ;
				}
				break;
				
				case 14:
				setChecker(line,column,mine,table14) ;
    13fc:	2e e2       	ldi	r18, 0x2E	; 46
    13fe:	31 e0       	ldi	r19, 0x01	; 1
    1400:	4d 2f       	mov	r20, r29
    1402:	61 e0       	ldi	r22, 0x01	; 1
    1404:	8c 2f       	mov	r24, r28
    1406:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table14) ;
    140a:	0e e2       	ldi	r16, 0x2E	; 46
    140c:	11 e0       	ldi	r17, 0x01	; 1
    140e:	2d 2f       	mov	r18, r29
    1410:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    1414:	61 e0       	ldi	r22, 0x01	; 1
    1416:	8c 2f       	mov	r24, r28
    1418:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table14) ;
    141c:	b8 01       	movw	r22, r16
    141e:	8d 2f       	mov	r24, r29
    1420:	0e 94 21 09 	call	0x1242	; 0x1242 <scanCopyChessBoard>
				if (max < checkers)
    1424:	f8 16       	cp	r15, r24
    1426:	08 f5       	brcc	.+66     	; 0x146a <Tactics+0x1c0>
				{
					max = checkers ;
					myLine = line ;
    1428:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <myLine>
					myColumn = column ;
    142c:	91 e0       	ldi	r25, 0x01	; 1
    142e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
    1432:	1a c0       	rjmp	.+52     	; 0x1468 <Tactics+0x1be>
				}
				break; 
				
				default:
				setChecker(line,column,mine,table9) ;
    1434:	2e e4       	ldi	r18, 0x4E	; 78
    1436:	31 e0       	ldi	r19, 0x01	; 1
    1438:	4d 2f       	mov	r20, r29
    143a:	61 e0       	ldi	r22, 0x01	; 1
    143c:	8c 2f       	mov	r24, r28
    143e:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
    1442:	0e e4       	ldi	r16, 0x4E	; 78
    1444:	11 e0       	ldi	r17, 0x01	; 1
    1446:	2d 2f       	mov	r18, r29
    1448:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    144c:	61 e0       	ldi	r22, 0x01	; 1
    144e:	8c 2f       	mov	r24, r28
    1450:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table9) ;
    1454:	b8 01       	movw	r22, r16
    1456:	8d 2f       	mov	r24, r29
    1458:	0e 94 21 09 	call	0x1242	; 0x1242 <scanCopyChessBoard>
				if (max < checkers)
    145c:	f8 16       	cp	r15, r24
    145e:	28 f4       	brcc	.+10     	; 0x146a <Tactics+0x1c0>
				{
					max = checkers ;
					myLine = line ;
    1460:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <myLine>
					myColumn = column ;
    1464:	c0 92 60 00 	sts	0x0060, r12	; 0x800060 <__data_start>
    1468:	f8 2e       	mov	r15, r24
		}
		
		/* Second valid in this line */
		temp = buffer & 0b00000010 ;
		temp = (temp >> 1) ;
		if (temp == 1)
    146a:	d1 fe       	sbrs	r13, 1
    146c:	ab c0       	rjmp	.+342    	; 0x15c4 <Tactics+0x31a>
		{
			column = 2 ;
			count++ ;
    146e:	e3 94       	inc	r14
			switch(count)
    1470:	8e 2d       	mov	r24, r14
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	fc 01       	movw	r30, r24
    1476:	31 97       	sbiw	r30, 0x01	; 1
    1478:	ee 30       	cpi	r30, 0x0E	; 14
    147a:	f1 05       	cpc	r31, r1
    147c:	08 f0       	brcs	.+2      	; 0x1480 <Tactics+0x1d6>
    147e:	86 c0       	rjmp	.+268    	; 0x158c <Tactics+0x2e2>
    1480:	e8 5c       	subi	r30, 0xC8	; 200
    1482:	ff 4f       	sbci	r31, 0xFF	; 255
    1484:	0c 94 b6 10 	jmp	0x216c	; 0x216c <__tablejump2__>
			{
				case 1:
				setChecker(line,column,mine,table1) ;
    1488:	2e ee       	ldi	r18, 0xEE	; 238
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	4d 2f       	mov	r20, r29
    148e:	62 e0       	ldi	r22, 0x02	; 2
    1490:	8c 2f       	mov	r24, r28
    1492:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table1) ;
    1496:	0e ee       	ldi	r16, 0xEE	; 238
    1498:	10 e0       	ldi	r17, 0x00	; 0
    149a:	81 c0       	rjmp	.+258    	; 0x159e <Tactics+0x2f4>
					myColumn = column ;
				}
				break;
				
				case 2:
				setChecker(line,column,mine,table2) ;
    149c:	2e e8       	ldi	r18, 0x8E	; 142
    149e:	31 e0       	ldi	r19, 0x01	; 1
    14a0:	4d 2f       	mov	r20, r29
    14a2:	62 e0       	ldi	r22, 0x02	; 2
    14a4:	8c 2f       	mov	r24, r28
    14a6:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table2) ;
    14aa:	0e e8       	ldi	r16, 0x8E	; 142
    14ac:	11 e0       	ldi	r17, 0x01	; 1
    14ae:	77 c0       	rjmp	.+238    	; 0x159e <Tactics+0x2f4>
					myColumn = column ;
				}
				break;
				
				case 3:
				setChecker(line,column,mine,table3) ;
    14b0:	2e e7       	ldi	r18, 0x7E	; 126
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	4d 2f       	mov	r20, r29
    14b6:	62 e0       	ldi	r22, 0x02	; 2
    14b8:	8c 2f       	mov	r24, r28
    14ba:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table3) ;
    14be:	0e e7       	ldi	r16, 0x7E	; 126
    14c0:	10 e0       	ldi	r17, 0x00	; 0
    14c2:	6d c0       	rjmp	.+218    	; 0x159e <Tactics+0x2f4>
					myColumn = column ;
				}
				break;
				
				case 4:
				setChecker(line,column,mine,table4) ;
    14c4:	2e e5       	ldi	r18, 0x5E	; 94
    14c6:	31 e0       	ldi	r19, 0x01	; 1
    14c8:	4d 2f       	mov	r20, r29
    14ca:	62 e0       	ldi	r22, 0x02	; 2
    14cc:	8c 2f       	mov	r24, r28
    14ce:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table4) ;
    14d2:	0e e5       	ldi	r16, 0x5E	; 94
    14d4:	11 e0       	ldi	r17, 0x01	; 1
    14d6:	63 c0       	rjmp	.+198    	; 0x159e <Tactics+0x2f4>
					myColumn = column ;
				}
				break;
				
				case 5:
				setChecker(line,column,mine,table5) ;
    14d8:	2e e6       	ldi	r18, 0x6E	; 110
    14da:	31 e0       	ldi	r19, 0x01	; 1
    14dc:	4d 2f       	mov	r20, r29
    14de:	62 e0       	ldi	r22, 0x02	; 2
    14e0:	8c 2f       	mov	r24, r28
    14e2:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table5) ;
    14e6:	0e e6       	ldi	r16, 0x6E	; 110
    14e8:	11 e0       	ldi	r17, 0x01	; 1
    14ea:	59 c0       	rjmp	.+178    	; 0x159e <Tactics+0x2f4>
					myColumn = column ;
				}
				break;
				
				case 6:
				setChecker(line,column,mine,table6) ;
    14ec:	26 e9       	ldi	r18, 0x96	; 150
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	4d 2f       	mov	r20, r29
    14f2:	62 e0       	ldi	r22, 0x02	; 2
    14f4:	8c 2f       	mov	r24, r28
    14f6:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table6) ;
    14fa:	06 e9       	ldi	r16, 0x96	; 150
    14fc:	10 e0       	ldi	r17, 0x00	; 0
    14fe:	4f c0       	rjmp	.+158    	; 0x159e <Tactics+0x2f4>
					myColumn = column ;
				}
				break;
				
				case 7:
				setChecker(line,column,mine,table7) ;
    1500:	2e ef       	ldi	r18, 0xFE	; 254
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	4d 2f       	mov	r20, r29
    1506:	62 e0       	ldi	r22, 0x02	; 2
    1508:	8c 2f       	mov	r24, r28
    150a:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table7) ;
    150e:	0e ef       	ldi	r16, 0xFE	; 254
    1510:	10 e0       	ldi	r17, 0x00	; 0
    1512:	45 c0       	rjmp	.+138    	; 0x159e <Tactics+0x2f4>
					myColumn = column ;
				}
				break;
				
				case 8:
				setChecker(line,column,mine,table8) ;
    1514:	26 ea       	ldi	r18, 0xA6	; 166
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	4d 2f       	mov	r20, r29
    151a:	62 e0       	ldi	r22, 0x02	; 2
    151c:	8c 2f       	mov	r24, r28
    151e:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table8) ;
    1522:	06 ea       	ldi	r16, 0xA6	; 166
    1524:	10 e0       	ldi	r17, 0x00	; 0
    1526:	3b c0       	rjmp	.+118    	; 0x159e <Tactics+0x2f4>
					myColumn = column ;
				}
				break;
				
				case 10:
				setChecker(line,column,mine,table10) ;
    1528:	2e e9       	ldi	r18, 0x9E	; 158
    152a:	31 e0       	ldi	r19, 0x01	; 1
    152c:	4d 2f       	mov	r20, r29
    152e:	62 e0       	ldi	r22, 0x02	; 2
    1530:	8c 2f       	mov	r24, r28
    1532:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table10) ;
    1536:	0e e9       	ldi	r16, 0x9E	; 158
    1538:	11 e0       	ldi	r17, 0x01	; 1
    153a:	31 c0       	rjmp	.+98     	; 0x159e <Tactics+0x2f4>
					myColumn = column ;
				}
				break;
				
				case 11:
				setChecker(line,column,mine,table11) ;
    153c:	2e e3       	ldi	r18, 0x3E	; 62
    153e:	31 e0       	ldi	r19, 0x01	; 1
    1540:	4d 2f       	mov	r20, r29
    1542:	62 e0       	ldi	r22, 0x02	; 2
    1544:	8c 2f       	mov	r24, r28
    1546:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table11) ;
    154a:	0e e3       	ldi	r16, 0x3E	; 62
    154c:	11 e0       	ldi	r17, 0x01	; 1
    154e:	27 c0       	rjmp	.+78     	; 0x159e <Tactics+0x2f4>
					myColumn = column ;
				}
				break;
				
				case 12:
				setChecker(line,column,mine,table12) ;
    1550:	2e eb       	ldi	r18, 0xBE	; 190
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	4d 2f       	mov	r20, r29
    1556:	62 e0       	ldi	r22, 0x02	; 2
    1558:	8c 2f       	mov	r24, r28
    155a:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table12) ;
    155e:	0e eb       	ldi	r16, 0xBE	; 190
    1560:	10 e0       	ldi	r17, 0x00	; 0
    1562:	1d c0       	rjmp	.+58     	; 0x159e <Tactics+0x2f4>
					myColumn = column ;
				}
				break;
				
				case 13:
				setChecker(line,column,mine,table13) ;
    1564:	2e ed       	ldi	r18, 0xDE	; 222
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	4d 2f       	mov	r20, r29
    156a:	62 e0       	ldi	r22, 0x02	; 2
    156c:	8c 2f       	mov	r24, r28
    156e:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table13) ;
    1572:	0e ed       	ldi	r16, 0xDE	; 222
    1574:	10 e0       	ldi	r17, 0x00	; 0
    1576:	13 c0       	rjmp	.+38     	; 0x159e <Tactics+0x2f4>
					myColumn = column ;
				}
				break;
				
				case 14:
				setChecker(line,column,mine,table14) ;
    1578:	2e e2       	ldi	r18, 0x2E	; 46
    157a:	31 e0       	ldi	r19, 0x01	; 1
    157c:	4d 2f       	mov	r20, r29
    157e:	62 e0       	ldi	r22, 0x02	; 2
    1580:	8c 2f       	mov	r24, r28
    1582:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table14) ;
    1586:	0e e2       	ldi	r16, 0x2E	; 46
    1588:	11 e0       	ldi	r17, 0x01	; 1
    158a:	09 c0       	rjmp	.+18     	; 0x159e <Tactics+0x2f4>
					myColumn = column ;
				}
				break;
			
				default:
				setChecker(line,column,mine,table9) ;
    158c:	2e e4       	ldi	r18, 0x4E	; 78
    158e:	31 e0       	ldi	r19, 0x01	; 1
    1590:	4d 2f       	mov	r20, r29
    1592:	62 e0       	ldi	r22, 0x02	; 2
    1594:	8c 2f       	mov	r24, r28
    1596:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
    159a:	0e e4       	ldi	r16, 0x4E	; 78
    159c:	11 e0       	ldi	r17, 0x01	; 1
    159e:	2d 2f       	mov	r18, r29
    15a0:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    15a4:	62 e0       	ldi	r22, 0x02	; 2
    15a6:	8c 2f       	mov	r24, r28
    15a8:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table9) ;
    15ac:	b8 01       	movw	r22, r16
    15ae:	8d 2f       	mov	r24, r29
    15b0:	0e 94 21 09 	call	0x1242	; 0x1242 <scanCopyChessBoard>
				if (max < checkers)
    15b4:	f8 16       	cp	r15, r24
    15b6:	30 f4       	brcc	.+12     	; 0x15c4 <Tactics+0x31a>
				{
					max = checkers ;
					myLine = line ;
    15b8:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <myLine>
					myColumn = column ;
    15bc:	92 e0       	ldi	r25, 0x02	; 2
    15be:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
    15c2:	f8 2e       	mov	r15, r24
			
		}
		/* Third valid move in this line */
		temp = buffer & 0b00000100 ;
		temp = (temp >> 2) ;
		if (temp == 1)
    15c4:	d2 fe       	sbrs	r13, 2
    15c6:	ab c0       	rjmp	.+342    	; 0x171e <Tactics+0x474>
		{
			
			column = 3 ;
			count++ ;
    15c8:	e3 94       	inc	r14
			switch(count)
    15ca:	8e 2d       	mov	r24, r14
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	fc 01       	movw	r30, r24
    15d0:	31 97       	sbiw	r30, 0x01	; 1
    15d2:	ee 30       	cpi	r30, 0x0E	; 14
    15d4:	f1 05       	cpc	r31, r1
    15d6:	08 f0       	brcs	.+2      	; 0x15da <Tactics+0x330>
    15d8:	86 c0       	rjmp	.+268    	; 0x16e6 <Tactics+0x43c>
    15da:	ea 5b       	subi	r30, 0xBA	; 186
    15dc:	ff 4f       	sbci	r31, 0xFF	; 255
    15de:	0c 94 b6 10 	jmp	0x216c	; 0x216c <__tablejump2__>
			{
				case 1:
				setChecker(line,column,mine,table1) ;
    15e2:	2e ee       	ldi	r18, 0xEE	; 238
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	4d 2f       	mov	r20, r29
    15e8:	63 e0       	ldi	r22, 0x03	; 3
    15ea:	8c 2f       	mov	r24, r28
    15ec:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table1) ;
    15f0:	0e ee       	ldi	r16, 0xEE	; 238
    15f2:	10 e0       	ldi	r17, 0x00	; 0
    15f4:	81 c0       	rjmp	.+258    	; 0x16f8 <Tactics+0x44e>
					myColumn = column ;
				}
				break;
				
				case 2:
				setChecker(line,column,mine,table2) ;
    15f6:	2e e8       	ldi	r18, 0x8E	; 142
    15f8:	31 e0       	ldi	r19, 0x01	; 1
    15fa:	4d 2f       	mov	r20, r29
    15fc:	63 e0       	ldi	r22, 0x03	; 3
    15fe:	8c 2f       	mov	r24, r28
    1600:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table2) ;
    1604:	0e e8       	ldi	r16, 0x8E	; 142
    1606:	11 e0       	ldi	r17, 0x01	; 1
    1608:	77 c0       	rjmp	.+238    	; 0x16f8 <Tactics+0x44e>
					myColumn = column ;
				}
				break;
				
				case 3:
				setChecker(line,column,mine,table3) ;
    160a:	2e e7       	ldi	r18, 0x7E	; 126
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	4d 2f       	mov	r20, r29
    1610:	63 e0       	ldi	r22, 0x03	; 3
    1612:	8c 2f       	mov	r24, r28
    1614:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table3) ;
    1618:	0e e7       	ldi	r16, 0x7E	; 126
    161a:	10 e0       	ldi	r17, 0x00	; 0
    161c:	6d c0       	rjmp	.+218    	; 0x16f8 <Tactics+0x44e>
					myColumn = column ;
				}
				break;
				
				case 4:
				setChecker(line,column,mine,table4) ;
    161e:	2e e5       	ldi	r18, 0x5E	; 94
    1620:	31 e0       	ldi	r19, 0x01	; 1
    1622:	4d 2f       	mov	r20, r29
    1624:	63 e0       	ldi	r22, 0x03	; 3
    1626:	8c 2f       	mov	r24, r28
    1628:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table4) ;
    162c:	0e e5       	ldi	r16, 0x5E	; 94
    162e:	11 e0       	ldi	r17, 0x01	; 1
    1630:	63 c0       	rjmp	.+198    	; 0x16f8 <Tactics+0x44e>
					myColumn = column ;
				}
				break;
				
				case 5:
				setChecker(line,column,mine,table5) ;
    1632:	2e e6       	ldi	r18, 0x6E	; 110
    1634:	31 e0       	ldi	r19, 0x01	; 1
    1636:	4d 2f       	mov	r20, r29
    1638:	63 e0       	ldi	r22, 0x03	; 3
    163a:	8c 2f       	mov	r24, r28
    163c:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table5) ;
    1640:	0e e6       	ldi	r16, 0x6E	; 110
    1642:	11 e0       	ldi	r17, 0x01	; 1
    1644:	59 c0       	rjmp	.+178    	; 0x16f8 <Tactics+0x44e>
					myColumn = column ;
				}
				break;
				
				case 6:
				setChecker(line,column,mine,table6) ;
    1646:	26 e9       	ldi	r18, 0x96	; 150
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	4d 2f       	mov	r20, r29
    164c:	63 e0       	ldi	r22, 0x03	; 3
    164e:	8c 2f       	mov	r24, r28
    1650:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table6) ;
    1654:	06 e9       	ldi	r16, 0x96	; 150
    1656:	10 e0       	ldi	r17, 0x00	; 0
    1658:	4f c0       	rjmp	.+158    	; 0x16f8 <Tactics+0x44e>
					myColumn = column ;
				}
				break;
				
				case 7:
				setChecker(line,column,mine,table7) ;
    165a:	2e ef       	ldi	r18, 0xFE	; 254
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	4d 2f       	mov	r20, r29
    1660:	63 e0       	ldi	r22, 0x03	; 3
    1662:	8c 2f       	mov	r24, r28
    1664:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table7) ;
    1668:	0e ef       	ldi	r16, 0xFE	; 254
    166a:	10 e0       	ldi	r17, 0x00	; 0
    166c:	45 c0       	rjmp	.+138    	; 0x16f8 <Tactics+0x44e>
					myColumn = column ;
				}
				break;
				
				case 8:
				setChecker(line,column,mine,table8) ;
    166e:	26 ea       	ldi	r18, 0xA6	; 166
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	4d 2f       	mov	r20, r29
    1674:	63 e0       	ldi	r22, 0x03	; 3
    1676:	8c 2f       	mov	r24, r28
    1678:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table8) ;
    167c:	06 ea       	ldi	r16, 0xA6	; 166
    167e:	10 e0       	ldi	r17, 0x00	; 0
    1680:	3b c0       	rjmp	.+118    	; 0x16f8 <Tactics+0x44e>
					myColumn = column ;
				}
				break;
				
				case 10:
				setChecker(line,column,mine,table10) ;
    1682:	2e e9       	ldi	r18, 0x9E	; 158
    1684:	31 e0       	ldi	r19, 0x01	; 1
    1686:	4d 2f       	mov	r20, r29
    1688:	63 e0       	ldi	r22, 0x03	; 3
    168a:	8c 2f       	mov	r24, r28
    168c:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table10) ;
    1690:	0e e9       	ldi	r16, 0x9E	; 158
    1692:	11 e0       	ldi	r17, 0x01	; 1
    1694:	31 c0       	rjmp	.+98     	; 0x16f8 <Tactics+0x44e>
					myColumn = column ;
				}
				break;
				
				case 11:
				setChecker(line,column,mine,table11) ;
    1696:	2e e3       	ldi	r18, 0x3E	; 62
    1698:	31 e0       	ldi	r19, 0x01	; 1
    169a:	4d 2f       	mov	r20, r29
    169c:	63 e0       	ldi	r22, 0x03	; 3
    169e:	8c 2f       	mov	r24, r28
    16a0:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table11) ;
    16a4:	0e e3       	ldi	r16, 0x3E	; 62
    16a6:	11 e0       	ldi	r17, 0x01	; 1
    16a8:	27 c0       	rjmp	.+78     	; 0x16f8 <Tactics+0x44e>
					myColumn = column ;
				}
				break;
				
				case 12:
				setChecker(line,column,mine,table12) ;
    16aa:	2e eb       	ldi	r18, 0xBE	; 190
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	4d 2f       	mov	r20, r29
    16b0:	63 e0       	ldi	r22, 0x03	; 3
    16b2:	8c 2f       	mov	r24, r28
    16b4:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table12) ;
    16b8:	0e eb       	ldi	r16, 0xBE	; 190
    16ba:	10 e0       	ldi	r17, 0x00	; 0
    16bc:	1d c0       	rjmp	.+58     	; 0x16f8 <Tactics+0x44e>
					myColumn = column ;
				}
				break;
				
				case 13:
				setChecker(line,column,mine,table13) ;
    16be:	2e ed       	ldi	r18, 0xDE	; 222
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	4d 2f       	mov	r20, r29
    16c4:	63 e0       	ldi	r22, 0x03	; 3
    16c6:	8c 2f       	mov	r24, r28
    16c8:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table13) ;
    16cc:	0e ed       	ldi	r16, 0xDE	; 222
    16ce:	10 e0       	ldi	r17, 0x00	; 0
    16d0:	13 c0       	rjmp	.+38     	; 0x16f8 <Tactics+0x44e>
					myColumn = column ;
				}
				break;
				
				case 14:
				setChecker(line,column,mine,table14) ;
    16d2:	2e e2       	ldi	r18, 0x2E	; 46
    16d4:	31 e0       	ldi	r19, 0x01	; 1
    16d6:	4d 2f       	mov	r20, r29
    16d8:	63 e0       	ldi	r22, 0x03	; 3
    16da:	8c 2f       	mov	r24, r28
    16dc:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table14) ;
    16e0:	0e e2       	ldi	r16, 0x2E	; 46
    16e2:	11 e0       	ldi	r17, 0x01	; 1
    16e4:	09 c0       	rjmp	.+18     	; 0x16f8 <Tactics+0x44e>
				}
				break;
				
				
				default:
				setChecker(line,column,mine,table9) ;
    16e6:	2e e4       	ldi	r18, 0x4E	; 78
    16e8:	31 e0       	ldi	r19, 0x01	; 1
    16ea:	4d 2f       	mov	r20, r29
    16ec:	63 e0       	ldi	r22, 0x03	; 3
    16ee:	8c 2f       	mov	r24, r28
    16f0:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
    16f4:	0e e4       	ldi	r16, 0x4E	; 78
    16f6:	11 e0       	ldi	r17, 0x01	; 1
    16f8:	2d 2f       	mov	r18, r29
    16fa:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    16fe:	63 e0       	ldi	r22, 0x03	; 3
    1700:	8c 2f       	mov	r24, r28
    1702:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table9) ;
    1706:	b8 01       	movw	r22, r16
    1708:	8d 2f       	mov	r24, r29
    170a:	0e 94 21 09 	call	0x1242	; 0x1242 <scanCopyChessBoard>
				if (max < checkers)
    170e:	f8 16       	cp	r15, r24
    1710:	30 f4       	brcc	.+12     	; 0x171e <Tactics+0x474>
				{
					max = checkers ;
					myLine = line ;
    1712:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <myLine>
					myColumn = column ;
    1716:	93 e0       	ldi	r25, 0x03	; 3
    1718:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
    171c:	f8 2e       	mov	r15, r24
		}
		
		/* Fourth valid move in this line */
		temp = buffer & 0b00001000 ;
		temp = (temp >> 3) ;
		if (temp == 1)
    171e:	d3 fe       	sbrs	r13, 3
    1720:	ab c0       	rjmp	.+342    	; 0x1878 <Tactics+0x5ce>
		{
			column = 4 ;
			count++ ;
    1722:	e3 94       	inc	r14
			switch(count)
    1724:	8e 2d       	mov	r24, r14
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	fc 01       	movw	r30, r24
    172a:	31 97       	sbiw	r30, 0x01	; 1
    172c:	ee 30       	cpi	r30, 0x0E	; 14
    172e:	f1 05       	cpc	r31, r1
    1730:	08 f0       	brcs	.+2      	; 0x1734 <Tactics+0x48a>
    1732:	86 c0       	rjmp	.+268    	; 0x1840 <Tactics+0x596>
    1734:	ec 5a       	subi	r30, 0xAC	; 172
    1736:	ff 4f       	sbci	r31, 0xFF	; 255
    1738:	0c 94 b6 10 	jmp	0x216c	; 0x216c <__tablejump2__>
			{
				case 1:
				setChecker(line,column,mine,table1) ;
    173c:	2e ee       	ldi	r18, 0xEE	; 238
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	4d 2f       	mov	r20, r29
    1742:	64 e0       	ldi	r22, 0x04	; 4
    1744:	8c 2f       	mov	r24, r28
    1746:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table1) ;
    174a:	0e ee       	ldi	r16, 0xEE	; 238
    174c:	10 e0       	ldi	r17, 0x00	; 0
    174e:	81 c0       	rjmp	.+258    	; 0x1852 <Tactics+0x5a8>
					myColumn = column ;
				}
				break;
				
				case 2:
				setChecker(line,column,mine,table2) ;
    1750:	2e e8       	ldi	r18, 0x8E	; 142
    1752:	31 e0       	ldi	r19, 0x01	; 1
    1754:	4d 2f       	mov	r20, r29
    1756:	64 e0       	ldi	r22, 0x04	; 4
    1758:	8c 2f       	mov	r24, r28
    175a:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table2) ;
    175e:	0e e8       	ldi	r16, 0x8E	; 142
    1760:	11 e0       	ldi	r17, 0x01	; 1
    1762:	77 c0       	rjmp	.+238    	; 0x1852 <Tactics+0x5a8>
					myColumn = column ;
				}
				break;
				
				case 3:
				setChecker(line,column,mine,table3) ;
    1764:	2e e7       	ldi	r18, 0x7E	; 126
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	4d 2f       	mov	r20, r29
    176a:	64 e0       	ldi	r22, 0x04	; 4
    176c:	8c 2f       	mov	r24, r28
    176e:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table3) ;
    1772:	0e e7       	ldi	r16, 0x7E	; 126
    1774:	10 e0       	ldi	r17, 0x00	; 0
    1776:	6d c0       	rjmp	.+218    	; 0x1852 <Tactics+0x5a8>
					myColumn = column ;
				}
				break;
				
				case 4:
				setChecker(line,column,mine,table4) ;
    1778:	2e e5       	ldi	r18, 0x5E	; 94
    177a:	31 e0       	ldi	r19, 0x01	; 1
    177c:	4d 2f       	mov	r20, r29
    177e:	64 e0       	ldi	r22, 0x04	; 4
    1780:	8c 2f       	mov	r24, r28
    1782:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table4) ;
    1786:	0e e5       	ldi	r16, 0x5E	; 94
    1788:	11 e0       	ldi	r17, 0x01	; 1
    178a:	63 c0       	rjmp	.+198    	; 0x1852 <Tactics+0x5a8>
					myColumn = column ;
				}
				break;
				
				case 5:
				setChecker(line,column,mine,table5) ;
    178c:	2e e6       	ldi	r18, 0x6E	; 110
    178e:	31 e0       	ldi	r19, 0x01	; 1
    1790:	4d 2f       	mov	r20, r29
    1792:	64 e0       	ldi	r22, 0x04	; 4
    1794:	8c 2f       	mov	r24, r28
    1796:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table5) ;
    179a:	0e e6       	ldi	r16, 0x6E	; 110
    179c:	11 e0       	ldi	r17, 0x01	; 1
    179e:	59 c0       	rjmp	.+178    	; 0x1852 <Tactics+0x5a8>
					myColumn = column ;
				}
				break;
				
				case 6:
				setChecker(line,column,mine,table6) ;
    17a0:	26 e9       	ldi	r18, 0x96	; 150
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	4d 2f       	mov	r20, r29
    17a6:	64 e0       	ldi	r22, 0x04	; 4
    17a8:	8c 2f       	mov	r24, r28
    17aa:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table6) ;
    17ae:	06 e9       	ldi	r16, 0x96	; 150
    17b0:	10 e0       	ldi	r17, 0x00	; 0
    17b2:	4f c0       	rjmp	.+158    	; 0x1852 <Tactics+0x5a8>
					myColumn = column ;
				}
				break;
				
				case 7:
				setChecker(line,column,mine,table7) ;
    17b4:	2e ef       	ldi	r18, 0xFE	; 254
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	4d 2f       	mov	r20, r29
    17ba:	64 e0       	ldi	r22, 0x04	; 4
    17bc:	8c 2f       	mov	r24, r28
    17be:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table7) ;
    17c2:	0e ef       	ldi	r16, 0xFE	; 254
    17c4:	10 e0       	ldi	r17, 0x00	; 0
    17c6:	45 c0       	rjmp	.+138    	; 0x1852 <Tactics+0x5a8>
					myColumn = column ;
				}
				break;
				
				case 8:
				setChecker(line,column,mine,table8) ;
    17c8:	26 ea       	ldi	r18, 0xA6	; 166
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	4d 2f       	mov	r20, r29
    17ce:	64 e0       	ldi	r22, 0x04	; 4
    17d0:	8c 2f       	mov	r24, r28
    17d2:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table8) ;
    17d6:	06 ea       	ldi	r16, 0xA6	; 166
    17d8:	10 e0       	ldi	r17, 0x00	; 0
    17da:	3b c0       	rjmp	.+118    	; 0x1852 <Tactics+0x5a8>
					myColumn = column ;
				}
				break;
				
				case 10:
				setChecker(line,column,mine,table10) ;
    17dc:	2e e9       	ldi	r18, 0x9E	; 158
    17de:	31 e0       	ldi	r19, 0x01	; 1
    17e0:	4d 2f       	mov	r20, r29
    17e2:	64 e0       	ldi	r22, 0x04	; 4
    17e4:	8c 2f       	mov	r24, r28
    17e6:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table10) ;
    17ea:	0e e9       	ldi	r16, 0x9E	; 158
    17ec:	11 e0       	ldi	r17, 0x01	; 1
    17ee:	31 c0       	rjmp	.+98     	; 0x1852 <Tactics+0x5a8>
					myColumn = column ;
				}
				break;
				
				case 11:
				setChecker(line,column,mine,table11) ;
    17f0:	2e e3       	ldi	r18, 0x3E	; 62
    17f2:	31 e0       	ldi	r19, 0x01	; 1
    17f4:	4d 2f       	mov	r20, r29
    17f6:	64 e0       	ldi	r22, 0x04	; 4
    17f8:	8c 2f       	mov	r24, r28
    17fa:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table11) ;
    17fe:	0e e3       	ldi	r16, 0x3E	; 62
    1800:	11 e0       	ldi	r17, 0x01	; 1
    1802:	27 c0       	rjmp	.+78     	; 0x1852 <Tactics+0x5a8>
					myColumn = column ;
				}
				break;
				
				case 12:
				setChecker(line,column,mine,table12) ;
    1804:	2e eb       	ldi	r18, 0xBE	; 190
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	4d 2f       	mov	r20, r29
    180a:	64 e0       	ldi	r22, 0x04	; 4
    180c:	8c 2f       	mov	r24, r28
    180e:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table12) ;
    1812:	0e eb       	ldi	r16, 0xBE	; 190
    1814:	10 e0       	ldi	r17, 0x00	; 0
    1816:	1d c0       	rjmp	.+58     	; 0x1852 <Tactics+0x5a8>
					myColumn = column ;
				}
				break;
				
				case 13:
				setChecker(line,column,mine,table13) ;
    1818:	2e ed       	ldi	r18, 0xDE	; 222
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	4d 2f       	mov	r20, r29
    181e:	64 e0       	ldi	r22, 0x04	; 4
    1820:	8c 2f       	mov	r24, r28
    1822:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table13) ;
    1826:	0e ed       	ldi	r16, 0xDE	; 222
    1828:	10 e0       	ldi	r17, 0x00	; 0
    182a:	13 c0       	rjmp	.+38     	; 0x1852 <Tactics+0x5a8>
					myColumn = column ;
				}
				break;
				
				case 14:
				setChecker(line,column,mine,table14) ;
    182c:	2e e2       	ldi	r18, 0x2E	; 46
    182e:	31 e0       	ldi	r19, 0x01	; 1
    1830:	4d 2f       	mov	r20, r29
    1832:	64 e0       	ldi	r22, 0x04	; 4
    1834:	8c 2f       	mov	r24, r28
    1836:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table14) ;
    183a:	0e e2       	ldi	r16, 0x2E	; 46
    183c:	11 e0       	ldi	r17, 0x01	; 1
    183e:	09 c0       	rjmp	.+18     	; 0x1852 <Tactics+0x5a8>
					myColumn = column ;
				}
				break;
			
				default:
				setChecker(line,column,mine,table9) ;
    1840:	2e e4       	ldi	r18, 0x4E	; 78
    1842:	31 e0       	ldi	r19, 0x01	; 1
    1844:	4d 2f       	mov	r20, r29
    1846:	64 e0       	ldi	r22, 0x04	; 4
    1848:	8c 2f       	mov	r24, r28
    184a:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
    184e:	0e e4       	ldi	r16, 0x4E	; 78
    1850:	11 e0       	ldi	r17, 0x01	; 1
    1852:	2d 2f       	mov	r18, r29
    1854:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    1858:	64 e0       	ldi	r22, 0x04	; 4
    185a:	8c 2f       	mov	r24, r28
    185c:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table9) ;
    1860:	b8 01       	movw	r22, r16
    1862:	8d 2f       	mov	r24, r29
    1864:	0e 94 21 09 	call	0x1242	; 0x1242 <scanCopyChessBoard>
				if (max < checkers)
    1868:	f8 16       	cp	r15, r24
    186a:	30 f4       	brcc	.+12     	; 0x1878 <Tactics+0x5ce>
				{
					max = checkers ;
					myLine = line ;
    186c:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <myLine>
					myColumn = column ;
    1870:	94 e0       	ldi	r25, 0x04	; 4
    1872:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
    1876:	f8 2e       	mov	r15, r24
		}
		
		/* Fifth valid move in this line */
		temp = buffer & 0b00010000 ;
		temp = (temp >> 4) ;
		if (temp == 1)
    1878:	d4 fe       	sbrs	r13, 4
    187a:	ab c0       	rjmp	.+342    	; 0x19d2 <Tactics+0x728>
		{
			column = 5 ;
			count++ ;
    187c:	e3 94       	inc	r14
			switch(count)
    187e:	8e 2d       	mov	r24, r14
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	fc 01       	movw	r30, r24
    1884:	31 97       	sbiw	r30, 0x01	; 1
    1886:	ee 30       	cpi	r30, 0x0E	; 14
    1888:	f1 05       	cpc	r31, r1
    188a:	08 f0       	brcs	.+2      	; 0x188e <Tactics+0x5e4>
    188c:	86 c0       	rjmp	.+268    	; 0x199a <Tactics+0x6f0>
    188e:	ee 59       	subi	r30, 0x9E	; 158
    1890:	ff 4f       	sbci	r31, 0xFF	; 255
    1892:	0c 94 b6 10 	jmp	0x216c	; 0x216c <__tablejump2__>
			{
				case 1:
				setChecker(line,column,mine,table1) ;
    1896:	2e ee       	ldi	r18, 0xEE	; 238
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	4d 2f       	mov	r20, r29
    189c:	65 e0       	ldi	r22, 0x05	; 5
    189e:	8c 2f       	mov	r24, r28
    18a0:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table1) ;
    18a4:	0e ee       	ldi	r16, 0xEE	; 238
    18a6:	10 e0       	ldi	r17, 0x00	; 0
    18a8:	81 c0       	rjmp	.+258    	; 0x19ac <Tactics+0x702>
					myColumn = column ;
				}
				break;
				
				case 2:
				setChecker(line,column,mine,table2) ;
    18aa:	2e e8       	ldi	r18, 0x8E	; 142
    18ac:	31 e0       	ldi	r19, 0x01	; 1
    18ae:	4d 2f       	mov	r20, r29
    18b0:	65 e0       	ldi	r22, 0x05	; 5
    18b2:	8c 2f       	mov	r24, r28
    18b4:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table2) ;
    18b8:	0e e8       	ldi	r16, 0x8E	; 142
    18ba:	11 e0       	ldi	r17, 0x01	; 1
    18bc:	77 c0       	rjmp	.+238    	; 0x19ac <Tactics+0x702>
					myColumn = column ;
				}
				break;
				
				case 3:
				setChecker(line,column,mine,table3) ;
    18be:	2e e7       	ldi	r18, 0x7E	; 126
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	4d 2f       	mov	r20, r29
    18c4:	65 e0       	ldi	r22, 0x05	; 5
    18c6:	8c 2f       	mov	r24, r28
    18c8:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table3) ;
    18cc:	0e e7       	ldi	r16, 0x7E	; 126
    18ce:	10 e0       	ldi	r17, 0x00	; 0
    18d0:	6d c0       	rjmp	.+218    	; 0x19ac <Tactics+0x702>
					myColumn = column ;
				}
				break;
				
				case 4:
				setChecker(line,column,mine,table4) ;
    18d2:	2e e5       	ldi	r18, 0x5E	; 94
    18d4:	31 e0       	ldi	r19, 0x01	; 1
    18d6:	4d 2f       	mov	r20, r29
    18d8:	65 e0       	ldi	r22, 0x05	; 5
    18da:	8c 2f       	mov	r24, r28
    18dc:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table4) ;
    18e0:	0e e5       	ldi	r16, 0x5E	; 94
    18e2:	11 e0       	ldi	r17, 0x01	; 1
    18e4:	63 c0       	rjmp	.+198    	; 0x19ac <Tactics+0x702>
					myColumn = column ;
				}
				break;
				
				case 5:
				setChecker(line,column,mine,table5) ;
    18e6:	2e e6       	ldi	r18, 0x6E	; 110
    18e8:	31 e0       	ldi	r19, 0x01	; 1
    18ea:	4d 2f       	mov	r20, r29
    18ec:	65 e0       	ldi	r22, 0x05	; 5
    18ee:	8c 2f       	mov	r24, r28
    18f0:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table5) ;
    18f4:	0e e6       	ldi	r16, 0x6E	; 110
    18f6:	11 e0       	ldi	r17, 0x01	; 1
    18f8:	59 c0       	rjmp	.+178    	; 0x19ac <Tactics+0x702>
					myColumn = column ;
				}
				break;
				
				case 6:
				setChecker(line,column,mine,table6) ;
    18fa:	26 e9       	ldi	r18, 0x96	; 150
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	4d 2f       	mov	r20, r29
    1900:	65 e0       	ldi	r22, 0x05	; 5
    1902:	8c 2f       	mov	r24, r28
    1904:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table6) ;
    1908:	06 e9       	ldi	r16, 0x96	; 150
    190a:	10 e0       	ldi	r17, 0x00	; 0
    190c:	4f c0       	rjmp	.+158    	; 0x19ac <Tactics+0x702>
					myColumn = column ;
				}
				break;
				
				case 7:
				setChecker(line,column,mine,table7) ;
    190e:	2e ef       	ldi	r18, 0xFE	; 254
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	4d 2f       	mov	r20, r29
    1914:	65 e0       	ldi	r22, 0x05	; 5
    1916:	8c 2f       	mov	r24, r28
    1918:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table7) ;
    191c:	0e ef       	ldi	r16, 0xFE	; 254
    191e:	10 e0       	ldi	r17, 0x00	; 0
    1920:	45 c0       	rjmp	.+138    	; 0x19ac <Tactics+0x702>
					myColumn = column ;
				}
				break;
				
				case 8:
				setChecker(line,column,mine,table8) ;
    1922:	26 ea       	ldi	r18, 0xA6	; 166
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	4d 2f       	mov	r20, r29
    1928:	65 e0       	ldi	r22, 0x05	; 5
    192a:	8c 2f       	mov	r24, r28
    192c:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table8) ;
    1930:	06 ea       	ldi	r16, 0xA6	; 166
    1932:	10 e0       	ldi	r17, 0x00	; 0
    1934:	3b c0       	rjmp	.+118    	; 0x19ac <Tactics+0x702>
					myColumn = column ;
				}
				break;
				
				case 10:
				setChecker(line,column,mine,table10) ;
    1936:	2e e9       	ldi	r18, 0x9E	; 158
    1938:	31 e0       	ldi	r19, 0x01	; 1
    193a:	4d 2f       	mov	r20, r29
    193c:	65 e0       	ldi	r22, 0x05	; 5
    193e:	8c 2f       	mov	r24, r28
    1940:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table10) ;
    1944:	0e e9       	ldi	r16, 0x9E	; 158
    1946:	11 e0       	ldi	r17, 0x01	; 1
    1948:	31 c0       	rjmp	.+98     	; 0x19ac <Tactics+0x702>
					myColumn = column ;
				}
				break;
				
				case 11:
				setChecker(line,column,mine,table11) ;
    194a:	2e e3       	ldi	r18, 0x3E	; 62
    194c:	31 e0       	ldi	r19, 0x01	; 1
    194e:	4d 2f       	mov	r20, r29
    1950:	65 e0       	ldi	r22, 0x05	; 5
    1952:	8c 2f       	mov	r24, r28
    1954:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table11) ;
    1958:	0e e3       	ldi	r16, 0x3E	; 62
    195a:	11 e0       	ldi	r17, 0x01	; 1
    195c:	27 c0       	rjmp	.+78     	; 0x19ac <Tactics+0x702>
					myColumn = column ;
				}
				break;
				
				case 12:
				setChecker(line,column,mine,table12) ;
    195e:	2e eb       	ldi	r18, 0xBE	; 190
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	4d 2f       	mov	r20, r29
    1964:	65 e0       	ldi	r22, 0x05	; 5
    1966:	8c 2f       	mov	r24, r28
    1968:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table12) ;
    196c:	0e eb       	ldi	r16, 0xBE	; 190
    196e:	10 e0       	ldi	r17, 0x00	; 0
    1970:	1d c0       	rjmp	.+58     	; 0x19ac <Tactics+0x702>
					myColumn = column ;
				}
				break;
				
				case 13:
				setChecker(line,column,mine,table13) ;
    1972:	2e ed       	ldi	r18, 0xDE	; 222
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	4d 2f       	mov	r20, r29
    1978:	65 e0       	ldi	r22, 0x05	; 5
    197a:	8c 2f       	mov	r24, r28
    197c:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table13) ;
    1980:	0e ed       	ldi	r16, 0xDE	; 222
    1982:	10 e0       	ldi	r17, 0x00	; 0
    1984:	13 c0       	rjmp	.+38     	; 0x19ac <Tactics+0x702>
					myColumn = column ;
				}
				break;
				
				case 14:
				setChecker(line,column,mine,table14) ;
    1986:	2e e2       	ldi	r18, 0x2E	; 46
    1988:	31 e0       	ldi	r19, 0x01	; 1
    198a:	4d 2f       	mov	r20, r29
    198c:	65 e0       	ldi	r22, 0x05	; 5
    198e:	8c 2f       	mov	r24, r28
    1990:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table14) ;
    1994:	0e e2       	ldi	r16, 0x2E	; 46
    1996:	11 e0       	ldi	r17, 0x01	; 1
    1998:	09 c0       	rjmp	.+18     	; 0x19ac <Tactics+0x702>
				}
				break;
				
				
				default:
				setChecker(line,column,mine,table9) ;
    199a:	2e e4       	ldi	r18, 0x4E	; 78
    199c:	31 e0       	ldi	r19, 0x01	; 1
    199e:	4d 2f       	mov	r20, r29
    19a0:	65 e0       	ldi	r22, 0x05	; 5
    19a2:	8c 2f       	mov	r24, r28
    19a4:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
    19a8:	0e e4       	ldi	r16, 0x4E	; 78
    19aa:	11 e0       	ldi	r17, 0x01	; 1
    19ac:	2d 2f       	mov	r18, r29
    19ae:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    19b2:	65 e0       	ldi	r22, 0x05	; 5
    19b4:	8c 2f       	mov	r24, r28
    19b6:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table9) ;
    19ba:	b8 01       	movw	r22, r16
    19bc:	8d 2f       	mov	r24, r29
    19be:	0e 94 21 09 	call	0x1242	; 0x1242 <scanCopyChessBoard>
				if (max < checkers)
    19c2:	f8 16       	cp	r15, r24
    19c4:	30 f4       	brcc	.+12     	; 0x19d2 <Tactics+0x728>
				{
					max = checkers ;
					myLine = line ;
    19c6:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <myLine>
					myColumn = column ;
    19ca:	95 e0       	ldi	r25, 0x05	; 5
    19cc:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
    19d0:	f8 2e       	mov	r15, r24
		}
		
		/* Sixth valid move in this line */
		temp = buffer & 0b00100000 ;
		temp = (temp >> 5) ;
		if (temp == 1)
    19d2:	d5 fe       	sbrs	r13, 5
    19d4:	ab c0       	rjmp	.+342    	; 0x1b2c <Tactics+0x882>
		{
			column = 6 ;
			count++ ;
    19d6:	e3 94       	inc	r14
			switch(count)
    19d8:	8e 2d       	mov	r24, r14
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	fc 01       	movw	r30, r24
    19de:	31 97       	sbiw	r30, 0x01	; 1
    19e0:	ee 30       	cpi	r30, 0x0E	; 14
    19e2:	f1 05       	cpc	r31, r1
    19e4:	08 f0       	brcs	.+2      	; 0x19e8 <Tactics+0x73e>
    19e6:	86 c0       	rjmp	.+268    	; 0x1af4 <Tactics+0x84a>
    19e8:	e0 59       	subi	r30, 0x90	; 144
    19ea:	ff 4f       	sbci	r31, 0xFF	; 255
    19ec:	0c 94 b6 10 	jmp	0x216c	; 0x216c <__tablejump2__>
			{
				case 1:
				setChecker(line,column,mine,table1) ;
    19f0:	2e ee       	ldi	r18, 0xEE	; 238
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	4d 2f       	mov	r20, r29
    19f6:	66 e0       	ldi	r22, 0x06	; 6
    19f8:	8c 2f       	mov	r24, r28
    19fa:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table1) ;
    19fe:	0e ee       	ldi	r16, 0xEE	; 238
    1a00:	10 e0       	ldi	r17, 0x00	; 0
    1a02:	81 c0       	rjmp	.+258    	; 0x1b06 <Tactics+0x85c>
					myColumn = column ;
				}
				break;
				
				case 2:
				setChecker(line,column,mine,table2) ;
    1a04:	2e e8       	ldi	r18, 0x8E	; 142
    1a06:	31 e0       	ldi	r19, 0x01	; 1
    1a08:	4d 2f       	mov	r20, r29
    1a0a:	66 e0       	ldi	r22, 0x06	; 6
    1a0c:	8c 2f       	mov	r24, r28
    1a0e:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table2) ;
    1a12:	0e e8       	ldi	r16, 0x8E	; 142
    1a14:	11 e0       	ldi	r17, 0x01	; 1
    1a16:	77 c0       	rjmp	.+238    	; 0x1b06 <Tactics+0x85c>
					myColumn = column ;
				}
				break;
				
				case 3:
				setChecker(line,column,mine,table3) ;
    1a18:	2e e7       	ldi	r18, 0x7E	; 126
    1a1a:	30 e0       	ldi	r19, 0x00	; 0
    1a1c:	4d 2f       	mov	r20, r29
    1a1e:	66 e0       	ldi	r22, 0x06	; 6
    1a20:	8c 2f       	mov	r24, r28
    1a22:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table3) ;
    1a26:	0e e7       	ldi	r16, 0x7E	; 126
    1a28:	10 e0       	ldi	r17, 0x00	; 0
    1a2a:	6d c0       	rjmp	.+218    	; 0x1b06 <Tactics+0x85c>
					myColumn = column ;
				}
				break;
				
				case 4:
				setChecker(line,column,mine,table4) ;
    1a2c:	2e e5       	ldi	r18, 0x5E	; 94
    1a2e:	31 e0       	ldi	r19, 0x01	; 1
    1a30:	4d 2f       	mov	r20, r29
    1a32:	66 e0       	ldi	r22, 0x06	; 6
    1a34:	8c 2f       	mov	r24, r28
    1a36:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table4) ;
    1a3a:	0e e5       	ldi	r16, 0x5E	; 94
    1a3c:	11 e0       	ldi	r17, 0x01	; 1
    1a3e:	63 c0       	rjmp	.+198    	; 0x1b06 <Tactics+0x85c>
					myColumn = column ;
				}
				break;
				
				case 5:
				setChecker(line,column,mine,table5) ;
    1a40:	2e e6       	ldi	r18, 0x6E	; 110
    1a42:	31 e0       	ldi	r19, 0x01	; 1
    1a44:	4d 2f       	mov	r20, r29
    1a46:	66 e0       	ldi	r22, 0x06	; 6
    1a48:	8c 2f       	mov	r24, r28
    1a4a:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table5) ;
    1a4e:	0e e6       	ldi	r16, 0x6E	; 110
    1a50:	11 e0       	ldi	r17, 0x01	; 1
    1a52:	59 c0       	rjmp	.+178    	; 0x1b06 <Tactics+0x85c>
					myColumn = column ;
				}
				break;
				
				case 6:
				setChecker(line,column,mine,table6) ;
    1a54:	26 e9       	ldi	r18, 0x96	; 150
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	4d 2f       	mov	r20, r29
    1a5a:	66 e0       	ldi	r22, 0x06	; 6
    1a5c:	8c 2f       	mov	r24, r28
    1a5e:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table6) ;
    1a62:	06 e9       	ldi	r16, 0x96	; 150
    1a64:	10 e0       	ldi	r17, 0x00	; 0
    1a66:	4f c0       	rjmp	.+158    	; 0x1b06 <Tactics+0x85c>
					myColumn = column ;
				}
				break;
				
				case 7:
				setChecker(line,column,mine,table7) ;
    1a68:	2e ef       	ldi	r18, 0xFE	; 254
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	4d 2f       	mov	r20, r29
    1a6e:	66 e0       	ldi	r22, 0x06	; 6
    1a70:	8c 2f       	mov	r24, r28
    1a72:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table7) ;
    1a76:	0e ef       	ldi	r16, 0xFE	; 254
    1a78:	10 e0       	ldi	r17, 0x00	; 0
    1a7a:	45 c0       	rjmp	.+138    	; 0x1b06 <Tactics+0x85c>
					myColumn = column ;
				}
				break;
				
				case 8:
				setChecker(line,column,mine,table8) ;
    1a7c:	26 ea       	ldi	r18, 0xA6	; 166
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	4d 2f       	mov	r20, r29
    1a82:	66 e0       	ldi	r22, 0x06	; 6
    1a84:	8c 2f       	mov	r24, r28
    1a86:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table8) ;
    1a8a:	06 ea       	ldi	r16, 0xA6	; 166
    1a8c:	10 e0       	ldi	r17, 0x00	; 0
    1a8e:	3b c0       	rjmp	.+118    	; 0x1b06 <Tactics+0x85c>
					myColumn = column ;
				}
				break;
				
				case 10:
				setChecker(line,column,mine,table10) ;
    1a90:	2e e9       	ldi	r18, 0x9E	; 158
    1a92:	31 e0       	ldi	r19, 0x01	; 1
    1a94:	4d 2f       	mov	r20, r29
    1a96:	66 e0       	ldi	r22, 0x06	; 6
    1a98:	8c 2f       	mov	r24, r28
    1a9a:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table10) ;
    1a9e:	0e e9       	ldi	r16, 0x9E	; 158
    1aa0:	11 e0       	ldi	r17, 0x01	; 1
    1aa2:	31 c0       	rjmp	.+98     	; 0x1b06 <Tactics+0x85c>
					myColumn = column ;
				}
				break;
				
				case 11:
				setChecker(line,column,mine,table11) ;
    1aa4:	2e e3       	ldi	r18, 0x3E	; 62
    1aa6:	31 e0       	ldi	r19, 0x01	; 1
    1aa8:	4d 2f       	mov	r20, r29
    1aaa:	66 e0       	ldi	r22, 0x06	; 6
    1aac:	8c 2f       	mov	r24, r28
    1aae:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table11) ;
    1ab2:	0e e3       	ldi	r16, 0x3E	; 62
    1ab4:	11 e0       	ldi	r17, 0x01	; 1
    1ab6:	27 c0       	rjmp	.+78     	; 0x1b06 <Tactics+0x85c>
					myColumn = column ;
				}
				break;
				
				case 12:
				setChecker(line,column,mine,table12) ;
    1ab8:	2e eb       	ldi	r18, 0xBE	; 190
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	4d 2f       	mov	r20, r29
    1abe:	66 e0       	ldi	r22, 0x06	; 6
    1ac0:	8c 2f       	mov	r24, r28
    1ac2:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table12) ;
    1ac6:	0e eb       	ldi	r16, 0xBE	; 190
    1ac8:	10 e0       	ldi	r17, 0x00	; 0
    1aca:	1d c0       	rjmp	.+58     	; 0x1b06 <Tactics+0x85c>
					myColumn = column ;
				}
				break;
				
				case 13:
				setChecker(line,column,mine,table13) ;
    1acc:	2e ed       	ldi	r18, 0xDE	; 222
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	4d 2f       	mov	r20, r29
    1ad2:	66 e0       	ldi	r22, 0x06	; 6
    1ad4:	8c 2f       	mov	r24, r28
    1ad6:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table13) ;
    1ada:	0e ed       	ldi	r16, 0xDE	; 222
    1adc:	10 e0       	ldi	r17, 0x00	; 0
    1ade:	13 c0       	rjmp	.+38     	; 0x1b06 <Tactics+0x85c>
					myColumn = column ;
				}
				break;
				
				case 14:
				setChecker(line,column,mine,table14) ;
    1ae0:	2e e2       	ldi	r18, 0x2E	; 46
    1ae2:	31 e0       	ldi	r19, 0x01	; 1
    1ae4:	4d 2f       	mov	r20, r29
    1ae6:	66 e0       	ldi	r22, 0x06	; 6
    1ae8:	8c 2f       	mov	r24, r28
    1aea:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table14) ;
    1aee:	0e e2       	ldi	r16, 0x2E	; 46
    1af0:	11 e0       	ldi	r17, 0x01	; 1
    1af2:	09 c0       	rjmp	.+18     	; 0x1b06 <Tactics+0x85c>
				}
				break;
				
			
				default:
				setChecker(line,column,mine,table9) ;
    1af4:	2e e4       	ldi	r18, 0x4E	; 78
    1af6:	31 e0       	ldi	r19, 0x01	; 1
    1af8:	4d 2f       	mov	r20, r29
    1afa:	66 e0       	ldi	r22, 0x06	; 6
    1afc:	8c 2f       	mov	r24, r28
    1afe:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
    1b02:	0e e4       	ldi	r16, 0x4E	; 78
    1b04:	11 e0       	ldi	r17, 0x01	; 1
    1b06:	2d 2f       	mov	r18, r29
    1b08:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    1b0c:	66 e0       	ldi	r22, 0x06	; 6
    1b0e:	8c 2f       	mov	r24, r28
    1b10:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table9) ;
    1b14:	b8 01       	movw	r22, r16
    1b16:	8d 2f       	mov	r24, r29
    1b18:	0e 94 21 09 	call	0x1242	; 0x1242 <scanCopyChessBoard>
				if (max < checkers)
    1b1c:	f8 16       	cp	r15, r24
    1b1e:	30 f4       	brcc	.+12     	; 0x1b2c <Tactics+0x882>
				{
					max = checkers ;
					myLine = line ;
    1b20:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <myLine>
					myColumn = column ;
    1b24:	96 e0       	ldi	r25, 0x06	; 6
    1b26:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
    1b2a:	f8 2e       	mov	r15, r24
		}
		
		/* Seventh valid move in this line */
		temp = buffer & 0b01000000 ;
		temp = (temp >> 6) ;
		if (temp == 1)
    1b2c:	d6 fe       	sbrs	r13, 6
    1b2e:	ab c0       	rjmp	.+342    	; 0x1c86 <Tactics+0x9dc>
		{
			column = 7 ;
			count++ ;
    1b30:	e3 94       	inc	r14
			switch(count)
    1b32:	8e 2d       	mov	r24, r14
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	fc 01       	movw	r30, r24
    1b38:	31 97       	sbiw	r30, 0x01	; 1
    1b3a:	ee 30       	cpi	r30, 0x0E	; 14
    1b3c:	f1 05       	cpc	r31, r1
    1b3e:	08 f0       	brcs	.+2      	; 0x1b42 <Tactics+0x898>
    1b40:	86 c0       	rjmp	.+268    	; 0x1c4e <Tactics+0x9a4>
    1b42:	e2 58       	subi	r30, 0x82	; 130
    1b44:	ff 4f       	sbci	r31, 0xFF	; 255
    1b46:	0c 94 b6 10 	jmp	0x216c	; 0x216c <__tablejump2__>
			{
				case 1:
				setChecker(line,column,mine,table1) ;
    1b4a:	2e ee       	ldi	r18, 0xEE	; 238
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	4d 2f       	mov	r20, r29
    1b50:	67 e0       	ldi	r22, 0x07	; 7
    1b52:	8c 2f       	mov	r24, r28
    1b54:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table1) ;
    1b58:	0e ee       	ldi	r16, 0xEE	; 238
    1b5a:	10 e0       	ldi	r17, 0x00	; 0
    1b5c:	81 c0       	rjmp	.+258    	; 0x1c60 <Tactics+0x9b6>
					myColumn = column ;
				}
				break;
				
				case 2:
				setChecker(line,column,mine,table2) ;
    1b5e:	2e e8       	ldi	r18, 0x8E	; 142
    1b60:	31 e0       	ldi	r19, 0x01	; 1
    1b62:	4d 2f       	mov	r20, r29
    1b64:	67 e0       	ldi	r22, 0x07	; 7
    1b66:	8c 2f       	mov	r24, r28
    1b68:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table2) ;
    1b6c:	0e e8       	ldi	r16, 0x8E	; 142
    1b6e:	11 e0       	ldi	r17, 0x01	; 1
    1b70:	77 c0       	rjmp	.+238    	; 0x1c60 <Tactics+0x9b6>
					myColumn = column ;
				}
				break;
				
				case 3:
				setChecker(line,column,mine,table3) ;
    1b72:	2e e7       	ldi	r18, 0x7E	; 126
    1b74:	30 e0       	ldi	r19, 0x00	; 0
    1b76:	4d 2f       	mov	r20, r29
    1b78:	67 e0       	ldi	r22, 0x07	; 7
    1b7a:	8c 2f       	mov	r24, r28
    1b7c:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table3) ;
    1b80:	0e e7       	ldi	r16, 0x7E	; 126
    1b82:	10 e0       	ldi	r17, 0x00	; 0
    1b84:	6d c0       	rjmp	.+218    	; 0x1c60 <Tactics+0x9b6>
					myColumn = column ;
				}
				break;
				
				case 4:
				setChecker(line,column,mine,table4) ;
    1b86:	2e e5       	ldi	r18, 0x5E	; 94
    1b88:	31 e0       	ldi	r19, 0x01	; 1
    1b8a:	4d 2f       	mov	r20, r29
    1b8c:	67 e0       	ldi	r22, 0x07	; 7
    1b8e:	8c 2f       	mov	r24, r28
    1b90:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table4) ;
    1b94:	0e e5       	ldi	r16, 0x5E	; 94
    1b96:	11 e0       	ldi	r17, 0x01	; 1
    1b98:	63 c0       	rjmp	.+198    	; 0x1c60 <Tactics+0x9b6>
					myColumn = column ;
				}
				break;
				
				case 5:
				setChecker(line,column,mine,table5) ;
    1b9a:	2e e6       	ldi	r18, 0x6E	; 110
    1b9c:	31 e0       	ldi	r19, 0x01	; 1
    1b9e:	4d 2f       	mov	r20, r29
    1ba0:	67 e0       	ldi	r22, 0x07	; 7
    1ba2:	8c 2f       	mov	r24, r28
    1ba4:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table5) ;
    1ba8:	0e e6       	ldi	r16, 0x6E	; 110
    1baa:	11 e0       	ldi	r17, 0x01	; 1
    1bac:	59 c0       	rjmp	.+178    	; 0x1c60 <Tactics+0x9b6>
					myColumn = column ;
				}
				break;
				
				case 6:
				setChecker(line,column,mine,table6) ;
    1bae:	26 e9       	ldi	r18, 0x96	; 150
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	4d 2f       	mov	r20, r29
    1bb4:	67 e0       	ldi	r22, 0x07	; 7
    1bb6:	8c 2f       	mov	r24, r28
    1bb8:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table6) ;
    1bbc:	06 e9       	ldi	r16, 0x96	; 150
    1bbe:	10 e0       	ldi	r17, 0x00	; 0
    1bc0:	4f c0       	rjmp	.+158    	; 0x1c60 <Tactics+0x9b6>
					myColumn = column ;
				}
				break;
				
				case 7:
				setChecker(line,column,mine,table7) ;
    1bc2:	2e ef       	ldi	r18, 0xFE	; 254
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	4d 2f       	mov	r20, r29
    1bc8:	67 e0       	ldi	r22, 0x07	; 7
    1bca:	8c 2f       	mov	r24, r28
    1bcc:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table7) ;
    1bd0:	0e ef       	ldi	r16, 0xFE	; 254
    1bd2:	10 e0       	ldi	r17, 0x00	; 0
    1bd4:	45 c0       	rjmp	.+138    	; 0x1c60 <Tactics+0x9b6>
					myColumn = column ;
				}
				break;
				
				case 8:
				setChecker(line,column,mine,table8) ;
    1bd6:	26 ea       	ldi	r18, 0xA6	; 166
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	4d 2f       	mov	r20, r29
    1bdc:	67 e0       	ldi	r22, 0x07	; 7
    1bde:	8c 2f       	mov	r24, r28
    1be0:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table8) ;
    1be4:	06 ea       	ldi	r16, 0xA6	; 166
    1be6:	10 e0       	ldi	r17, 0x00	; 0
    1be8:	3b c0       	rjmp	.+118    	; 0x1c60 <Tactics+0x9b6>
					myColumn = column ;
				}
				break;
				
				case 10:
				setChecker(line,column,mine,table10) ;
    1bea:	2e e9       	ldi	r18, 0x9E	; 158
    1bec:	31 e0       	ldi	r19, 0x01	; 1
    1bee:	4d 2f       	mov	r20, r29
    1bf0:	67 e0       	ldi	r22, 0x07	; 7
    1bf2:	8c 2f       	mov	r24, r28
    1bf4:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table10) ;
    1bf8:	0e e9       	ldi	r16, 0x9E	; 158
    1bfa:	11 e0       	ldi	r17, 0x01	; 1
    1bfc:	31 c0       	rjmp	.+98     	; 0x1c60 <Tactics+0x9b6>
					myColumn = column ;
				}
				break;
				
				case 11:
				setChecker(line,column,mine,table11) ;
    1bfe:	2e e3       	ldi	r18, 0x3E	; 62
    1c00:	31 e0       	ldi	r19, 0x01	; 1
    1c02:	4d 2f       	mov	r20, r29
    1c04:	67 e0       	ldi	r22, 0x07	; 7
    1c06:	8c 2f       	mov	r24, r28
    1c08:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table11) ;
    1c0c:	0e e3       	ldi	r16, 0x3E	; 62
    1c0e:	11 e0       	ldi	r17, 0x01	; 1
    1c10:	27 c0       	rjmp	.+78     	; 0x1c60 <Tactics+0x9b6>
					myColumn = column ;
				}
				break;
				
				case 12:
				setChecker(line,column,mine,table12) ;
    1c12:	2e eb       	ldi	r18, 0xBE	; 190
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	4d 2f       	mov	r20, r29
    1c18:	67 e0       	ldi	r22, 0x07	; 7
    1c1a:	8c 2f       	mov	r24, r28
    1c1c:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table12) ;
    1c20:	0e eb       	ldi	r16, 0xBE	; 190
    1c22:	10 e0       	ldi	r17, 0x00	; 0
    1c24:	1d c0       	rjmp	.+58     	; 0x1c60 <Tactics+0x9b6>
					myColumn = column ;
				}
				break;
				
				case 13:
				setChecker(line,column,mine,table13) ;
    1c26:	2e ed       	ldi	r18, 0xDE	; 222
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	4d 2f       	mov	r20, r29
    1c2c:	67 e0       	ldi	r22, 0x07	; 7
    1c2e:	8c 2f       	mov	r24, r28
    1c30:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table13) ;
    1c34:	0e ed       	ldi	r16, 0xDE	; 222
    1c36:	10 e0       	ldi	r17, 0x00	; 0
    1c38:	13 c0       	rjmp	.+38     	; 0x1c60 <Tactics+0x9b6>
					myColumn = column ;
				}
				break;
				
				case 14:
				setChecker(line,column,mine,table14) ;
    1c3a:	2e e2       	ldi	r18, 0x2E	; 46
    1c3c:	31 e0       	ldi	r19, 0x01	; 1
    1c3e:	4d 2f       	mov	r20, r29
    1c40:	67 e0       	ldi	r22, 0x07	; 7
    1c42:	8c 2f       	mov	r24, r28
    1c44:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table14) ;
    1c48:	0e e2       	ldi	r16, 0x2E	; 46
    1c4a:	11 e0       	ldi	r17, 0x01	; 1
    1c4c:	09 c0       	rjmp	.+18     	; 0x1c60 <Tactics+0x9b6>
				}
				break;
				
				
				default:
				setChecker(line,column,mine,table9) ;
    1c4e:	2e e4       	ldi	r18, 0x4E	; 78
    1c50:	31 e0       	ldi	r19, 0x01	; 1
    1c52:	4d 2f       	mov	r20, r29
    1c54:	67 e0       	ldi	r22, 0x07	; 7
    1c56:	8c 2f       	mov	r24, r28
    1c58:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
    1c5c:	0e e4       	ldi	r16, 0x4E	; 78
    1c5e:	11 e0       	ldi	r17, 0x01	; 1
    1c60:	2d 2f       	mov	r18, r29
    1c62:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    1c66:	67 e0       	ldi	r22, 0x07	; 7
    1c68:	8c 2f       	mov	r24, r28
    1c6a:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table9) ;
    1c6e:	b8 01       	movw	r22, r16
    1c70:	8d 2f       	mov	r24, r29
    1c72:	0e 94 21 09 	call	0x1242	; 0x1242 <scanCopyChessBoard>
				if (max < checkers)
    1c76:	f8 16       	cp	r15, r24
    1c78:	30 f4       	brcc	.+12     	; 0x1c86 <Tactics+0x9dc>
				{
					max = checkers ;
					myLine = line ;
    1c7a:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <myLine>
					myColumn = column ;
    1c7e:	97 e0       	ldi	r25, 0x07	; 7
    1c80:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
    1c84:	f8 2e       	mov	r15, r24
		}
		
		/* Eighth valid move in this line */
		temp = buffer & 0b10000000 ;
		temp = (temp >> 7) ;
		if (temp == 1)
    1c86:	d7 fe       	sbrs	r13, 7
    1c88:	ab c0       	rjmp	.+342    	; 0x1de0 <Tactics+0xb36>
		{
			column = 8 ;
			count++ ;
    1c8a:	e3 94       	inc	r14
			switch(count)
    1c8c:	8e 2d       	mov	r24, r14
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	fc 01       	movw	r30, r24
    1c92:	31 97       	sbiw	r30, 0x01	; 1
    1c94:	ee 30       	cpi	r30, 0x0E	; 14
    1c96:	f1 05       	cpc	r31, r1
    1c98:	08 f0       	brcs	.+2      	; 0x1c9c <Tactics+0x9f2>
    1c9a:	86 c0       	rjmp	.+268    	; 0x1da8 <Tactics+0xafe>
    1c9c:	e4 57       	subi	r30, 0x74	; 116
    1c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca0:	0c 94 b6 10 	jmp	0x216c	; 0x216c <__tablejump2__>
			{
				case 1:
				setChecker(line,column,mine,table1) ;
    1ca4:	2e ee       	ldi	r18, 0xEE	; 238
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	4d 2f       	mov	r20, r29
    1caa:	68 e0       	ldi	r22, 0x08	; 8
    1cac:	8c 2f       	mov	r24, r28
    1cae:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table1) ;
    1cb2:	0e ee       	ldi	r16, 0xEE	; 238
    1cb4:	10 e0       	ldi	r17, 0x00	; 0
    1cb6:	81 c0       	rjmp	.+258    	; 0x1dba <Tactics+0xb10>
					myColumn = column ;
				}
				break;
				
				case 2:
				setChecker(line,column,mine,table2) ;
    1cb8:	2e e8       	ldi	r18, 0x8E	; 142
    1cba:	31 e0       	ldi	r19, 0x01	; 1
    1cbc:	4d 2f       	mov	r20, r29
    1cbe:	68 e0       	ldi	r22, 0x08	; 8
    1cc0:	8c 2f       	mov	r24, r28
    1cc2:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table2) ;
    1cc6:	0e e8       	ldi	r16, 0x8E	; 142
    1cc8:	11 e0       	ldi	r17, 0x01	; 1
    1cca:	77 c0       	rjmp	.+238    	; 0x1dba <Tactics+0xb10>
					myColumn = column ;
				}
				break;
				
				case 3:
				setChecker(line,column,mine,table3) ;
    1ccc:	2e e7       	ldi	r18, 0x7E	; 126
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	4d 2f       	mov	r20, r29
    1cd2:	68 e0       	ldi	r22, 0x08	; 8
    1cd4:	8c 2f       	mov	r24, r28
    1cd6:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table3) ;
    1cda:	0e e7       	ldi	r16, 0x7E	; 126
    1cdc:	10 e0       	ldi	r17, 0x00	; 0
    1cde:	6d c0       	rjmp	.+218    	; 0x1dba <Tactics+0xb10>
					myColumn = column ;
				}
				break;
				
				case 4:
				setChecker(line,column,mine,table4) ;
    1ce0:	2e e5       	ldi	r18, 0x5E	; 94
    1ce2:	31 e0       	ldi	r19, 0x01	; 1
    1ce4:	4d 2f       	mov	r20, r29
    1ce6:	68 e0       	ldi	r22, 0x08	; 8
    1ce8:	8c 2f       	mov	r24, r28
    1cea:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table4) ;
    1cee:	0e e5       	ldi	r16, 0x5E	; 94
    1cf0:	11 e0       	ldi	r17, 0x01	; 1
    1cf2:	63 c0       	rjmp	.+198    	; 0x1dba <Tactics+0xb10>
					myColumn = column ;
				}
				break;
				
				case 5:
				setChecker(line,column,mine,table5) ;
    1cf4:	2e e6       	ldi	r18, 0x6E	; 110
    1cf6:	31 e0       	ldi	r19, 0x01	; 1
    1cf8:	4d 2f       	mov	r20, r29
    1cfa:	68 e0       	ldi	r22, 0x08	; 8
    1cfc:	8c 2f       	mov	r24, r28
    1cfe:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table5) ;
    1d02:	0e e6       	ldi	r16, 0x6E	; 110
    1d04:	11 e0       	ldi	r17, 0x01	; 1
    1d06:	59 c0       	rjmp	.+178    	; 0x1dba <Tactics+0xb10>
					myColumn = column ;
				}
				break;
				
				case 6:
				setChecker(line,column,mine,table6) ;
    1d08:	26 e9       	ldi	r18, 0x96	; 150
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	4d 2f       	mov	r20, r29
    1d0e:	68 e0       	ldi	r22, 0x08	; 8
    1d10:	8c 2f       	mov	r24, r28
    1d12:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table6) ;
    1d16:	06 e9       	ldi	r16, 0x96	; 150
    1d18:	10 e0       	ldi	r17, 0x00	; 0
    1d1a:	4f c0       	rjmp	.+158    	; 0x1dba <Tactics+0xb10>
					myColumn = column ;
				}
				break;
				
				case 7:
				setChecker(line,column,mine,table7) ;
    1d1c:	2e ef       	ldi	r18, 0xFE	; 254
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	4d 2f       	mov	r20, r29
    1d22:	68 e0       	ldi	r22, 0x08	; 8
    1d24:	8c 2f       	mov	r24, r28
    1d26:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table7) ;
    1d2a:	0e ef       	ldi	r16, 0xFE	; 254
    1d2c:	10 e0       	ldi	r17, 0x00	; 0
    1d2e:	45 c0       	rjmp	.+138    	; 0x1dba <Tactics+0xb10>
					myColumn = column ;
				}
				break;
				
				case 8:
				setChecker(line,column,mine,table8) ;
    1d30:	26 ea       	ldi	r18, 0xA6	; 166
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	4d 2f       	mov	r20, r29
    1d36:	68 e0       	ldi	r22, 0x08	; 8
    1d38:	8c 2f       	mov	r24, r28
    1d3a:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table8) ;
    1d3e:	06 ea       	ldi	r16, 0xA6	; 166
    1d40:	10 e0       	ldi	r17, 0x00	; 0
    1d42:	3b c0       	rjmp	.+118    	; 0x1dba <Tactics+0xb10>
					myColumn = column ;
				}
				break;
				
				case 10:
				setChecker(line,column,mine,table10) ;
    1d44:	2e e9       	ldi	r18, 0x9E	; 158
    1d46:	31 e0       	ldi	r19, 0x01	; 1
    1d48:	4d 2f       	mov	r20, r29
    1d4a:	68 e0       	ldi	r22, 0x08	; 8
    1d4c:	8c 2f       	mov	r24, r28
    1d4e:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table10) ;
    1d52:	0e e9       	ldi	r16, 0x9E	; 158
    1d54:	11 e0       	ldi	r17, 0x01	; 1
    1d56:	31 c0       	rjmp	.+98     	; 0x1dba <Tactics+0xb10>
					myColumn = column ;
				}
				break;
				
				case 11:
				setChecker(line,column,mine,table11) ;
    1d58:	2e e3       	ldi	r18, 0x3E	; 62
    1d5a:	31 e0       	ldi	r19, 0x01	; 1
    1d5c:	4d 2f       	mov	r20, r29
    1d5e:	68 e0       	ldi	r22, 0x08	; 8
    1d60:	8c 2f       	mov	r24, r28
    1d62:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table11) ;
    1d66:	0e e3       	ldi	r16, 0x3E	; 62
    1d68:	11 e0       	ldi	r17, 0x01	; 1
    1d6a:	27 c0       	rjmp	.+78     	; 0x1dba <Tactics+0xb10>
					myColumn = column ;
				}
				break;
				
				case 12:
				setChecker(line,column,mine,table12) ;
    1d6c:	2e eb       	ldi	r18, 0xBE	; 190
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	4d 2f       	mov	r20, r29
    1d72:	68 e0       	ldi	r22, 0x08	; 8
    1d74:	8c 2f       	mov	r24, r28
    1d76:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table12) ;
    1d7a:	0e eb       	ldi	r16, 0xBE	; 190
    1d7c:	10 e0       	ldi	r17, 0x00	; 0
    1d7e:	1d c0       	rjmp	.+58     	; 0x1dba <Tactics+0xb10>
					myColumn = column ;
				}
				break;
				
				case 13:
				setChecker(line,column,mine,table13) ;
    1d80:	2e ed       	ldi	r18, 0xDE	; 222
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	4d 2f       	mov	r20, r29
    1d86:	68 e0       	ldi	r22, 0x08	; 8
    1d88:	8c 2f       	mov	r24, r28
    1d8a:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table13) ;
    1d8e:	0e ed       	ldi	r16, 0xDE	; 222
    1d90:	10 e0       	ldi	r17, 0x00	; 0
    1d92:	13 c0       	rjmp	.+38     	; 0x1dba <Tactics+0xb10>
					myColumn = column ;
				}
				break;
				
				case 14:
				setChecker(line,column,mine,table14) ;
    1d94:	2e e2       	ldi	r18, 0x2E	; 46
    1d96:	31 e0       	ldi	r19, 0x01	; 1
    1d98:	4d 2f       	mov	r20, r29
    1d9a:	68 e0       	ldi	r22, 0x08	; 8
    1d9c:	8c 2f       	mov	r24, r28
    1d9e:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table14) ;
    1da2:	0e e2       	ldi	r16, 0x2E	; 46
    1da4:	11 e0       	ldi	r17, 0x01	; 1
    1da6:	09 c0       	rjmp	.+18     	; 0x1dba <Tactics+0xb10>
				}
				break;
				
				
				default:
				setChecker(line,column,mine,table9) ;
    1da8:	2e e4       	ldi	r18, 0x4E	; 78
    1daa:	31 e0       	ldi	r19, 0x01	; 1
    1dac:	4d 2f       	mov	r20, r29
    1dae:	68 e0       	ldi	r22, 0x08	; 8
    1db0:	8c 2f       	mov	r24, r28
    1db2:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
    1db6:	0e e4       	ldi	r16, 0x4E	; 78
    1db8:	11 e0       	ldi	r17, 0x01	; 1
    1dba:	2d 2f       	mov	r18, r29
    1dbc:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    1dc0:	68 e0       	ldi	r22, 0x08	; 8
    1dc2:	8c 2f       	mov	r24, r28
    1dc4:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table9) ;
    1dc8:	b8 01       	movw	r22, r16
    1dca:	8d 2f       	mov	r24, r29
    1dcc:	0e 94 21 09 	call	0x1242	; 0x1242 <scanCopyChessBoard>
				if (max < checkers)
    1dd0:	f8 16       	cp	r15, r24
    1dd2:	30 f4       	brcc	.+12     	; 0x1de0 <Tactics+0xb36>
				{
					max = checkers ;
					myLine = line ;
    1dd4:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <myLine>
					myColumn = column ;
    1dd8:	98 e0       	ldi	r25, 0x08	; 8
    1dda:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
    1dde:	f8 2e       	mov	r15, r24
    1de0:	cf 5f       	subi	r28, 0xFF	; 255
	uint8_t count = 0 ;
	uint8_t max = 0 ;
	uint8_t checkers = 0 ;
	char line = (char) 0 ;
	uint8_t column = 0 ;
	for (uint8_t index = 0; index < SIZE/2; index++)
    1de2:	c9 34       	cpi	r28, 0x49	; 73
    1de4:	09 f0       	breq	.+2      	; 0x1de8 <Tactics+0xb3e>
    1de6:	73 ca       	rjmp	.-2842   	; 0x12ce <Tactics+0x24>
				break;
			}
			
		}
	}
    1de8:	df 91       	pop	r29
    1dea:	cf 91       	pop	r28
    1dec:	1f 91       	pop	r17
    1dee:	0f 91       	pop	r16
    1df0:	ff 90       	pop	r15
    1df2:	ef 90       	pop	r14
    1df4:	df 90       	pop	r13
    1df6:	cf 90       	pop	r12
    1df8:	bf 90       	pop	r11
    1dfa:	af 90       	pop	r10
    1dfc:	08 95       	ret

00001dfe <examineInstr>:
	}
	return c ;
}

void examineInstr(char c[])
{
    1dfe:	ef 92       	push	r14
    1e00:	ff 92       	push	r15
    1e02:	0f 93       	push	r16
    1e04:	1f 93       	push	r17
    1e06:	cf 93       	push	r28
    1e08:	df 93       	push	r29
    1e0a:	ec 01       	movw	r28, r24
	if (strlen(c) == 2 && c[0] == 'A' && c[1] == 'T')
    1e0c:	fc 01       	movw	r30, r24
    1e0e:	01 90       	ld	r0, Z+
    1e10:	00 20       	and	r0, r0
    1e12:	e9 f7       	brne	.-6      	; 0x1e0e <examineInstr+0x10>
    1e14:	31 97       	sbiw	r30, 0x01	; 1
    1e16:	cf 01       	movw	r24, r30
    1e18:	8c 1b       	sub	r24, r28
    1e1a:	9d 0b       	sbc	r25, r29
    1e1c:	82 30       	cpi	r24, 0x02	; 2
    1e1e:	91 05       	cpc	r25, r1
    1e20:	41 f4       	brne	.+16     	; 0x1e32 <examineInstr+0x34>
    1e22:	88 81       	ld	r24, Y
    1e24:	81 34       	cpi	r24, 0x41	; 65
    1e26:	89 f5       	brne	.+98     	; 0x1e8a <examineInstr+0x8c>
    1e28:	89 81       	ldd	r24, Y+1	; 0x01
    1e2a:	84 35       	cpi	r24, 0x54	; 84
    1e2c:	09 f0       	breq	.+2      	; 0x1e30 <examineInstr+0x32>
    1e2e:	56 c1       	rjmp	.+684    	; 0x20dc <examineInstr+0x2de>
    1e30:	27 c0       	rjmp	.+78     	; 0x1e80 <examineInstr+0x82>
		writeByte('\r') ;
		/* Begin timer */
		//TCCR1B |= (1 << CS12) ;
		
	}
	else if (strlen(c) == 3 && c[0] == 'R' && c[1] == 'S' && c[2] == 'T')
    1e32:	83 30       	cpi	r24, 0x03	; 3
    1e34:	91 05       	cpc	r25, r1
    1e36:	51 f4       	brne	.+20     	; 0x1e4c <examineInstr+0x4e>
    1e38:	88 81       	ld	r24, Y
    1e3a:	82 35       	cpi	r24, 0x52	; 82
    1e3c:	09 f0       	breq	.+2      	; 0x1e40 <examineInstr+0x42>
    1e3e:	4e c1       	rjmp	.+668    	; 0x20dc <examineInstr+0x2de>
    1e40:	89 81       	ldd	r24, Y+1	; 0x01
    1e42:	83 35       	cpi	r24, 0x53	; 83
    1e44:	09 f0       	breq	.+2      	; 0x1e48 <examineInstr+0x4a>
    1e46:	4a c1       	rjmp	.+660    	; 0x20dc <examineInstr+0x2de>
    1e48:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4a:	ef cf       	rjmp	.-34     	; 0x1e2a <examineInstr+0x2c>
		writeByte('K') ;
		writeByte('\r') ;
		/*Begin timer */
		//TCCR1B |= (1 << CS12) ;
	}
	else if (strlen(c) == 4 && c[0] == 'S' && c[1] == 'P' && c[2] == ' ' && (c[3] == 'B' || c[3] == 'W'))
    1e4c:	84 30       	cpi	r24, 0x04	; 4
    1e4e:	91 05       	cpc	r25, r1
    1e50:	09 f0       	breq	.+2      	; 0x1e54 <examineInstr+0x56>
    1e52:	6b c0       	rjmp	.+214    	; 0x1f2a <examineInstr+0x12c>
    1e54:	88 81       	ld	r24, Y
    1e56:	83 35       	cpi	r24, 0x53	; 83
    1e58:	09 f0       	breq	.+2      	; 0x1e5c <examineInstr+0x5e>
    1e5a:	40 c1       	rjmp	.+640    	; 0x20dc <examineInstr+0x2de>
    1e5c:	89 81       	ldd	r24, Y+1	; 0x01
    1e5e:	80 35       	cpi	r24, 0x50	; 80
    1e60:	a9 f5       	brne	.+106    	; 0x1ecc <examineInstr+0xce>
    1e62:	8a 81       	ldd	r24, Y+2	; 0x02
    1e64:	80 32       	cpi	r24, 0x20	; 32
    1e66:	91 f5       	brne	.+100    	; 0x1ecc <examineInstr+0xce>
    1e68:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6a:	82 34       	cpi	r24, 0x42	; 66
    1e6c:	21 f0       	breq	.+8      	; 0x1e76 <examineInstr+0x78>
    1e6e:	87 35       	cpi	r24, 0x57	; 87
    1e70:	69 f5       	brne	.+90     	; 0x1ecc <examineInstr+0xce>
			//TCCR1B |= (1 << CS12) ;
		}
		else
		{
			/* Set player to white */
			enemy = 'B';
    1e72:	92 e4       	ldi	r25, 0x42	; 66
    1e74:	01 c0       	rjmp	.+2      	; 0x1e78 <examineInstr+0x7a>
	{
		/* Set players to black or white */
		if (c[3] == 'B')
		{
			/* Set player to black */
			enemy = 'W';
    1e76:	97 e5       	ldi	r25, 0x57	; 87
    1e78:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <enemy>
			mine = 'B' ;
    1e7c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <mine>
			/*writeString("\r") ; */
			writeByte('O') ;
    1e80:	8f e4       	ldi	r24, 0x4F	; 79
    1e82:	0e 94 05 01 	call	0x20a	; 0x20a <writeByte>
			writeByte('K') ;
    1e86:	8b e4       	ldi	r24, 0x4B	; 75
    1e88:	2d c1       	rjmp	.+602    	; 0x20e4 <examineInstr+0x2e6>
			writeByte('\r') ;
			/* Begin timer */
			//TCCR1B |= (1 << CS12) ;
		}
	}
	else if (strlen(c) == 2 && c[0] == 'N' && c[1] == 'G')
    1e8a:	8e 34       	cpi	r24, 0x4E	; 78
    1e8c:	39 f4       	brne	.+14     	; 0x1e9c <examineInstr+0x9e>
    1e8e:	89 81       	ldd	r24, Y+1	; 0x01
    1e90:	87 34       	cpi	r24, 0x47	; 71
    1e92:	09 f0       	breq	.+2      	; 0x1e96 <examineInstr+0x98>
    1e94:	23 c1       	rjmp	.+582    	; 0x20dc <examineInstr+0x2de>
	{
		/* New game */
		tableInit();
    1e96:	0e 94 f9 07 	call	0xff2	; 0xff2 <tableInit>
    1e9a:	9d c0       	rjmp	.+314    	; 0x1fd6 <examineInstr+0x1d8>
		writeByte('\r') ;
		/* Begin timer */
		//TCCR1B |= (1 << CS12) ;
		
	}
	else if (strlen(c) == 2 && c[0] == 'E' && c[1] == 'G')
    1e9c:	85 34       	cpi	r24, 0x45	; 69
    1e9e:	81 f5       	brne	.+96     	; 0x1f00 <examineInstr+0x102>
    1ea0:	89 81       	ldd	r24, Y+1	; 0x01
    1ea2:	87 34       	cpi	r24, 0x47	; 71
    1ea4:	09 f0       	breq	.+2      	; 0x1ea8 <examineInstr+0xaa>
    1ea6:	1a c1       	rjmp	.+564    	; 0x20dc <examineInstr+0x2de>
	{
		/* End game */
		/* Disable timer */
        TCCR1B &= 0b11111011 ;
    1ea8:	8e b5       	in	r24, 0x2e	; 46
    1eaa:	8b 7f       	andi	r24, 0xFB	; 251
    1eac:	8e bd       	out	0x2e, r24	; 46
		TCNT1 = 0 ; 
    1eae:	1d bc       	out	0x2d, r1	; 45
    1eb0:	1c bc       	out	0x2c, r1	; 44
		
		if (countMineValidmoves() == 0 && countEnemyValidmoves() == 0)
    1eb2:	0e 94 19 08 	call	0x1032	; 0x1032 <countMineValidmoves>
    1eb6:	81 11       	cpse	r24, r1
    1eb8:	11 c1       	rjmp	.+546    	; 0x20dc <examineInstr+0x2de>
    1eba:	0e 94 36 08 	call	0x106c	; 0x106c <countEnemyValidmoves>
    1ebe:	81 11       	cpse	r24, r1
    1ec0:	0d c1       	rjmp	.+538    	; 0x20dc <examineInstr+0x2de>
		{
			writeByte('O') ;
    1ec2:	8f e4       	ldi	r24, 0x4F	; 79
    1ec4:	0e 94 05 01 	call	0x20a	; 0x20a <writeByte>
			writeByte('K') ;
    1ec8:	8b e4       	ldi	r24, 0x4B	; 75
    1eca:	b9 c0       	rjmp	.+370    	; 0x203e <examineInstr+0x240>
			writeByte('\r') ;
		}
		/* Start again opponents time */
		/*TCCR1B |= (1 << CS12) ; */
	}
	else if (strlen(c) == 4 && c[0] == 'S' && c[1] == 'T' && c[2] == ' ' && (asciiToInteger(c[3]) >= 1 && asciiToInteger(c[3]) <=9))
    1ecc:	89 81       	ldd	r24, Y+1	; 0x01
    1ece:	84 35       	cpi	r24, 0x54	; 84
    1ed0:	09 f0       	breq	.+2      	; 0x1ed4 <examineInstr+0xd6>
    1ed2:	04 c1       	rjmp	.+520    	; 0x20dc <examineInstr+0x2de>
    1ed4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed6:	80 32       	cpi	r24, 0x20	; 32
    1ed8:	09 f0       	breq	.+2      	; 0x1edc <examineInstr+0xde>
    1eda:	00 c1       	rjmp	.+512    	; 0x20dc <examineInstr+0x2de>
    1edc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ede:	0e 94 4d 01 	call	0x29a	; 0x29a <asciiToInteger>
    1ee2:	81 50       	subi	r24, 0x01	; 1
    1ee4:	89 30       	cpi	r24, 0x09	; 9
    1ee6:	08 f0       	brcs	.+2      	; 0x1eea <examineInstr+0xec>
    1ee8:	f9 c0       	rjmp	.+498    	; 0x20dc <examineInstr+0x2de>
	{
		/* set time limit */
		TCCR1B &= 0b11111011 ;										/* Disable timer */
    1eea:	8e b5       	in	r24, 0x2e	; 46
    1eec:	8b 7f       	andi	r24, 0xFB	; 251
    1eee:	8e bd       	out	0x2e, r24	; 46
		seconds = 0 ;
    1ef0:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <__data_end>
		timelimit = asciiToInteger(c[3]) ;							/* Change timing limit */
    1ef4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef6:	0e 94 4d 01 	call	0x29a	; 0x29a <asciiToInteger>
    1efa:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <timelimit>
    1efe:	c0 cf       	rjmp	.-128    	; 0x1e80 <examineInstr+0x82>
		writeByte('K') ;
		writeByte('\r') ;
		// TCCR1B |= (1 << CS12) ;										/* Renable timer */
		
	}
	else if (strlen(c) == 2 && c[0] == 'O' && c[1] == 'K')
    1f00:	8f 34       	cpi	r24, 0x4F	; 79
    1f02:	09 f0       	breq	.+2      	; 0x1f06 <examineInstr+0x108>
    1f04:	6d c0       	rjmp	.+218    	; 0x1fe0 <examineInstr+0x1e2>
    1f06:	89 81       	ldd	r24, Y+1	; 0x01
    1f08:	8b 34       	cpi	r24, 0x4B	; 75
    1f0a:	09 f0       	breq	.+2      	; 0x1f0e <examineInstr+0x110>
    1f0c:	e7 c0       	rjmp	.+462    	; 0x20dc <examineInstr+0x2de>
		//if (seconds > timelimit)									/* if the opponents exceeds the allowable timelimit then send illegal time */
		//{
			//IllegalTime() ;
		//}
		//seconds = 0 ;
		if (countMineValidmoves() > 0)
    1f0e:	0e 94 19 08 	call	0x1032	; 0x1032 <countMineValidmoves>
    1f12:	81 11       	cpse	r24, r1
    1f14:	a7 c0       	rjmp	.+334    	; 0x2064 <examineInstr+0x266>
			scanChessboard(mine) ;
			MyMove(myLine,myColumn) ;
		}
		else
		{
			writeByte('P') ;
    1f16:	80 e5       	ldi	r24, 0x50	; 80
    1f18:	0e 94 05 01 	call	0x20a	; 0x20a <writeByte>
			writeByte('S') ;
    1f1c:	83 e5       	ldi	r24, 0x53	; 83
    1f1e:	0e 94 05 01 	call	0x20a	; 0x20a <writeByte>
			writeByte('\r') ;
    1f22:	8d e0       	ldi	r24, 0x0D	; 13
    1f24:	0e 94 05 01 	call	0x20a	; 0x20a <writeByte>
    1f28:	c5 c0       	rjmp	.+394    	; 0x20b4 <examineInstr+0x2b6>
		}
		/* I played my move. So the enemy stops counting my time and i started counting his time */
		TCCR1B |= (1 << CS12) ;
		
	}
	else if (strlen(c) == 5 && c[0] == 'M' && c[1] == 'V' && c[2] == ' ' && (c[3] >= 'A' && c[3] <= 'H') && (c[4] >= '1' && c[4] <= '8'))
    1f2a:	05 97       	sbiw	r24, 0x05	; 5
    1f2c:	09 f0       	breq	.+2      	; 0x1f30 <examineInstr+0x132>
    1f2e:	d6 c0       	rjmp	.+428    	; 0x20dc <examineInstr+0x2de>
    1f30:	88 81       	ld	r24, Y
    1f32:	8d 34       	cpi	r24, 0x4D	; 77
    1f34:	09 f0       	breq	.+2      	; 0x1f38 <examineInstr+0x13a>
    1f36:	d2 c0       	rjmp	.+420    	; 0x20dc <examineInstr+0x2de>
    1f38:	89 81       	ldd	r24, Y+1	; 0x01
    1f3a:	86 35       	cpi	r24, 0x56	; 86
    1f3c:	09 f0       	breq	.+2      	; 0x1f40 <examineInstr+0x142>
    1f3e:	ce c0       	rjmp	.+412    	; 0x20dc <examineInstr+0x2de>
    1f40:	8a 81       	ldd	r24, Y+2	; 0x02
    1f42:	80 32       	cpi	r24, 0x20	; 32
    1f44:	09 f0       	breq	.+2      	; 0x1f48 <examineInstr+0x14a>
    1f46:	ca c0       	rjmp	.+404    	; 0x20dc <examineInstr+0x2de>
    1f48:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4a:	81 54       	subi	r24, 0x41	; 65
    1f4c:	88 30       	cpi	r24, 0x08	; 8
    1f4e:	08 f0       	brcs	.+2      	; 0x1f52 <examineInstr+0x154>
    1f50:	c5 c0       	rjmp	.+394    	; 0x20dc <examineInstr+0x2de>
    1f52:	8c 81       	ldd	r24, Y+4	; 0x04
    1f54:	81 53       	subi	r24, 0x31	; 49
    1f56:	88 30       	cpi	r24, 0x08	; 8
    1f58:	08 f0       	brcs	.+2      	; 0x1f5c <examineInstr+0x15e>
    1f5a:	c0 c0       	rjmp	.+384    	; 0x20dc <examineInstr+0x2de>
	{
		/* Opponent move*/
		/* I am stopping counting his time. Disable timer by clearing prescaler */
		TCCR1B &= 0b11111011 ;
    1f5c:	8e b5       	in	r24, 0x2e	; 46
    1f5e:	8b 7f       	andi	r24, 0xFB	; 251
    1f60:	8e bd       	out	0x2e, r24	; 46
		/* Reset timer's value */
		TCNT1 = 0 ;
    1f62:	1d bc       	out	0x2d, r1	; 45
    1f64:	1c bc       	out	0x2c, r1	; 44
		/* Then I check if he exceeds the allowable timelimit */
		if (seconds > timelimit)
    1f66:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <__data_end>
    1f6a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <timelimit>
    1f6e:	89 17       	cp	r24, r25
    1f70:	08 f0       	brcs	.+2      	; 0x1f74 <examineInstr+0x176>
    1f72:	c3 c0       	rjmp	.+390    	; 0x20fa <examineInstr+0x2fc>
		{
			PORTB &= 0b11011111 ;
    1f74:	c5 98       	cbi	0x18, 5	; 24
			writeByte('I') ;
    1f76:	89 e4       	ldi	r24, 0x49	; 73
    1f78:	0e 94 05 01 	call	0x20a	; 0x20a <writeByte>
			writeByte('L') ;
    1f7c:	8c e4       	ldi	r24, 0x4C	; 76
    1f7e:	0e 94 05 01 	call	0x20a	; 0x20a <writeByte>
			writeByte('\r') ;
    1f82:	8d e0       	ldi	r24, 0x0D	; 13
    1f84:	0e 94 05 01 	call	0x20a	; 0x20a <writeByte>
		else
		{
			PORTB |= (1 << PB5) ;
		}
		/* reset opponents time - thinking */
		seconds = 0 ;
    1f88:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <__data_end>
		
		if (checkEnemyMove(c[3],asciiToInteger(c[4])) == 1)
    1f8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f8e:	0e 94 4d 01 	call	0x29a	; 0x29a <asciiToInteger>
    1f92:	08 2f       	mov	r16, r24
    1f94:	1b 81       	ldd	r17, Y+3	; 0x03
    1f96:	68 2f       	mov	r22, r24
    1f98:	81 2f       	mov	r24, r17
    1f9a:	0e 94 da 01 	call	0x3b4	; 0x3b4 <checkEnemyMove>
    1f9e:	81 30       	cpi	r24, 0x01	; 1
    1fa0:	09 f0       	breq	.+2      	; 0x1fa4 <examineInstr+0x1a6>
    1fa2:	43 c0       	rjmp	.+134    	; 0x202a <examineInstr+0x22c>
		{
			setChecker(c[3],asciiToInteger(c[4]),enemy,table);
    1fa4:	2e ec       	ldi	r18, 0xCE	; 206
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    1fac:	60 2f       	mov	r22, r16
    1fae:	81 2f       	mov	r24, r17
    1fb0:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
			TurnOtherCheckers(c[3],asciiToInteger(c[4]),mine,enemy,table) ;
    1fb4:	e0 90 63 00 	lds	r14, 0x0063	; 0x800063 <enemy>
    1fb8:	f0 90 62 00 	lds	r15, 0x0062	; 0x800062 <mine>
    1fbc:	8c 81       	ldd	r24, Y+4	; 0x04
    1fbe:	0e 94 4d 01 	call	0x29a	; 0x29a <asciiToInteger>
    1fc2:	0e ec       	ldi	r16, 0xCE	; 206
    1fc4:	10 e0       	ldi	r17, 0x00	; 0
    1fc6:	2e 2d       	mov	r18, r14
    1fc8:	4f 2d       	mov	r20, r15
    1fca:	68 2f       	mov	r22, r24
    1fcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fce:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <TurnOtherCheckers>
			clearValidMoves() ;
    1fd2:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <clearValidMoves>
			scanChessboard(mine) ;
    1fd6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <mine>
    1fda:	0e 94 72 05 	call	0xae4	; 0xae4 <scanChessboard>
    1fde:	50 cf       	rjmp	.-352    	; 0x1e80 <examineInstr+0x82>
			writeByte('\r') ;
		}
		

	}
	else if (strlen(c) == 2 && c[0] == 'P' && c[1] == 'S')
    1fe0:	80 35       	cpi	r24, 0x50	; 80
    1fe2:	09 f0       	breq	.+2      	; 0x1fe6 <examineInstr+0x1e8>
    1fe4:	6b c0       	rjmp	.+214    	; 0x20bc <examineInstr+0x2be>
    1fe6:	89 81       	ldd	r24, Y+1	; 0x01
    1fe8:	83 35       	cpi	r24, 0x53	; 83
    1fea:	09 f0       	breq	.+2      	; 0x1fee <examineInstr+0x1f0>
    1fec:	77 c0       	rjmp	.+238    	; 0x20dc <examineInstr+0x2de>
	{
		/* Pass PC doesn't have any move ΞΌC will play again */
		/*writeString("OK\r") ; */
		TCCR1B &= 0b11111011 ;
    1fee:	8e b5       	in	r24, 0x2e	; 46
    1ff0:	8b 7f       	andi	r24, 0xFB	; 251
    1ff2:	8e bd       	out	0x2e, r24	; 46
		/* Reset timer's value */
		TCNT1 = 0 ;
    1ff4:	1d bc       	out	0x2d, r1	; 45
    1ff6:	1c bc       	out	0x2c, r1	; 44
		/* Then I check if he exceeds the allowable timelimit */
		if (seconds > timelimit)
    1ff8:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <__data_end>
    1ffc:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <timelimit>
    2000:	89 17       	cp	r24, r25
    2002:	18 f4       	brcc	.+6      	; 0x200a <examineInstr+0x20c>
		{
			PORTB &= 0b11111111 ;
    2004:	88 b3       	in	r24, 0x18	; 24
    2006:	88 bb       	out	0x18, r24	; 24
    2008:	01 c0       	rjmp	.+2      	; 0x200c <examineInstr+0x20e>
			//IllegalTime() ;
		}
		else
		{
			PORTB |= (1 << PB5) ;
    200a:	c5 9a       	sbi	0x18, 5	; 24
		}
		/* reset opponents time - thinking */
		seconds = 0 ;
    200c:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <__data_end>
		
		
		writeByte('O') ;
    2010:	8f e4       	ldi	r24, 0x4F	; 79
    2012:	0e 94 05 01 	call	0x20a	; 0x20a <writeByte>
		writeByte('K') ;
    2016:	8b e4       	ldi	r24, 0x4B	; 75
    2018:	0e 94 05 01 	call	0x20a	; 0x20a <writeByte>
		writeByte('\r') ;
    201c:	8d e0       	ldi	r24, 0x0D	; 13
    201e:	0e 94 05 01 	call	0x20a	; 0x20a <writeByte>
		
		if (countEnemyValidmoves() == 0)
    2022:	0e 94 36 08 	call	0x106c	; 0x106c <countEnemyValidmoves>
    2026:	88 23       	and	r24, r24
    2028:	11 f0       	breq	.+4      	; 0x202e <examineInstr+0x230>
			writeByte('O') ;
			writeByte('K') ;
			writeByte('\r') ;
		}else
		{
			writeByte('I') ;
    202a:	89 e4       	ldi	r24, 0x49	; 73
    202c:	58 c0       	rjmp	.+176    	; 0x20de <examineInstr+0x2e0>
		writeByte('K') ;
		writeByte('\r') ;
		
		if (countEnemyValidmoves() == 0)
		{
			if (countMineValidmoves() == 0)
    202e:	0e 94 19 08 	call	0x1032	; 0x1032 <countMineValidmoves>
    2032:	81 11       	cpse	r24, r1
    2034:	17 c0       	rjmp	.+46     	; 0x2064 <examineInstr+0x266>
			{
				writeByte('E') ;
    2036:	85 e4       	ldi	r24, 0x45	; 69
    2038:	0e 94 05 01 	call	0x20a	; 0x20a <writeByte>
				writeByte('G') ;
    203c:	87 e4       	ldi	r24, 0x47	; 71
    203e:	0e 94 05 01 	call	0x20a	; 0x20a <writeByte>
				writeByte('\r') ;
    2042:	8d e0       	ldi	r24, 0x0D	; 13
    2044:	0e 94 05 01 	call	0x20a	; 0x20a <writeByte>
				
				/* Check who won the game */
				checkWin(mine,blackCount,whiteCount) ;
    2048:	40 91 7c 00 	lds	r20, 0x007C	; 0x80007c <whiteCount>
    204c:	60 91 7d 00 	lds	r22, 0x007D	; 0x80007d <blackCount>
    2050:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <mine>
	{
		writeByte('P') ;
		writeByte('L') ;
		writeByte('\r') ;
	}
}
    2054:	df 91       	pop	r29
    2056:	cf 91       	pop	r28
    2058:	1f 91       	pop	r17
    205a:	0f 91       	pop	r16
    205c:	ff 90       	pop	r15
    205e:	ef 90       	pop	r14
				writeByte('E') ;
				writeByte('G') ;
				writeByte('\r') ;
				
				/* Check who won the game */
				checkWin(mine,blackCount,whiteCount) ;
    2060:	0c 94 53 08 	jmp	0x10a6	; 0x10a6 <checkWin>
			}
			else
			{
				copyChessboard() ;
    2064:	0e 94 7f 08 	call	0x10fe	; 0x10fe <copyChessboard>
				Tactics(mine) ;
    2068:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <mine>
    206c:	0e 94 55 09 	call	0x12aa	; 0x12aa <Tactics>
				setChecker(myLine,myColumn,mine,table) ;
    2070:	2e ec       	ldi	r18, 0xCE	; 206
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <mine>
    2078:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__data_start>
    207c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <myLine>
    2080:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(myLine,myColumn,enemy,mine,table) ;
    2084:	0e ec       	ldi	r16, 0xCE	; 206
    2086:	10 e0       	ldi	r17, 0x00	; 0
    2088:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <mine>
    208c:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2090:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__data_start>
    2094:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <myLine>
    2098:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <TurnOtherCheckers>
				clearValidMoves() ;
    209c:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <clearValidMoves>
				scanChessboard(mine) ;
    20a0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <mine>
    20a4:	0e 94 72 05 	call	0xae4	; 0xae4 <scanChessboard>
				MyMove(myLine,myColumn) ;
    20a8:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__data_start>
    20ac:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <myLine>
    20b0:	0e 94 67 01 	call	0x2ce	; 0x2ce <MyMove>
				/* I played my move. So the enemy stops counting my time and i started counting his time */
				TCCR1B |= (1 << CS12) ;
    20b4:	8e b5       	in	r24, 0x2e	; 46
    20b6:	84 60       	ori	r24, 0x04	; 4
    20b8:	8e bd       	out	0x2e, r24	; 46
    20ba:	21 c0       	rjmp	.+66     	; 0x20fe <examineInstr+0x300>
			writeByte('\r') ;
		}
		
		
	}
	else if (strlen(c) == 2 && c[0] == 'W' && c[1] == 'N')
    20bc:	87 35       	cpi	r24, 0x57	; 87
    20be:	71 f4       	brne	.+28     	; 0x20dc <examineInstr+0x2de>
    20c0:	89 81       	ldd	r24, Y+1	; 0x01
    20c2:	8e 34       	cpi	r24, 0x4E	; 78
    20c4:	59 f4       	brne	.+22     	; 0x20dc <examineInstr+0x2de>
	{
		/* You win */
		/*writeString("OK\r") ; */
		writeByte('O') ;
    20c6:	8f e4       	ldi	r24, 0x4F	; 79
    20c8:	0e 94 05 01 	call	0x20a	; 0x20a <writeByte>
		writeByte('K') ;
    20cc:	8b e4       	ldi	r24, 0x4B	; 75
    20ce:	0e 94 05 01 	call	0x20a	; 0x20a <writeByte>
		writeByte('\r') ;
    20d2:	8d e0       	ldi	r24, 0x0D	; 13
    20d4:	0e 94 05 01 	call	0x20a	; 0x20a <writeByte>
		
		PORTB &= 0b11111101 ;
    20d8:	c1 98       	cbi	0x18, 1	; 24
    20da:	11 c0       	rjmp	.+34     	; 0x20fe <examineInstr+0x300>
			/* Check who won the game */
			checkWin(mine,blackCount,whiteCount) ;
		}
		else
		{
			writeByte('P') ;
    20dc:	80 e5       	ldi	r24, 0x50	; 80
    20de:	0e 94 05 01 	call	0x20a	; 0x20a <writeByte>
			writeByte('L') ;
    20e2:	8c e4       	ldi	r24, 0x4C	; 76
    20e4:	0e 94 05 01 	call	0x20a	; 0x20a <writeByte>
			writeByte('\r') ;
    20e8:	8d e0       	ldi	r24, 0x0D	; 13
	{
		writeByte('P') ;
		writeByte('L') ;
		writeByte('\r') ;
	}
}
    20ea:	df 91       	pop	r29
    20ec:	cf 91       	pop	r28
    20ee:	1f 91       	pop	r17
    20f0:	0f 91       	pop	r16
    20f2:	ff 90       	pop	r15
    20f4:	ef 90       	pop	r14
		}
		else
		{
			writeByte('P') ;
			writeByte('L') ;
			writeByte('\r') ;
    20f6:	0c 94 05 01 	jmp	0x20a	; 0x20a <writeByte>
			writeByte('L') ;
			writeByte('\r') ;
		}
		else
		{
			PORTB |= (1 << PB5) ;
    20fa:	c5 9a       	sbi	0x18, 5	; 24
    20fc:	45 cf       	rjmp	.-374    	; 0x1f88 <examineInstr+0x18a>
	{
		writeByte('P') ;
		writeByte('L') ;
		writeByte('\r') ;
	}
}
    20fe:	df 91       	pop	r29
    2100:	cf 91       	pop	r28
    2102:	1f 91       	pop	r17
    2104:	0f 91       	pop	r16
    2106:	ff 90       	pop	r15
    2108:	ef 90       	pop	r14
    210a:	08 95       	ret

0000210c <__vector_11>:
		}
	}
}

ISR(USART_RXC_vect)
{
    210c:	1f 92       	push	r1
    210e:	0f 92       	push	r0
    2110:	0f b6       	in	r0, 0x3f	; 63
    2112:	0f 92       	push	r0
    2114:	11 24       	eor	r1, r1
    2116:	2f 93       	push	r18
    2118:	3f 93       	push	r19
    211a:	4f 93       	push	r20
    211c:	5f 93       	push	r21
    211e:	6f 93       	push	r22
    2120:	7f 93       	push	r23
    2122:	8f 93       	push	r24
    2124:	9f 93       	push	r25
    2126:	af 93       	push	r26
    2128:	bf 93       	push	r27
    212a:	ef 93       	push	r30
    212c:	ff 93       	push	r31
	char c = UDR ;
    212e:	8c b1       	in	r24, 0x0c	; 12
	if ( c != '\r')
    2130:	8d 30       	cpi	r24, 0x0D	; 13
    2132:	19 f0       	breq	.+6      	; 0x213a <__vector_11+0x2e>
	{
		readByte(c) ;
    2134:	0e 94 23 01 	call	0x246	; 0x246 <readByte>
    2138:	08 c0       	rjmp	.+16     	; 0x214a <__vector_11+0x3e>
	}
	else
	{
		/* Call Examine function */
		updateRxBuffer(RX_buffer) ;
    213a:	8e e7       	ldi	r24, 0x7E	; 126
    213c:	91 e0       	ldi	r25, 0x01	; 1
    213e:	0e 94 58 01 	call	0x2b0	; 0x2b0 <updateRxBuffer>
		examineInstr(RX_buffer) ;
    2142:	8e e7       	ldi	r24, 0x7E	; 126
    2144:	91 e0       	ldi	r25, 0x01	; 1
    2146:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <examineInstr>
	}
}
    214a:	ff 91       	pop	r31
    214c:	ef 91       	pop	r30
    214e:	bf 91       	pop	r27
    2150:	af 91       	pop	r26
    2152:	9f 91       	pop	r25
    2154:	8f 91       	pop	r24
    2156:	7f 91       	pop	r23
    2158:	6f 91       	pop	r22
    215a:	5f 91       	pop	r21
    215c:	4f 91       	pop	r20
    215e:	3f 91       	pop	r19
    2160:	2f 91       	pop	r18
    2162:	0f 90       	pop	r0
    2164:	0f be       	out	0x3f, r0	; 63
    2166:	0f 90       	pop	r0
    2168:	1f 90       	pop	r1
    216a:	18 95       	reti

0000216c <__tablejump2__>:
    216c:	ee 0f       	add	r30, r30
    216e:	ff 1f       	adc	r31, r31
    2170:	05 90       	lpm	r0, Z+
    2172:	f4 91       	lpm	r31, Z
    2174:	e0 2d       	mov	r30, r0
    2176:	09 94       	ijmp

00002178 <_exit>:
    2178:	f8 94       	cli

0000217a <__stop_program>:
    217a:	ff cf       	rjmp	.-2      	; 0x217a <__stop_program>
