
Project3_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000021c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  000021c2  00002256  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000136  00800078  00800078  0000226e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000226e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000022a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  000022dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000399e  00000000  00000000  000023e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d3  00000000  00000000  00005d82  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001e66  00000000  00000000  00006555  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003d4  00000000  00000000  000083bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005fc  00000000  00000000  00008790  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002f76  00000000  00000000  00008d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  0000bd02  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 9a 00 	jmp	0x134	; 0x134 <__ctors_end>
       4:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
       8:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
       c:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
      10:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
      14:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
      18:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__vector_6>
      1c:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
      20:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
      24:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
      28:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
      2c:	0c 94 a9 10 	jmp	0x2152	; 0x2152 <__vector_11>
      30:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
      34:	0c 94 b9 00 	jmp	0x172	; 0x172 <__vector_13>
      38:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
      3c:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
      40:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
      44:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
      48:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
      4c:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
      50:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
      54:	91 09       	sbc	r25, r1
      56:	9b 09       	sbc	r25, r11
      58:	a5 09       	sbc	r26, r5
      5a:	af 09       	sbc	r26, r15
      5c:	b9 09       	sbc	r27, r9
      5e:	c3 09       	sbc	r28, r3
      60:	cd 09       	sbc	r28, r13
      62:	d7 09       	sbc	r29, r7
      64:	e1 09       	sbc	r30, r1
      66:	eb 09       	sbc	r30, r11
      68:	f5 09       	sbc	r31, r5
      6a:	ff 09       	sbc	r31, r15
      6c:	09 0a       	sbc	r0, r25
      6e:	13 0a       	sbc	r1, r19
      70:	59 0a       	sbc	r5, r25
      72:	63 0a       	sbc	r6, r19
      74:	6d 0a       	sbc	r6, r29
      76:	77 0a       	sbc	r7, r23
      78:	81 0a       	sbc	r8, r17
      7a:	8b 0a       	sbc	r8, r27
      7c:	95 0a       	sbc	r9, r21
      7e:	9f 0a       	sbc	r9, r31
      80:	db 0a       	sbc	r13, r27
      82:	a9 0a       	sbc	r10, r25
      84:	b3 0a       	sbc	r11, r19
      86:	bd 0a       	sbc	r11, r29
      88:	c7 0a       	sbc	r12, r23
      8a:	d1 0a       	sbc	r13, r17
      8c:	06 0b       	sbc	r16, r22
      8e:	10 0b       	sbc	r17, r16
      90:	1a 0b       	sbc	r17, r26
      92:	24 0b       	sbc	r18, r20
      94:	2e 0b       	sbc	r18, r30
      96:	38 0b       	sbc	r19, r24
      98:	42 0b       	sbc	r20, r18
      9a:	4c 0b       	sbc	r20, r28
      9c:	88 0b       	sbc	r24, r24
      9e:	56 0b       	sbc	r21, r22
      a0:	60 0b       	sbc	r22, r16
      a2:	6a 0b       	sbc	r22, r26
      a4:	74 0b       	sbc	r23, r20
      a6:	7e 0b       	sbc	r23, r30
      a8:	b3 0b       	sbc	r27, r19
      aa:	bd 0b       	sbc	r27, r29
      ac:	c7 0b       	sbc	r28, r23
      ae:	d1 0b       	sbc	r29, r17
      b0:	db 0b       	sbc	r29, r27
      b2:	e5 0b       	sbc	r30, r21
      b4:	ef 0b       	sbc	r30, r31
      b6:	f9 0b       	sbc	r31, r25
      b8:	35 0c       	add	r3, r5
      ba:	03 0c       	add	r0, r3
      bc:	0d 0c       	add	r0, r13
      be:	17 0c       	add	r1, r7
      c0:	21 0c       	add	r2, r1
      c2:	2b 0c       	add	r2, r11
      c4:	60 0c       	add	r6, r0
      c6:	6a 0c       	add	r6, r10
      c8:	74 0c       	add	r7, r4
      ca:	7e 0c       	add	r7, r14
      cc:	88 0c       	add	r8, r8
      ce:	92 0c       	add	r9, r2
      d0:	9c 0c       	add	r9, r12
      d2:	a6 0c       	add	r10, r6
      d4:	e2 0c       	add	r14, r2
      d6:	b0 0c       	add	r11, r0
      d8:	ba 0c       	add	r11, r10
      da:	c4 0c       	add	r12, r4
      dc:	ce 0c       	add	r12, r14
      de:	d8 0c       	add	r13, r8
      e0:	0d 0d       	add	r16, r13
      e2:	17 0d       	add	r17, r7
      e4:	21 0d       	add	r18, r1
      e6:	2b 0d       	add	r18, r11
      e8:	35 0d       	add	r19, r5
      ea:	3f 0d       	add	r19, r15
      ec:	49 0d       	add	r20, r9
      ee:	53 0d       	add	r21, r3
      f0:	8f 0d       	add	r24, r15
      f2:	5d 0d       	add	r21, r13
      f4:	67 0d       	add	r22, r7
      f6:	71 0d       	add	r23, r1
      f8:	7b 0d       	add	r23, r11
      fa:	85 0d       	add	r24, r5
      fc:	ba 0d       	add	r27, r10
      fe:	c4 0d       	add	r28, r4
     100:	ce 0d       	add	r28, r14
     102:	d8 0d       	add	r29, r8
     104:	e2 0d       	add	r30, r2
     106:	ec 0d       	add	r30, r12
     108:	f6 0d       	add	r31, r6
     10a:	00 0e       	add	r0, r16
     10c:	3c 0e       	add	r3, r28
     10e:	0a 0e       	add	r0, r26
     110:	14 0e       	add	r1, r20
     112:	1e 0e       	add	r1, r30
     114:	28 0e       	add	r2, r24
     116:	32 0e       	add	r3, r18
     118:	67 0e       	add	r6, r23
     11a:	71 0e       	add	r7, r17
     11c:	7b 0e       	add	r7, r27
     11e:	85 0e       	add	r8, r21
     120:	8f 0e       	add	r8, r31
     122:	99 0e       	add	r9, r25
     124:	a3 0e       	add	r10, r19
     126:	ad 0e       	add	r10, r29
     128:	e9 0e       	add	r14, r25
     12a:	b7 0e       	add	r11, r23
     12c:	c1 0e       	add	r12, r17
     12e:	cb 0e       	add	r12, r27
     130:	d5 0e       	add	r13, r21
     132:	df 0e       	add	r13, r31

00000134 <__ctors_end>:
     134:	11 24       	eor	r1, r1
     136:	1f be       	out	0x3f, r1	; 63
     138:	cf e5       	ldi	r28, 0x5F	; 95
     13a:	d4 e0       	ldi	r29, 0x04	; 4
     13c:	de bf       	out	0x3e, r29	; 62
     13e:	cd bf       	out	0x3d, r28	; 61

00000140 <__do_copy_data>:
     140:	10 e0       	ldi	r17, 0x00	; 0
     142:	a0 e6       	ldi	r26, 0x60	; 96
     144:	b0 e0       	ldi	r27, 0x00	; 0
     146:	e2 ec       	ldi	r30, 0xC2	; 194
     148:	f1 e2       	ldi	r31, 0x21	; 33
     14a:	02 c0       	rjmp	.+4      	; 0x150 <__do_copy_data+0x10>
     14c:	05 90       	lpm	r0, Z+
     14e:	0d 92       	st	X+, r0
     150:	a8 37       	cpi	r26, 0x78	; 120
     152:	b1 07       	cpc	r27, r17
     154:	d9 f7       	brne	.-10     	; 0x14c <__do_copy_data+0xc>

00000156 <__do_clear_bss>:
     156:	21 e0       	ldi	r18, 0x01	; 1
     158:	a8 e7       	ldi	r26, 0x78	; 120
     15a:	b0 e0       	ldi	r27, 0x00	; 0
     15c:	01 c0       	rjmp	.+2      	; 0x160 <.do_clear_bss_start>

0000015e <.do_clear_bss_loop>:
     15e:	1d 92       	st	X+, r1

00000160 <.do_clear_bss_start>:
     160:	ae 3a       	cpi	r26, 0xAE	; 174
     162:	b2 07       	cpc	r27, r18
     164:	e1 f7       	brne	.-8      	; 0x15e <.do_clear_bss_loop>
     166:	0e 94 3d 01 	call	0x27a	; 0x27a <main>
     16a:	0c 94 df 10 	jmp	0x21be	; 0x21be <_exit>

0000016e <__bad_interrupt>:
     16e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000172 <__vector_13>:
		default:
		c = '9' ;
		break;
	}
	return c ;
}
     172:	1f 92       	push	r1
     174:	0f 92       	push	r0
     176:	0f b6       	in	r0, 0x3f	; 63
     178:	0f 92       	push	r0
     17a:	11 24       	eor	r1, r1
     17c:	8f 93       	push	r24
     17e:	9f 93       	push	r25
     180:	ef 93       	push	r30
     182:	ff 93       	push	r31
     184:	5d 9b       	sbis	0x0b, 5	; 11
     186:	1a c0       	rjmp	.+52     	; 0x1bc <__vector_13+0x4a>
     188:	e0 91 7b 00 	lds	r30, 0x007B	; 0x80007b <TxreadPos>
     18c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <TxwritePos>
     190:	e8 17       	cp	r30, r24
     192:	50 f4       	brcc	.+20     	; 0x1a8 <__vector_13+0x36>
     194:	f0 e0       	ldi	r31, 0x00	; 0
     196:	e2 5e       	subi	r30, 0xE2	; 226
     198:	fe 4f       	sbci	r31, 0xFE	; 254
     19a:	80 81       	ld	r24, Z
     19c:	8c b9       	out	0x0c, r24	; 12
     19e:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <TxreadPos>
     1a2:	8f 5f       	subi	r24, 0xFF	; 255
     1a4:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <TxreadPos>
     1a8:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <TxreadPos>
     1ac:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <TxwritePos>
     1b0:	98 13       	cpse	r25, r24
     1b2:	04 c0       	rjmp	.+8      	; 0x1bc <__vector_13+0x4a>
     1b4:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <TxreadPos>
     1b8:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <TxwritePos>
     1bc:	ff 91       	pop	r31
     1be:	ef 91       	pop	r30
     1c0:	9f 91       	pop	r25
     1c2:	8f 91       	pop	r24
     1c4:	0f 90       	pop	r0
     1c6:	0f be       	out	0x3f, r0	; 63
     1c8:	0f 90       	pop	r0
     1ca:	1f 90       	pop	r1
     1cc:	18 95       	reti

000001ce <__vector_6>:
     1ce:	1f 92       	push	r1
     1d0:	0f 92       	push	r0
     1d2:	0f b6       	in	r0, 0x3f	; 63
     1d4:	0f 92       	push	r0
     1d6:	11 24       	eor	r1, r1
     1d8:	8f 93       	push	r24
     1da:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__data_end>
     1de:	8f 5f       	subi	r24, 0xFF	; 255
     1e0:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__data_end>
     1e4:	8f 91       	pop	r24
     1e6:	0f 90       	pop	r0
     1e8:	0f be       	out	0x3f, r0	; 63
     1ea:	0f 90       	pop	r0
     1ec:	1f 90       	pop	r1
     1ee:	18 95       	reti

000001f0 <init_Tx>:
     1f0:	90 bd       	out	0x20, r25	; 32
     1f2:	89 b9       	out	0x09, r24	; 9
     1f4:	80 e2       	ldi	r24, 0x20	; 32
     1f6:	8b b9       	out	0x0b, r24	; 11
     1f8:	88 e4       	ldi	r24, 0x48	; 72
     1fa:	8a b9       	out	0x0a, r24	; 10
     1fc:	86 e8       	ldi	r24, 0x86	; 134
     1fe:	80 bd       	out	0x20, r24	; 32
     200:	08 95       	ret

00000202 <init_Rx>:
     202:	8a b1       	in	r24, 0x0a	; 10
     204:	80 69       	ori	r24, 0x90	; 144
     206:	8a b9       	out	0x0a, r24	; 10
     208:	08 95       	ret

0000020a <writeByte>:
     20a:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <TxwritePos>
     20e:	e9 2f       	mov	r30, r25
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	e2 5e       	subi	r30, 0xE2	; 226
     214:	fe 4f       	sbci	r31, 0xFE	; 254
     216:	80 83       	st	Z, r24
     218:	9f 5f       	subi	r25, 0xFF	; 255
     21a:	90 31       	cpi	r25, 0x10	; 16
     21c:	19 f0       	breq	.+6      	; 0x224 <writeByte+0x1a>
     21e:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <TxwritePos>
     222:	02 c0       	rjmp	.+4      	; 0x228 <writeByte+0x1e>
     224:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <TxwritePos>
     228:	5d 9b       	sbis	0x0b, 5	; 11
     22a:	0c c0       	rjmp	.+24     	; 0x244 <writeByte+0x3a>
     22c:	e0 91 7b 00 	lds	r30, 0x007B	; 0x80007b <TxreadPos>
     230:	f0 e0       	ldi	r31, 0x00	; 0
     232:	e2 5e       	subi	r30, 0xE2	; 226
     234:	fe 4f       	sbci	r31, 0xFE	; 254
     236:	80 81       	ld	r24, Z
     238:	8c b9       	out	0x0c, r24	; 12
     23a:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <TxreadPos>
     23e:	8f 5f       	subi	r24, 0xFF	; 255
     240:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <TxreadPos>
     244:	08 95       	ret

00000246 <readByte>:
     246:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <RxwritePos>
     24a:	91 31       	cpi	r25, 0x11	; 17
     24c:	40 f4       	brcc	.+16     	; 0x25e <readByte+0x18>
     24e:	e9 2f       	mov	r30, r25
     250:	f0 e0       	ldi	r31, 0x00	; 0
     252:	e2 58       	subi	r30, 0x82	; 130
     254:	fe 4f       	sbci	r31, 0xFE	; 254
     256:	80 83       	st	Z, r24
     258:	9f 5f       	subi	r25, 0xFF	; 255
     25a:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <RxwritePos>
     25e:	08 95       	ret

00000260 <timerInit>:
     260:	1d bc       	out	0x2d, r1	; 45
     262:	1c bc       	out	0x2c, r1	; 44
     264:	8e b5       	in	r24, 0x2e	; 46
     266:	88 60       	ori	r24, 0x08	; 8
     268:	8e bd       	out	0x2e, r24	; 46
     26a:	86 e9       	ldi	r24, 0x96	; 150
     26c:	98 e9       	ldi	r25, 0x98	; 152
     26e:	9b bd       	out	0x2b, r25	; 43
     270:	8a bd       	out	0x2a, r24	; 42
     272:	89 b7       	in	r24, 0x39	; 57
     274:	80 61       	ori	r24, 0x10	; 16
     276:	89 bf       	out	0x39, r24	; 57
     278:	08 95       	ret

0000027a <main>:
     27a:	80 e4       	ldi	r24, 0x40	; 64
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <init_Tx>
     282:	0e 94 01 01 	call	0x202	; 0x202 <init_Rx>
     286:	87 b3       	in	r24, 0x17	; 23
     288:	8f 62       	ori	r24, 0x2F	; 47
     28a:	87 bb       	out	0x17, r24	; 23
     28c:	88 b3       	in	r24, 0x18	; 24
     28e:	8f 62       	ori	r24, 0x2F	; 47
     290:	88 bb       	out	0x18, r24	; 24
     292:	0e 94 30 01 	call	0x260	; 0x260 <timerInit>
     296:	78 94       	sei
     298:	ff cf       	rjmp	.-2      	; 0x298 <main+0x1e>

0000029a <asciiToInteger>:
     29a:	80 53       	subi	r24, 0x30	; 48
     29c:	89 30       	cpi	r24, 0x09	; 9
     29e:	30 f4       	brcc	.+12     	; 0x2ac <asciiToInteger+0x12>
     2a0:	e8 2f       	mov	r30, r24
     2a2:	f0 e0       	ldi	r31, 0x00	; 0
     2a4:	e2 59       	subi	r30, 0x92	; 146
     2a6:	ff 4f       	sbci	r31, 0xFF	; 255
     2a8:	80 81       	ld	r24, Z
     2aa:	08 95       	ret
     2ac:	89 e0       	ldi	r24, 0x09	; 9
     2ae:	08 95       	ret

000002b0 <updateRxBuffer>:
     2b0:	e0 91 79 00 	lds	r30, 0x0079	; 0x800079 <RxwritePos>
     2b4:	f0 e0       	ldi	r31, 0x00	; 0
     2b6:	e2 58       	subi	r30, 0x82	; 130
     2b8:	fe 4f       	sbci	r31, 0xFE	; 254
     2ba:	cf 01       	movw	r24, r30
     2bc:	8e 57       	subi	r24, 0x7E	; 126
     2be:	91 40       	sbci	r25, 0x01	; 1
     2c0:	40 97       	sbiw	r24, 0x10	; 16
     2c2:	14 f4       	brge	.+4      	; 0x2c8 <updateRxBuffer+0x18>
     2c4:	11 92       	st	Z+, r1
     2c6:	f9 cf       	rjmp	.-14     	; 0x2ba <updateRxBuffer+0xa>
     2c8:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <RxwritePos>
     2cc:	08 95       	ret

000002ce <MyMove>:
		writeByte('\r') ;
	}
}

void MyMove(char c, uint8_t column)
{
     2ce:	cf 93       	push	r28
     2d0:	df 93       	push	r29
     2d2:	d8 2f       	mov	r29, r24
     2d4:	c6 2f       	mov	r28, r22
	/* MyMove */
	/*writeString("MM B5\r") ; */
	writeByte('M') ;
     2d6:	8d e4       	ldi	r24, 0x4D	; 77
     2d8:	0e 94 05 01 	call	0x20a	; 0x20a <writeByte>
	writeByte('M') ;
     2dc:	8d e4       	ldi	r24, 0x4D	; 77
     2de:	0e 94 05 01 	call	0x20a	; 0x20a <writeByte>
	writeByte(' ') ;
     2e2:	80 e2       	ldi	r24, 0x20	; 32
     2e4:	0e 94 05 01 	call	0x20a	; 0x20a <writeByte>
	writeByte(c) ;
     2e8:	8d 2f       	mov	r24, r29
     2ea:	0e 94 05 01 	call	0x20a	; 0x20a <writeByte>
     2ee:	c9 30       	cpi	r28, 0x09	; 9
     2f0:	30 f4       	brcc	.+12     	; 0x2fe <MyMove+0x30>
     2f2:	ec 2f       	mov	r30, r28
     2f4:	f0 e0       	ldi	r31, 0x00	; 0
     2f6:	eb 59       	subi	r30, 0x9B	; 155
     2f8:	ff 4f       	sbci	r31, 0xFF	; 255
     2fa:	80 81       	ld	r24, Z
     2fc:	01 c0       	rjmp	.+2      	; 0x300 <MyMove+0x32>
     2fe:	89 e3       	ldi	r24, 0x39	; 57
	writeByte(intToAscii(column)) ;
     300:	0e 94 05 01 	call	0x20a	; 0x20a <writeByte>
	writeByte('\r') ;
     304:	8d e0       	ldi	r24, 0x0D	; 13
}
     306:	df 91       	pop	r29
     308:	cf 91       	pop	r28
	writeByte('M') ;
	writeByte('M') ;
	writeByte(' ') ;
	writeByte(c) ;
	writeByte(intToAscii(column)) ;
	writeByte('\r') ;
     30a:	0c 94 05 01 	jmp	0x20a	; 0x20a <writeByte>

0000030e <setChecker>:
	setChecker('E',5,'W',table) ;
}

void setChecker(char c,uint8_t column,char player,uint8_t chessboard[])
{
	uint8_t index = ((c - 65) << 1) ;										/* initial index calculation for byte - array */
     30e:	81 54       	subi	r24, 0x41	; 65
     310:	88 0f       	add	r24, r24
	uint8_t bit = column - 1 ;												/* initial bit that we must enable - disable chess-table cell */
	uint8_t buffer = 0 ;													/* buffer to read the specific byte from memory */
	uint8_t temp = 0 ;
	if (column > 4)
     312:	65 30       	cpi	r22, 0x05	; 5
     314:	10 f4       	brcc	.+4      	; 0x31a <setChecker+0xc>
}

void setChecker(char c,uint8_t column,char player,uint8_t chessboard[])
{
	uint8_t index = ((c - 65) << 1) ;										/* initial index calculation for byte - array */
	uint8_t bit = column - 1 ;												/* initial bit that we must enable - disable chess-table cell */
     316:	61 50       	subi	r22, 0x01	; 1
     318:	02 c0       	rjmp	.+4      	; 0x31e <setChecker+0x10>
	uint8_t buffer = 0 ;													/* buffer to read the specific byte from memory */
	uint8_t temp = 0 ;
	if (column > 4)
	{
		index++ ;
     31a:	8f 5f       	subi	r24, 0xFF	; 255
		bit = bit - 4 ;														/* if column > 4 jump to the next memory position */
     31c:	65 50       	subi	r22, 0x05	; 5
	}
	buffer = chessboard[index] ;
     31e:	d9 01       	movw	r26, r18
     320:	a8 0f       	add	r26, r24
     322:	b1 1d       	adc	r27, r1
     324:	2c 91       	ld	r18, X
     326:	e6 2f       	mov	r30, r22
     328:	f0 e0       	ldi	r31, 0x00	; 0
	switch(player)
     32a:	42 34       	cpi	r20, 0x42	; 66
     32c:	71 f4       	brne	.+28     	; 0x34a <setChecker+0x3c>
	{
		case 'B':														   /* case black: enable cell and valid bit */
		buffer |= (1 << bit) | (1 << (4 + bit)) ;
     32e:	34 96       	adiw	r30, 0x04	; 4
     330:	41 e0       	ldi	r20, 0x01	; 1
     332:	50 e0       	ldi	r21, 0x00	; 0
     334:	ca 01       	movw	r24, r20
     336:	01 c0       	rjmp	.+2      	; 0x33a <setChecker+0x2c>
     338:	88 0f       	add	r24, r24
     33a:	ea 95       	dec	r30
     33c:	ea f7       	brpl	.-6      	; 0x338 <setChecker+0x2a>
     33e:	82 2b       	or	r24, r18
     340:	01 c0       	rjmp	.+2      	; 0x344 <setChecker+0x36>
     342:	44 0f       	add	r20, r20
     344:	6a 95       	dec	r22
     346:	ea f7       	brpl	.-6      	; 0x342 <setChecker+0x34>
     348:	0e c0       	rjmp	.+28     	; 0x366 <setChecker+0x58>
		break;
		default:														  /* case white: reset cell and enable valid bit */
		temp |= (1 << bit) ;
     34a:	81 e0       	ldi	r24, 0x01	; 1
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	ac 01       	movw	r20, r24
     350:	01 c0       	rjmp	.+2      	; 0x354 <setChecker+0x46>
     352:	44 0f       	add	r20, r20
     354:	6a 95       	dec	r22
     356:	ea f7       	brpl	.-6      	; 0x352 <setChecker+0x44>
		temp = ~ temp ;
		buffer = buffer & temp ;
		buffer |= (1 << (4 + bit)) ;
     358:	34 96       	adiw	r30, 0x04	; 4
     35a:	01 c0       	rjmp	.+2      	; 0x35e <setChecker+0x50>
     35c:	88 0f       	add	r24, r24
     35e:	ea 95       	dec	r30
     360:	ea f7       	brpl	.-6      	; 0x35c <setChecker+0x4e>
     362:	40 95       	com	r20
     364:	42 23       	and	r20, r18
     366:	84 2b       	or	r24, r20
		break;
	}
	chessboard[index] = buffer ;
     368:	8c 93       	st	X, r24
     36a:	08 95       	ret

0000036c <readCell>:
	}
}

char readCell(char c,uint8_t column,uint8_t chessboard[])
{
	uint8_t index = ((c - 65) << 1) ;								/* find appropriate index from ascii code */
     36c:	81 54       	subi	r24, 0x41	; 65
     36e:	88 0f       	add	r24, r24
	uint8_t bit = column - 1 ;										/* find initial bit position from the column */
	uint8_t buffer = 0 ;
	char retC = 'E' ;
	if (column > 4)													/* if column > jump to the next position for the half byte */
     370:	65 30       	cpi	r22, 0x05	; 5
     372:	10 f4       	brcc	.+4      	; 0x378 <readCell+0xc>
}

char readCell(char c,uint8_t column,uint8_t chessboard[])
{
	uint8_t index = ((c - 65) << 1) ;								/* find appropriate index from ascii code */
	uint8_t bit = column - 1 ;										/* find initial bit position from the column */
     374:	61 50       	subi	r22, 0x01	; 1
     376:	02 c0       	rjmp	.+4      	; 0x37c <readCell+0x10>
	uint8_t buffer = 0 ;
	char retC = 'E' ;
	if (column > 4)													/* if column > jump to the next position for the half byte */
	{
		index++ ;
     378:	8f 5f       	subi	r24, 0xFF	; 255
		bit = bit - 4 ;
     37a:	65 50       	subi	r22, 0x05	; 5
	}
	buffer = chessboard[index] ;											/* read data from memory cell and store into buffer */
     37c:	fa 01       	movw	r30, r20
     37e:	e8 0f       	add	r30, r24
     380:	f1 1d       	adc	r31, r1
	if (!(buffer & (1 << (4+bit))))									/* if the enable bit of this bit position is zero then this is empty position */
     382:	80 81       	ld	r24, Z
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	24 e0       	ldi	r18, 0x04	; 4
     388:	26 0f       	add	r18, r22
     38a:	ac 01       	movw	r20, r24
     38c:	02 c0       	rjmp	.+4      	; 0x392 <readCell+0x26>
     38e:	55 95       	asr	r21
     390:	47 95       	ror	r20
     392:	2a 95       	dec	r18
     394:	e2 f7       	brpl	.-8      	; 0x38e <readCell+0x22>
     396:	40 ff       	sbrs	r20, 0
     398:	09 c0       	rjmp	.+18     	; 0x3ac <readCell+0x40>
	{
		retC = 'E' ;
	}
	else if (buffer & (1 << bit))								   /* if enable-bit is 1 and the bit-pos is 1 then this is black */
     39a:	02 c0       	rjmp	.+4      	; 0x3a0 <readCell+0x34>
     39c:	95 95       	asr	r25
     39e:	87 95       	ror	r24
     3a0:	6a 95       	dec	r22
     3a2:	e2 f7       	brpl	.-8      	; 0x39c <readCell+0x30>
     3a4:	80 fd       	sbrc	r24, 0
     3a6:	04 c0       	rjmp	.+8      	; 0x3b0 <readCell+0x44>
	{
		retC = 'B' ;
	}
	else                                                           /* if only the enable-bit is asserted then this is white */
	{
		retC = 'W' ;
     3a8:	87 e5       	ldi	r24, 0x57	; 87
     3aa:	08 95       	ret
		bit = bit - 4 ;
	}
	buffer = chessboard[index] ;											/* read data from memory cell and store into buffer */
	if (!(buffer & (1 << (4+bit))))									/* if the enable bit of this bit position is zero then this is empty position */
	{
		retC = 'E' ;
     3ac:	85 e4       	ldi	r24, 0x45	; 69
     3ae:	08 95       	ret
	}
	else if (buffer & (1 << bit))								   /* if enable-bit is 1 and the bit-pos is 1 then this is black */
	{
		retC = 'B' ;
     3b0:	82 e4       	ldi	r24, 0x42	; 66
	else                                                           /* if only the enable-bit is asserted then this is white */
	{
		retC = 'W' ;
	}
	return retC ;
}
     3b2:	08 95       	ret

000003b4 <checkEnemyMove>:

uint8_t checkEnemyMove(char c, uint8_t column)
{
	uint8_t index = c - 65 ;
	uint8_t bit = column - 1 ;
	uint8_t buffer = enemyValidtable[index] ;
     3b4:	81 54       	subi	r24, 0x41	; 65
     3b6:	e8 2f       	mov	r30, r24
     3b8:	f0 e0       	ldi	r31, 0x00	; 0
     3ba:	e2 57       	subi	r30, 0x72	; 114
     3bc:	ff 4f       	sbci	r31, 0xFF	; 255
	buffer = (buffer >> bit);
     3be:	80 81       	ld	r24, Z
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	61 50       	subi	r22, 0x01	; 1
     3c4:	02 c0       	rjmp	.+4      	; 0x3ca <checkEnemyMove+0x16>
     3c6:	95 95       	asr	r25
     3c8:	87 95       	ror	r24
     3ca:	6a 95       	dec	r22
     3cc:	e2 f7       	brpl	.-8      	; 0x3c6 <checkEnemyMove+0x12>
		return 1;
	}else
	{
		return 0;
	}
}
     3ce:	81 70       	andi	r24, 0x01	; 1
     3d0:	08 95       	ret

000003d2 <insertMineValid>:

void insertMineValid(char c,uint8_t column)					/* This stores a mine valid move into the validtable */
{
	uint8_t index = c - 65 ;
	uint8_t bit = column - 1 ;
	uint8_t buffer = mineValidtable[index] ;
     3d2:	81 54       	subi	r24, 0x41	; 65
     3d4:	e8 2f       	mov	r30, r24
     3d6:	f0 e0       	ldi	r31, 0x00	; 0
	buffer |= (1 << bit) ;
     3d8:	61 50       	subi	r22, 0x01	; 1
     3da:	81 e0       	ldi	r24, 0x01	; 1
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	01 c0       	rjmp	.+2      	; 0x3e2 <insertMineValid+0x10>
     3e0:	88 0f       	add	r24, r24
     3e2:	6a 95       	dec	r22
     3e4:	ea f7       	brpl	.-6      	; 0x3e0 <insertMineValid+0xe>

void insertMineValid(char c,uint8_t column)					/* This stores a mine valid move into the validtable */
{
	uint8_t index = c - 65 ;
	uint8_t bit = column - 1 ;
	uint8_t buffer = mineValidtable[index] ;
     3e6:	ea 54       	subi	r30, 0x4A	; 74
     3e8:	ff 4f       	sbci	r31, 0xFF	; 255
	buffer |= (1 << bit) ;
     3ea:	90 81       	ld	r25, Z
     3ec:	89 2b       	or	r24, r25
	mineValidtable[index] = buffer ;
     3ee:	80 83       	st	Z, r24
     3f0:	08 95       	ret

000003f2 <insertEnemyValid>:

void insertEnemyValid(char c,uint8_t column)					/* This stores a mine valid move into the validtable */
{
	uint8_t index = c - 65 ;
	uint8_t bit = column - 1 ;
	uint8_t buffer = enemyValidtable[index] ;
     3f2:	81 54       	subi	r24, 0x41	; 65
     3f4:	e8 2f       	mov	r30, r24
     3f6:	f0 e0       	ldi	r31, 0x00	; 0
	buffer |= (1 << bit) ;
     3f8:	61 50       	subi	r22, 0x01	; 1
     3fa:	81 e0       	ldi	r24, 0x01	; 1
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	01 c0       	rjmp	.+2      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     400:	88 0f       	add	r24, r24
     402:	6a 95       	dec	r22
     404:	ea f7       	brpl	.-6      	; 0x400 <__LOCK_REGION_LENGTH__>

void insertEnemyValid(char c,uint8_t column)					/* This stores a mine valid move into the validtable */
{
	uint8_t index = c - 65 ;
	uint8_t bit = column - 1 ;
	uint8_t buffer = enemyValidtable[index] ;
     406:	e2 57       	subi	r30, 0x72	; 114
     408:	ff 4f       	sbci	r31, 0xFF	; 255
	buffer |= (1 << bit) ;
     40a:	90 81       	ld	r25, Z
     40c:	89 2b       	or	r24, r25
	enemyValidtable[index] = buffer ;
     40e:	80 83       	st	Z, r24
     410:	08 95       	ret

00000412 <checkAvailable>:
	}
	return retC ;
}

void checkAvailable(char c,uint8_t j,char player,char mine)
{
     412:	9f 92       	push	r9
     414:	af 92       	push	r10
     416:	bf 92       	push	r11
     418:	cf 92       	push	r12
     41a:	df 92       	push	r13
     41c:	ef 92       	push	r14
     41e:	ff 92       	push	r15
     420:	0f 93       	push	r16
     422:	1f 93       	push	r17
     424:	cf 93       	push	r28
     426:	df 93       	push	r29
     428:	c8 2f       	mov	r28, r24
     42a:	d6 2f       	mov	r29, r22
     42c:	c4 2e       	mov	r12, r20
     42e:	02 2f       	mov	r16, r18
     430:	11 e0       	ldi	r17, 0x01	; 1
     432:	16 0f       	add	r17, r22
	uint8_t found = 0 ;
	uint8_t i = j ;
	uint8_t coltemp = j ;
	switch (player)
     434:	82 e4       	ldi	r24, 0x42	; 66
	{
		case 'B':
		/* check right of the enemy - checker for other my own checkers */
		i++ ;
     436:	f1 2e       	mov	r15, r17
	return retC ;
}

void checkAvailable(char c,uint8_t j,char player,char mine)
{
	uint8_t found = 0 ;
     438:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t i = j ;
	uint8_t coltemp = j ;
	switch (player)
     43a:	48 13       	cpse	r20, r24
     43c:	a9 c1       	rjmp	.+850    	; 0x790 <__stack+0x331>
	{
		case 'B':
		/* check right of the enemy - checker for other my own checkers */
		i++ ;
		while (i <= 8 && found == 0 && readCell(c,i,table) != 'E')
     43e:	88 e0       	ldi	r24, 0x08	; 8
     440:	8f 15       	cp	r24, r15
     442:	80 f0       	brcs	.+32     	; 0x464 <__stack+0x5>
     444:	91 11       	cpse	r25, r1
     446:	10 c0       	rjmp	.+32     	; 0x468 <__stack+0x9>
     448:	4e ec       	ldi	r20, 0xCE	; 206
     44a:	50 e0       	ldi	r21, 0x00	; 0
     44c:	6f 2d       	mov	r22, r15
     44e:	8c 2f       	mov	r24, r28
     450:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     454:	85 34       	cpi	r24, 0x45	; 69
     456:	01 f1       	breq	.+64     	; 0x498 <__stack+0x39>
		{
			
			if (readCell(c,i,table) == 'B')
			{
				found = 1 ;
     458:	91 e0       	ldi	r25, 0x01	; 1
     45a:	82 34       	cpi	r24, 0x42	; 66
     45c:	09 f0       	breq	.+2      	; 0x460 <__stack+0x1>
     45e:	90 e0       	ldi	r25, 0x00	; 0
			}
			i++ ;
     460:	f3 94       	inc	r15
     462:	ed cf       	rjmp	.-38     	; 0x43e <checkAvailable+0x2c>
		}
		if (found == 1 && j-1 > 0)
     464:	91 30       	cpi	r25, 0x01	; 1
     466:	c1 f4       	brne	.+48     	; 0x498 <__stack+0x39>
     468:	8d 2f       	mov	r24, r29
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	02 97       	sbiw	r24, 0x02	; 2
     46e:	a4 f0       	brlt	.+40     	; 0x498 <__stack+0x39>
		{
			if (readCell(c,j-1,table) == 'E')
     470:	ff 24       	eor	r15, r15
     472:	fa 94       	dec	r15
     474:	fd 0e       	add	r15, r29
     476:	4e ec       	ldi	r20, 0xCE	; 206
     478:	50 e0       	ldi	r21, 0x00	; 0
     47a:	6f 2d       	mov	r22, r15
     47c:	8c 2f       	mov	r24, r28
     47e:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     482:	85 34       	cpi	r24, 0x45	; 69
     484:	49 f4       	brne	.+18     	; 0x498 <__stack+0x39>
			{
				/* Available move c, j-1 */						/* The valid move is one left */
				if (mine == player)								/* If the colour is mine */
				{												/* then save this available move as mine */
					insertMineValid(c,j-1) ;
     486:	6f 2d       	mov	r22, r15
     488:	8c 2f       	mov	r24, r28
		if (found == 1 && j-1 > 0)
		{
			if (readCell(c,j-1,table) == 'E')
			{
				/* Available move c, j-1 */						/* The valid move is one left */
				if (mine == player)								/* If the colour is mine */
     48a:	02 34       	cpi	r16, 0x42	; 66
     48c:	19 f4       	brne	.+6      	; 0x494 <__stack+0x35>
				{												/* then save this available move as mine */
					insertMineValid(c,j-1) ;
     48e:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <insertMineValid>
     492:	02 c0       	rjmp	.+4      	; 0x498 <__stack+0x39>
				}
				else                                           /* else save this move as enemy available move */
				{
					insertEnemyValid(c,j-1) ;
     494:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <insertEnemyValid>
			}
		}
		
		found = 0 ;												/* check left of the enemy - checker for other my own checkers */
		i = j ;
		i-- ;
     498:	dd 24       	eor	r13, r13
     49a:	da 94       	dec	r13
     49c:	dd 0e       	add	r13, r29
     49e:	fd 2c       	mov	r15, r13
				}
				
			}
		}
		
		found = 0 ;												/* check left of the enemy - checker for other my own checkers */
     4a0:	90 e0       	ldi	r25, 0x00	; 0
		i = j ;
		i-- ;
		while (i > 1 && found == 0 && readCell(c,i,table) != 'E')
     4a2:	81 e0       	ldi	r24, 0x01	; 1
     4a4:	8f 15       	cp	r24, r15
     4a6:	80 f4       	brcc	.+32     	; 0x4c8 <__stack+0x69>
     4a8:	91 11       	cpse	r25, r1
     4aa:	10 c0       	rjmp	.+32     	; 0x4cc <__stack+0x6d>
     4ac:	4e ec       	ldi	r20, 0xCE	; 206
     4ae:	50 e0       	ldi	r21, 0x00	; 0
     4b0:	6f 2d       	mov	r22, r15
     4b2:	8c 2f       	mov	r24, r28
     4b4:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     4b8:	85 34       	cpi	r24, 0x45	; 69
     4ba:	e9 f0       	breq	.+58     	; 0x4f6 <__stack+0x97>
		{
			
			if (readCell(c,i,table) == 'B')
			{
				found = 1 ;
     4bc:	91 e0       	ldi	r25, 0x01	; 1
     4be:	82 34       	cpi	r24, 0x42	; 66
     4c0:	09 f0       	breq	.+2      	; 0x4c4 <__stack+0x65>
     4c2:	90 e0       	ldi	r25, 0x00	; 0
			}
			i-- ;
     4c4:	fa 94       	dec	r15
     4c6:	ed cf       	rjmp	.-38     	; 0x4a2 <__stack+0x43>
			
		}
		if (found == 1 && j+1 < 9)
     4c8:	91 30       	cpi	r25, 0x01	; 1
     4ca:	a9 f4       	brne	.+42     	; 0x4f6 <__stack+0x97>
     4cc:	8d 2f       	mov	r24, r29
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	08 97       	sbiw	r24, 0x08	; 8
     4d2:	8c f4       	brge	.+34     	; 0x4f6 <__stack+0x97>
		{
			if (readCell(c,j+1,table) == 'E')
     4d4:	4e ec       	ldi	r20, 0xCE	; 206
     4d6:	50 e0       	ldi	r21, 0x00	; 0
     4d8:	61 2f       	mov	r22, r17
     4da:	8c 2f       	mov	r24, r28
     4dc:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     4e0:	85 34       	cpi	r24, 0x45	; 69
     4e2:	49 f4       	brne	.+18     	; 0x4f6 <__stack+0x97>
			{
				/* Available move c, j+1 */							/* The valid move is one right */
				if (mine == player)									/* If the colour is mine */
				{                                                   /* then save this move as mine available */
					insertMineValid(c,j+1) ;
     4e4:	61 2f       	mov	r22, r17
     4e6:	8c 2f       	mov	r24, r28
		if (found == 1 && j+1 < 9)
		{
			if (readCell(c,j+1,table) == 'E')
			{
				/* Available move c, j+1 */							/* The valid move is one right */
				if (mine == player)									/* If the colour is mine */
     4e8:	02 34       	cpi	r16, 0x42	; 66
     4ea:	19 f4       	brne	.+6      	; 0x4f2 <__stack+0x93>
				{                                                   /* then save this move as mine available */
					insertMineValid(c,j+1) ;
     4ec:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <insertMineValid>
     4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <__stack+0x97>
				}
				else                                               /* else save it as opponents available move */
				{
					insertEnemyValid(c,j+1) ;
     4f2:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <insertEnemyValid>
			}
		}
		
		found = 0 ;											 /* check up of the enemy - checker for other my own checkers */
		i = c ;
		i-- ;
     4f6:	ee 24       	eor	r14, r14
     4f8:	ea 94       	dec	r14
     4fa:	ec 0e       	add	r14, r28
     4fc:	fe 2c       	mov	r15, r14
					insertEnemyValid(c,j+1) ;
				}
			}
		}
		
		found = 0 ;											 /* check up of the enemy - checker for other my own checkers */
     4fe:	90 e0       	ldi	r25, 0x00	; 0
		i = c ;
		i-- ;
		while (i > '@' && found == 0 && readCell(i,j,table) != 'E')
     500:	80 e4       	ldi	r24, 0x40	; 64
     502:	8f 15       	cp	r24, r15
     504:	80 f4       	brcc	.+32     	; 0x526 <__stack+0xc7>
     506:	91 11       	cpse	r25, r1
     508:	10 c0       	rjmp	.+32     	; 0x52a <__stack+0xcb>
     50a:	4e ec       	ldi	r20, 0xCE	; 206
     50c:	50 e0       	ldi	r21, 0x00	; 0
     50e:	6d 2f       	mov	r22, r29
     510:	8f 2d       	mov	r24, r15
     512:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     516:	85 34       	cpi	r24, 0x45	; 69
     518:	09 f1       	breq	.+66     	; 0x55c <__stack+0xfd>
		{
			
			if (readCell(i,j,table) == 'B')
			{
				found = 1 ;
     51a:	91 e0       	ldi	r25, 0x01	; 1
     51c:	82 34       	cpi	r24, 0x42	; 66
     51e:	09 f0       	breq	.+2      	; 0x522 <__stack+0xc3>
     520:	90 e0       	ldi	r25, 0x00	; 0
			}
			i-- ;
     522:	fa 94       	dec	r15
     524:	ed cf       	rjmp	.-38     	; 0x500 <__stack+0xa1>
		}
		if (found == 1 && c+1 < 'I')
     526:	91 30       	cpi	r25, 0x01	; 1
     528:	c9 f4       	brne	.+50     	; 0x55c <__stack+0xfd>
     52a:	8c 2f       	mov	r24, r28
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	88 34       	cpi	r24, 0x48	; 72
     530:	91 05       	cpc	r25, r1
     532:	a4 f4       	brge	.+40     	; 0x55c <__stack+0xfd>
		{
			if (readCell(c+1,j,table) == 'E')
     534:	ff 24       	eor	r15, r15
     536:	f3 94       	inc	r15
     538:	fc 0e       	add	r15, r28
     53a:	4e ec       	ldi	r20, 0xCE	; 206
     53c:	50 e0       	ldi	r21, 0x00	; 0
     53e:	6d 2f       	mov	r22, r29
     540:	8f 2d       	mov	r24, r15
     542:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     546:	85 34       	cpi	r24, 0x45	; 69
     548:	49 f4       	brne	.+18     	; 0x55c <__stack+0xfd>
			{
				/* Valid pos c+1, j */
				if (mine == player)
				{
					insertMineValid(c+1,j) ;
     54a:	6d 2f       	mov	r22, r29
     54c:	8f 2d       	mov	r24, r15
		if (found == 1 && c+1 < 'I')
		{
			if (readCell(c+1,j,table) == 'E')
			{
				/* Valid pos c+1, j */
				if (mine == player)
     54e:	02 34       	cpi	r16, 0x42	; 66
     550:	19 f4       	brne	.+6      	; 0x558 <__stack+0xf9>
				{
					insertMineValid(c+1,j) ;
     552:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <insertMineValid>
     556:	02 c0       	rjmp	.+4      	; 0x55c <__stack+0xfd>
				}
				else
				{
					insertEnemyValid(c+1,j) ;
     558:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <insertEnemyValid>
			}
		}
		
		found = 0 ;										   /* check down of the enemy - checker for other my own checkers */
		i = c ;
		i++ ;
     55c:	ff 24       	eor	r15, r15
     55e:	f3 94       	inc	r15
     560:	fc 0e       	add	r15, r28
     562:	cf 2c       	mov	r12, r15
					insertEnemyValid(c+1,j) ;
				}
			}
		}
		
		found = 0 ;										   /* check down of the enemy - checker for other my own checkers */
     564:	90 e0       	ldi	r25, 0x00	; 0
		i = c ;
		i++ ;
		while (i < 'I' && found == 0 && readCell(i,j,table) != 'E')
     566:	88 e4       	ldi	r24, 0x48	; 72
     568:	8c 15       	cp	r24, r12
     56a:	80 f0       	brcs	.+32     	; 0x58c <__stack+0x12d>
     56c:	91 11       	cpse	r25, r1
     56e:	10 c0       	rjmp	.+32     	; 0x590 <__stack+0x131>
     570:	4e ec       	ldi	r20, 0xCE	; 206
     572:	50 e0       	ldi	r21, 0x00	; 0
     574:	6d 2f       	mov	r22, r29
     576:	8c 2d       	mov	r24, r12
     578:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     57c:	85 34       	cpi	r24, 0x45	; 69
     57e:	d9 f0       	breq	.+54     	; 0x5b6 <__stack+0x157>
		{
			if (readCell(i,j,table) == 'B')
			{
				found = 1 ;
     580:	91 e0       	ldi	r25, 0x01	; 1
     582:	82 34       	cpi	r24, 0x42	; 66
     584:	09 f0       	breq	.+2      	; 0x588 <__stack+0x129>
     586:	90 e0       	ldi	r25, 0x00	; 0
			}
			i++ ;
     588:	c3 94       	inc	r12
     58a:	ed cf       	rjmp	.-38     	; 0x566 <__stack+0x107>
		}
		if (found == 1 && c - 1 > '@')
     58c:	91 30       	cpi	r25, 0x01	; 1
     58e:	99 f4       	brne	.+38     	; 0x5b6 <__stack+0x157>
     590:	8c 2f       	mov	r24, r28
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	82 34       	cpi	r24, 0x42	; 66
     596:	91 05       	cpc	r25, r1
     598:	74 f0       	brlt	.+28     	; 0x5b6 <__stack+0x157>
		{
			if (readCell(c-1,j,table) == 'E')
     59a:	4e ec       	ldi	r20, 0xCE	; 206
     59c:	50 e0       	ldi	r21, 0x00	; 0
     59e:	6d 2f       	mov	r22, r29
     5a0:	8e 2d       	mov	r24, r14
     5a2:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     5a6:	85 34       	cpi	r24, 0x45	; 69
     5a8:	31 f4       	brne	.+12     	; 0x5b6 <__stack+0x157>
			{
				/* Valid pos c-1,j */
				if (mine == player)
				{
					insertMineValid(c-1,j) ;
     5aa:	6d 2f       	mov	r22, r29
     5ac:	8e 2d       	mov	r24, r14
		if (found == 1 && c - 1 > '@')
		{
			if (readCell(c-1,j,table) == 'E')
			{
				/* Valid pos c-1,j */
				if (mine == player)
     5ae:	02 34       	cpi	r16, 0x42	; 66
     5b0:	31 f4       	brne	.+12     	; 0x5be <__stack+0x15f>
				{
					insertMineValid(c-1,j) ;
     5b2:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <insertMineValid>
					insertEnemyValid(c+1,j) ;
				}
			}
		}
		
		found = 0 ;										   /* check down of the enemy - checker for other my own checkers */
     5b6:	a1 2e       	mov	r10, r17
     5b8:	be 2c       	mov	r11, r14
     5ba:	c1 2c       	mov	r12, r1
     5bc:	17 c0       	rjmp	.+46     	; 0x5ec <__stack+0x18d>
				{
					insertMineValid(c-1,j) ;
				}
				else
				{
					insertEnemyValid(c-1,j) ;
     5be:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <insertEnemyValid>
     5c2:	f9 cf       	rjmp	.-14     	; 0x5b6 <__stack+0x157>
		/* check main diagon up */
		found = 0 ;
		i = c ;
		i-- ;
		coltemp++ ;
		while (i > '@' && coltemp < 9 && (readCell(i,coltemp,table) != 'E') && found == 0)
     5c4:	88 e0       	ldi	r24, 0x08	; 8
     5c6:	8a 15       	cp	r24, r10
     5c8:	a0 f0       	brcs	.+40     	; 0x5f2 <__stack+0x193>
     5ca:	4e ec       	ldi	r20, 0xCE	; 206
     5cc:	50 e0       	ldi	r21, 0x00	; 0
     5ce:	6a 2d       	mov	r22, r10
     5d0:	8b 2d       	mov	r24, r11
     5d2:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     5d6:	85 34       	cpi	r24, 0x45	; 69
     5d8:	61 f0       	breq	.+24     	; 0x5f2 <__stack+0x193>
     5da:	c1 10       	cpse	r12, r1
     5dc:	0d c0       	rjmp	.+26     	; 0x5f8 <__stack+0x199>
		{
			if (readCell(i,coltemp,table) == 'B')
			{
				found = 1 ;
     5de:	cc 24       	eor	r12, r12
     5e0:	c3 94       	inc	r12
     5e2:	82 34       	cpi	r24, 0x42	; 66
     5e4:	09 f0       	breq	.+2      	; 0x5e8 <__stack+0x189>
     5e6:	c1 2c       	mov	r12, r1
			}
			i-- ;
     5e8:	ba 94       	dec	r11
			coltemp++ ;
     5ea:	a3 94       	inc	r10
		/* check main diagon up */
		found = 0 ;
		i = c ;
		i-- ;
		coltemp++ ;
		while (i > '@' && coltemp < 9 && (readCell(i,coltemp,table) != 'E') && found == 0)
     5ec:	80 e4       	ldi	r24, 0x40	; 64
     5ee:	8b 15       	cp	r24, r11
     5f0:	48 f3       	brcs	.-46     	; 0x5c4 <__stack+0x165>
				found = 1 ;
			}
			i-- ;
			coltemp++ ;
		}
		if (found == 1 && (c+1 < 'I') && (j-1 > 0))
     5f2:	81 e0       	ldi	r24, 0x01	; 1
     5f4:	c8 12       	cpse	r12, r24
     5f6:	17 c0       	rjmp	.+46     	; 0x626 <__stack+0x1c7>
     5f8:	8c 2f       	mov	r24, r28
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	88 34       	cpi	r24, 0x48	; 72
     5fe:	91 05       	cpc	r25, r1
     600:	94 f4       	brge	.+36     	; 0x626 <__stack+0x1c7>
     602:	8d 2f       	mov	r24, r29
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	02 97       	sbiw	r24, 0x02	; 2
     608:	74 f0       	brlt	.+28     	; 0x626 <__stack+0x1c7>
		{
			if (readCell(c+1,j-1,table) == 'E')
     60a:	4e ec       	ldi	r20, 0xCE	; 206
     60c:	50 e0       	ldi	r21, 0x00	; 0
     60e:	6d 2d       	mov	r22, r13
     610:	8f 2d       	mov	r24, r15
     612:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     616:	85 34       	cpi	r24, 0x45	; 69
     618:	31 f4       	brne	.+12     	; 0x626 <__stack+0x1c7>
			{
				/* Valid pos c+1,j-1 */
				if (mine == player)
				{
					insertMineValid(c+1,j-1) ;
     61a:	6d 2d       	mov	r22, r13
     61c:	8f 2d       	mov	r24, r15
		if (found == 1 && (c+1 < 'I') && (j-1 > 0))
		{
			if (readCell(c+1,j-1,table) == 'E')
			{
				/* Valid pos c+1,j-1 */
				if (mine == player)
     61e:	02 34       	cpi	r16, 0x42	; 66
     620:	31 f4       	brne	.+12     	; 0x62e <__stack+0x1cf>
				{
					insertMineValid(c+1,j-1) ;
     622:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <insertMineValid>
					insertEnemyValid(c+1,j) ;
				}
			}
		}
		
		found = 0 ;										   /* check down of the enemy - checker for other my own checkers */
     626:	bd 2c       	mov	r11, r13
     628:	cf 2c       	mov	r12, r15
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	15 c0       	rjmp	.+42     	; 0x658 <__stack+0x1f9>
				{
					insertMineValid(c+1,j-1) ;
				}
				else
				{
					insertEnemyValid(c+1,j-1) ;
     62e:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <insertEnemyValid>
     632:	f9 cf       	rjmp	.-14     	; 0x626 <__stack+0x1c7>
		found = 0 ;
		i = c ;
		coltemp = j ;
		i++ ;
		coltemp-- ;
		while((i < 'I') && (coltemp > 0) && (found == 0) && (readCell(i,coltemp,table) != 'E'))
     634:	bb 20       	and	r11, r11
     636:	99 f0       	breq	.+38     	; 0x65e <__stack+0x1ff>
     638:	91 11       	cpse	r25, r1
     63a:	13 c0       	rjmp	.+38     	; 0x662 <__stack+0x203>
     63c:	4e ec       	ldi	r20, 0xCE	; 206
     63e:	50 e0       	ldi	r21, 0x00	; 0
     640:	6b 2d       	mov	r22, r11
     642:	8c 2d       	mov	r24, r12
     644:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     648:	85 34       	cpi	r24, 0x45	; 69
     64a:	11 f1       	breq	.+68     	; 0x690 <__stack+0x231>
		{
			if (readCell(i,coltemp,table) == 'B')
			{
				found = 1 ;
     64c:	91 e0       	ldi	r25, 0x01	; 1
     64e:	82 34       	cpi	r24, 0x42	; 66
     650:	09 f0       	breq	.+2      	; 0x654 <__stack+0x1f5>
     652:	90 e0       	ldi	r25, 0x00	; 0
			}
			i++ ;
     654:	c3 94       	inc	r12
			coltemp-- ;
     656:	ba 94       	dec	r11
		found = 0 ;
		i = c ;
		coltemp = j ;
		i++ ;
		coltemp-- ;
		while((i < 'I') && (coltemp > 0) && (found == 0) && (readCell(i,coltemp,table) != 'E'))
     658:	88 e4       	ldi	r24, 0x48	; 72
     65a:	8c 15       	cp	r24, r12
     65c:	58 f7       	brcc	.-42     	; 0x634 <__stack+0x1d5>
				found = 1 ;
			}
			i++ ;
			coltemp-- ;
		}
		if (found == 1 && (c-1 > '@') && (j+1 < 9))
     65e:	91 30       	cpi	r25, 0x01	; 1
     660:	b9 f4       	brne	.+46     	; 0x690 <__stack+0x231>
     662:	8c 2f       	mov	r24, r28
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	82 34       	cpi	r24, 0x42	; 66
     668:	91 05       	cpc	r25, r1
     66a:	94 f0       	brlt	.+36     	; 0x690 <__stack+0x231>
     66c:	8d 2f       	mov	r24, r29
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	08 97       	sbiw	r24, 0x08	; 8
     672:	74 f4       	brge	.+28     	; 0x690 <__stack+0x231>
		{
			if (readCell(c-1,j+1,table) == 'E')
     674:	4e ec       	ldi	r20, 0xCE	; 206
     676:	50 e0       	ldi	r21, 0x00	; 0
     678:	61 2f       	mov	r22, r17
     67a:	8e 2d       	mov	r24, r14
     67c:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     680:	85 34       	cpi	r24, 0x45	; 69
     682:	31 f4       	brne	.+12     	; 0x690 <__stack+0x231>
			{
				/* Valid pos c-1, j+1 */
				if (player == mine)
				{
					insertMineValid(c-1,j+1) ;
     684:	61 2f       	mov	r22, r17
     686:	8e 2d       	mov	r24, r14
		if (found == 1 && (c-1 > '@') && (j+1 < 9))
		{
			if (readCell(c-1,j+1,table) == 'E')
			{
				/* Valid pos c-1, j+1 */
				if (player == mine)
     688:	02 34       	cpi	r16, 0x42	; 66
     68a:	39 f4       	brne	.+14     	; 0x69a <__stack+0x23b>
				{
					insertMineValid(c-1,j+1) ;
     68c:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <insertMineValid>
					insertEnemyValid(c+1,j) ;
				}
			}
		}
		
		found = 0 ;										   /* check down of the enemy - checker for other my own checkers */
     690:	cd 2c       	mov	r12, r13
     692:	b1 2c       	mov	r11, r1
     694:	ac 2e       	mov	r10, r28
     696:	ad 1a       	sub	r10, r29
     698:	14 c0       	rjmp	.+40     	; 0x6c2 <__stack+0x263>
				{
					insertMineValid(c-1,j+1) ;
				}
				else
				{
					insertEnemyValid(c-1,j+1) ;
     69a:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <insertEnemyValid>
     69e:	f8 cf       	rjmp	.-16     	; 0x690 <__stack+0x231>
		found = 0 ;
		i = c ;
		coltemp = j ;
		i-- ;
		coltemp-- ;
		while((i > '@') && (coltemp > 0) && (readCell(i,coltemp,table) != 'E') && (found == 0))
     6a0:	cc 20       	and	r12, r12
     6a2:	99 f0       	breq	.+38     	; 0x6ca <__stack+0x26b>
     6a4:	4e ec       	ldi	r20, 0xCE	; 206
     6a6:	50 e0       	ldi	r21, 0x00	; 0
     6a8:	6c 2d       	mov	r22, r12
     6aa:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     6ae:	85 34       	cpi	r24, 0x45	; 69
     6b0:	61 f0       	breq	.+24     	; 0x6ca <__stack+0x26b>
     6b2:	b1 10       	cpse	r11, r1
     6b4:	0d c0       	rjmp	.+26     	; 0x6d0 <__stack+0x271>
		{
			if (readCell(i,coltemp,table) == 'B')
			{
				found = 1 ;
     6b6:	bb 24       	eor	r11, r11
     6b8:	b3 94       	inc	r11
     6ba:	82 34       	cpi	r24, 0x42	; 66
     6bc:	09 f0       	breq	.+2      	; 0x6c0 <__stack+0x261>
     6be:	b1 2c       	mov	r11, r1
			}
			i-- ;
			coltemp-- ;
     6c0:	ca 94       	dec	r12
     6c2:	8a 2d       	mov	r24, r10
     6c4:	8c 0d       	add	r24, r12
		found = 0 ;
		i = c ;
		coltemp = j ;
		i-- ;
		coltemp-- ;
		while((i > '@') && (coltemp > 0) && (readCell(i,coltemp,table) != 'E') && (found == 0))
     6c6:	81 34       	cpi	r24, 0x41	; 65
     6c8:	58 f7       	brcc	.-42     	; 0x6a0 <__stack+0x241>
				found = 1 ;
			}
			i-- ;
			coltemp-- ;
		}
		if (found == 1 && (c+1 < 'I') && (j+1 < 9))
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	b8 12       	cpse	r11, r24
     6ce:	17 c0       	rjmp	.+46     	; 0x6fe <__stack+0x29f>
     6d0:	8c 2f       	mov	r24, r28
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	88 34       	cpi	r24, 0x48	; 72
     6d6:	91 05       	cpc	r25, r1
     6d8:	94 f4       	brge	.+36     	; 0x6fe <__stack+0x29f>
     6da:	8d 2f       	mov	r24, r29
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	08 97       	sbiw	r24, 0x08	; 8
     6e0:	74 f4       	brge	.+28     	; 0x6fe <__stack+0x29f>
		{
			if (readCell(c+1,j+1,table) == 'E')
     6e2:	4e ec       	ldi	r20, 0xCE	; 206
     6e4:	50 e0       	ldi	r21, 0x00	; 0
     6e6:	61 2f       	mov	r22, r17
     6e8:	8f 2d       	mov	r24, r15
     6ea:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     6ee:	85 34       	cpi	r24, 0x45	; 69
     6f0:	31 f4       	brne	.+12     	; 0x6fe <__stack+0x29f>
			{
				/* Valid move c+1,j+1 */
				if (player == mine)
				{
					insertMineValid(c+1,j+1) ;
     6f2:	61 2f       	mov	r22, r17
     6f4:	8f 2d       	mov	r24, r15
		if (found == 1 && (c+1 < 'I') && (j+1 < 9))
		{
			if (readCell(c+1,j+1,table) == 'E')
			{
				/* Valid move c+1,j+1 */
				if (player == mine)
     6f6:	02 34       	cpi	r16, 0x42	; 66
     6f8:	31 f4       	brne	.+12     	; 0x706 <__stack+0x2a7>
				{
					insertMineValid(c+1,j+1) ;
     6fa:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <insertMineValid>
					insertEnemyValid(c+1,j) ;
				}
			}
		}
		
		found = 0 ;										   /* check down of the enemy - checker for other my own checkers */
     6fe:	10 e0       	ldi	r17, 0x00	; 0
     700:	cd 2e       	mov	r12, r29
     702:	cc 1a       	sub	r12, r28
     704:	13 c0       	rjmp	.+38     	; 0x72c <__stack+0x2cd>
				{
					insertMineValid(c+1,j+1) ;
				}
				else
				{
					insertEnemyValid(c+1,j+1) ;
     706:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <insertEnemyValid>
     70a:	f9 cf       	rjmp	.-14     	; 0x6fe <__stack+0x29f>
		found = 0 ;
		i = c ;
		coltemp = j ;
		i++ ;
		coltemp++ ;
		while ((i < 'I') && (coltemp < 9) && (readCell(i,coltemp,table) != 'E') && (found == 0))
     70c:	69 30       	cpi	r22, 0x09	; 9
     70e:	98 f4       	brcc	.+38     	; 0x736 <__stack+0x2d7>
     710:	4e ec       	ldi	r20, 0xCE	; 206
     712:	50 e0       	ldi	r21, 0x00	; 0
     714:	8f 2d       	mov	r24, r15
     716:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     71a:	85 34       	cpi	r24, 0x45	; 69
     71c:	61 f0       	breq	.+24     	; 0x736 <__stack+0x2d7>
     71e:	11 11       	cpse	r17, r1
     720:	0d c0       	rjmp	.+26     	; 0x73c <__stack+0x2dd>
		{
			if (readCell(i,coltemp,table) == 'B')
			{
				found = 1 ;
     722:	11 e0       	ldi	r17, 0x01	; 1
     724:	82 34       	cpi	r24, 0x42	; 66
     726:	09 f0       	breq	.+2      	; 0x72a <__stack+0x2cb>
     728:	10 e0       	ldi	r17, 0x00	; 0
			}
			i++ ;
     72a:	f3 94       	inc	r15
     72c:	6c 2d       	mov	r22, r12
     72e:	6f 0d       	add	r22, r15
		found = 0 ;
		i = c ;
		coltemp = j ;
		i++ ;
		coltemp++ ;
		while ((i < 'I') && (coltemp < 9) && (readCell(i,coltemp,table) != 'E') && (found == 0))
     730:	88 e4       	ldi	r24, 0x48	; 72
     732:	8f 15       	cp	r24, r15
     734:	58 f7       	brcc	.-42     	; 0x70c <__stack+0x2ad>
				found = 1 ;
			}
			i++ ;
			coltemp++ ;
		}
		if ((found == 1) && (c-1 > '@') && (j-1 > 0))
     736:	11 30       	cpi	r17, 0x01	; 1
     738:	09 f0       	breq	.+2      	; 0x73c <__stack+0x2dd>
     73a:	c8 c1       	rjmp	.+912    	; 0xacc <__stack+0x66d>
     73c:	8c 2f       	mov	r24, r28
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	82 34       	cpi	r24, 0x42	; 66
     742:	91 05       	cpc	r25, r1
     744:	0c f4       	brge	.+2      	; 0x748 <__stack+0x2e9>
     746:	c2 c1       	rjmp	.+900    	; 0xacc <__stack+0x66d>
     748:	6d 2f       	mov	r22, r29
     74a:	70 e0       	ldi	r23, 0x00	; 0
     74c:	62 30       	cpi	r22, 0x02	; 2
     74e:	71 05       	cpc	r23, r1
     750:	0c f4       	brge	.+2      	; 0x754 <__stack+0x2f5>
     752:	bc c1       	rjmp	.+888    	; 0xacc <__stack+0x66d>
		{
			if (readCell(c-1,j-1,table) == 'E')
     754:	4e ec       	ldi	r20, 0xCE	; 206
     756:	50 e0       	ldi	r21, 0x00	; 0
     758:	6d 2d       	mov	r22, r13
     75a:	8e 2d       	mov	r24, r14
     75c:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     760:	85 34       	cpi	r24, 0x45	; 69
     762:	09 f0       	breq	.+2      	; 0x766 <__stack+0x307>
     764:	b3 c1       	rjmp	.+870    	; 0xacc <__stack+0x66d>
			{
				/* Valid pos c-1,j-1 */
				if (player == mine)
				{
					insertMineValid(c-1,j-1) ;
     766:	6d 2d       	mov	r22, r13
     768:	8e 2d       	mov	r24, r14
		if ((found == 1) && (c-1 > '@') && (j-1 > 0))
		{
			if (readCell(c-1,j-1,table) == 'E')
			{
				/* Valid pos c-1,j-1 */
				if (player == mine)
     76a:	02 34       	cpi	r16, 0x42	; 66
     76c:	09 f0       	breq	.+2      	; 0x770 <__stack+0x311>
     76e:	a1 c1       	rjmp	.+834    	; 0xab2 <__stack+0x653>
     770:	93 c1       	rjmp	.+806    	; 0xa98 <__stack+0x639>
		break;
		/* check available moves for white player */
		default:
		/* check right of the enemy - checker for other my own checkers */
		i++ ;
		while (i <= 8 && found == 0 && readCell(c,i,table) != 'E')
     772:	91 11       	cpse	r25, r1
     774:	12 c0       	rjmp	.+36     	; 0x79a <__stack+0x33b>
     776:	4e ec       	ldi	r20, 0xCE	; 206
     778:	50 e0       	ldi	r21, 0x00	; 0
     77a:	6f 2d       	mov	r22, r15
     77c:	8c 2f       	mov	r24, r28
     77e:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     782:	85 34       	cpi	r24, 0x45	; 69
     784:	11 f1       	breq	.+68     	; 0x7ca <__stack+0x36b>
		{
			
			if (readCell(c,i,table) == 'W')
			{
				found = 1 ;
     786:	91 e0       	ldi	r25, 0x01	; 1
     788:	87 35       	cpi	r24, 0x57	; 87
     78a:	09 f0       	breq	.+2      	; 0x78e <__stack+0x32f>
     78c:	90 e0       	ldi	r25, 0x00	; 0
			}
			i++ ;
     78e:	f3 94       	inc	r15
		break;
		/* check available moves for white player */
		default:
		/* check right of the enemy - checker for other my own checkers */
		i++ ;
		while (i <= 8 && found == 0 && readCell(c,i,table) != 'E')
     790:	88 e0       	ldi	r24, 0x08	; 8
     792:	8f 15       	cp	r24, r15
     794:	70 f7       	brcc	.-36     	; 0x772 <__stack+0x313>
			{
				found = 1 ;
			}
			i++ ;
		}
		if (found == 1 && j-1 > 0)
     796:	91 30       	cpi	r25, 0x01	; 1
     798:	c1 f4       	brne	.+48     	; 0x7ca <__stack+0x36b>
     79a:	8d 2f       	mov	r24, r29
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	02 97       	sbiw	r24, 0x02	; 2
     7a0:	a4 f0       	brlt	.+40     	; 0x7ca <__stack+0x36b>
		{
			if (readCell(c,j-1,table) == 'E')
     7a2:	ff 24       	eor	r15, r15
     7a4:	fa 94       	dec	r15
     7a6:	fd 0e       	add	r15, r29
     7a8:	4e ec       	ldi	r20, 0xCE	; 206
     7aa:	50 e0       	ldi	r21, 0x00	; 0
     7ac:	6f 2d       	mov	r22, r15
     7ae:	8c 2f       	mov	r24, r28
     7b0:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     7b4:	85 34       	cpi	r24, 0x45	; 69
     7b6:	49 f4       	brne	.+18     	; 0x7ca <__stack+0x36b>
			{
				/* Available move c, j-1 */						/* The valid move is one left */
				if (mine == player)
				{
					insertMineValid(c,j-1) ;
     7b8:	6f 2d       	mov	r22, r15
     7ba:	8c 2f       	mov	r24, r28
		if (found == 1 && j-1 > 0)
		{
			if (readCell(c,j-1,table) == 'E')
			{
				/* Available move c, j-1 */						/* The valid move is one left */
				if (mine == player)
     7bc:	c0 12       	cpse	r12, r16
     7be:	03 c0       	rjmp	.+6      	; 0x7c6 <__stack+0x367>
				{
					insertMineValid(c,j-1) ;
     7c0:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <insertMineValid>
     7c4:	02 c0       	rjmp	.+4      	; 0x7ca <__stack+0x36b>
				}
				else
				{
					insertEnemyValid(c,j-1) ;
     7c6:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <insertEnemyValid>
			}
		}
		
		found = 0 ;												/* check left of the enemy - checker for other my own checkers */
		i = j ;
		i-- ;
     7ca:	dd 24       	eor	r13, r13
     7cc:	da 94       	dec	r13
     7ce:	dd 0e       	add	r13, r29
     7d0:	fd 2c       	mov	r15, r13
					insertEnemyValid(c,j-1) ;
				}
			}
		}
		
		found = 0 ;												/* check left of the enemy - checker for other my own checkers */
     7d2:	90 e0       	ldi	r25, 0x00	; 0
		i = j ;
		i-- ;
		while (i > 1 && found == 0 && readCell(c,i,table) != 'E')
     7d4:	81 e0       	ldi	r24, 0x01	; 1
     7d6:	8f 15       	cp	r24, r15
     7d8:	80 f4       	brcc	.+32     	; 0x7fa <__stack+0x39b>
     7da:	91 11       	cpse	r25, r1
     7dc:	10 c0       	rjmp	.+32     	; 0x7fe <__stack+0x39f>
     7de:	4e ec       	ldi	r20, 0xCE	; 206
     7e0:	50 e0       	ldi	r21, 0x00	; 0
     7e2:	6f 2d       	mov	r22, r15
     7e4:	8c 2f       	mov	r24, r28
     7e6:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     7ea:	85 34       	cpi	r24, 0x45	; 69
     7ec:	e9 f0       	breq	.+58     	; 0x828 <__stack+0x3c9>
		{
			
			if (readCell(c,i,table) == 'W')
			{
				found = 1 ;
     7ee:	91 e0       	ldi	r25, 0x01	; 1
     7f0:	87 35       	cpi	r24, 0x57	; 87
     7f2:	09 f0       	breq	.+2      	; 0x7f6 <__stack+0x397>
     7f4:	90 e0       	ldi	r25, 0x00	; 0
			}
			i-- ;
     7f6:	fa 94       	dec	r15
     7f8:	ed cf       	rjmp	.-38     	; 0x7d4 <__stack+0x375>
			
		}
		if (found == 1 && j+1 < 9)
     7fa:	91 30       	cpi	r25, 0x01	; 1
     7fc:	a9 f4       	brne	.+42     	; 0x828 <__stack+0x3c9>
     7fe:	8d 2f       	mov	r24, r29
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	08 97       	sbiw	r24, 0x08	; 8
     804:	8c f4       	brge	.+34     	; 0x828 <__stack+0x3c9>
		{
			if (readCell(c,j+1,table) == 'E')
     806:	4e ec       	ldi	r20, 0xCE	; 206
     808:	50 e0       	ldi	r21, 0x00	; 0
     80a:	61 2f       	mov	r22, r17
     80c:	8c 2f       	mov	r24, r28
     80e:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     812:	85 34       	cpi	r24, 0x45	; 69
     814:	49 f4       	brne	.+18     	; 0x828 <__stack+0x3c9>
			{
				/* Available move c, j+1 */					/* The valid move is one right */
				if (mine == player)
				{
					insertMineValid(c,j+1) ;
     816:	61 2f       	mov	r22, r17
     818:	8c 2f       	mov	r24, r28
		if (found == 1 && j+1 < 9)
		{
			if (readCell(c,j+1,table) == 'E')
			{
				/* Available move c, j+1 */					/* The valid move is one right */
				if (mine == player)
     81a:	c0 12       	cpse	r12, r16
     81c:	03 c0       	rjmp	.+6      	; 0x824 <__stack+0x3c5>
				{
					insertMineValid(c,j+1) ;
     81e:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <insertMineValid>
     822:	02 c0       	rjmp	.+4      	; 0x828 <__stack+0x3c9>
				}
				else
				{
					insertEnemyValid(c,j+1) ;
     824:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <insertEnemyValid>
			}
		}
		
		found = 0 ;											 /* check up of the enemy - checker for other my own checkers */
		i = c ;
		i-- ;
     828:	ee 24       	eor	r14, r14
     82a:	ea 94       	dec	r14
     82c:	ec 0e       	add	r14, r28
     82e:	fe 2c       	mov	r15, r14
					insertEnemyValid(c,j+1) ;
				}
			}
		}
		
		found = 0 ;											 /* check up of the enemy - checker for other my own checkers */
     830:	90 e0       	ldi	r25, 0x00	; 0
		i = c ;
		i-- ;
		while (i > '@' && found == 0 && readCell(i,j,table) != 'E')
     832:	80 e4       	ldi	r24, 0x40	; 64
     834:	8f 15       	cp	r24, r15
     836:	80 f4       	brcc	.+32     	; 0x858 <__stack+0x3f9>
     838:	91 11       	cpse	r25, r1
     83a:	10 c0       	rjmp	.+32     	; 0x85c <__stack+0x3fd>
     83c:	4e ec       	ldi	r20, 0xCE	; 206
     83e:	50 e0       	ldi	r21, 0x00	; 0
     840:	6d 2f       	mov	r22, r29
     842:	8f 2d       	mov	r24, r15
     844:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     848:	85 34       	cpi	r24, 0x45	; 69
     84a:	09 f1       	breq	.+66     	; 0x88e <__stack+0x42f>
		{
			
			if (readCell(i,j,table) == 'W')
			{
				found = 1 ;
     84c:	91 e0       	ldi	r25, 0x01	; 1
     84e:	87 35       	cpi	r24, 0x57	; 87
     850:	09 f0       	breq	.+2      	; 0x854 <__stack+0x3f5>
     852:	90 e0       	ldi	r25, 0x00	; 0
			}
			i-- ;
     854:	fa 94       	dec	r15
     856:	ed cf       	rjmp	.-38     	; 0x832 <__stack+0x3d3>
		}
		if (found == 1 && c+1 < 'I')
     858:	91 30       	cpi	r25, 0x01	; 1
     85a:	c9 f4       	brne	.+50     	; 0x88e <__stack+0x42f>
     85c:	8c 2f       	mov	r24, r28
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	88 34       	cpi	r24, 0x48	; 72
     862:	91 05       	cpc	r25, r1
     864:	a4 f4       	brge	.+40     	; 0x88e <__stack+0x42f>
		{
			if (readCell(c+1,j,table) == 'E')
     866:	ff 24       	eor	r15, r15
     868:	f3 94       	inc	r15
     86a:	fc 0e       	add	r15, r28
     86c:	4e ec       	ldi	r20, 0xCE	; 206
     86e:	50 e0       	ldi	r21, 0x00	; 0
     870:	6d 2f       	mov	r22, r29
     872:	8f 2d       	mov	r24, r15
     874:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     878:	85 34       	cpi	r24, 0x45	; 69
     87a:	49 f4       	brne	.+18     	; 0x88e <__stack+0x42f>
			{
				/* Valid pos c+1, j */
				if (mine == player)
				{
					insertMineValid(c+1,j) ;
     87c:	6d 2f       	mov	r22, r29
     87e:	8f 2d       	mov	r24, r15
		if (found == 1 && c+1 < 'I')
		{
			if (readCell(c+1,j,table) == 'E')
			{
				/* Valid pos c+1, j */
				if (mine == player)
     880:	c0 12       	cpse	r12, r16
     882:	03 c0       	rjmp	.+6      	; 0x88a <__stack+0x42b>
				{
					insertMineValid(c+1,j) ;
     884:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <insertMineValid>
     888:	02 c0       	rjmp	.+4      	; 0x88e <__stack+0x42f>
				}
				else
				{
					insertEnemyValid(c+1,j) ;
     88a:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <insertEnemyValid>
			}
		}
		
		found = 0 ;										   /* check down of the enemy - checker for other my own checkers */
		i = c ;
		i++ ;
     88e:	ff 24       	eor	r15, r15
     890:	f3 94       	inc	r15
     892:	fc 0e       	add	r15, r28
     894:	bf 2c       	mov	r11, r15
					insertEnemyValid(c+1,j) ;
				}
			}
		}
		
		found = 0 ;										   /* check down of the enemy - checker for other my own checkers */
     896:	90 e0       	ldi	r25, 0x00	; 0
		i = c ;
		i++ ;
		while (i < 'I' && found == 0 && readCell(i,j,table) != 'E')
     898:	88 e4       	ldi	r24, 0x48	; 72
     89a:	8b 15       	cp	r24, r11
     89c:	80 f0       	brcs	.+32     	; 0x8be <__stack+0x45f>
     89e:	91 11       	cpse	r25, r1
     8a0:	10 c0       	rjmp	.+32     	; 0x8c2 <__stack+0x463>
     8a2:	4e ec       	ldi	r20, 0xCE	; 206
     8a4:	50 e0       	ldi	r21, 0x00	; 0
     8a6:	6d 2f       	mov	r22, r29
     8a8:	8b 2d       	mov	r24, r11
     8aa:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     8ae:	85 34       	cpi	r24, 0x45	; 69
     8b0:	d9 f0       	breq	.+54     	; 0x8e8 <__stack+0x489>
		{
			if (readCell(i,j,table) == 'W')
			{
				found = 1 ;
     8b2:	91 e0       	ldi	r25, 0x01	; 1
     8b4:	87 35       	cpi	r24, 0x57	; 87
     8b6:	09 f0       	breq	.+2      	; 0x8ba <__stack+0x45b>
     8b8:	90 e0       	ldi	r25, 0x00	; 0
			}
			i++ ;
     8ba:	b3 94       	inc	r11
     8bc:	ed cf       	rjmp	.-38     	; 0x898 <__stack+0x439>
		}
		if (found == 1 && c - 1 > '@')
     8be:	91 30       	cpi	r25, 0x01	; 1
     8c0:	99 f4       	brne	.+38     	; 0x8e8 <__stack+0x489>
     8c2:	8c 2f       	mov	r24, r28
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	82 34       	cpi	r24, 0x42	; 66
     8c8:	91 05       	cpc	r25, r1
     8ca:	74 f0       	brlt	.+28     	; 0x8e8 <__stack+0x489>
		{
			if (readCell(c-1,j,table) == 'E')
     8cc:	4e ec       	ldi	r20, 0xCE	; 206
     8ce:	50 e0       	ldi	r21, 0x00	; 0
     8d0:	6d 2f       	mov	r22, r29
     8d2:	8e 2d       	mov	r24, r14
     8d4:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     8d8:	85 34       	cpi	r24, 0x45	; 69
     8da:	31 f4       	brne	.+12     	; 0x8e8 <__stack+0x489>
			{
				/* Valid pos c-1,j */
				if (mine == player)
				{
					insertMineValid(c-1,j) ;
     8dc:	6d 2f       	mov	r22, r29
     8de:	8e 2d       	mov	r24, r14
		if (found == 1 && c - 1 > '@')
		{
			if (readCell(c-1,j,table) == 'E')
			{
				/* Valid pos c-1,j */
				if (mine == player)
     8e0:	c0 12       	cpse	r12, r16
     8e2:	06 c0       	rjmp	.+12     	; 0x8f0 <__stack+0x491>
				{
					insertMineValid(c-1,j) ;
     8e4:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <insertMineValid>
					insertEnemyValid(c+1,j) ;
				}
			}
		}
		
		found = 0 ;										   /* check down of the enemy - checker for other my own checkers */
     8e8:	91 2e       	mov	r9, r17
     8ea:	ae 2c       	mov	r10, r14
     8ec:	b1 2c       	mov	r11, r1
     8ee:	17 c0       	rjmp	.+46     	; 0x91e <__stack+0x4bf>
				{
					insertMineValid(c-1,j) ;
				}
				else
				{
					insertEnemyValid(c-1,j) ;
     8f0:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <insertEnemyValid>
     8f4:	f9 cf       	rjmp	.-14     	; 0x8e8 <__stack+0x489>
		/* check main diagonal up */
		found = 0 ;
		i = c ;
		i-- ;
		coltemp++ ;
		while (i > '@' && coltemp < 9 && (readCell(i,coltemp,table) != 'E') && found == 0)
     8f6:	88 e0       	ldi	r24, 0x08	; 8
     8f8:	89 15       	cp	r24, r9
     8fa:	a0 f0       	brcs	.+40     	; 0x924 <__stack+0x4c5>
     8fc:	4e ec       	ldi	r20, 0xCE	; 206
     8fe:	50 e0       	ldi	r21, 0x00	; 0
     900:	69 2d       	mov	r22, r9
     902:	8a 2d       	mov	r24, r10
     904:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     908:	85 34       	cpi	r24, 0x45	; 69
     90a:	61 f0       	breq	.+24     	; 0x924 <__stack+0x4c5>
     90c:	b1 10       	cpse	r11, r1
     90e:	0d c0       	rjmp	.+26     	; 0x92a <__stack+0x4cb>
		{
			if (readCell(i,coltemp,table) == 'W')
			{
				found = 1 ;
     910:	bb 24       	eor	r11, r11
     912:	b3 94       	inc	r11
     914:	87 35       	cpi	r24, 0x57	; 87
     916:	09 f0       	breq	.+2      	; 0x91a <__stack+0x4bb>
     918:	b1 2c       	mov	r11, r1
			}
			i-- ;
     91a:	aa 94       	dec	r10
			coltemp++ ;
     91c:	93 94       	inc	r9
		/* check main diagonal up */
		found = 0 ;
		i = c ;
		i-- ;
		coltemp++ ;
		while (i > '@' && coltemp < 9 && (readCell(i,coltemp,table) != 'E') && found == 0)
     91e:	80 e4       	ldi	r24, 0x40	; 64
     920:	8a 15       	cp	r24, r10
     922:	48 f3       	brcs	.-46     	; 0x8f6 <__stack+0x497>
				found = 1 ;
			}
			i-- ;
			coltemp++ ;
		}
		if (found == 1 && (c+1 < 'I') && (j-1 > 0))
     924:	81 e0       	ldi	r24, 0x01	; 1
     926:	b8 12       	cpse	r11, r24
     928:	17 c0       	rjmp	.+46     	; 0x958 <__stack+0x4f9>
     92a:	8c 2f       	mov	r24, r28
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	88 34       	cpi	r24, 0x48	; 72
     930:	91 05       	cpc	r25, r1
     932:	94 f4       	brge	.+36     	; 0x958 <__stack+0x4f9>
     934:	8d 2f       	mov	r24, r29
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	02 97       	sbiw	r24, 0x02	; 2
     93a:	74 f0       	brlt	.+28     	; 0x958 <__stack+0x4f9>
		{
			if (readCell(c+1,j-1,table) == 'E')
     93c:	4e ec       	ldi	r20, 0xCE	; 206
     93e:	50 e0       	ldi	r21, 0x00	; 0
     940:	6d 2d       	mov	r22, r13
     942:	8f 2d       	mov	r24, r15
     944:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     948:	85 34       	cpi	r24, 0x45	; 69
     94a:	31 f4       	brne	.+12     	; 0x958 <__stack+0x4f9>
			{
				/* Valid pos c+1,j-1 */
				if (mine == player)
				{
					insertMineValid(c+1,j-1) ;
     94c:	6d 2d       	mov	r22, r13
     94e:	8f 2d       	mov	r24, r15
		if (found == 1 && (c+1 < 'I') && (j-1 > 0))
		{
			if (readCell(c+1,j-1,table) == 'E')
			{
				/* Valid pos c+1,j-1 */
				if (mine == player)
     950:	c0 12       	cpse	r12, r16
     952:	06 c0       	rjmp	.+12     	; 0x960 <__stack+0x501>
				{
					insertMineValid(c+1,j-1) ;
     954:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <insertMineValid>
					insertEnemyValid(c+1,j) ;
				}
			}
		}
		
		found = 0 ;										   /* check down of the enemy - checker for other my own checkers */
     958:	ad 2c       	mov	r10, r13
     95a:	bf 2c       	mov	r11, r15
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	15 c0       	rjmp	.+42     	; 0x98a <__stack+0x52b>
				{
					insertMineValid(c+1,j-1) ;
				}
				else
				{
					insertEnemyValid(c+1,j-1) ;
     960:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <insertEnemyValid>
     964:	f9 cf       	rjmp	.-14     	; 0x958 <__stack+0x4f9>
		found = 0 ;
		i = c ;
		coltemp = j ;
		i++ ;
		coltemp-- ;
		while((i < 'I') && (coltemp > 0) && (found == 0) && (readCell(i,coltemp,table) != 'E'))
     966:	aa 20       	and	r10, r10
     968:	99 f0       	breq	.+38     	; 0x990 <__stack+0x531>
     96a:	91 11       	cpse	r25, r1
     96c:	13 c0       	rjmp	.+38     	; 0x994 <__stack+0x535>
     96e:	4e ec       	ldi	r20, 0xCE	; 206
     970:	50 e0       	ldi	r21, 0x00	; 0
     972:	6a 2d       	mov	r22, r10
     974:	8b 2d       	mov	r24, r11
     976:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     97a:	85 34       	cpi	r24, 0x45	; 69
     97c:	11 f1       	breq	.+68     	; 0x9c2 <__stack+0x563>
		{
			if (readCell(i,coltemp,table) == 'W')
			{
				found = 1 ;
     97e:	91 e0       	ldi	r25, 0x01	; 1
     980:	87 35       	cpi	r24, 0x57	; 87
     982:	09 f0       	breq	.+2      	; 0x986 <__stack+0x527>
     984:	90 e0       	ldi	r25, 0x00	; 0
			}
			i++ ;
     986:	b3 94       	inc	r11
			coltemp-- ;
     988:	aa 94       	dec	r10
		found = 0 ;
		i = c ;
		coltemp = j ;
		i++ ;
		coltemp-- ;
		while((i < 'I') && (coltemp > 0) && (found == 0) && (readCell(i,coltemp,table) != 'E'))
     98a:	88 e4       	ldi	r24, 0x48	; 72
     98c:	8b 15       	cp	r24, r11
     98e:	58 f7       	brcc	.-42     	; 0x966 <__stack+0x507>
				found = 1 ;
			}
			i++ ;
			coltemp-- ;
		}
		if (found == 1 && (c-1 > '@') && (j+1 < 9))
     990:	91 30       	cpi	r25, 0x01	; 1
     992:	b9 f4       	brne	.+46     	; 0x9c2 <__stack+0x563>
     994:	8c 2f       	mov	r24, r28
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	82 34       	cpi	r24, 0x42	; 66
     99a:	91 05       	cpc	r25, r1
     99c:	94 f0       	brlt	.+36     	; 0x9c2 <__stack+0x563>
     99e:	8d 2f       	mov	r24, r29
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	08 97       	sbiw	r24, 0x08	; 8
     9a4:	74 f4       	brge	.+28     	; 0x9c2 <__stack+0x563>
		{
			if (readCell(c-1,j+1,table) == 'E')
     9a6:	4e ec       	ldi	r20, 0xCE	; 206
     9a8:	50 e0       	ldi	r21, 0x00	; 0
     9aa:	61 2f       	mov	r22, r17
     9ac:	8e 2d       	mov	r24, r14
     9ae:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     9b2:	85 34       	cpi	r24, 0x45	; 69
     9b4:	31 f4       	brne	.+12     	; 0x9c2 <__stack+0x563>
			{
				/* Valid pos c-1, j+1 */
				if (player == mine)
				{
					insertMineValid(c-1,j+1) ;
     9b6:	61 2f       	mov	r22, r17
     9b8:	8e 2d       	mov	r24, r14
		if (found == 1 && (c-1 > '@') && (j+1 < 9))
		{
			if (readCell(c-1,j+1,table) == 'E')
			{
				/* Valid pos c-1, j+1 */
				if (player == mine)
     9ba:	c0 12       	cpse	r12, r16
     9bc:	07 c0       	rjmp	.+14     	; 0x9cc <__stack+0x56d>
				{
					insertMineValid(c-1,j+1) ;
     9be:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <insertMineValid>
					insertEnemyValid(c+1,j) ;
				}
			}
		}
		
		found = 0 ;										   /* check down of the enemy - checker for other my own checkers */
     9c2:	bd 2c       	mov	r11, r13
     9c4:	a1 2c       	mov	r10, r1
     9c6:	9c 2e       	mov	r9, r28
     9c8:	9d 1a       	sub	r9, r29
     9ca:	14 c0       	rjmp	.+40     	; 0x9f4 <__stack+0x595>
				{
					insertMineValid(c-1,j+1) ;
				}
				else
				{
					insertEnemyValid(c-1,j+1) ;
     9cc:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <insertEnemyValid>
     9d0:	f8 cf       	rjmp	.-16     	; 0x9c2 <__stack+0x563>
		found = 0 ;
		i = c ;
		coltemp = j ;
		i-- ;
		coltemp-- ;
		while((i > '@') && (coltemp > 0) && (readCell(i,coltemp,table) != 'E') && (found == 0))
     9d2:	bb 20       	and	r11, r11
     9d4:	99 f0       	breq	.+38     	; 0x9fc <__stack+0x59d>
     9d6:	4e ec       	ldi	r20, 0xCE	; 206
     9d8:	50 e0       	ldi	r21, 0x00	; 0
     9da:	6b 2d       	mov	r22, r11
     9dc:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     9e0:	85 34       	cpi	r24, 0x45	; 69
     9e2:	61 f0       	breq	.+24     	; 0x9fc <__stack+0x59d>
     9e4:	a1 10       	cpse	r10, r1
     9e6:	0d c0       	rjmp	.+26     	; 0xa02 <__stack+0x5a3>
		{
			if (readCell(i,coltemp,table) == 'W')
			{
				found = 1 ;
     9e8:	aa 24       	eor	r10, r10
     9ea:	a3 94       	inc	r10
     9ec:	87 35       	cpi	r24, 0x57	; 87
     9ee:	09 f0       	breq	.+2      	; 0x9f2 <__stack+0x593>
     9f0:	a1 2c       	mov	r10, r1
			}
			i-- ;
			coltemp-- ;
     9f2:	ba 94       	dec	r11
     9f4:	89 2d       	mov	r24, r9
     9f6:	8b 0d       	add	r24, r11
		found = 0 ;
		i = c ;
		coltemp = j ;
		i-- ;
		coltemp-- ;
		while((i > '@') && (coltemp > 0) && (readCell(i,coltemp,table) != 'E') && (found == 0))
     9f8:	81 34       	cpi	r24, 0x41	; 65
     9fa:	58 f7       	brcc	.-42     	; 0x9d2 <__stack+0x573>
				found = 1 ;
			}
			i-- ;
			coltemp-- ;
		}
		if (found == 1 && (c+1 < 'I') && (j+1 < 9))
     9fc:	81 e0       	ldi	r24, 0x01	; 1
     9fe:	a8 12       	cpse	r10, r24
     a00:	17 c0       	rjmp	.+46     	; 0xa30 <__stack+0x5d1>
     a02:	8c 2f       	mov	r24, r28
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	88 34       	cpi	r24, 0x48	; 72
     a08:	91 05       	cpc	r25, r1
     a0a:	94 f4       	brge	.+36     	; 0xa30 <__stack+0x5d1>
     a0c:	8d 2f       	mov	r24, r29
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	08 97       	sbiw	r24, 0x08	; 8
     a12:	74 f4       	brge	.+28     	; 0xa30 <__stack+0x5d1>
		{
			if (readCell(c+1,j+1,table) == 'E')
     a14:	4e ec       	ldi	r20, 0xCE	; 206
     a16:	50 e0       	ldi	r21, 0x00	; 0
     a18:	61 2f       	mov	r22, r17
     a1a:	8f 2d       	mov	r24, r15
     a1c:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     a20:	85 34       	cpi	r24, 0x45	; 69
     a22:	31 f4       	brne	.+12     	; 0xa30 <__stack+0x5d1>
			{
				/* Valid move c+1,j+1 */
				if (player == mine)
				{
					insertMineValid(c+1,j+1) ;
     a24:	61 2f       	mov	r22, r17
     a26:	8f 2d       	mov	r24, r15
		if (found == 1 && (c+1 < 'I') && (j+1 < 9))
		{
			if (readCell(c+1,j+1,table) == 'E')
			{
				/* Valid move c+1,j+1 */
				if (player == mine)
     a28:	c0 12       	cpse	r12, r16
     a2a:	06 c0       	rjmp	.+12     	; 0xa38 <__stack+0x5d9>
				{
					insertMineValid(c+1,j+1) ;
     a2c:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <insertMineValid>
					insertEnemyValid(c+1,j) ;
				}
			}
		}
		
		found = 0 ;										   /* check down of the enemy - checker for other my own checkers */
     a30:	10 e0       	ldi	r17, 0x00	; 0
     a32:	bd 2e       	mov	r11, r29
     a34:	bc 1a       	sub	r11, r28
     a36:	13 c0       	rjmp	.+38     	; 0xa5e <__stack+0x5ff>
				{
					insertMineValid(c+1,j+1) ;
				}
				else
				{
					insertEnemyValid(c+1,j+1) ;
     a38:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <insertEnemyValid>
     a3c:	f9 cf       	rjmp	.-14     	; 0xa30 <__stack+0x5d1>
		found = 0 ;
		i = c ;
		coltemp = j ;
		i++ ;
		coltemp++ ;
		while ((i < 'I') && (coltemp < 9) && (readCell(i,coltemp,table) != 'E') && (found == 0))
     a3e:	69 30       	cpi	r22, 0x09	; 9
     a40:	98 f4       	brcc	.+38     	; 0xa68 <__stack+0x609>
     a42:	4e ec       	ldi	r20, 0xCE	; 206
     a44:	50 e0       	ldi	r21, 0x00	; 0
     a46:	8f 2d       	mov	r24, r15
     a48:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     a4c:	85 34       	cpi	r24, 0x45	; 69
     a4e:	61 f0       	breq	.+24     	; 0xa68 <__stack+0x609>
     a50:	11 11       	cpse	r17, r1
     a52:	0c c0       	rjmp	.+24     	; 0xa6c <__stack+0x60d>
		{
			if (readCell(i,coltemp,table) == 'W')
			{
				found = 1 ;
     a54:	11 e0       	ldi	r17, 0x01	; 1
     a56:	87 35       	cpi	r24, 0x57	; 87
     a58:	09 f0       	breq	.+2      	; 0xa5c <__stack+0x5fd>
     a5a:	10 e0       	ldi	r17, 0x00	; 0
			}
			i++ ;
     a5c:	f3 94       	inc	r15
     a5e:	6b 2d       	mov	r22, r11
     a60:	6f 0d       	add	r22, r15
		found = 0 ;
		i = c ;
		coltemp = j ;
		i++ ;
		coltemp++ ;
		while ((i < 'I') && (coltemp < 9) && (readCell(i,coltemp,table) != 'E') && (found == 0))
     a62:	88 e4       	ldi	r24, 0x48	; 72
     a64:	8f 15       	cp	r24, r15
     a66:	58 f7       	brcc	.-42     	; 0xa3e <__stack+0x5df>
				found = 1 ;
			}
			i++ ;
			coltemp++ ;
		}
		if ((found == 1) && (c-1 > '@') && (j-1 > 0))
     a68:	11 30       	cpi	r17, 0x01	; 1
     a6a:	81 f5       	brne	.+96     	; 0xacc <__stack+0x66d>
     a6c:	8c 2f       	mov	r24, r28
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	82 34       	cpi	r24, 0x42	; 66
     a72:	91 05       	cpc	r25, r1
     a74:	5c f1       	brlt	.+86     	; 0xacc <__stack+0x66d>
     a76:	6d 2f       	mov	r22, r29
     a78:	70 e0       	ldi	r23, 0x00	; 0
     a7a:	62 30       	cpi	r22, 0x02	; 2
     a7c:	71 05       	cpc	r23, r1
     a7e:	34 f1       	brlt	.+76     	; 0xacc <__stack+0x66d>
		{
			if (readCell(c-1,j-1,table) == 'E')
     a80:	4e ec       	ldi	r20, 0xCE	; 206
     a82:	50 e0       	ldi	r21, 0x00	; 0
     a84:	6d 2d       	mov	r22, r13
     a86:	8e 2d       	mov	r24, r14
     a88:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     a8c:	85 34       	cpi	r24, 0x45	; 69
     a8e:	f1 f4       	brne	.+60     	; 0xacc <__stack+0x66d>
			{
				/* Valid pos c-1,j-1 */
				if (player == mine)
				{
					insertMineValid(c-1,j-1) ;
     a90:	6d 2d       	mov	r22, r13
     a92:	8e 2d       	mov	r24, r14
		if ((found == 1) && (c-1 > '@') && (j-1 > 0))
		{
			if (readCell(c-1,j-1,table) == 'E')
			{
				/* Valid pos c-1,j-1 */
				if (player == mine)
     a94:	c0 12       	cpse	r12, r16
     a96:	0d c0       	rjmp	.+26     	; 0xab2 <__stack+0x653>
		}
		
		break;
	}
	
}
     a98:	df 91       	pop	r29
     a9a:	cf 91       	pop	r28
     a9c:	1f 91       	pop	r17
     a9e:	0f 91       	pop	r16
     aa0:	ff 90       	pop	r15
     aa2:	ef 90       	pop	r14
     aa4:	df 90       	pop	r13
     aa6:	cf 90       	pop	r12
     aa8:	bf 90       	pop	r11
     aaa:	af 90       	pop	r10
     aac:	9f 90       	pop	r9
			if (readCell(c-1,j-1,table) == 'E')
			{
				/* Valid pos c-1,j-1 */
				if (player == mine)
				{
					insertMineValid(c-1,j-1) ;
     aae:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <insertMineValid>
		}
		
		break;
	}
	
}
     ab2:	df 91       	pop	r29
     ab4:	cf 91       	pop	r28
     ab6:	1f 91       	pop	r17
     ab8:	0f 91       	pop	r16
     aba:	ff 90       	pop	r15
     abc:	ef 90       	pop	r14
     abe:	df 90       	pop	r13
     ac0:	cf 90       	pop	r12
     ac2:	bf 90       	pop	r11
     ac4:	af 90       	pop	r10
     ac6:	9f 90       	pop	r9
				{
					insertMineValid(c-1,j-1) ;
				}
				else
				{
					insertEnemyValid(c-1,j-1) ;
     ac8:	0c 94 f9 01 	jmp	0x3f2	; 0x3f2 <insertEnemyValid>
		}
		
		break;
	}
	
}
     acc:	df 91       	pop	r29
     ace:	cf 91       	pop	r28
     ad0:	1f 91       	pop	r17
     ad2:	0f 91       	pop	r16
     ad4:	ff 90       	pop	r15
     ad6:	ef 90       	pop	r14
     ad8:	df 90       	pop	r13
     ada:	cf 90       	pop	r12
     adc:	bf 90       	pop	r11
     ade:	af 90       	pop	r10
     ae0:	9f 90       	pop	r9
     ae2:	08 95       	ret

00000ae4 <scanChessboard>:
	}
	chessboard[index] = buffer ;
}

void scanChessboard(char mine)								/* This function scans the whole chessboard for white checkers */
{
     ae4:	cf 92       	push	r12
     ae6:	df 92       	push	r13
     ae8:	ff 92       	push	r15
     aea:	0f 93       	push	r16
     aec:	1f 93       	push	r17
     aee:	cf 93       	push	r28
     af0:	df 93       	push	r29
     af2:	18 2f       	mov	r17, r24
     af4:	5e ec       	ldi	r21, 0xCE	; 206
     af6:	c5 2e       	mov	r12, r21
     af8:	50 e0       	ldi	r21, 0x00	; 0
     afa:	d5 2e       	mov	r13, r21
	char c = 0 ;											/* For every one white checker checks for my available moves */
	uint8_t j = 0 ;											/* and stores them in a parallel memory board the validtable */
	uint8_t buffer = 0 ;
	uint8_t temp = 0 ;
	for (uint8_t index = 0; index < SIZE ; index++)
     afc:	d0 e0       	ldi	r29, 0x00	; 0
	{
		c = 65 + (index >> 1) ;								/* Convert the index into specific ascii that we want to scan */
     afe:	cd 2f       	mov	r28, r29
     b00:	c6 95       	lsr	r28
     b02:	cf 5b       	subi	r28, 0xBF	; 191
		buffer = table[index] ;								/* Read the data-byte and store it into a buffer */
     b04:	f6 01       	movw	r30, r12
     b06:	01 91       	ld	r16, Z+
     b08:	6f 01       	movw	r12, r30
		temp = buffer & 0b00010000 ;						/* Find the column which depends on the enabled-bits */
		if (temp == 0b00010000)
     b0a:	04 ff       	sbrs	r16, 4
     b0c:	22 c0       	rjmp	.+68     	; 0xb52 <scanChessboard+0x6e>
		{
			j = 1 ;
			if (index % 2 == 1)								/* In the odd number indexes there are the second half-bytes */
     b0e:	d0 ff       	sbrs	r29, 0
     b10:	03 c0       	rjmp	.+6      	; 0xb18 <scanChessboard+0x34>
			{                                               /* Opposite, in the even number indexes there are the first half-bytes */
				j = j + 4 ;
     b12:	45 e0       	ldi	r20, 0x05	; 5
     b14:	f4 2e       	mov	r15, r20
     b16:	02 c0       	rjmp	.+4      	; 0xb1c <scanChessboard+0x38>
		c = 65 + (index >> 1) ;								/* Convert the index into specific ascii that we want to scan */
		buffer = table[index] ;								/* Read the data-byte and store it into a buffer */
		temp = buffer & 0b00010000 ;						/* Find the column which depends on the enabled-bits */
		if (temp == 0b00010000)
		{
			j = 1 ;
     b18:	ff 24       	eor	r15, r15
     b1a:	f3 94       	inc	r15
			if (index % 2 == 1)								/* In the odd number indexes there are the second half-bytes */
			{                                               /* Opposite, in the even number indexes there are the first half-bytes */
				j = j + 4 ;
			}
			/* scan for black player available moves */
			if (readCell(c,j,table) == 'W')
     b1c:	4e ec       	ldi	r20, 0xCE	; 206
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	6f 2d       	mov	r22, r15
     b22:	8c 2f       	mov	r24, r28
     b24:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     b28:	87 35       	cpi	r24, 0x57	; 87
     b2a:	41 f4       	brne	.+16     	; 0xb3c <scanChessboard+0x58>
			{
				whiteCount++ ;
     b2c:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <whiteCount>
     b30:	8f 5f       	subi	r24, 0xFF	; 255
     b32:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <whiteCount>
				checkAvailable(c,j,'B',mine) ;
     b36:	21 2f       	mov	r18, r17
     b38:	42 e4       	ldi	r20, 0x42	; 66
     b3a:	07 c0       	rjmp	.+14     	; 0xb4a <scanChessboard+0x66>
			}
			/* scan for white player available moves */
			else
			{
				blackCount++ ;
     b3c:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <blackCount>
     b40:	8f 5f       	subi	r24, 0xFF	; 255
     b42:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <blackCount>
				checkAvailable(c,j,'W',mine) ;
     b46:	21 2f       	mov	r18, r17
     b48:	47 e5       	ldi	r20, 0x57	; 87
     b4a:	6f 2d       	mov	r22, r15
     b4c:	8c 2f       	mov	r24, r28
     b4e:	0e 94 09 02 	call	0x412	; 0x412 <checkAvailable>
			}
			
		}
		temp = buffer & 0b00100000 ;
		if (temp == 0b00100000)
     b52:	05 ff       	sbrs	r16, 5
     b54:	22 c0       	rjmp	.+68     	; 0xb9a <scanChessboard+0xb6>
		{
			j = 2 ;
			if (index % 2 == 1)
     b56:	d0 ff       	sbrs	r29, 0
     b58:	03 c0       	rjmp	.+6      	; 0xb60 <scanChessboard+0x7c>
			{
				j = j + 4 ;
     b5a:	36 e0       	ldi	r19, 0x06	; 6
     b5c:	f3 2e       	mov	r15, r19
     b5e:	02 c0       	rjmp	.+4      	; 0xb64 <scanChessboard+0x80>
			
		}
		temp = buffer & 0b00100000 ;
		if (temp == 0b00100000)
		{
			j = 2 ;
     b60:	22 e0       	ldi	r18, 0x02	; 2
     b62:	f2 2e       	mov	r15, r18
			if (index % 2 == 1)
			{
				j = j + 4 ;
			}
			/* scan for black player available moves */
			if (readCell(c,j,table) == 'W')
     b64:	4e ec       	ldi	r20, 0xCE	; 206
     b66:	50 e0       	ldi	r21, 0x00	; 0
     b68:	6f 2d       	mov	r22, r15
     b6a:	8c 2f       	mov	r24, r28
     b6c:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     b70:	87 35       	cpi	r24, 0x57	; 87
     b72:	41 f4       	brne	.+16     	; 0xb84 <scanChessboard+0xa0>
			{
				whiteCount++ ;
     b74:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <whiteCount>
     b78:	8f 5f       	subi	r24, 0xFF	; 255
     b7a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <whiteCount>
				checkAvailable(c,j,'B',mine) ;
     b7e:	21 2f       	mov	r18, r17
     b80:	42 e4       	ldi	r20, 0x42	; 66
     b82:	07 c0       	rjmp	.+14     	; 0xb92 <scanChessboard+0xae>
			}
			/* scan for white player available moves */
			else
			{
				blackCount++ ;
     b84:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <blackCount>
     b88:	8f 5f       	subi	r24, 0xFF	; 255
     b8a:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <blackCount>
				checkAvailable(c,j,'W',mine) ;
     b8e:	21 2f       	mov	r18, r17
     b90:	47 e5       	ldi	r20, 0x57	; 87
     b92:	6f 2d       	mov	r22, r15
     b94:	8c 2f       	mov	r24, r28
     b96:	0e 94 09 02 	call	0x412	; 0x412 <checkAvailable>
			}
		}
		temp = buffer & 0b01000000 ;
		if (temp == 0b01000000)
     b9a:	06 ff       	sbrs	r16, 6
     b9c:	22 c0       	rjmp	.+68     	; 0xbe2 <scanChessboard+0xfe>
		{
			j = 3 ;
			if (index % 2 == 1)
     b9e:	d0 ff       	sbrs	r29, 0
     ba0:	03 c0       	rjmp	.+6      	; 0xba8 <scanChessboard+0xc4>
			{
				j = j + 4 ;
     ba2:	97 e0       	ldi	r25, 0x07	; 7
     ba4:	f9 2e       	mov	r15, r25
     ba6:	02 c0       	rjmp	.+4      	; 0xbac <scanChessboard+0xc8>
			}
		}
		temp = buffer & 0b01000000 ;
		if (temp == 0b01000000)
		{
			j = 3 ;
     ba8:	83 e0       	ldi	r24, 0x03	; 3
     baa:	f8 2e       	mov	r15, r24
			if (index % 2 == 1)
			{
				j = j + 4 ;
			}
			/* scan for black player available moves */
			if (readCell(c,j,table) == 'W')
     bac:	4e ec       	ldi	r20, 0xCE	; 206
     bae:	50 e0       	ldi	r21, 0x00	; 0
     bb0:	6f 2d       	mov	r22, r15
     bb2:	8c 2f       	mov	r24, r28
     bb4:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     bb8:	87 35       	cpi	r24, 0x57	; 87
     bba:	41 f4       	brne	.+16     	; 0xbcc <scanChessboard+0xe8>
			{
				whiteCount++ ;
     bbc:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <whiteCount>
     bc0:	8f 5f       	subi	r24, 0xFF	; 255
     bc2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <whiteCount>
				checkAvailable(c,j,'B',mine) ;
     bc6:	21 2f       	mov	r18, r17
     bc8:	42 e4       	ldi	r20, 0x42	; 66
     bca:	07 c0       	rjmp	.+14     	; 0xbda <scanChessboard+0xf6>
			}
			/* scan for white player available moves */
			else
			{
				blackCount++ ;
     bcc:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <blackCount>
     bd0:	8f 5f       	subi	r24, 0xFF	; 255
     bd2:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <blackCount>
				checkAvailable(c,j,'W',mine) ;
     bd6:	21 2f       	mov	r18, r17
     bd8:	47 e5       	ldi	r20, 0x57	; 87
     bda:	6f 2d       	mov	r22, r15
     bdc:	8c 2f       	mov	r24, r28
     bde:	0e 94 09 02 	call	0x412	; 0x412 <checkAvailable>
			}
		}
		temp = buffer & 0b10000000 ;
		if (temp == 0b10000000)
     be2:	07 ff       	sbrs	r16, 7
     be4:	20 c0       	rjmp	.+64     	; 0xc26 <scanChessboard+0x142>
		{
			j = 4 ;
			if (index % 2 == 1)
     be6:	d0 ff       	sbrs	r29, 0
     be8:	02 c0       	rjmp	.+4      	; 0xbee <scanChessboard+0x10a>
			{
				j = j + 4 ;
     bea:	08 e0       	ldi	r16, 0x08	; 8
     bec:	01 c0       	rjmp	.+2      	; 0xbf0 <scanChessboard+0x10c>
			}
		}
		temp = buffer & 0b10000000 ;
		if (temp == 0b10000000)
		{
			j = 4 ;
     bee:	04 e0       	ldi	r16, 0x04	; 4
			if (index % 2 == 1)
			{
				j = j + 4 ;
			}
			/* scan for black player available moves */
			if (readCell(c,j,table) == 'W')
     bf0:	4e ec       	ldi	r20, 0xCE	; 206
     bf2:	50 e0       	ldi	r21, 0x00	; 0
     bf4:	60 2f       	mov	r22, r16
     bf6:	8c 2f       	mov	r24, r28
     bf8:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     bfc:	87 35       	cpi	r24, 0x57	; 87
     bfe:	41 f4       	brne	.+16     	; 0xc10 <scanChessboard+0x12c>
			{
				whiteCount++ ;
     c00:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <whiteCount>
     c04:	8f 5f       	subi	r24, 0xFF	; 255
     c06:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <whiteCount>
				checkAvailable(c,j,'B',mine) ;
     c0a:	21 2f       	mov	r18, r17
     c0c:	42 e4       	ldi	r20, 0x42	; 66
     c0e:	07 c0       	rjmp	.+14     	; 0xc1e <scanChessboard+0x13a>
			}
			/* scan for white player available moves */
			else
			{
				blackCount++ ;
     c10:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <blackCount>
     c14:	8f 5f       	subi	r24, 0xFF	; 255
     c16:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <blackCount>
				checkAvailable(c,j,'W',mine) ;
     c1a:	21 2f       	mov	r18, r17
     c1c:	47 e5       	ldi	r20, 0x57	; 87
     c1e:	60 2f       	mov	r22, r16
     c20:	8c 2f       	mov	r24, r28
     c22:	0e 94 09 02 	call	0x412	; 0x412 <checkAvailable>
{
	char c = 0 ;											/* For every one white checker checks for my available moves */
	uint8_t j = 0 ;											/* and stores them in a parallel memory board the validtable */
	uint8_t buffer = 0 ;
	uint8_t temp = 0 ;
	for (uint8_t index = 0; index < SIZE ; index++)
     c26:	df 5f       	subi	r29, 0xFF	; 255
     c28:	d0 31       	cpi	r29, 0x10	; 16
     c2a:	09 f0       	breq	.+2      	; 0xc2e <scanChessboard+0x14a>
     c2c:	68 cf       	rjmp	.-304    	; 0xafe <scanChessboard+0x1a>
				checkAvailable(c,j,'W',mine) ;
			}
		}
		
	}
}
     c2e:	df 91       	pop	r29
     c30:	cf 91       	pop	r28
     c32:	1f 91       	pop	r17
     c34:	0f 91       	pop	r16
     c36:	ff 90       	pop	r15
     c38:	df 90       	pop	r13
     c3a:	cf 90       	pop	r12
     c3c:	08 95       	ret

00000c3e <TurnOtherCheckers>:
	enemyValidtable[index] = buffer ;
}


void TurnOtherCheckers(char c,uint8_t column,char enemy,char player,uint8_t chessboard[])
{
     c3e:	5f 92       	push	r5
     c40:	6f 92       	push	r6
     c42:	7f 92       	push	r7
     c44:	8f 92       	push	r8
     c46:	9f 92       	push	r9
     c48:	af 92       	push	r10
     c4a:	bf 92       	push	r11
     c4c:	cf 92       	push	r12
     c4e:	df 92       	push	r13
     c50:	ef 92       	push	r14
     c52:	ff 92       	push	r15
     c54:	0f 93       	push	r16
     c56:	1f 93       	push	r17
     c58:	cf 93       	push	r28
     c5a:	df 93       	push	r29
     c5c:	c8 2e       	mov	r12, r24
     c5e:	f6 2e       	mov	r15, r22
     c60:	94 2e       	mov	r9, r20
     c62:	c2 2f       	mov	r28, r18
	char row = c;
	uint8_t col = column;
	uint8_t found = 0;
	/*Check for players checkers from right*/
	col++;
     c64:	aa 24       	eor	r10, r10
     c66:	a3 94       	inc	r10
     c68:	a6 0e       	add	r10, r22
     c6a:	da 2d       	mov	r29, r10

void TurnOtherCheckers(char c,uint8_t column,char enemy,char player,uint8_t chessboard[])
{
	char row = c;
	uint8_t col = column;
	uint8_t found = 0;
     c6c:	e1 2c       	mov	r14, r1
	/*Check for players checkers from right*/
	col++;
	while (col < 9 && readCell(row,col,chessboard) == enemy && found == 0)
     c6e:	d9 30       	cpi	r29, 0x09	; 9
     c70:	28 f0       	brcs	.+10     	; 0xc7c <TurnOtherCheckers+0x3e>
		}
	}
	/*Check for players checkers from left*/
	found = 0 ;
	col = column;
	col--;
     c72:	df ef       	ldi	r29, 0xFF	; 255
     c74:	df 0d       	add	r29, r15
     c76:	ed 2e       	mov	r14, r29
		{
			setChecker(c,i,player,chessboard);
		}
	}
	/*Check for players checkers from left*/
	found = 0 ;
     c78:	d1 2c       	mov	r13, r1
	col = column;
	col--;
	while (col > 0 && readCell(row,col,chessboard) == enemy && found == 0)
     c7a:	37 c0       	rjmp	.+110    	; 0xcea <TurnOtherCheckers+0xac>
	char row = c;
	uint8_t col = column;
	uint8_t found = 0;
	/*Check for players checkers from right*/
	col++;
	while (col < 9 && readCell(row,col,chessboard) == enemy && found == 0)
     c7c:	a8 01       	movw	r20, r16
     c7e:	6d 2f       	mov	r22, r29
     c80:	8c 2d       	mov	r24, r12
     c82:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     c86:	89 11       	cpse	r24, r9
     c88:	12 c0       	rjmp	.+36     	; 0xcae <TurnOtherCheckers+0x70>
     c8a:	e1 10       	cpse	r14, r1
     c8c:	13 c0       	rjmp	.+38     	; 0xcb4 <TurnOtherCheckers+0x76>
     c8e:	dd 24       	eor	r13, r13
     c90:	d3 94       	inc	r13
     c92:	dd 0e       	add	r13, r29
	{
		if (col+1 < 9)
     c94:	d8 30       	cpi	r29, 0x08	; 8
     c96:	49 f0       	breq	.+18     	; 0xcaa <TurnOtherCheckers+0x6c>
		{
			if(readCell(row,(col+1),chessboard) == player)
     c98:	a8 01       	movw	r20, r16
     c9a:	6d 2d       	mov	r22, r13
     c9c:	8c 2d       	mov	r24, r12
     c9e:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     ca2:	ee 24       	eor	r14, r14
     ca4:	e3 94       	inc	r14
     ca6:	8c 13       	cpse	r24, r28
     ca8:	e1 2c       	mov	r14, r1
			{
				found = 1;
			}
		}
		col++;
     caa:	dd 2d       	mov	r29, r13
     cac:	e0 cf       	rjmp	.-64     	; 0xc6e <TurnOtherCheckers+0x30>
	}
	if(found == 1 && (col < 9))
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	e8 12       	cpse	r14, r24
     cb2:	df cf       	rjmp	.-66     	; 0xc72 <TurnOtherCheckers+0x34>
{
	char row = c;
	uint8_t col = column;
	uint8_t found = 0;
	/*Check for players checkers from right*/
	col++;
     cb4:	ea 2c       	mov	r14, r10
		}
		col++;
	}
	if(found == 1 && (col < 9))
	{
		for(uint8_t i = (column + 1); i < col; i++)
     cb6:	ed 16       	cp	r14, r29
     cb8:	e0 f6       	brcc	.-72     	; 0xc72 <TurnOtherCheckers+0x34>
		{
			setChecker(c,i,player,chessboard);
     cba:	98 01       	movw	r18, r16
     cbc:	4c 2f       	mov	r20, r28
     cbe:	6e 2d       	mov	r22, r14
     cc0:	8c 2d       	mov	r24, r12
     cc2:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
		}
		col++;
	}
	if(found == 1 && (col < 9))
	{
		for(uint8_t i = (column + 1); i < col; i++)
     cc6:	e3 94       	inc	r14
     cc8:	f6 cf       	rjmp	.-20     	; 0xcb6 <TurnOtherCheckers+0x78>
	}
	/*Check for players checkers from left*/
	found = 0 ;
	col = column;
	col--;
	while (col > 0 && readCell(row,col,chessboard) == enemy && found == 0)
     cca:	a8 01       	movw	r20, r16
     ccc:	6e 2d       	mov	r22, r14
     cce:	8c 2d       	mov	r24, r12
     cd0:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     cd4:	98 12       	cpse	r9, r24
     cd6:	17 c0       	rjmp	.+46     	; 0xd06 <TurnOtherCheckers+0xc8>
     cd8:	d1 10       	cpse	r13, r1
     cda:	1e c0       	rjmp	.+60     	; 0xd18 <TurnOtherCheckers+0xda>
     cdc:	bb 24       	eor	r11, r11
     cde:	ba 94       	dec	r11
     ce0:	be 0c       	add	r11, r14
	{
		if (col-1 > 0)
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	e8 12       	cpse	r14, r24
     ce6:	04 c0       	rjmp	.+8      	; 0xcf0 <TurnOtherCheckers+0xb2>
			if(readCell(row,(col-1),chessboard) == player)
			{
				found = 1;
			}
		}
		col--;
     ce8:	eb 2c       	mov	r14, r11
	}
	/*Check for players checkers from left*/
	found = 0 ;
	col = column;
	col--;
	while (col > 0 && readCell(row,col,chessboard) == enemy && found == 0)
     cea:	e1 10       	cpse	r14, r1
     cec:	ee cf       	rjmp	.-36     	; 0xcca <TurnOtherCheckers+0x8c>
     cee:	0b c0       	rjmp	.+22     	; 0xd06 <TurnOtherCheckers+0xc8>
	{
		if (col-1 > 0)
		{
			if(readCell(row,(col-1),chessboard) == player)
     cf0:	a8 01       	movw	r20, r16
     cf2:	6b 2d       	mov	r22, r11
     cf4:	8c 2d       	mov	r24, r12
     cf6:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     cfa:	dd 24       	eor	r13, r13
     cfc:	d3 94       	inc	r13
     cfe:	c8 17       	cp	r28, r24
     d00:	99 f3       	breq	.-26     	; 0xce8 <TurnOtherCheckers+0xaa>
     d02:	d1 2c       	mov	r13, r1
     d04:	f1 cf       	rjmp	.-30     	; 0xce8 <TurnOtherCheckers+0xaa>
				found = 1;
			}
		}
		col--;
	}
	if(found == 1 && (column - 1 > 0))
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	d8 16       	cp	r13, r24
     d0a:	31 f0       	breq	.+12     	; 0xd18 <TurnOtherCheckers+0xda>
		}
	}
	/*Check for players checkers from up*/
	found = 0 ;
	col = column;
	row-- ;
     d0c:	dd 24       	eor	r13, r13
     d0e:	da 94       	dec	r13
     d10:	dc 0c       	add	r13, r12
     d12:	ed 2c       	mov	r14, r13
		{
			setChecker(c,i,player,chessboard);
		}
	}
	/*Check for players checkers from up*/
	found = 0 ;
     d14:	b1 2c       	mov	r11, r1
	col = column;
	row-- ;
	while (row > '@' && readCell(row,col,chessboard) == enemy && found == 0)
     d16:	1f c0       	rjmp	.+62     	; 0xd56 <TurnOtherCheckers+0x118>
				found = 1;
			}
		}
		col--;
	}
	if(found == 1 && (column - 1 > 0))
     d18:	8f 2d       	mov	r24, r15
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	02 97       	sbiw	r24, 0x02	; 2
     d1e:	b4 f3       	brlt	.-20     	; 0xd0c <TurnOtherCheckers+0xce>
		}
	}
	/*Check for players checkers from left*/
	found = 0 ;
	col = column;
	col--;
     d20:	dd 2e       	mov	r13, r29
		}
		col--;
	}
	if(found == 1 && (column - 1 > 0))
	{
		for(uint8_t i = (column -1); i > col; i--)
     d22:	ed 14       	cp	r14, r13
     d24:	98 f7       	brcc	.-26     	; 0xd0c <TurnOtherCheckers+0xce>
		{
			setChecker(c,i,player,chessboard);
     d26:	98 01       	movw	r18, r16
     d28:	4c 2f       	mov	r20, r28
     d2a:	6d 2d       	mov	r22, r13
     d2c:	8c 2d       	mov	r24, r12
     d2e:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
		}
		col--;
	}
	if(found == 1 && (column - 1 > 0))
	{
		for(uint8_t i = (column -1); i > col; i--)
     d32:	da 94       	dec	r13
     d34:	f6 cf       	rjmp	.-20     	; 0xd22 <TurnOtherCheckers+0xe4>
	}
	/*Check for players checkers from up*/
	found = 0 ;
	col = column;
	row-- ;
	while (row > '@' && readCell(row,col,chessboard) == enemy && found == 0)
     d36:	a8 01       	movw	r20, r16
     d38:	6f 2d       	mov	r22, r15
     d3a:	8e 2d       	mov	r24, r14
     d3c:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     d40:	98 12       	cpse	r9, r24
     d42:	1d c0       	rjmp	.+58     	; 0xd7e <TurnOtherCheckers+0x140>
     d44:	b1 10       	cpse	r11, r1
     d46:	1e c0       	rjmp	.+60     	; 0xd84 <TurnOtherCheckers+0x146>
     d48:	88 24       	eor	r8, r8
     d4a:	8a 94       	dec	r8
     d4c:	8e 0c       	add	r8, r14
	{
		if (row - 1 > '@')
     d4e:	81 e4       	ldi	r24, 0x41	; 65
     d50:	e8 12       	cpse	r14, r24
     d52:	0a c0       	rjmp	.+20     	; 0xd68 <TurnOtherCheckers+0x12a>
			if(readCell((row-1),col,chessboard) == player)
			{
				found = 1;
			}
		}
		row--;
     d54:	e8 2c       	mov	r14, r8
	}
	/*Check for players checkers from up*/
	found = 0 ;
	col = column;
	row-- ;
	while (row > '@' && readCell(row,col,chessboard) == enemy && found == 0)
     d56:	80 e4       	ldi	r24, 0x40	; 64
     d58:	8e 15       	cp	r24, r14
     d5a:	68 f3       	brcs	.-38     	; 0xd36 <TurnOtherCheckers+0xf8>
	}
	/*Check for players checkers from down*/
	found = 0 ;
	row = c;
	col = column;
	row++ ;
     d5c:	ee 24       	eor	r14, r14
     d5e:	e3 94       	inc	r14
     d60:	ec 0c       	add	r14, r12
     d62:	be 2c       	mov	r11, r14
		{
			setChecker(i,col,player,chessboard);
		}
	}
	/*Check for players checkers from down*/
	found = 0 ;
     d64:	81 2c       	mov	r8, r1
	row = c;
	col = column;
	row++ ;
	while (row < 'I' && readCell(row,col,chessboard) == enemy && found == 0)
     d66:	29 c0       	rjmp	.+82     	; 0xdba <TurnOtherCheckers+0x17c>
	row-- ;
	while (row > '@' && readCell(row,col,chessboard) == enemy && found == 0)
	{
		if (row - 1 > '@')
		{
			if(readCell((row-1),col,chessboard) == player)
     d68:	a8 01       	movw	r20, r16
     d6a:	6f 2d       	mov	r22, r15
     d6c:	88 2d       	mov	r24, r8
     d6e:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     d72:	bb 24       	eor	r11, r11
     d74:	b3 94       	inc	r11
     d76:	c8 17       	cp	r28, r24
     d78:	69 f3       	breq	.-38     	; 0xd54 <TurnOtherCheckers+0x116>
     d7a:	b1 2c       	mov	r11, r1
     d7c:	eb cf       	rjmp	.-42     	; 0xd54 <TurnOtherCheckers+0x116>
				found = 1;
			}
		}
		row--;
	}
	if(found == 1 && (row > '@'))
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	b8 12       	cpse	r11, r24
     d82:	ec cf       	rjmp	.-40     	; 0xd5c <TurnOtherCheckers+0x11e>
     d84:	bd 2c       	mov	r11, r13
	{
		for(uint8_t i = (c -1); i > row; i--)
     d86:	eb 14       	cp	r14, r11
     d88:	48 f7       	brcc	.-46     	; 0xd5c <TurnOtherCheckers+0x11e>
		{
			setChecker(i,col,player,chessboard);
     d8a:	98 01       	movw	r18, r16
     d8c:	4c 2f       	mov	r20, r28
     d8e:	6f 2d       	mov	r22, r15
     d90:	8b 2d       	mov	r24, r11
     d92:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
		}
		row--;
	}
	if(found == 1 && (row > '@'))
	{
		for(uint8_t i = (c -1); i > row; i--)
     d96:	ba 94       	dec	r11
     d98:	f6 cf       	rjmp	.-20     	; 0xd86 <TurnOtherCheckers+0x148>
	/*Check for players checkers from down*/
	found = 0 ;
	row = c;
	col = column;
	row++ ;
	while (row < 'I' && readCell(row,col,chessboard) == enemy && found == 0)
     d9a:	a8 01       	movw	r20, r16
     d9c:	6f 2d       	mov	r22, r15
     d9e:	8b 2d       	mov	r24, r11
     da0:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     da4:	98 12       	cpse	r9, r24
     da6:	18 c0       	rjmp	.+48     	; 0xdd8 <TurnOtherCheckers+0x19a>
     da8:	81 10       	cpse	r8, r1
     daa:	19 c0       	rjmp	.+50     	; 0xdde <TurnOtherCheckers+0x1a0>
     dac:	77 24       	eor	r7, r7
     dae:	73 94       	inc	r7
     db0:	7b 0c       	add	r7, r11
	{
		if (row + 1 < 'I')
     db2:	88 e4       	ldi	r24, 0x48	; 72
     db4:	b8 12       	cpse	r11, r24
     db6:	05 c0       	rjmp	.+10     	; 0xdc2 <TurnOtherCheckers+0x184>
			if(readCell((row+1),col,chessboard) == player)
			{
				found = 1;
			}
		}
		row++;
     db8:	b7 2c       	mov	r11, r7
	/*Check for players checkers from down*/
	found = 0 ;
	row = c;
	col = column;
	row++ ;
	while (row < 'I' && readCell(row,col,chessboard) == enemy && found == 0)
     dba:	88 e4       	ldi	r24, 0x48	; 72
     dbc:	8b 15       	cp	r24, r11
     dbe:	68 f7       	brcc	.-38     	; 0xd9a <TurnOtherCheckers+0x15c>
     dc0:	10 c0       	rjmp	.+32     	; 0xde2 <TurnOtherCheckers+0x1a4>
	{
		if (row + 1 < 'I')
		{
			if(readCell((row+1),col,chessboard) == player)
     dc2:	a8 01       	movw	r20, r16
     dc4:	6f 2d       	mov	r22, r15
     dc6:	87 2d       	mov	r24, r7
     dc8:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     dcc:	88 24       	eor	r8, r8
     dce:	83 94       	inc	r8
     dd0:	c8 17       	cp	r28, r24
     dd2:	91 f3       	breq	.-28     	; 0xdb8 <TurnOtherCheckers+0x17a>
     dd4:	81 2c       	mov	r8, r1
     dd6:	f0 cf       	rjmp	.-32     	; 0xdb8 <TurnOtherCheckers+0x17a>
				found = 1;
			}
		}
		row++;
	}
	if(found == 1 && (row < 'I'))
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	88 12       	cpse	r8, r24
     ddc:	02 c0       	rjmp	.+4      	; 0xde2 <TurnOtherCheckers+0x1a4>
     dde:	8e 2c       	mov	r8, r14
     de0:	04 c0       	rjmp	.+8      	; 0xdea <TurnOtherCheckers+0x1ac>
{
	char row = c;
	uint8_t col = column;
	uint8_t found = 0;
	/*Check for players checkers from right*/
	col++;
     de2:	7a 2c       	mov	r7, r10
     de4:	bd 2c       	mov	r11, r13
     de6:	81 2c       	mov	r8, r1
     de8:	2e c0       	rjmp	.+92     	; 0xe46 <TurnOtherCheckers+0x208>
		}
		row++;
	}
	if(found == 1 && (row < 'I'))
	{
		for(uint8_t i = c+1; i < row; i++)
     dea:	8b 14       	cp	r8, r11
     dec:	d0 f7       	brcc	.-12     	; 0xde2 <TurnOtherCheckers+0x1a4>
		{
			setChecker(i,col,player,chessboard);
     dee:	98 01       	movw	r18, r16
     df0:	4c 2f       	mov	r20, r28
     df2:	6f 2d       	mov	r22, r15
     df4:	88 2d       	mov	r24, r8
     df6:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
		}
		row++;
	}
	if(found == 1 && (row < 'I'))
	{
		for(uint8_t i = c+1; i < row; i++)
     dfa:	83 94       	inc	r8
     dfc:	f6 cf       	rjmp	.-20     	; 0xdea <TurnOtherCheckers+0x1ac>
	found = 0 ;
	row = c;
	col = column;
	row--;
	col++;
	while ((row > '@' && col < 9) && readCell(row,col,chessboard) == enemy && found != 1)
     dfe:	88 e0       	ldi	r24, 0x08	; 8
     e00:	87 15       	cp	r24, r7
     e02:	38 f1       	brcs	.+78     	; 0xe52 <TurnOtherCheckers+0x214>
     e04:	a8 01       	movw	r20, r16
     e06:	67 2d       	mov	r22, r7
     e08:	8b 2d       	mov	r24, r11
     e0a:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     e0e:	98 12       	cpse	r9, r24
     e10:	20 c0       	rjmp	.+64     	; 0xe52 <TurnOtherCheckers+0x214>
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	88 16       	cp	r8, r24
     e16:	21 f1       	breq	.+72     	; 0xe60 <TurnOtherCheckers+0x222>
     e18:	66 24       	eor	r6, r6
     e1a:	63 94       	inc	r6
     e1c:	67 0c       	add	r6, r7
     e1e:	55 24       	eor	r5, r5
     e20:	5a 94       	dec	r5
     e22:	5b 0c       	add	r5, r11
	{
		if ((row - 1 > '@') && (col + 1 < 9))
     e24:	81 e4       	ldi	r24, 0x41	; 65
     e26:	b8 16       	cp	r11, r24
     e28:	91 f0       	breq	.+36     	; 0xe4e <TurnOtherCheckers+0x210>
     e2a:	88 e0       	ldi	r24, 0x08	; 8
     e2c:	78 16       	cp	r7, r24
     e2e:	79 f0       	breq	.+30     	; 0xe4e <TurnOtherCheckers+0x210>
		{
			if(readCell((row-1),(col+1),chessboard) == player)
     e30:	a8 01       	movw	r20, r16
     e32:	66 2d       	mov	r22, r6
     e34:	85 2d       	mov	r24, r5
     e36:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     e3a:	88 24       	eor	r8, r8
     e3c:	83 94       	inc	r8
     e3e:	c8 13       	cpse	r28, r24
     e40:	06 c0       	rjmp	.+12     	; 0xe4e <TurnOtherCheckers+0x210>
			{
				found = 1;
			}
		}
		row--;
     e42:	b5 2c       	mov	r11, r5
		col++;
     e44:	76 2c       	mov	r7, r6
	found = 0 ;
	row = c;
	col = column;
	row--;
	col++;
	while ((row > '@' && col < 9) && readCell(row,col,chessboard) == enemy && found != 1)
     e46:	80 e4       	ldi	r24, 0x40	; 64
     e48:	8b 15       	cp	r24, r11
     e4a:	c8 f2       	brcs	.-78     	; 0xdfe <TurnOtherCheckers+0x1c0>
     e4c:	05 c0       	rjmp	.+10     	; 0xe58 <TurnOtherCheckers+0x21a>
     e4e:	81 2c       	mov	r8, r1
     e50:	f8 cf       	rjmp	.-16     	; 0xe42 <TurnOtherCheckers+0x204>
		row--;
		col++;
	}
	col = column;
	col++ ;
	if(found == 1 && (row > '@') && (col < 9))
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	88 16       	cp	r8, r24
     e56:	21 f0       	breq	.+8      	; 0xe60 <TurnOtherCheckers+0x222>
		}
	}
	/*Check for players checkers from left*/
	found = 0 ;
	col = column;
	col--;
     e58:	7d 2e       	mov	r7, r29
     e5a:	8e 2c       	mov	r8, r14
     e5c:	b1 2c       	mov	r11, r1
     e5e:	33 c0       	rjmp	.+102    	; 0xec6 <TurnOtherCheckers+0x288>
		row--;
		col++;
	}
	col = column;
	col++ ;
	if(found == 1 && (row > '@') && (col < 9))
     e60:	88 e0       	ldi	r24, 0x08	; 8
     e62:	8a 15       	cp	r24, r10
     e64:	c8 f3       	brcs	.-14     	; 0xe58 <TurnOtherCheckers+0x21a>
     e66:	8d 2c       	mov	r8, r13
     e68:	7a 2c       	mov	r7, r10
	{
		for(uint8_t i = c - 1; i > row; i--)
     e6a:	b8 14       	cp	r11, r8
     e6c:	a8 f7       	brcc	.-22     	; 0xe58 <TurnOtherCheckers+0x21a>
		{
			setChecker(i,col,player,chessboard);
     e6e:	98 01       	movw	r18, r16
     e70:	4c 2f       	mov	r20, r28
     e72:	67 2d       	mov	r22, r7
     e74:	88 2d       	mov	r24, r8
     e76:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
			col++;
     e7a:	73 94       	inc	r7
	}
	col = column;
	col++ ;
	if(found == 1 && (row > '@') && (col < 9))
	{
		for(uint8_t i = c - 1; i > row; i--)
     e7c:	8a 94       	dec	r8
     e7e:	f5 cf       	rjmp	.-22     	; 0xe6a <TurnOtherCheckers+0x22c>
	found = 0 ;
	row = c;
	col = column;
	row++;
	col--;
	while ((row < 'I' && col > 0) && readCell(row,col,chessboard) == enemy && found != 1)
     e80:	77 20       	and	r7, r7
     e82:	71 f1       	breq	.+92     	; 0xee0 <TurnOtherCheckers+0x2a2>
     e84:	a8 01       	movw	r20, r16
     e86:	67 2d       	mov	r22, r7
     e88:	88 2d       	mov	r24, r8
     e8a:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     e8e:	98 12       	cpse	r9, r24
     e90:	27 c0       	rjmp	.+78     	; 0xee0 <TurnOtherCheckers+0x2a2>
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	b8 16       	cp	r11, r24
     e96:	39 f1       	breq	.+78     	; 0xee6 <TurnOtherCheckers+0x2a8>
     e98:	66 24       	eor	r6, r6
     e9a:	6a 94       	dec	r6
     e9c:	67 0c       	add	r6, r7
     e9e:	55 24       	eor	r5, r5
     ea0:	53 94       	inc	r5
     ea2:	58 0c       	add	r5, r8
	{
		if ((row + 1 < 'I') && (col - 1 > 0))
     ea4:	88 e4       	ldi	r24, 0x48	; 72
     ea6:	88 16       	cp	r8, r24
     ea8:	91 f0       	breq	.+36     	; 0xece <TurnOtherCheckers+0x290>
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	78 16       	cp	r7, r24
     eae:	79 f0       	breq	.+30     	; 0xece <TurnOtherCheckers+0x290>
		{
			if(readCell((row+1),(col-1),chessboard) == player)
     eb0:	a8 01       	movw	r20, r16
     eb2:	66 2d       	mov	r22, r6
     eb4:	85 2d       	mov	r24, r5
     eb6:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     eba:	bb 24       	eor	r11, r11
     ebc:	b3 94       	inc	r11
     ebe:	c8 13       	cpse	r28, r24
     ec0:	06 c0       	rjmp	.+12     	; 0xece <TurnOtherCheckers+0x290>
			{
				found = 1;
			}
		}
		row++;
     ec2:	85 2c       	mov	r8, r5
		col--;
     ec4:	76 2c       	mov	r7, r6
	found = 0 ;
	row = c;
	col = column;
	row++;
	col--;
	while ((row < 'I' && col > 0) && readCell(row,col,chessboard) == enemy && found != 1)
     ec6:	88 e4       	ldi	r24, 0x48	; 72
     ec8:	88 15       	cp	r24, r8
     eca:	d0 f6       	brcc	.-76     	; 0xe80 <TurnOtherCheckers+0x242>
     ecc:	06 c0       	rjmp	.+12     	; 0xeda <TurnOtherCheckers+0x29c>
     ece:	b1 2c       	mov	r11, r1
     ed0:	f8 cf       	rjmp	.-16     	; 0xec2 <TurnOtherCheckers+0x284>
     ed2:	7e 2c       	mov	r7, r14
     ed4:	bd 2e       	mov	r11, r29
	}
	col = column;
	col-- ;
	if(found == 1 && (row < 'I') && (col > 0))
	{
		for(uint8_t i = c+1; ((i < row) && (col > 0));  i++)
     ed6:	78 14       	cp	r7, r8
     ed8:	50 f0       	brcs	.+20     	; 0xeee <TurnOtherCheckers+0x2b0>
     eda:	bd 2e       	mov	r11, r29
     edc:	81 2c       	mov	r8, r1
     ede:	35 c0       	rjmp	.+106    	; 0xf4a <TurnOtherCheckers+0x30c>
		row++;
		col--;
	}
	col = column;
	col-- ;
	if(found == 1 && (row < 'I') && (col > 0))
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	b8 12       	cpse	r11, r24
     ee4:	fa cf       	rjmp	.-12     	; 0xeda <TurnOtherCheckers+0x29c>
     ee6:	d1 11       	cpse	r29, r1
     ee8:	f4 cf       	rjmp	.-24     	; 0xed2 <TurnOtherCheckers+0x294>
     eea:	b1 2c       	mov	r11, r1
     eec:	f7 cf       	rjmp	.-18     	; 0xedc <TurnOtherCheckers+0x29e>
	{
		for(uint8_t i = c+1; ((i < row) && (col > 0));  i++)
     eee:	bb 20       	and	r11, r11
     ef0:	a1 f3       	breq	.-24     	; 0xeda <TurnOtherCheckers+0x29c>
		{
			setChecker(i,col,player,chessboard);
     ef2:	98 01       	movw	r18, r16
     ef4:	4c 2f       	mov	r20, r28
     ef6:	6b 2d       	mov	r22, r11
     ef8:	87 2d       	mov	r24, r7
     efa:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
			col--;
     efe:	ba 94       	dec	r11
	}
	col = column;
	col-- ;
	if(found == 1 && (row < 'I') && (col > 0))
	{
		for(uint8_t i = c+1; ((i < row) && (col > 0));  i++)
     f00:	73 94       	inc	r7
     f02:	e9 cf       	rjmp	.-46     	; 0xed6 <TurnOtherCheckers+0x298>
	found = 0 ;
	row = c;
	col = column;
	row--;
	col--;
	while ((row > '@' && col > 0) && readCell(row,col,chessboard) == enemy && found != 1)
     f04:	bb 20       	and	r11, r11
     f06:	39 f1       	breq	.+78     	; 0xf56 <TurnOtherCheckers+0x318>
     f08:	a8 01       	movw	r20, r16
     f0a:	6b 2d       	mov	r22, r11
     f0c:	8d 2d       	mov	r24, r13
     f0e:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     f12:	98 12       	cpse	r9, r24
     f14:	20 c0       	rjmp	.+64     	; 0xf56 <TurnOtherCheckers+0x318>
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	88 16       	cp	r8, r24
     f1a:	01 f1       	breq	.+64     	; 0xf5c <TurnOtherCheckers+0x31e>
     f1c:	77 24       	eor	r7, r7
     f1e:	7a 94       	dec	r7
     f20:	7b 0c       	add	r7, r11
     f22:	66 24       	eor	r6, r6
     f24:	6a 94       	dec	r6
     f26:	6d 0c       	add	r6, r13
	{
		if ((row - 1 > '@') && (col - 1 > 0))
     f28:	81 e4       	ldi	r24, 0x41	; 65
     f2a:	d8 16       	cp	r13, r24
     f2c:	91 f0       	breq	.+36     	; 0xf52 <TurnOtherCheckers+0x314>
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	b8 16       	cp	r11, r24
     f32:	79 f0       	breq	.+30     	; 0xf52 <TurnOtherCheckers+0x314>
		{
			if(readCell((row-1),(col-1),chessboard) == player)
     f34:	a8 01       	movw	r20, r16
     f36:	67 2d       	mov	r22, r7
     f38:	86 2d       	mov	r24, r6
     f3a:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     f3e:	88 24       	eor	r8, r8
     f40:	83 94       	inc	r8
     f42:	c8 13       	cpse	r28, r24
     f44:	06 c0       	rjmp	.+12     	; 0xf52 <TurnOtherCheckers+0x314>
			{
				found = 1;
			}
		}
		row--;
     f46:	d6 2c       	mov	r13, r6
		col--;
     f48:	b7 2c       	mov	r11, r7
	found = 0 ;
	row = c;
	col = column;
	row--;
	col--;
	while ((row > '@' && col > 0) && readCell(row,col,chessboard) == enemy && found != 1)
     f4a:	80 e4       	ldi	r24, 0x40	; 64
     f4c:	8d 15       	cp	r24, r13
     f4e:	d0 f2       	brcs	.-76     	; 0xf04 <TurnOtherCheckers+0x2c6>
     f50:	0d c0       	rjmp	.+26     	; 0xf6c <TurnOtherCheckers+0x32e>
     f52:	81 2c       	mov	r8, r1
     f54:	f8 cf       	rjmp	.-16     	; 0xf46 <TurnOtherCheckers+0x308>
		row--;
		col--;
	}
	col = column;
	col-- ;
	if(found == 1 && (row > '@') && (col > 0))
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	88 12       	cpse	r8, r24
     f5a:	08 c0       	rjmp	.+16     	; 0xf6c <TurnOtherCheckers+0x32e>
     f5c:	dd 23       	and	r29, r29
     f5e:	31 f0       	breq	.+12     	; 0xf6c <TurnOtherCheckers+0x32e>
     f60:	bc 2c       	mov	r11, r12
     f62:	bf 18       	sub	r11, r15
     f64:	8b 2d       	mov	r24, r11
     f66:	8d 0f       	add	r24, r29
	{
		for(uint8_t i = c-1; ((i > row) && (col > 0)); i--)
     f68:	d8 16       	cp	r13, r24
     f6a:	20 f0       	brcs	.+8      	; 0xf74 <TurnOtherCheckers+0x336>
{
	char row = c;
	uint8_t col = column;
	uint8_t found = 0;
	/*Check for players checkers from right*/
	col++;
     f6c:	ba 2c       	mov	r11, r10
     f6e:	de 2c       	mov	r13, r14
     f70:	d0 e0       	ldi	r29, 0x00	; 0
     f72:	2b c0       	rjmp	.+86     	; 0xfca <TurnOtherCheckers+0x38c>
	}
	col = column;
	col-- ;
	if(found == 1 && (row > '@') && (col > 0))
	{
		for(uint8_t i = c-1; ((i > row) && (col > 0)); i--)
     f74:	dd 23       	and	r29, r29
     f76:	d1 f3       	breq	.-12     	; 0xf6c <TurnOtherCheckers+0x32e>
		{
			setChecker(i,col,player,chessboard);
     f78:	98 01       	movw	r18, r16
     f7a:	4c 2f       	mov	r20, r28
     f7c:	6d 2f       	mov	r22, r29
     f7e:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
			col--;
     f82:	d1 50       	subi	r29, 0x01	; 1
     f84:	ef cf       	rjmp	.-34     	; 0xf64 <TurnOtherCheckers+0x326>
	found = 0 ;
	row = c;
	col = column;
	row++;
	col++;
	while ((row < 'I' && col < 9) && readCell(row,col,chessboard) == enemy && found != 1)
     f86:	88 e0       	ldi	r24, 0x08	; 8
     f88:	8b 15       	cp	r24, r11
     f8a:	28 f1       	brcs	.+74     	; 0xfd6 <TurnOtherCheckers+0x398>
     f8c:	a8 01       	movw	r20, r16
     f8e:	6b 2d       	mov	r22, r11
     f90:	8d 2d       	mov	r24, r13
     f92:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     f96:	98 12       	cpse	r9, r24
     f98:	1e c0       	rjmp	.+60     	; 0xfd6 <TurnOtherCheckers+0x398>
     f9a:	d1 30       	cpi	r29, 0x01	; 1
     f9c:	f1 f0       	breq	.+60     	; 0xfda <TurnOtherCheckers+0x39c>
     f9e:	88 24       	eor	r8, r8
     fa0:	83 94       	inc	r8
     fa2:	8b 0c       	add	r8, r11
     fa4:	77 24       	eor	r7, r7
     fa6:	73 94       	inc	r7
     fa8:	7d 0c       	add	r7, r13
	{
		if ((row+1 < 'I') && (col + 1 < 9))
     faa:	88 e4       	ldi	r24, 0x48	; 72
     fac:	d8 16       	cp	r13, r24
     fae:	89 f0       	breq	.+34     	; 0xfd2 <TurnOtherCheckers+0x394>
     fb0:	88 e0       	ldi	r24, 0x08	; 8
     fb2:	b8 16       	cp	r11, r24
     fb4:	71 f0       	breq	.+28     	; 0xfd2 <TurnOtherCheckers+0x394>
		{
			if(readCell((row+1),(col+1),chessboard) == player)
     fb6:	a8 01       	movw	r20, r16
     fb8:	68 2d       	mov	r22, r8
     fba:	87 2d       	mov	r24, r7
     fbc:	0e 94 b6 01 	call	0x36c	; 0x36c <readCell>
     fc0:	d1 e0       	ldi	r29, 0x01	; 1
     fc2:	c8 13       	cpse	r28, r24
     fc4:	06 c0       	rjmp	.+12     	; 0xfd2 <TurnOtherCheckers+0x394>
			{
				found = 1;
			}
		}
		row++;
     fc6:	d7 2c       	mov	r13, r7
		col++;
     fc8:	b8 2c       	mov	r11, r8
	found = 0 ;
	row = c;
	col = column;
	row++;
	col++;
	while ((row < 'I' && col < 9) && readCell(row,col,chessboard) == enemy && found != 1)
     fca:	88 e4       	ldi	r24, 0x48	; 72
     fcc:	8d 15       	cp	r24, r13
     fce:	d8 f6       	brcc	.-74     	; 0xf86 <TurnOtherCheckers+0x348>
     fd0:	15 c0       	rjmp	.+42     	; 0xffc <TurnOtherCheckers+0x3be>
     fd2:	d0 e0       	ldi	r29, 0x00	; 0
     fd4:	f8 cf       	rjmp	.-16     	; 0xfc6 <TurnOtherCheckers+0x388>
		row++;
		col++;
	}
	col = column;
	col++ ;
	if(found == 1 && (row < 'I') && (col < 9))
     fd6:	d1 30       	cpi	r29, 0x01	; 1
     fd8:	89 f4       	brne	.+34     	; 0xffc <TurnOtherCheckers+0x3be>
     fda:	88 e0       	ldi	r24, 0x08	; 8
     fdc:	8a 15       	cp	r24, r10
     fde:	70 f0       	brcs	.+28     	; 0xffc <TurnOtherCheckers+0x3be>
     fe0:	fc 18       	sub	r15, r12
     fe2:	6f 2d       	mov	r22, r15
     fe4:	6e 0d       	add	r22, r14
	{
		for(uint8_t i = c+1; ((i < row) && (col < 9)); i++)
     fe6:	ed 14       	cp	r14, r13
     fe8:	48 f4       	brcc	.+18     	; 0xffc <TurnOtherCheckers+0x3be>
     fea:	69 30       	cpi	r22, 0x09	; 9
     fec:	39 f0       	breq	.+14     	; 0xffc <TurnOtherCheckers+0x3be>
		{
			setChecker(i,col,player,chessboard);
     fee:	98 01       	movw	r18, r16
     ff0:	4c 2f       	mov	r20, r28
     ff2:	8e 2d       	mov	r24, r14
     ff4:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
	}
	col = column;
	col++ ;
	if(found == 1 && (row < 'I') && (col < 9))
	{
		for(uint8_t i = c+1; ((i < row) && (col < 9)); i++)
     ff8:	e3 94       	inc	r14
     ffa:	f3 cf       	rjmp	.-26     	; 0xfe2 <TurnOtherCheckers+0x3a4>
		{
			setChecker(i,col,player,chessboard);
			col++;
		}
	}
}
     ffc:	df 91       	pop	r29
     ffe:	cf 91       	pop	r28
    1000:	1f 91       	pop	r17
    1002:	0f 91       	pop	r16
    1004:	ff 90       	pop	r15
    1006:	ef 90       	pop	r14
    1008:	df 90       	pop	r13
    100a:	cf 90       	pop	r12
    100c:	bf 90       	pop	r11
    100e:	af 90       	pop	r10
    1010:	9f 90       	pop	r9
    1012:	8f 90       	pop	r8
    1014:	7f 90       	pop	r7
    1016:	6f 90       	pop	r6
    1018:	5f 90       	pop	r5
    101a:	08 95       	ret

0000101c <clearValidMoves>:

void clearValidMoves(void)
{
	blackCount = 0 ;
    101c:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <blackCount>
	whiteCount = 0 ;
    1020:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <whiteCount>
    1024:	e6 eb       	ldi	r30, 0xB6	; 182
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	ae e8       	ldi	r26, 0x8E	; 142
    102a:	b0 e0       	ldi	r27, 0x00	; 0
	for (uint8_t i = 0; i < SIZE / 2; i++)
	{
		mineValidtable[i] = 0 ;
    102c:	11 92       	st	Z+, r1
		enemyValidtable[i] = 0 ;
    102e:	1d 92       	st	X+, r1

void clearValidMoves(void)
{
	blackCount = 0 ;
	whiteCount = 0 ;
	for (uint8_t i = 0; i < SIZE / 2; i++)
    1030:	80 e0       	ldi	r24, 0x00	; 0
    1032:	ee 3b       	cpi	r30, 0xBE	; 190
    1034:	f8 07       	cpc	r31, r24
    1036:	d1 f7       	brne	.-12     	; 0x102c <clearValidMoves+0x10>
	{
		mineValidtable[i] = 0 ;
		enemyValidtable[i] = 0 ;
	}
}
    1038:	08 95       	ret

0000103a <tableInit>:




void tableInit(void)
{
    103a:	ee ec       	ldi	r30, 0xCE	; 206
    103c:	f0 e0       	ldi	r31, 0x00	; 0
	for (uint8_t i = 0; i < SIZE; i++)
	{
		table[i] = 0 ;
    103e:	11 92       	st	Z+, r1



void tableInit(void)
{
	for (uint8_t i = 0; i < SIZE; i++)
    1040:	80 e0       	ldi	r24, 0x00	; 0
    1042:	ee 3d       	cpi	r30, 0xDE	; 222
    1044:	f8 07       	cpc	r31, r24
    1046:	d9 f7       	brne	.-10     	; 0x103e <tableInit+0x4>
	{
		table[i] = 0 ;
	}
	clearValidMoves();
    1048:	0e 94 0e 08 	call	0x101c	; 0x101c <clearValidMoves>
	if (column > 4)
	{
		index++ ;
		bit = bit - 4 ;														/* if column > 4 jump to the next memory position */
	}
	buffer = chessboard[index] ;
    104c:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <table+0x6>
		break;
		default:														  /* case white: reset cell and enable valid bit */
		temp |= (1 << bit) ;
		temp = ~ temp ;
		buffer = buffer & temp ;
		buffer |= (1 << (4 + bit)) ;
    1050:	87 7f       	andi	r24, 0xF7	; 247
    1052:	80 68       	ori	r24, 0x80	; 128
		break;
	}
	chessboard[index] = buffer ;
    1054:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <table+0x6>
	}
	buffer = chessboard[index] ;
	switch(player)
	{
		case 'B':														   /* case black: enable cell and valid bit */
		buffer |= (1 << bit) | (1 << (4 + bit)) ;
    1058:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <table+0x7>
    105c:	81 61       	ori	r24, 0x11	; 17
		temp = ~ temp ;
		buffer = buffer & temp ;
		buffer |= (1 << (4 + bit)) ;
		break;
	}
	chessboard[index] = buffer ;
    105e:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <table+0x7>
	}
	buffer = chessboard[index] ;
	switch(player)
	{
		case 'B':														   /* case black: enable cell and valid bit */
		buffer |= (1 << bit) | (1 << (4 + bit)) ;
    1062:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <table+0x8>
    1066:	88 68       	ori	r24, 0x88	; 136
		temp = ~ temp ;
		buffer = buffer & temp ;
		buffer |= (1 << (4 + bit)) ;
		break;
	}
	chessboard[index] = buffer ;
    1068:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <table+0x8>
	if (column > 4)
	{
		index++ ;
		bit = bit - 4 ;														/* if column > 4 jump to the next memory position */
	}
	buffer = chessboard[index] ;
    106c:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <table+0x9>
		break;
		default:														  /* case white: reset cell and enable valid bit */
		temp |= (1 << bit) ;
		temp = ~ temp ;
		buffer = buffer & temp ;
		buffer |= (1 << (4 + bit)) ;
    1070:	8e 7f       	andi	r24, 0xFE	; 254
    1072:	80 61       	ori	r24, 0x10	; 16
		break;
	}
	chessboard[index] = buffer ;
    1074:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <table+0x9>
    1078:	08 95       	ret

0000107a <countMineValidmoves>:
		enemyValidtable[i] = 0 ;
	}
}

uint8_t countMineValidmoves(void)
{
    107a:	e6 eb       	ldi	r30, 0xB6	; 182
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	2e eb       	ldi	r18, 0xBE	; 190
    1080:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t buffer = 0 ;
	uint8_t temp = 0 ;
	uint8_t i = 0 ;
	while (i < SIZE/2 && count == 0)
	{
		buffer = mineValidtable[i] ;
    1082:	91 91       	ld	r25, Z+
		temp = buffer & 0b00000001 ;
    1084:	89 2f       	mov	r24, r25
    1086:	81 70       	andi	r24, 0x01	; 1
		{
			count++ ;
		}
		temp = buffer & 0b00000010 ;
		temp = (temp >> 1) ;
		if (temp == 1)
    1088:	91 fd       	sbrc	r25, 1
		{
			count++ ;
    108a:	8f 5f       	subi	r24, 0xFF	; 255
		}
		temp = buffer & 0b00000100 ;
		temp = (temp >> 2) ;
		if (temp == 1)
    108c:	92 fd       	sbrc	r25, 2
		{
			count++ ;
    108e:	8f 5f       	subi	r24, 0xFF	; 255
		}
		temp = buffer & 0b00001000 ;
		temp = (temp >> 3) ;
		if (temp == 1)
    1090:	93 fd       	sbrc	r25, 3
		{
			count++ ;
    1092:	8f 5f       	subi	r24, 0xFF	; 255
		}
		temp = buffer & 0b00010000 ;
		temp = (temp >> 4) ;
		if (temp == 1)
    1094:	94 fd       	sbrc	r25, 4
		{
			count++ ;
    1096:	8f 5f       	subi	r24, 0xFF	; 255
		}
		temp = buffer & 0b00100000 ;
		temp = (temp >> 5) ;
		if (temp == 1)
    1098:	95 fd       	sbrc	r25, 5
		{
			count++ ;
    109a:	8f 5f       	subi	r24, 0xFF	; 255
		}
		temp = buffer & 0b01000000 ;
		temp = (temp >> 6) ;
		if (temp == 1)
    109c:	96 fd       	sbrc	r25, 6
		{
			count++ ;
    109e:	8f 5f       	subi	r24, 0xFF	; 255
		}
		temp = buffer & 0b10000000 ;
		temp = (temp >> 7) ;
		if (temp == 1)
    10a0:	97 ff       	sbrs	r25, 7
    10a2:	02 c0       	rjmp	.+4      	; 0x10a8 <countMineValidmoves+0x2e>
		{
			count++ ;
    10a4:	8f 5f       	subi	r24, 0xFF	; 255
    10a6:	08 95       	ret
{
	uint8_t count = 0 ;
	uint8_t buffer = 0 ;
	uint8_t temp = 0 ;
	uint8_t i = 0 ;
	while (i < SIZE/2 && count == 0)
    10a8:	2e 17       	cp	r18, r30
    10aa:	3f 07       	cpc	r19, r31
    10ac:	11 f0       	breq	.+4      	; 0x10b2 <countMineValidmoves+0x38>
    10ae:	88 23       	and	r24, r24
    10b0:	41 f3       	breq	.-48     	; 0x1082 <countMineValidmoves+0x8>
		}
		
		i++ ;
	}
	return count ;
}
    10b2:	08 95       	ret

000010b4 <countEnemyValidmoves>:


uint8_t countEnemyValidmoves(void)
{
    10b4:	ee e8       	ldi	r30, 0x8E	; 142
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	26 e9       	ldi	r18, 0x96	; 150
    10ba:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t buffer = 0 ;
	uint8_t temp = 0 ;
	uint8_t i = 0 ;
	while (i < SIZE/2 && count == 0)
	{
		buffer = enemyValidtable[i] ;
    10bc:	91 91       	ld	r25, Z+
		temp = buffer & 0b00000001 ;
    10be:	89 2f       	mov	r24, r25
    10c0:	81 70       	andi	r24, 0x01	; 1
		{
			count++ ;
		}
		temp = buffer & 0b00000010 ;
		temp = (temp >> 1) ;
		if (temp == 1)
    10c2:	91 fd       	sbrc	r25, 1
		{
			count++ ;
    10c4:	8f 5f       	subi	r24, 0xFF	; 255
		}
		temp = buffer & 0b00000100 ;
		temp = (temp >> 2) ;
		if (temp == 1)
    10c6:	92 fd       	sbrc	r25, 2
		{
			count++ ;
    10c8:	8f 5f       	subi	r24, 0xFF	; 255
		}
		temp = buffer & 0b00001000 ;
		temp = (temp >> 3) ;
		if (temp == 1)
    10ca:	93 fd       	sbrc	r25, 3
		{
			count++ ;
    10cc:	8f 5f       	subi	r24, 0xFF	; 255
		}
		temp = buffer & 0b00010000 ;
		temp = (temp >> 4) ;
		if (temp == 1)
    10ce:	94 fd       	sbrc	r25, 4
		{
			count++ ;
    10d0:	8f 5f       	subi	r24, 0xFF	; 255
		}
		temp = buffer & 0b00100000 ;
		temp = (temp >> 5) ;
		if (temp == 1)
    10d2:	95 fd       	sbrc	r25, 5
		{
			count++ ;
    10d4:	8f 5f       	subi	r24, 0xFF	; 255
		}
		temp = buffer & 0b01000000 ;
		temp = (temp >> 6) ;
		if (temp == 1)
    10d6:	96 fd       	sbrc	r25, 6
		{
			count++ ;
    10d8:	8f 5f       	subi	r24, 0xFF	; 255
		}
		temp = buffer & 0b10000000 ;
		temp = (temp >> 7) ;
		if (temp == 1)
    10da:	97 ff       	sbrs	r25, 7
    10dc:	02 c0       	rjmp	.+4      	; 0x10e2 <countEnemyValidmoves+0x2e>
		{
			count++ ;
    10de:	8f 5f       	subi	r24, 0xFF	; 255
    10e0:	08 95       	ret
{
	uint8_t count = 0 ;
	uint8_t buffer = 0 ;
	uint8_t temp = 0 ;
	uint8_t i = 0 ;
	while (i < SIZE/2 && count == 0)
    10e2:	2e 17       	cp	r18, r30
    10e4:	3f 07       	cpc	r19, r31
    10e6:	11 f0       	breq	.+4      	; 0x10ec <countEnemyValidmoves+0x38>
    10e8:	88 23       	and	r24, r24
    10ea:	41 f3       	breq	.-48     	; 0x10bc <countEnemyValidmoves+0x8>
		}
		
		i++ ;
	}
	return count ;
}
    10ec:	08 95       	ret

000010ee <checkWin>:


void checkWin(char mine, uint8_t black, uint8_t white)
{
	switch(mine)
    10ee:	82 34       	cpi	r24, 0x42	; 66
    10f0:	71 f4       	brne	.+28     	; 0x110e <checkWin+0x20>
	{
		case 'B':
			if (black > white)
    10f2:	46 17       	cp	r20, r22
    10f4:	28 f4       	brcc	.+10     	; 0x1100 <checkWin+0x12>
			{
				/* I WIN */
				writeByte('W') ;
    10f6:	87 e5       	ldi	r24, 0x57	; 87
    10f8:	0e 94 05 01 	call	0x20a	; 0x20a <writeByte>
				writeByte('N') ;
    10fc:	8e e4       	ldi	r24, 0x4E	; 78
    10fe:	0f c0       	rjmp	.+30     	; 0x111e <checkWin+0x30>
				writeByte('\r') ;
			}
			else if (black < white)
    1100:	64 17       	cp	r22, r20
    1102:	48 f4       	brcc	.+18     	; 0x1116 <checkWin+0x28>
			{
				writeByte('L') ;
    1104:	8c e4       	ldi	r24, 0x4C	; 76
    1106:	0e 94 05 01 	call	0x20a	; 0x20a <writeByte>
				writeByte('S') ;
    110a:	83 e5       	ldi	r24, 0x53	; 83
    110c:	08 c0       	rjmp	.+16     	; 0x111e <checkWin+0x30>
				writeByte('E') ;
				writeByte('\r') ;
			}
		break;
      default:
			if (white > black)
    110e:	64 17       	cp	r22, r20
    1110:	90 f3       	brcs	.-28     	; 0x10f6 <checkWin+0x8>
				/* I WIN TATA */
				writeByte('W') ;
				writeByte('N') ;
				writeByte('\r') ;
			}
			else if (white < black)
    1112:	46 17       	cp	r20, r22
    1114:	b8 f3       	brcs	.-18     	; 0x1104 <checkWin+0x16>
				writeByte('S') ;
				writeByte('\r') ;
			}
			else
			{
				writeByte('T') ;
    1116:	84 e5       	ldi	r24, 0x54	; 84
    1118:	0e 94 05 01 	call	0x20a	; 0x20a <writeByte>
				writeByte('E') ;
    111c:	85 e4       	ldi	r24, 0x45	; 69
    111e:	0e 94 05 01 	call	0x20a	; 0x20a <writeByte>
				writeByte('\r') ;
    1122:	8d e0       	ldi	r24, 0x0D	; 13
    1124:	0c 94 05 01 	jmp	0x20a	; 0x20a <writeByte>

00001128 <copyChessboard>:
		break;
	}
}

void copyChessboard(void)
{
    1128:	2f 92       	push	r2
    112a:	3f 92       	push	r3
    112c:	4f 92       	push	r4
    112e:	5f 92       	push	r5
    1130:	6f 92       	push	r6
    1132:	7f 92       	push	r7
    1134:	8f 92       	push	r8
    1136:	9f 92       	push	r9
    1138:	af 92       	push	r10
    113a:	bf 92       	push	r11
    113c:	cf 92       	push	r12
    113e:	df 92       	push	r13
    1140:	ef 92       	push	r14
    1142:	ff 92       	push	r15
    1144:	0f 93       	push	r16
    1146:	1f 93       	push	r17
    1148:	cf 93       	push	r28
    114a:	df 93       	push	r29
    114c:	cd b7       	in	r28, 0x3d	; 61
    114e:	de b7       	in	r29, 0x3e	; 62
    1150:	28 97       	sbiw	r28, 0x08	; 8
    1152:	0f b6       	in	r0, 0x3f	; 63
    1154:	f8 94       	cli
    1156:	de bf       	out	0x3e, r29	; 62
    1158:	0f be       	out	0x3f, r0	; 63
    115a:	cd bf       	out	0x3d, r28	; 61
    115c:	8e ec       	ldi	r24, 0xCE	; 206
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	9a 83       	std	Y+2, r25	; 0x02
    1162:	89 83       	std	Y+1, r24	; 0x01
    1164:	ae ee       	ldi	r26, 0xEE	; 238
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	bc 83       	std	Y+4, r27	; 0x04
    116a:	ab 83       	std	Y+3, r26	; 0x03
    116c:	8e e8       	ldi	r24, 0x8E	; 142
    116e:	48 2e       	mov	r4, r24
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	58 2e       	mov	r5, r24
    1174:	9e e7       	ldi	r25, 0x7E	; 126
    1176:	69 2e       	mov	r6, r25
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	79 2e       	mov	r7, r25
    117c:	2e e5       	ldi	r18, 0x5E	; 94
    117e:	82 2e       	mov	r8, r18
    1180:	21 e0       	ldi	r18, 0x01	; 1
    1182:	92 2e       	mov	r9, r18
    1184:	3e e6       	ldi	r19, 0x6E	; 110
    1186:	a3 2e       	mov	r10, r19
    1188:	31 e0       	ldi	r19, 0x01	; 1
    118a:	b3 2e       	mov	r11, r19
    118c:	46 e9       	ldi	r20, 0x96	; 150
    118e:	c4 2e       	mov	r12, r20
    1190:	40 e0       	ldi	r20, 0x00	; 0
    1192:	d4 2e       	mov	r13, r20
    1194:	5e ef       	ldi	r21, 0xFE	; 254
    1196:	e5 2e       	mov	r14, r21
    1198:	50 e0       	ldi	r21, 0x00	; 0
    119a:	f5 2e       	mov	r15, r21
    119c:	06 ea       	ldi	r16, 0xA6	; 166
    119e:	10 e0       	ldi	r17, 0x00	; 0
    11a0:	6e e4       	ldi	r22, 0x4E	; 78
    11a2:	71 e0       	ldi	r23, 0x01	; 1
    11a4:	4e e9       	ldi	r20, 0x9E	; 158
    11a6:	51 e0       	ldi	r21, 0x01	; 1
    11a8:	2e e3       	ldi	r18, 0x3E	; 62
    11aa:	31 e0       	ldi	r19, 0x01	; 1
    11ac:	8e eb       	ldi	r24, 0xBE	; 190
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	ee ed       	ldi	r30, 0xDE	; 222
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	fe 83       	std	Y+6, r31	; 0x06
    11b6:	ed 83       	std	Y+5, r30	; 0x05
    11b8:	ae e2       	ldi	r26, 0x2E	; 46
    11ba:	b1 e0       	ldi	r27, 0x01	; 1
    11bc:	b8 87       	std	Y+8, r27	; 0x08
    11be:	af 83       	std	Y+7, r26	; 0x07
    11c0:	ee e0       	ldi	r30, 0x0E	; 14
    11c2:	f1 e0       	ldi	r31, 0x01	; 1
    11c4:	a0 e1       	ldi	r26, 0x10	; 16
    11c6:	3a 2e       	mov	r3, r26
	for (uint8_t i = 0; i < SIZE; i++)
	{
		table1[i] = table[i];
    11c8:	a9 81       	ldd	r26, Y+1	; 0x01
    11ca:	ba 81       	ldd	r27, Y+2	; 0x02
    11cc:	2d 90       	ld	r2, X+
    11ce:	ba 83       	std	Y+2, r27	; 0x02
    11d0:	a9 83       	std	Y+1, r26	; 0x01
    11d2:	ab 81       	ldd	r26, Y+3	; 0x03
    11d4:	bc 81       	ldd	r27, Y+4	; 0x04
    11d6:	2d 92       	st	X+, r2
    11d8:	bc 83       	std	Y+4, r27	; 0x04
    11da:	ab 83       	std	Y+3, r26	; 0x03
		table2[i] = table[i];
    11dc:	d2 01       	movw	r26, r4
    11de:	2d 92       	st	X+, r2
    11e0:	2d 01       	movw	r4, r26
		table3[i] = table[i];
    11e2:	d3 01       	movw	r26, r6
    11e4:	2d 92       	st	X+, r2
    11e6:	3d 01       	movw	r6, r26
		table4[i] = table[i];
    11e8:	d4 01       	movw	r26, r8
    11ea:	2d 92       	st	X+, r2
    11ec:	4d 01       	movw	r8, r26
		table5[i] = table[i];
    11ee:	d5 01       	movw	r26, r10
    11f0:	2d 92       	st	X+, r2
    11f2:	5d 01       	movw	r10, r26
		table6[i] = table[i];
    11f4:	d6 01       	movw	r26, r12
    11f6:	2d 92       	st	X+, r2
    11f8:	6d 01       	movw	r12, r26
		table7[i] = table[i];
    11fa:	d7 01       	movw	r26, r14
    11fc:	2d 92       	st	X+, r2
    11fe:	7d 01       	movw	r14, r26
		table8[i] = table[i];
    1200:	d8 01       	movw	r26, r16
    1202:	2d 92       	st	X+, r2
    1204:	8d 01       	movw	r16, r26
		table9[i] = table[i];
    1206:	db 01       	movw	r26, r22
    1208:	2d 92       	st	X+, r2
    120a:	bd 01       	movw	r22, r26
		table10[i] = table[i];
    120c:	da 01       	movw	r26, r20
    120e:	2d 92       	st	X+, r2
    1210:	ad 01       	movw	r20, r26
		table11[i] = table[i];
    1212:	d9 01       	movw	r26, r18
    1214:	2d 92       	st	X+, r2
    1216:	9d 01       	movw	r18, r26
		table12[i] = table[i];
    1218:	dc 01       	movw	r26, r24
    121a:	2d 92       	st	X+, r2
    121c:	cd 01       	movw	r24, r26
		table13[i] = table[i];
    121e:	ad 81       	ldd	r26, Y+5	; 0x05
    1220:	be 81       	ldd	r27, Y+6	; 0x06
    1222:	2d 92       	st	X+, r2
    1224:	be 83       	std	Y+6, r27	; 0x06
    1226:	ad 83       	std	Y+5, r26	; 0x05
		table14[i] = table[i];
    1228:	af 81       	ldd	r26, Y+7	; 0x07
    122a:	b8 85       	ldd	r27, Y+8	; 0x08
    122c:	2d 92       	st	X+, r2
    122e:	b8 87       	std	Y+8, r27	; 0x08
    1230:	af 83       	std	Y+7, r26	; 0x07
		table15[i] = table[i]; 
    1232:	21 92       	st	Z+, r2
    1234:	3a 94       	dec	r3
	}
}

void copyChessboard(void)
{
	for (uint8_t i = 0; i < SIZE; i++)
    1236:	31 10       	cpse	r3, r1
    1238:	c7 cf       	rjmp	.-114    	; 0x11c8 <copyChessboard+0xa0>
		table13[i] = table[i];
		table14[i] = table[i];
		table15[i] = table[i]; 
	}
	
}
    123a:	28 96       	adiw	r28, 0x08	; 8
    123c:	0f b6       	in	r0, 0x3f	; 63
    123e:	f8 94       	cli
    1240:	de bf       	out	0x3e, r29	; 62
    1242:	0f be       	out	0x3f, r0	; 63
    1244:	cd bf       	out	0x3d, r28	; 61
    1246:	df 91       	pop	r29
    1248:	cf 91       	pop	r28
    124a:	1f 91       	pop	r17
    124c:	0f 91       	pop	r16
    124e:	ff 90       	pop	r15
    1250:	ef 90       	pop	r14
    1252:	df 90       	pop	r13
    1254:	cf 90       	pop	r12
    1256:	bf 90       	pop	r11
    1258:	af 90       	pop	r10
    125a:	9f 90       	pop	r9
    125c:	8f 90       	pop	r8
    125e:	7f 90       	pop	r7
    1260:	6f 90       	pop	r6
    1262:	5f 90       	pop	r5
    1264:	4f 90       	pop	r4
    1266:	3f 90       	pop	r3
    1268:	2f 90       	pop	r2
    126a:	08 95       	ret

0000126c <scanCopyChessBoard>:

uint8_t scanCopyChessBoard(char mine,uint8_t chessBoard[])
{
    126c:	98 2f       	mov	r25, r24
    126e:	ab 01       	movw	r20, r22
    1270:	40 5f       	subi	r20, 0xF0	; 240
    1272:	5f 4f       	sbci	r21, 0xFF	; 255
	uint8_t buffer = 0 ;
	uint8_t temp1 = 0 ;
	uint8_t temp2 = 0 ;
	uint8_t mineCount = 0 ;
    1274:	80 e0       	ldi	r24, 0x00	; 0
	
	for (uint8_t index = 0 ; index < SIZE ; index++)
	{
		buffer = chessBoard[index] ;
    1276:	fb 01       	movw	r30, r22
    1278:	21 91       	ld	r18, Z+
    127a:	bf 01       	movw	r22, r30
		/* First column in half byte */
		temp1 = buffer & 0b00010000 ;								/* Checks for enabled position in chessboard */
		temp1 = (temp1 >> 4) ;
		if (temp1 == 1)
    127c:	24 ff       	sbrs	r18, 4
    127e:	08 c0       	rjmp	.+16     	; 0x1290 <scanCopyChessBoard+0x24>
		{
			temp2 = buffer & 0b00000001 ;							/* Checks the colour of this checker */
			if (temp2 == 1)
    1280:	20 ff       	sbrs	r18, 0
    1282:	03 c0       	rjmp	.+6      	; 0x128a <scanCopyChessBoard+0x1e>
			{
				/* Black checker */
				if (mine == 'B')
    1284:	92 34       	cpi	r25, 0x42	; 66
    1286:	21 f4       	brne	.+8      	; 0x1290 <scanCopyChessBoard+0x24>
    1288:	02 c0       	rjmp	.+4      	; 0x128e <scanCopyChessBoard+0x22>
				}
			}
			else
			{
				/* White checker */
				if (mine == 'W')
    128a:	97 35       	cpi	r25, 0x57	; 87
    128c:	09 f4       	brne	.+2      	; 0x1290 <scanCopyChessBoard+0x24>
				{
					mineCount++ ;
    128e:	8f 5f       	subi	r24, 0xFF	; 255
		}
		
		/* Second column in half byte */
		temp1 = buffer & 0b00100000 ;
		temp1 = (temp1 >> 5) ;
		if (temp1 == 1)
    1290:	25 ff       	sbrs	r18, 5
    1292:	08 c0       	rjmp	.+16     	; 0x12a4 <scanCopyChessBoard+0x38>
		{
			/* Enabled position. There is a checker */
			temp2 = buffer & 0b00000010 ;
			temp2 = (temp2 >> 1) ;
			if (temp2 == 1)
    1294:	21 ff       	sbrs	r18, 1
    1296:	03 c0       	rjmp	.+6      	; 0x129e <scanCopyChessBoard+0x32>
			{
				/* Black checker */
				if (mine == 'B')
    1298:	92 34       	cpi	r25, 0x42	; 66
    129a:	21 f4       	brne	.+8      	; 0x12a4 <scanCopyChessBoard+0x38>
    129c:	02 c0       	rjmp	.+4      	; 0x12a2 <scanCopyChessBoard+0x36>
				}
			}
			else
			{
				/* White checker */
				if (mine == 'W')
    129e:	97 35       	cpi	r25, 0x57	; 87
    12a0:	09 f4       	brne	.+2      	; 0x12a4 <scanCopyChessBoard+0x38>
				{
					mineCount++ ;
    12a2:	8f 5f       	subi	r24, 0xFF	; 255
		}
		
		/* Third column in half byte */
		temp1 = buffer & 0b01000000 ;
		temp1 = (temp1 >> 6) ;
		if (temp1 == 1)
    12a4:	26 ff       	sbrs	r18, 6
    12a6:	08 c0       	rjmp	.+16     	; 0x12b8 <scanCopyChessBoard+0x4c>
		{
			/* There is a checker */
			temp2 = buffer & 0b00000100 ;
			temp2 = (temp2 >> 2) ;
			if (temp2 == 1)
    12a8:	22 ff       	sbrs	r18, 2
    12aa:	03 c0       	rjmp	.+6      	; 0x12b2 <scanCopyChessBoard+0x46>
			{
				/* Black checker */
				if (mine == 'B')
    12ac:	92 34       	cpi	r25, 0x42	; 66
    12ae:	21 f4       	brne	.+8      	; 0x12b8 <scanCopyChessBoard+0x4c>
    12b0:	02 c0       	rjmp	.+4      	; 0x12b6 <scanCopyChessBoard+0x4a>
				}
			}
			else
			{
				/* White checker */
				if (mine == 'W')
    12b2:	97 35       	cpi	r25, 0x57	; 87
    12b4:	09 f4       	brne	.+2      	; 0x12b8 <scanCopyChessBoard+0x4c>
				{
					mineCount++ ;
    12b6:	8f 5f       	subi	r24, 0xFF	; 255
		}
		
		/* Fourth column in half byte */
		temp1 = buffer & 0b10000000 ;
		temp1 = (temp1 >> 7) ;
		if (temp1)
    12b8:	27 ff       	sbrs	r18, 7
    12ba:	08 c0       	rjmp	.+16     	; 0x12cc <scanCopyChessBoard+0x60>
		{
			/* There is a checker */
			temp2 = buffer & 0b00001000 ;
			temp2 = (temp2 >> 3) ;
			if (temp2 == 1)
    12bc:	23 ff       	sbrs	r18, 3
    12be:	03 c0       	rjmp	.+6      	; 0x12c6 <scanCopyChessBoard+0x5a>
			{
				/* Black checker */
				if (mine == 'B')
    12c0:	92 34       	cpi	r25, 0x42	; 66
    12c2:	21 f4       	brne	.+8      	; 0x12cc <scanCopyChessBoard+0x60>
    12c4:	02 c0       	rjmp	.+4      	; 0x12ca <scanCopyChessBoard+0x5e>
				}
			}
			else
			{
				/* White checker */
				if (mine == 'W')
    12c6:	97 35       	cpi	r25, 0x57	; 87
    12c8:	09 f4       	brne	.+2      	; 0x12cc <scanCopyChessBoard+0x60>
				{
					mineCount++ ;
    12ca:	8f 5f       	subi	r24, 0xFF	; 255
	uint8_t buffer = 0 ;
	uint8_t temp1 = 0 ;
	uint8_t temp2 = 0 ;
	uint8_t mineCount = 0 ;
	
	for (uint8_t index = 0 ; index < SIZE ; index++)
    12cc:	46 17       	cp	r20, r22
    12ce:	57 07       	cpc	r21, r23
    12d0:	91 f6       	brne	.-92     	; 0x1276 <scanCopyChessBoard+0xa>
		
	}
	
	return mineCount ;
	
}
    12d2:	08 95       	ret

000012d4 <Tactics>:


void Tactics(char mine)
{
    12d4:	af 92       	push	r10
    12d6:	bf 92       	push	r11
    12d8:	cf 92       	push	r12
    12da:	df 92       	push	r13
    12dc:	ef 92       	push	r14
    12de:	ff 92       	push	r15
    12e0:	0f 93       	push	r16
    12e2:	1f 93       	push	r17
    12e4:	cf 93       	push	r28
    12e6:	df 93       	push	r29
    12e8:	d8 2f       	mov	r29, r24
    12ea:	86 eb       	ldi	r24, 0xB6	; 182
    12ec:	a8 2e       	mov	r10, r24
    12ee:	80 e0       	ldi	r24, 0x00	; 0
    12f0:	b8 2e       	mov	r11, r24
    12f2:	c1 e4       	ldi	r28, 0x41	; 65
	uint8_t buffer = 0 ;
	uint8_t temp = 0;
	uint8_t count = 0 ;
	uint8_t max = 0 ;
    12f4:	f1 2c       	mov	r15, r1

void Tactics(char mine)
{
	uint8_t buffer = 0 ;
	uint8_t temp = 0;
	uint8_t count = 0 ;
    12f6:	e1 2c       	mov	r14, r1
	uint8_t column = 0 ;
	for (uint8_t index = 0; index < SIZE/2; index++)
	{
		/* First check line */
		line = 65 + index ;
		buffer = mineValidtable[index] ;
    12f8:	f5 01       	movw	r30, r10
    12fa:	d1 90       	ld	r13, Z+
    12fc:	5f 01       	movw	r10, r30
		/* Check column */
		temp = buffer & 0b00000001 ;
		if (temp == 1)
    12fe:	fd 2d       	mov	r31, r13
    1300:	f1 70       	andi	r31, 0x01	; 1
    1302:	cf 2e       	mov	r12, r31
    1304:	d0 fe       	sbrs	r13, 0
    1306:	c6 c0       	rjmp	.+396    	; 0x1494 <Tactics+0x1c0>
		{
			/* First Valid in this line */
			column = 1 ;
			count++ ;
    1308:	e3 94       	inc	r14
			switch(count)
    130a:	8e 2d       	mov	r24, r14
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	fc 01       	movw	r30, r24
    1310:	31 97       	sbiw	r30, 0x01	; 1
    1312:	ee 30       	cpi	r30, 0x0E	; 14
    1314:	f1 05       	cpc	r31, r1
    1316:	08 f0       	brcs	.+2      	; 0x131a <Tactics+0x46>
    1318:	a2 c0       	rjmp	.+324    	; 0x145e <Tactics+0x18a>
    131a:	e6 5d       	subi	r30, 0xD6	; 214
    131c:	ff 4f       	sbci	r31, 0xFF	; 255
    131e:	0c 94 d9 10 	jmp	0x21b2	; 0x21b2 <__tablejump2__>
			{
				case 1:
					setChecker(line,column,mine,table1) ;
    1322:	2e ee       	ldi	r18, 0xEE	; 238
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	4d 2f       	mov	r20, r29
    1328:	61 e0       	ldi	r22, 0x01	; 1
    132a:	8c 2f       	mov	r24, r28
    132c:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
					TurnOtherCheckers(line,column,enemy,mine,table1) ;
    1330:	0e ee       	ldi	r16, 0xEE	; 238
    1332:	10 e0       	ldi	r17, 0x00	; 0
    1334:	81 c0       	rjmp	.+258    	; 0x1438 <Tactics+0x164>
						myColumn = column ;
					}
				break;
				
				case 2:
					setChecker(line,column,mine,table2) ;
    1336:	2e e8       	ldi	r18, 0x8E	; 142
    1338:	31 e0       	ldi	r19, 0x01	; 1
    133a:	4d 2f       	mov	r20, r29
    133c:	61 e0       	ldi	r22, 0x01	; 1
    133e:	8c 2f       	mov	r24, r28
    1340:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
					TurnOtherCheckers(line,column,enemy,mine,table2) ;
    1344:	0e e8       	ldi	r16, 0x8E	; 142
    1346:	11 e0       	ldi	r17, 0x01	; 1
    1348:	77 c0       	rjmp	.+238    	; 0x1438 <Tactics+0x164>
						myColumn = column ;
					}
				break;
				
				case 3:
					setChecker(line,column,mine,table3) ;
    134a:	2e e7       	ldi	r18, 0x7E	; 126
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	4d 2f       	mov	r20, r29
    1350:	61 e0       	ldi	r22, 0x01	; 1
    1352:	8c 2f       	mov	r24, r28
    1354:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
					TurnOtherCheckers(line,column,enemy,mine,table3) ;
    1358:	0e e7       	ldi	r16, 0x7E	; 126
    135a:	10 e0       	ldi	r17, 0x00	; 0
    135c:	6d c0       	rjmp	.+218    	; 0x1438 <Tactics+0x164>
						myColumn = column ;
					}
				break;
				
				case 4:
					setChecker(line,column,mine,table4) ;
    135e:	2e e5       	ldi	r18, 0x5E	; 94
    1360:	31 e0       	ldi	r19, 0x01	; 1
    1362:	4d 2f       	mov	r20, r29
    1364:	61 e0       	ldi	r22, 0x01	; 1
    1366:	8c 2f       	mov	r24, r28
    1368:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
					TurnOtherCheckers(line,column,enemy,mine,table4) ;
    136c:	0e e5       	ldi	r16, 0x5E	; 94
    136e:	11 e0       	ldi	r17, 0x01	; 1
    1370:	63 c0       	rjmp	.+198    	; 0x1438 <Tactics+0x164>
						myColumn = column ;
					}
				break;
				
				case 5:
					setChecker(line,column,mine,table5) ;
    1372:	2e e6       	ldi	r18, 0x6E	; 110
    1374:	31 e0       	ldi	r19, 0x01	; 1
    1376:	4d 2f       	mov	r20, r29
    1378:	61 e0       	ldi	r22, 0x01	; 1
    137a:	8c 2f       	mov	r24, r28
    137c:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
					TurnOtherCheckers(line,column,enemy,mine,table5) ;
    1380:	0e e6       	ldi	r16, 0x6E	; 110
    1382:	11 e0       	ldi	r17, 0x01	; 1
    1384:	59 c0       	rjmp	.+178    	; 0x1438 <Tactics+0x164>
						myColumn = column ;
					}
				break;
				
				case 6:
					setChecker(line,column,mine,table6) ;
    1386:	26 e9       	ldi	r18, 0x96	; 150
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	4d 2f       	mov	r20, r29
    138c:	61 e0       	ldi	r22, 0x01	; 1
    138e:	8c 2f       	mov	r24, r28
    1390:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
					TurnOtherCheckers(line,column,enemy,mine,table6) ;
    1394:	06 e9       	ldi	r16, 0x96	; 150
    1396:	10 e0       	ldi	r17, 0x00	; 0
    1398:	4f c0       	rjmp	.+158    	; 0x1438 <Tactics+0x164>
						myColumn = column ;
					}
				break;
				
				case 7:
					setChecker(line,column,mine,table7) ;
    139a:	2e ef       	ldi	r18, 0xFE	; 254
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	4d 2f       	mov	r20, r29
    13a0:	61 e0       	ldi	r22, 0x01	; 1
    13a2:	8c 2f       	mov	r24, r28
    13a4:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
					TurnOtherCheckers(line,column,enemy,mine,table7) ;
    13a8:	0e ef       	ldi	r16, 0xFE	; 254
    13aa:	10 e0       	ldi	r17, 0x00	; 0
    13ac:	45 c0       	rjmp	.+138    	; 0x1438 <Tactics+0x164>
						myColumn = column ;
					}
				break;
				
				case 8:
				setChecker(line,column,mine,table8) ;
    13ae:	26 ea       	ldi	r18, 0xA6	; 166
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	4d 2f       	mov	r20, r29
    13b4:	61 e0       	ldi	r22, 0x01	; 1
    13b6:	8c 2f       	mov	r24, r28
    13b8:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table8) ;
    13bc:	06 ea       	ldi	r16, 0xA6	; 166
    13be:	10 e0       	ldi	r17, 0x00	; 0
    13c0:	3b c0       	rjmp	.+118    	; 0x1438 <Tactics+0x164>
					myColumn = column ;
				}
				break;
				
				case 9:
				setChecker(line,column,mine,table9) ;
    13c2:	2e e4       	ldi	r18, 0x4E	; 78
    13c4:	31 e0       	ldi	r19, 0x01	; 1
    13c6:	4d 2f       	mov	r20, r29
    13c8:	61 e0       	ldi	r22, 0x01	; 1
    13ca:	8c 2f       	mov	r24, r28
    13cc:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
    13d0:	0e e4       	ldi	r16, 0x4E	; 78
    13d2:	11 e0       	ldi	r17, 0x01	; 1
    13d4:	31 c0       	rjmp	.+98     	; 0x1438 <Tactics+0x164>
					myColumn = column ;
				}
				break;
				
				case 10:
				setChecker(line,column,mine,table10) ;
    13d6:	2e e9       	ldi	r18, 0x9E	; 158
    13d8:	31 e0       	ldi	r19, 0x01	; 1
    13da:	4d 2f       	mov	r20, r29
    13dc:	61 e0       	ldi	r22, 0x01	; 1
    13de:	8c 2f       	mov	r24, r28
    13e0:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table10) ;
    13e4:	0e e9       	ldi	r16, 0x9E	; 158
    13e6:	11 e0       	ldi	r17, 0x01	; 1
    13e8:	27 c0       	rjmp	.+78     	; 0x1438 <Tactics+0x164>
					myColumn = column ;
				}
				break;
				
				case 11:
				setChecker(line,column,mine,table11) ;
    13ea:	2e e3       	ldi	r18, 0x3E	; 62
    13ec:	31 e0       	ldi	r19, 0x01	; 1
    13ee:	4d 2f       	mov	r20, r29
    13f0:	61 e0       	ldi	r22, 0x01	; 1
    13f2:	8c 2f       	mov	r24, r28
    13f4:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table11) ;
    13f8:	0e e3       	ldi	r16, 0x3E	; 62
    13fa:	11 e0       	ldi	r17, 0x01	; 1
    13fc:	1d c0       	rjmp	.+58     	; 0x1438 <Tactics+0x164>
					myColumn = column ;
				}
				break;
				
				case 12:
				setChecker(line,column,mine,table12) ;
    13fe:	2e eb       	ldi	r18, 0xBE	; 190
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	4d 2f       	mov	r20, r29
    1404:	61 e0       	ldi	r22, 0x01	; 1
    1406:	8c 2f       	mov	r24, r28
    1408:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table12) ;
    140c:	0e eb       	ldi	r16, 0xBE	; 190
    140e:	10 e0       	ldi	r17, 0x00	; 0
    1410:	13 c0       	rjmp	.+38     	; 0x1438 <Tactics+0x164>
					myColumn = column ;
				}
				break;
				
				case 13:
				setChecker(line,column,mine,table13) ;
    1412:	2e ed       	ldi	r18, 0xDE	; 222
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	4d 2f       	mov	r20, r29
    1418:	61 e0       	ldi	r22, 0x01	; 1
    141a:	8c 2f       	mov	r24, r28
    141c:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table13) ;
    1420:	0e ed       	ldi	r16, 0xDE	; 222
    1422:	10 e0       	ldi	r17, 0x00	; 0
    1424:	09 c0       	rjmp	.+18     	; 0x1438 <Tactics+0x164>
					myColumn = column ;
				}
				break;
				
				case 14:
				setChecker(line,column,mine,table14) ;
    1426:	2e e2       	ldi	r18, 0x2E	; 46
    1428:	31 e0       	ldi	r19, 0x01	; 1
    142a:	4d 2f       	mov	r20, r29
    142c:	61 e0       	ldi	r22, 0x01	; 1
    142e:	8c 2f       	mov	r24, r28
    1430:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table14) ;
    1434:	0e e2       	ldi	r16, 0x2E	; 46
    1436:	11 e0       	ldi	r17, 0x01	; 1
    1438:	2d 2f       	mov	r18, r29
    143a:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    143e:	61 e0       	ldi	r22, 0x01	; 1
    1440:	8c 2f       	mov	r24, r28
    1442:	0e 94 1f 06 	call	0xc3e	; 0xc3e <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table14) ;
    1446:	b8 01       	movw	r22, r16
    1448:	8d 2f       	mov	r24, r29
    144a:	0e 94 36 09 	call	0x126c	; 0x126c <scanCopyChessBoard>
				if (max < checkers)
    144e:	f8 16       	cp	r15, r24
    1450:	08 f5       	brcc	.+66     	; 0x1494 <Tactics+0x1c0>
				{
					max = checkers ;
					myLine = line ;
    1452:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <myLine>
					myColumn = column ;
    1456:	91 e0       	ldi	r25, 0x01	; 1
    1458:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
    145c:	1a c0       	rjmp	.+52     	; 0x1492 <Tactics+0x1be>
				}
				break; 
				
				default:
				setChecker(line,column,mine,table9) ;
    145e:	2e e4       	ldi	r18, 0x4E	; 78
    1460:	31 e0       	ldi	r19, 0x01	; 1
    1462:	4d 2f       	mov	r20, r29
    1464:	61 e0       	ldi	r22, 0x01	; 1
    1466:	8c 2f       	mov	r24, r28
    1468:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
    146c:	0e e4       	ldi	r16, 0x4E	; 78
    146e:	11 e0       	ldi	r17, 0x01	; 1
    1470:	2d 2f       	mov	r18, r29
    1472:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    1476:	61 e0       	ldi	r22, 0x01	; 1
    1478:	8c 2f       	mov	r24, r28
    147a:	0e 94 1f 06 	call	0xc3e	; 0xc3e <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table9) ;
    147e:	b8 01       	movw	r22, r16
    1480:	8d 2f       	mov	r24, r29
    1482:	0e 94 36 09 	call	0x126c	; 0x126c <scanCopyChessBoard>
				if (max < checkers)
    1486:	f8 16       	cp	r15, r24
    1488:	28 f4       	brcc	.+10     	; 0x1494 <Tactics+0x1c0>
				{
					max = checkers ;
					myLine = line ;
    148a:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <myLine>
					myColumn = column ;
    148e:	c0 92 60 00 	sts	0x0060, r12	; 0x800060 <__data_start>
    1492:	f8 2e       	mov	r15, r24
		}
		
		/* Second valid in this line */
		temp = buffer & 0b00000010 ;
		temp = (temp >> 1) ;
		if (temp == 1)
    1494:	d1 fe       	sbrs	r13, 1
    1496:	ab c0       	rjmp	.+342    	; 0x15ee <Tactics+0x31a>
		{
			column = 2 ;
			count++ ;
    1498:	e3 94       	inc	r14
			switch(count)
    149a:	8e 2d       	mov	r24, r14
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	fc 01       	movw	r30, r24
    14a0:	31 97       	sbiw	r30, 0x01	; 1
    14a2:	ee 30       	cpi	r30, 0x0E	; 14
    14a4:	f1 05       	cpc	r31, r1
    14a6:	08 f0       	brcs	.+2      	; 0x14aa <Tactics+0x1d6>
    14a8:	86 c0       	rjmp	.+268    	; 0x15b6 <Tactics+0x2e2>
    14aa:	e8 5c       	subi	r30, 0xC8	; 200
    14ac:	ff 4f       	sbci	r31, 0xFF	; 255
    14ae:	0c 94 d9 10 	jmp	0x21b2	; 0x21b2 <__tablejump2__>
			{
				case 1:
				setChecker(line,column,mine,table1) ;
    14b2:	2e ee       	ldi	r18, 0xEE	; 238
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	4d 2f       	mov	r20, r29
    14b8:	62 e0       	ldi	r22, 0x02	; 2
    14ba:	8c 2f       	mov	r24, r28
    14bc:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table1) ;
    14c0:	0e ee       	ldi	r16, 0xEE	; 238
    14c2:	10 e0       	ldi	r17, 0x00	; 0
    14c4:	81 c0       	rjmp	.+258    	; 0x15c8 <Tactics+0x2f4>
					myColumn = column ;
				}
				break;
				
				case 2:
				setChecker(line,column,mine,table2) ;
    14c6:	2e e8       	ldi	r18, 0x8E	; 142
    14c8:	31 e0       	ldi	r19, 0x01	; 1
    14ca:	4d 2f       	mov	r20, r29
    14cc:	62 e0       	ldi	r22, 0x02	; 2
    14ce:	8c 2f       	mov	r24, r28
    14d0:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table2) ;
    14d4:	0e e8       	ldi	r16, 0x8E	; 142
    14d6:	11 e0       	ldi	r17, 0x01	; 1
    14d8:	77 c0       	rjmp	.+238    	; 0x15c8 <Tactics+0x2f4>
					myColumn = column ;
				}
				break;
				
				case 3:
				setChecker(line,column,mine,table3) ;
    14da:	2e e7       	ldi	r18, 0x7E	; 126
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	4d 2f       	mov	r20, r29
    14e0:	62 e0       	ldi	r22, 0x02	; 2
    14e2:	8c 2f       	mov	r24, r28
    14e4:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table3) ;
    14e8:	0e e7       	ldi	r16, 0x7E	; 126
    14ea:	10 e0       	ldi	r17, 0x00	; 0
    14ec:	6d c0       	rjmp	.+218    	; 0x15c8 <Tactics+0x2f4>
					myColumn = column ;
				}
				break;
				
				case 4:
				setChecker(line,column,mine,table4) ;
    14ee:	2e e5       	ldi	r18, 0x5E	; 94
    14f0:	31 e0       	ldi	r19, 0x01	; 1
    14f2:	4d 2f       	mov	r20, r29
    14f4:	62 e0       	ldi	r22, 0x02	; 2
    14f6:	8c 2f       	mov	r24, r28
    14f8:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table4) ;
    14fc:	0e e5       	ldi	r16, 0x5E	; 94
    14fe:	11 e0       	ldi	r17, 0x01	; 1
    1500:	63 c0       	rjmp	.+198    	; 0x15c8 <Tactics+0x2f4>
					myColumn = column ;
				}
				break;
				
				case 5:
				setChecker(line,column,mine,table5) ;
    1502:	2e e6       	ldi	r18, 0x6E	; 110
    1504:	31 e0       	ldi	r19, 0x01	; 1
    1506:	4d 2f       	mov	r20, r29
    1508:	62 e0       	ldi	r22, 0x02	; 2
    150a:	8c 2f       	mov	r24, r28
    150c:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table5) ;
    1510:	0e e6       	ldi	r16, 0x6E	; 110
    1512:	11 e0       	ldi	r17, 0x01	; 1
    1514:	59 c0       	rjmp	.+178    	; 0x15c8 <Tactics+0x2f4>
					myColumn = column ;
				}
				break;
				
				case 6:
				setChecker(line,column,mine,table6) ;
    1516:	26 e9       	ldi	r18, 0x96	; 150
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	4d 2f       	mov	r20, r29
    151c:	62 e0       	ldi	r22, 0x02	; 2
    151e:	8c 2f       	mov	r24, r28
    1520:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table6) ;
    1524:	06 e9       	ldi	r16, 0x96	; 150
    1526:	10 e0       	ldi	r17, 0x00	; 0
    1528:	4f c0       	rjmp	.+158    	; 0x15c8 <Tactics+0x2f4>
					myColumn = column ;
				}
				break;
				
				case 7:
				setChecker(line,column,mine,table7) ;
    152a:	2e ef       	ldi	r18, 0xFE	; 254
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	4d 2f       	mov	r20, r29
    1530:	62 e0       	ldi	r22, 0x02	; 2
    1532:	8c 2f       	mov	r24, r28
    1534:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table7) ;
    1538:	0e ef       	ldi	r16, 0xFE	; 254
    153a:	10 e0       	ldi	r17, 0x00	; 0
    153c:	45 c0       	rjmp	.+138    	; 0x15c8 <Tactics+0x2f4>
					myColumn = column ;
				}
				break;
				
				case 8:
				setChecker(line,column,mine,table8) ;
    153e:	26 ea       	ldi	r18, 0xA6	; 166
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	4d 2f       	mov	r20, r29
    1544:	62 e0       	ldi	r22, 0x02	; 2
    1546:	8c 2f       	mov	r24, r28
    1548:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table8) ;
    154c:	06 ea       	ldi	r16, 0xA6	; 166
    154e:	10 e0       	ldi	r17, 0x00	; 0
    1550:	3b c0       	rjmp	.+118    	; 0x15c8 <Tactics+0x2f4>
					myColumn = column ;
				}
				break;
				
				case 10:
				setChecker(line,column,mine,table10) ;
    1552:	2e e9       	ldi	r18, 0x9E	; 158
    1554:	31 e0       	ldi	r19, 0x01	; 1
    1556:	4d 2f       	mov	r20, r29
    1558:	62 e0       	ldi	r22, 0x02	; 2
    155a:	8c 2f       	mov	r24, r28
    155c:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table10) ;
    1560:	0e e9       	ldi	r16, 0x9E	; 158
    1562:	11 e0       	ldi	r17, 0x01	; 1
    1564:	31 c0       	rjmp	.+98     	; 0x15c8 <Tactics+0x2f4>
					myColumn = column ;
				}
				break;
				
				case 11:
				setChecker(line,column,mine,table11) ;
    1566:	2e e3       	ldi	r18, 0x3E	; 62
    1568:	31 e0       	ldi	r19, 0x01	; 1
    156a:	4d 2f       	mov	r20, r29
    156c:	62 e0       	ldi	r22, 0x02	; 2
    156e:	8c 2f       	mov	r24, r28
    1570:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table11) ;
    1574:	0e e3       	ldi	r16, 0x3E	; 62
    1576:	11 e0       	ldi	r17, 0x01	; 1
    1578:	27 c0       	rjmp	.+78     	; 0x15c8 <Tactics+0x2f4>
					myColumn = column ;
				}
				break;
				
				case 12:
				setChecker(line,column,mine,table12) ;
    157a:	2e eb       	ldi	r18, 0xBE	; 190
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	4d 2f       	mov	r20, r29
    1580:	62 e0       	ldi	r22, 0x02	; 2
    1582:	8c 2f       	mov	r24, r28
    1584:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table12) ;
    1588:	0e eb       	ldi	r16, 0xBE	; 190
    158a:	10 e0       	ldi	r17, 0x00	; 0
    158c:	1d c0       	rjmp	.+58     	; 0x15c8 <Tactics+0x2f4>
					myColumn = column ;
				}
				break;
				
				case 13:
				setChecker(line,column,mine,table13) ;
    158e:	2e ed       	ldi	r18, 0xDE	; 222
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	4d 2f       	mov	r20, r29
    1594:	62 e0       	ldi	r22, 0x02	; 2
    1596:	8c 2f       	mov	r24, r28
    1598:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table13) ;
    159c:	0e ed       	ldi	r16, 0xDE	; 222
    159e:	10 e0       	ldi	r17, 0x00	; 0
    15a0:	13 c0       	rjmp	.+38     	; 0x15c8 <Tactics+0x2f4>
					myColumn = column ;
				}
				break;
				
				case 14:
				setChecker(line,column,mine,table14) ;
    15a2:	2e e2       	ldi	r18, 0x2E	; 46
    15a4:	31 e0       	ldi	r19, 0x01	; 1
    15a6:	4d 2f       	mov	r20, r29
    15a8:	62 e0       	ldi	r22, 0x02	; 2
    15aa:	8c 2f       	mov	r24, r28
    15ac:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table14) ;
    15b0:	0e e2       	ldi	r16, 0x2E	; 46
    15b2:	11 e0       	ldi	r17, 0x01	; 1
    15b4:	09 c0       	rjmp	.+18     	; 0x15c8 <Tactics+0x2f4>
					myColumn = column ;
				}
				break;
			
				default:
				setChecker(line,column,mine,table9) ;
    15b6:	2e e4       	ldi	r18, 0x4E	; 78
    15b8:	31 e0       	ldi	r19, 0x01	; 1
    15ba:	4d 2f       	mov	r20, r29
    15bc:	62 e0       	ldi	r22, 0x02	; 2
    15be:	8c 2f       	mov	r24, r28
    15c0:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
    15c4:	0e e4       	ldi	r16, 0x4E	; 78
    15c6:	11 e0       	ldi	r17, 0x01	; 1
    15c8:	2d 2f       	mov	r18, r29
    15ca:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    15ce:	62 e0       	ldi	r22, 0x02	; 2
    15d0:	8c 2f       	mov	r24, r28
    15d2:	0e 94 1f 06 	call	0xc3e	; 0xc3e <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table9) ;
    15d6:	b8 01       	movw	r22, r16
    15d8:	8d 2f       	mov	r24, r29
    15da:	0e 94 36 09 	call	0x126c	; 0x126c <scanCopyChessBoard>
				if (max < checkers)
    15de:	f8 16       	cp	r15, r24
    15e0:	30 f4       	brcc	.+12     	; 0x15ee <Tactics+0x31a>
				{
					max = checkers ;
					myLine = line ;
    15e2:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <myLine>
					myColumn = column ;
    15e6:	92 e0       	ldi	r25, 0x02	; 2
    15e8:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
    15ec:	f8 2e       	mov	r15, r24
			
		}
		/* Third valid move in this line */
		temp = buffer & 0b00000100 ;
		temp = (temp >> 2) ;
		if (temp == 1)
    15ee:	d2 fe       	sbrs	r13, 2
    15f0:	ab c0       	rjmp	.+342    	; 0x1748 <Tactics+0x474>
		{
			
			column = 3 ;
			count++ ;
    15f2:	e3 94       	inc	r14
			switch(count)
    15f4:	8e 2d       	mov	r24, r14
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	fc 01       	movw	r30, r24
    15fa:	31 97       	sbiw	r30, 0x01	; 1
    15fc:	ee 30       	cpi	r30, 0x0E	; 14
    15fe:	f1 05       	cpc	r31, r1
    1600:	08 f0       	brcs	.+2      	; 0x1604 <Tactics+0x330>
    1602:	86 c0       	rjmp	.+268    	; 0x1710 <Tactics+0x43c>
    1604:	ea 5b       	subi	r30, 0xBA	; 186
    1606:	ff 4f       	sbci	r31, 0xFF	; 255
    1608:	0c 94 d9 10 	jmp	0x21b2	; 0x21b2 <__tablejump2__>
			{
				case 1:
				setChecker(line,column,mine,table1) ;
    160c:	2e ee       	ldi	r18, 0xEE	; 238
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	4d 2f       	mov	r20, r29
    1612:	63 e0       	ldi	r22, 0x03	; 3
    1614:	8c 2f       	mov	r24, r28
    1616:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table1) ;
    161a:	0e ee       	ldi	r16, 0xEE	; 238
    161c:	10 e0       	ldi	r17, 0x00	; 0
    161e:	81 c0       	rjmp	.+258    	; 0x1722 <Tactics+0x44e>
					myColumn = column ;
				}
				break;
				
				case 2:
				setChecker(line,column,mine,table2) ;
    1620:	2e e8       	ldi	r18, 0x8E	; 142
    1622:	31 e0       	ldi	r19, 0x01	; 1
    1624:	4d 2f       	mov	r20, r29
    1626:	63 e0       	ldi	r22, 0x03	; 3
    1628:	8c 2f       	mov	r24, r28
    162a:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table2) ;
    162e:	0e e8       	ldi	r16, 0x8E	; 142
    1630:	11 e0       	ldi	r17, 0x01	; 1
    1632:	77 c0       	rjmp	.+238    	; 0x1722 <Tactics+0x44e>
					myColumn = column ;
				}
				break;
				
				case 3:
				setChecker(line,column,mine,table3) ;
    1634:	2e e7       	ldi	r18, 0x7E	; 126
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	4d 2f       	mov	r20, r29
    163a:	63 e0       	ldi	r22, 0x03	; 3
    163c:	8c 2f       	mov	r24, r28
    163e:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table3) ;
    1642:	0e e7       	ldi	r16, 0x7E	; 126
    1644:	10 e0       	ldi	r17, 0x00	; 0
    1646:	6d c0       	rjmp	.+218    	; 0x1722 <Tactics+0x44e>
					myColumn = column ;
				}
				break;
				
				case 4:
				setChecker(line,column,mine,table4) ;
    1648:	2e e5       	ldi	r18, 0x5E	; 94
    164a:	31 e0       	ldi	r19, 0x01	; 1
    164c:	4d 2f       	mov	r20, r29
    164e:	63 e0       	ldi	r22, 0x03	; 3
    1650:	8c 2f       	mov	r24, r28
    1652:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table4) ;
    1656:	0e e5       	ldi	r16, 0x5E	; 94
    1658:	11 e0       	ldi	r17, 0x01	; 1
    165a:	63 c0       	rjmp	.+198    	; 0x1722 <Tactics+0x44e>
					myColumn = column ;
				}
				break;
				
				case 5:
				setChecker(line,column,mine,table5) ;
    165c:	2e e6       	ldi	r18, 0x6E	; 110
    165e:	31 e0       	ldi	r19, 0x01	; 1
    1660:	4d 2f       	mov	r20, r29
    1662:	63 e0       	ldi	r22, 0x03	; 3
    1664:	8c 2f       	mov	r24, r28
    1666:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table5) ;
    166a:	0e e6       	ldi	r16, 0x6E	; 110
    166c:	11 e0       	ldi	r17, 0x01	; 1
    166e:	59 c0       	rjmp	.+178    	; 0x1722 <Tactics+0x44e>
					myColumn = column ;
				}
				break;
				
				case 6:
				setChecker(line,column,mine,table6) ;
    1670:	26 e9       	ldi	r18, 0x96	; 150
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	4d 2f       	mov	r20, r29
    1676:	63 e0       	ldi	r22, 0x03	; 3
    1678:	8c 2f       	mov	r24, r28
    167a:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table6) ;
    167e:	06 e9       	ldi	r16, 0x96	; 150
    1680:	10 e0       	ldi	r17, 0x00	; 0
    1682:	4f c0       	rjmp	.+158    	; 0x1722 <Tactics+0x44e>
					myColumn = column ;
				}
				break;
				
				case 7:
				setChecker(line,column,mine,table7) ;
    1684:	2e ef       	ldi	r18, 0xFE	; 254
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	4d 2f       	mov	r20, r29
    168a:	63 e0       	ldi	r22, 0x03	; 3
    168c:	8c 2f       	mov	r24, r28
    168e:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table7) ;
    1692:	0e ef       	ldi	r16, 0xFE	; 254
    1694:	10 e0       	ldi	r17, 0x00	; 0
    1696:	45 c0       	rjmp	.+138    	; 0x1722 <Tactics+0x44e>
					myColumn = column ;
				}
				break;
				
				case 8:
				setChecker(line,column,mine,table8) ;
    1698:	26 ea       	ldi	r18, 0xA6	; 166
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	4d 2f       	mov	r20, r29
    169e:	63 e0       	ldi	r22, 0x03	; 3
    16a0:	8c 2f       	mov	r24, r28
    16a2:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table8) ;
    16a6:	06 ea       	ldi	r16, 0xA6	; 166
    16a8:	10 e0       	ldi	r17, 0x00	; 0
    16aa:	3b c0       	rjmp	.+118    	; 0x1722 <Tactics+0x44e>
					myColumn = column ;
				}
				break;
				
				case 10:
				setChecker(line,column,mine,table10) ;
    16ac:	2e e9       	ldi	r18, 0x9E	; 158
    16ae:	31 e0       	ldi	r19, 0x01	; 1
    16b0:	4d 2f       	mov	r20, r29
    16b2:	63 e0       	ldi	r22, 0x03	; 3
    16b4:	8c 2f       	mov	r24, r28
    16b6:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table10) ;
    16ba:	0e e9       	ldi	r16, 0x9E	; 158
    16bc:	11 e0       	ldi	r17, 0x01	; 1
    16be:	31 c0       	rjmp	.+98     	; 0x1722 <Tactics+0x44e>
					myColumn = column ;
				}
				break;
				
				case 11:
				setChecker(line,column,mine,table11) ;
    16c0:	2e e3       	ldi	r18, 0x3E	; 62
    16c2:	31 e0       	ldi	r19, 0x01	; 1
    16c4:	4d 2f       	mov	r20, r29
    16c6:	63 e0       	ldi	r22, 0x03	; 3
    16c8:	8c 2f       	mov	r24, r28
    16ca:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table11) ;
    16ce:	0e e3       	ldi	r16, 0x3E	; 62
    16d0:	11 e0       	ldi	r17, 0x01	; 1
    16d2:	27 c0       	rjmp	.+78     	; 0x1722 <Tactics+0x44e>
					myColumn = column ;
				}
				break;
				
				case 12:
				setChecker(line,column,mine,table12) ;
    16d4:	2e eb       	ldi	r18, 0xBE	; 190
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	4d 2f       	mov	r20, r29
    16da:	63 e0       	ldi	r22, 0x03	; 3
    16dc:	8c 2f       	mov	r24, r28
    16de:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table12) ;
    16e2:	0e eb       	ldi	r16, 0xBE	; 190
    16e4:	10 e0       	ldi	r17, 0x00	; 0
    16e6:	1d c0       	rjmp	.+58     	; 0x1722 <Tactics+0x44e>
					myColumn = column ;
				}
				break;
				
				case 13:
				setChecker(line,column,mine,table13) ;
    16e8:	2e ed       	ldi	r18, 0xDE	; 222
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	4d 2f       	mov	r20, r29
    16ee:	63 e0       	ldi	r22, 0x03	; 3
    16f0:	8c 2f       	mov	r24, r28
    16f2:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table13) ;
    16f6:	0e ed       	ldi	r16, 0xDE	; 222
    16f8:	10 e0       	ldi	r17, 0x00	; 0
    16fa:	13 c0       	rjmp	.+38     	; 0x1722 <Tactics+0x44e>
					myColumn = column ;
				}
				break;
				
				case 14:
				setChecker(line,column,mine,table14) ;
    16fc:	2e e2       	ldi	r18, 0x2E	; 46
    16fe:	31 e0       	ldi	r19, 0x01	; 1
    1700:	4d 2f       	mov	r20, r29
    1702:	63 e0       	ldi	r22, 0x03	; 3
    1704:	8c 2f       	mov	r24, r28
    1706:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table14) ;
    170a:	0e e2       	ldi	r16, 0x2E	; 46
    170c:	11 e0       	ldi	r17, 0x01	; 1
    170e:	09 c0       	rjmp	.+18     	; 0x1722 <Tactics+0x44e>
				}
				break;
				
				
				default:
				setChecker(line,column,mine,table9) ;
    1710:	2e e4       	ldi	r18, 0x4E	; 78
    1712:	31 e0       	ldi	r19, 0x01	; 1
    1714:	4d 2f       	mov	r20, r29
    1716:	63 e0       	ldi	r22, 0x03	; 3
    1718:	8c 2f       	mov	r24, r28
    171a:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
    171e:	0e e4       	ldi	r16, 0x4E	; 78
    1720:	11 e0       	ldi	r17, 0x01	; 1
    1722:	2d 2f       	mov	r18, r29
    1724:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    1728:	63 e0       	ldi	r22, 0x03	; 3
    172a:	8c 2f       	mov	r24, r28
    172c:	0e 94 1f 06 	call	0xc3e	; 0xc3e <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table9) ;
    1730:	b8 01       	movw	r22, r16
    1732:	8d 2f       	mov	r24, r29
    1734:	0e 94 36 09 	call	0x126c	; 0x126c <scanCopyChessBoard>
				if (max < checkers)
    1738:	f8 16       	cp	r15, r24
    173a:	30 f4       	brcc	.+12     	; 0x1748 <Tactics+0x474>
				{
					max = checkers ;
					myLine = line ;
    173c:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <myLine>
					myColumn = column ;
    1740:	93 e0       	ldi	r25, 0x03	; 3
    1742:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
    1746:	f8 2e       	mov	r15, r24
		}
		
		/* Fourth valid move in this line */
		temp = buffer & 0b00001000 ;
		temp = (temp >> 3) ;
		if (temp == 1)
    1748:	d3 fe       	sbrs	r13, 3
    174a:	ab c0       	rjmp	.+342    	; 0x18a2 <Tactics+0x5ce>
		{
			column = 4 ;
			count++ ;
    174c:	e3 94       	inc	r14
			switch(count)
    174e:	8e 2d       	mov	r24, r14
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	fc 01       	movw	r30, r24
    1754:	31 97       	sbiw	r30, 0x01	; 1
    1756:	ee 30       	cpi	r30, 0x0E	; 14
    1758:	f1 05       	cpc	r31, r1
    175a:	08 f0       	brcs	.+2      	; 0x175e <Tactics+0x48a>
    175c:	86 c0       	rjmp	.+268    	; 0x186a <Tactics+0x596>
    175e:	ec 5a       	subi	r30, 0xAC	; 172
    1760:	ff 4f       	sbci	r31, 0xFF	; 255
    1762:	0c 94 d9 10 	jmp	0x21b2	; 0x21b2 <__tablejump2__>
			{
				case 1:
				setChecker(line,column,mine,table1) ;
    1766:	2e ee       	ldi	r18, 0xEE	; 238
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	4d 2f       	mov	r20, r29
    176c:	64 e0       	ldi	r22, 0x04	; 4
    176e:	8c 2f       	mov	r24, r28
    1770:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table1) ;
    1774:	0e ee       	ldi	r16, 0xEE	; 238
    1776:	10 e0       	ldi	r17, 0x00	; 0
    1778:	81 c0       	rjmp	.+258    	; 0x187c <Tactics+0x5a8>
					myColumn = column ;
				}
				break;
				
				case 2:
				setChecker(line,column,mine,table2) ;
    177a:	2e e8       	ldi	r18, 0x8E	; 142
    177c:	31 e0       	ldi	r19, 0x01	; 1
    177e:	4d 2f       	mov	r20, r29
    1780:	64 e0       	ldi	r22, 0x04	; 4
    1782:	8c 2f       	mov	r24, r28
    1784:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table2) ;
    1788:	0e e8       	ldi	r16, 0x8E	; 142
    178a:	11 e0       	ldi	r17, 0x01	; 1
    178c:	77 c0       	rjmp	.+238    	; 0x187c <Tactics+0x5a8>
					myColumn = column ;
				}
				break;
				
				case 3:
				setChecker(line,column,mine,table3) ;
    178e:	2e e7       	ldi	r18, 0x7E	; 126
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	4d 2f       	mov	r20, r29
    1794:	64 e0       	ldi	r22, 0x04	; 4
    1796:	8c 2f       	mov	r24, r28
    1798:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table3) ;
    179c:	0e e7       	ldi	r16, 0x7E	; 126
    179e:	10 e0       	ldi	r17, 0x00	; 0
    17a0:	6d c0       	rjmp	.+218    	; 0x187c <Tactics+0x5a8>
					myColumn = column ;
				}
				break;
				
				case 4:
				setChecker(line,column,mine,table4) ;
    17a2:	2e e5       	ldi	r18, 0x5E	; 94
    17a4:	31 e0       	ldi	r19, 0x01	; 1
    17a6:	4d 2f       	mov	r20, r29
    17a8:	64 e0       	ldi	r22, 0x04	; 4
    17aa:	8c 2f       	mov	r24, r28
    17ac:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table4) ;
    17b0:	0e e5       	ldi	r16, 0x5E	; 94
    17b2:	11 e0       	ldi	r17, 0x01	; 1
    17b4:	63 c0       	rjmp	.+198    	; 0x187c <Tactics+0x5a8>
					myColumn = column ;
				}
				break;
				
				case 5:
				setChecker(line,column,mine,table5) ;
    17b6:	2e e6       	ldi	r18, 0x6E	; 110
    17b8:	31 e0       	ldi	r19, 0x01	; 1
    17ba:	4d 2f       	mov	r20, r29
    17bc:	64 e0       	ldi	r22, 0x04	; 4
    17be:	8c 2f       	mov	r24, r28
    17c0:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table5) ;
    17c4:	0e e6       	ldi	r16, 0x6E	; 110
    17c6:	11 e0       	ldi	r17, 0x01	; 1
    17c8:	59 c0       	rjmp	.+178    	; 0x187c <Tactics+0x5a8>
					myColumn = column ;
				}
				break;
				
				case 6:
				setChecker(line,column,mine,table6) ;
    17ca:	26 e9       	ldi	r18, 0x96	; 150
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	4d 2f       	mov	r20, r29
    17d0:	64 e0       	ldi	r22, 0x04	; 4
    17d2:	8c 2f       	mov	r24, r28
    17d4:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table6) ;
    17d8:	06 e9       	ldi	r16, 0x96	; 150
    17da:	10 e0       	ldi	r17, 0x00	; 0
    17dc:	4f c0       	rjmp	.+158    	; 0x187c <Tactics+0x5a8>
					myColumn = column ;
				}
				break;
				
				case 7:
				setChecker(line,column,mine,table7) ;
    17de:	2e ef       	ldi	r18, 0xFE	; 254
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	4d 2f       	mov	r20, r29
    17e4:	64 e0       	ldi	r22, 0x04	; 4
    17e6:	8c 2f       	mov	r24, r28
    17e8:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table7) ;
    17ec:	0e ef       	ldi	r16, 0xFE	; 254
    17ee:	10 e0       	ldi	r17, 0x00	; 0
    17f0:	45 c0       	rjmp	.+138    	; 0x187c <Tactics+0x5a8>
					myColumn = column ;
				}
				break;
				
				case 8:
				setChecker(line,column,mine,table8) ;
    17f2:	26 ea       	ldi	r18, 0xA6	; 166
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	4d 2f       	mov	r20, r29
    17f8:	64 e0       	ldi	r22, 0x04	; 4
    17fa:	8c 2f       	mov	r24, r28
    17fc:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table8) ;
    1800:	06 ea       	ldi	r16, 0xA6	; 166
    1802:	10 e0       	ldi	r17, 0x00	; 0
    1804:	3b c0       	rjmp	.+118    	; 0x187c <Tactics+0x5a8>
					myColumn = column ;
				}
				break;
				
				case 10:
				setChecker(line,column,mine,table10) ;
    1806:	2e e9       	ldi	r18, 0x9E	; 158
    1808:	31 e0       	ldi	r19, 0x01	; 1
    180a:	4d 2f       	mov	r20, r29
    180c:	64 e0       	ldi	r22, 0x04	; 4
    180e:	8c 2f       	mov	r24, r28
    1810:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table10) ;
    1814:	0e e9       	ldi	r16, 0x9E	; 158
    1816:	11 e0       	ldi	r17, 0x01	; 1
    1818:	31 c0       	rjmp	.+98     	; 0x187c <Tactics+0x5a8>
					myColumn = column ;
				}
				break;
				
				case 11:
				setChecker(line,column,mine,table11) ;
    181a:	2e e3       	ldi	r18, 0x3E	; 62
    181c:	31 e0       	ldi	r19, 0x01	; 1
    181e:	4d 2f       	mov	r20, r29
    1820:	64 e0       	ldi	r22, 0x04	; 4
    1822:	8c 2f       	mov	r24, r28
    1824:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table11) ;
    1828:	0e e3       	ldi	r16, 0x3E	; 62
    182a:	11 e0       	ldi	r17, 0x01	; 1
    182c:	27 c0       	rjmp	.+78     	; 0x187c <Tactics+0x5a8>
					myColumn = column ;
				}
				break;
				
				case 12:
				setChecker(line,column,mine,table12) ;
    182e:	2e eb       	ldi	r18, 0xBE	; 190
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	4d 2f       	mov	r20, r29
    1834:	64 e0       	ldi	r22, 0x04	; 4
    1836:	8c 2f       	mov	r24, r28
    1838:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table12) ;
    183c:	0e eb       	ldi	r16, 0xBE	; 190
    183e:	10 e0       	ldi	r17, 0x00	; 0
    1840:	1d c0       	rjmp	.+58     	; 0x187c <Tactics+0x5a8>
					myColumn = column ;
				}
				break;
				
				case 13:
				setChecker(line,column,mine,table13) ;
    1842:	2e ed       	ldi	r18, 0xDE	; 222
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	4d 2f       	mov	r20, r29
    1848:	64 e0       	ldi	r22, 0x04	; 4
    184a:	8c 2f       	mov	r24, r28
    184c:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table13) ;
    1850:	0e ed       	ldi	r16, 0xDE	; 222
    1852:	10 e0       	ldi	r17, 0x00	; 0
    1854:	13 c0       	rjmp	.+38     	; 0x187c <Tactics+0x5a8>
					myColumn = column ;
				}
				break;
				
				case 14:
				setChecker(line,column,mine,table14) ;
    1856:	2e e2       	ldi	r18, 0x2E	; 46
    1858:	31 e0       	ldi	r19, 0x01	; 1
    185a:	4d 2f       	mov	r20, r29
    185c:	64 e0       	ldi	r22, 0x04	; 4
    185e:	8c 2f       	mov	r24, r28
    1860:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table14) ;
    1864:	0e e2       	ldi	r16, 0x2E	; 46
    1866:	11 e0       	ldi	r17, 0x01	; 1
    1868:	09 c0       	rjmp	.+18     	; 0x187c <Tactics+0x5a8>
					myColumn = column ;
				}
				break;
			
				default:
				setChecker(line,column,mine,table9) ;
    186a:	2e e4       	ldi	r18, 0x4E	; 78
    186c:	31 e0       	ldi	r19, 0x01	; 1
    186e:	4d 2f       	mov	r20, r29
    1870:	64 e0       	ldi	r22, 0x04	; 4
    1872:	8c 2f       	mov	r24, r28
    1874:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
    1878:	0e e4       	ldi	r16, 0x4E	; 78
    187a:	11 e0       	ldi	r17, 0x01	; 1
    187c:	2d 2f       	mov	r18, r29
    187e:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    1882:	64 e0       	ldi	r22, 0x04	; 4
    1884:	8c 2f       	mov	r24, r28
    1886:	0e 94 1f 06 	call	0xc3e	; 0xc3e <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table9) ;
    188a:	b8 01       	movw	r22, r16
    188c:	8d 2f       	mov	r24, r29
    188e:	0e 94 36 09 	call	0x126c	; 0x126c <scanCopyChessBoard>
				if (max < checkers)
    1892:	f8 16       	cp	r15, r24
    1894:	30 f4       	brcc	.+12     	; 0x18a2 <Tactics+0x5ce>
				{
					max = checkers ;
					myLine = line ;
    1896:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <myLine>
					myColumn = column ;
    189a:	94 e0       	ldi	r25, 0x04	; 4
    189c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
    18a0:	f8 2e       	mov	r15, r24
		}
		
		/* Fifth valid move in this line */
		temp = buffer & 0b00010000 ;
		temp = (temp >> 4) ;
		if (temp == 1)
    18a2:	d4 fe       	sbrs	r13, 4
    18a4:	ab c0       	rjmp	.+342    	; 0x19fc <Tactics+0x728>
		{
			column = 5 ;
			count++ ;
    18a6:	e3 94       	inc	r14
			switch(count)
    18a8:	8e 2d       	mov	r24, r14
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	fc 01       	movw	r30, r24
    18ae:	31 97       	sbiw	r30, 0x01	; 1
    18b0:	ee 30       	cpi	r30, 0x0E	; 14
    18b2:	f1 05       	cpc	r31, r1
    18b4:	08 f0       	brcs	.+2      	; 0x18b8 <Tactics+0x5e4>
    18b6:	86 c0       	rjmp	.+268    	; 0x19c4 <Tactics+0x6f0>
    18b8:	ee 59       	subi	r30, 0x9E	; 158
    18ba:	ff 4f       	sbci	r31, 0xFF	; 255
    18bc:	0c 94 d9 10 	jmp	0x21b2	; 0x21b2 <__tablejump2__>
			{
				case 1:
				setChecker(line,column,mine,table1) ;
    18c0:	2e ee       	ldi	r18, 0xEE	; 238
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	4d 2f       	mov	r20, r29
    18c6:	65 e0       	ldi	r22, 0x05	; 5
    18c8:	8c 2f       	mov	r24, r28
    18ca:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table1) ;
    18ce:	0e ee       	ldi	r16, 0xEE	; 238
    18d0:	10 e0       	ldi	r17, 0x00	; 0
    18d2:	81 c0       	rjmp	.+258    	; 0x19d6 <Tactics+0x702>
					myColumn = column ;
				}
				break;
				
				case 2:
				setChecker(line,column,mine,table2) ;
    18d4:	2e e8       	ldi	r18, 0x8E	; 142
    18d6:	31 e0       	ldi	r19, 0x01	; 1
    18d8:	4d 2f       	mov	r20, r29
    18da:	65 e0       	ldi	r22, 0x05	; 5
    18dc:	8c 2f       	mov	r24, r28
    18de:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table2) ;
    18e2:	0e e8       	ldi	r16, 0x8E	; 142
    18e4:	11 e0       	ldi	r17, 0x01	; 1
    18e6:	77 c0       	rjmp	.+238    	; 0x19d6 <Tactics+0x702>
					myColumn = column ;
				}
				break;
				
				case 3:
				setChecker(line,column,mine,table3) ;
    18e8:	2e e7       	ldi	r18, 0x7E	; 126
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	4d 2f       	mov	r20, r29
    18ee:	65 e0       	ldi	r22, 0x05	; 5
    18f0:	8c 2f       	mov	r24, r28
    18f2:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table3) ;
    18f6:	0e e7       	ldi	r16, 0x7E	; 126
    18f8:	10 e0       	ldi	r17, 0x00	; 0
    18fa:	6d c0       	rjmp	.+218    	; 0x19d6 <Tactics+0x702>
					myColumn = column ;
				}
				break;
				
				case 4:
				setChecker(line,column,mine,table4) ;
    18fc:	2e e5       	ldi	r18, 0x5E	; 94
    18fe:	31 e0       	ldi	r19, 0x01	; 1
    1900:	4d 2f       	mov	r20, r29
    1902:	65 e0       	ldi	r22, 0x05	; 5
    1904:	8c 2f       	mov	r24, r28
    1906:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table4) ;
    190a:	0e e5       	ldi	r16, 0x5E	; 94
    190c:	11 e0       	ldi	r17, 0x01	; 1
    190e:	63 c0       	rjmp	.+198    	; 0x19d6 <Tactics+0x702>
					myColumn = column ;
				}
				break;
				
				case 5:
				setChecker(line,column,mine,table5) ;
    1910:	2e e6       	ldi	r18, 0x6E	; 110
    1912:	31 e0       	ldi	r19, 0x01	; 1
    1914:	4d 2f       	mov	r20, r29
    1916:	65 e0       	ldi	r22, 0x05	; 5
    1918:	8c 2f       	mov	r24, r28
    191a:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table5) ;
    191e:	0e e6       	ldi	r16, 0x6E	; 110
    1920:	11 e0       	ldi	r17, 0x01	; 1
    1922:	59 c0       	rjmp	.+178    	; 0x19d6 <Tactics+0x702>
					myColumn = column ;
				}
				break;
				
				case 6:
				setChecker(line,column,mine,table6) ;
    1924:	26 e9       	ldi	r18, 0x96	; 150
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	4d 2f       	mov	r20, r29
    192a:	65 e0       	ldi	r22, 0x05	; 5
    192c:	8c 2f       	mov	r24, r28
    192e:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table6) ;
    1932:	06 e9       	ldi	r16, 0x96	; 150
    1934:	10 e0       	ldi	r17, 0x00	; 0
    1936:	4f c0       	rjmp	.+158    	; 0x19d6 <Tactics+0x702>
					myColumn = column ;
				}
				break;
				
				case 7:
				setChecker(line,column,mine,table7) ;
    1938:	2e ef       	ldi	r18, 0xFE	; 254
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	4d 2f       	mov	r20, r29
    193e:	65 e0       	ldi	r22, 0x05	; 5
    1940:	8c 2f       	mov	r24, r28
    1942:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table7) ;
    1946:	0e ef       	ldi	r16, 0xFE	; 254
    1948:	10 e0       	ldi	r17, 0x00	; 0
    194a:	45 c0       	rjmp	.+138    	; 0x19d6 <Tactics+0x702>
					myColumn = column ;
				}
				break;
				
				case 8:
				setChecker(line,column,mine,table8) ;
    194c:	26 ea       	ldi	r18, 0xA6	; 166
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	4d 2f       	mov	r20, r29
    1952:	65 e0       	ldi	r22, 0x05	; 5
    1954:	8c 2f       	mov	r24, r28
    1956:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table8) ;
    195a:	06 ea       	ldi	r16, 0xA6	; 166
    195c:	10 e0       	ldi	r17, 0x00	; 0
    195e:	3b c0       	rjmp	.+118    	; 0x19d6 <Tactics+0x702>
					myColumn = column ;
				}
				break;
				
				case 10:
				setChecker(line,column,mine,table10) ;
    1960:	2e e9       	ldi	r18, 0x9E	; 158
    1962:	31 e0       	ldi	r19, 0x01	; 1
    1964:	4d 2f       	mov	r20, r29
    1966:	65 e0       	ldi	r22, 0x05	; 5
    1968:	8c 2f       	mov	r24, r28
    196a:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table10) ;
    196e:	0e e9       	ldi	r16, 0x9E	; 158
    1970:	11 e0       	ldi	r17, 0x01	; 1
    1972:	31 c0       	rjmp	.+98     	; 0x19d6 <Tactics+0x702>
					myColumn = column ;
				}
				break;
				
				case 11:
				setChecker(line,column,mine,table11) ;
    1974:	2e e3       	ldi	r18, 0x3E	; 62
    1976:	31 e0       	ldi	r19, 0x01	; 1
    1978:	4d 2f       	mov	r20, r29
    197a:	65 e0       	ldi	r22, 0x05	; 5
    197c:	8c 2f       	mov	r24, r28
    197e:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table11) ;
    1982:	0e e3       	ldi	r16, 0x3E	; 62
    1984:	11 e0       	ldi	r17, 0x01	; 1
    1986:	27 c0       	rjmp	.+78     	; 0x19d6 <Tactics+0x702>
					myColumn = column ;
				}
				break;
				
				case 12:
				setChecker(line,column,mine,table12) ;
    1988:	2e eb       	ldi	r18, 0xBE	; 190
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	4d 2f       	mov	r20, r29
    198e:	65 e0       	ldi	r22, 0x05	; 5
    1990:	8c 2f       	mov	r24, r28
    1992:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table12) ;
    1996:	0e eb       	ldi	r16, 0xBE	; 190
    1998:	10 e0       	ldi	r17, 0x00	; 0
    199a:	1d c0       	rjmp	.+58     	; 0x19d6 <Tactics+0x702>
					myColumn = column ;
				}
				break;
				
				case 13:
				setChecker(line,column,mine,table13) ;
    199c:	2e ed       	ldi	r18, 0xDE	; 222
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	4d 2f       	mov	r20, r29
    19a2:	65 e0       	ldi	r22, 0x05	; 5
    19a4:	8c 2f       	mov	r24, r28
    19a6:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table13) ;
    19aa:	0e ed       	ldi	r16, 0xDE	; 222
    19ac:	10 e0       	ldi	r17, 0x00	; 0
    19ae:	13 c0       	rjmp	.+38     	; 0x19d6 <Tactics+0x702>
					myColumn = column ;
				}
				break;
				
				case 14:
				setChecker(line,column,mine,table14) ;
    19b0:	2e e2       	ldi	r18, 0x2E	; 46
    19b2:	31 e0       	ldi	r19, 0x01	; 1
    19b4:	4d 2f       	mov	r20, r29
    19b6:	65 e0       	ldi	r22, 0x05	; 5
    19b8:	8c 2f       	mov	r24, r28
    19ba:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table14) ;
    19be:	0e e2       	ldi	r16, 0x2E	; 46
    19c0:	11 e0       	ldi	r17, 0x01	; 1
    19c2:	09 c0       	rjmp	.+18     	; 0x19d6 <Tactics+0x702>
				}
				break;
				
				
				default:
				setChecker(line,column,mine,table9) ;
    19c4:	2e e4       	ldi	r18, 0x4E	; 78
    19c6:	31 e0       	ldi	r19, 0x01	; 1
    19c8:	4d 2f       	mov	r20, r29
    19ca:	65 e0       	ldi	r22, 0x05	; 5
    19cc:	8c 2f       	mov	r24, r28
    19ce:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
    19d2:	0e e4       	ldi	r16, 0x4E	; 78
    19d4:	11 e0       	ldi	r17, 0x01	; 1
    19d6:	2d 2f       	mov	r18, r29
    19d8:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    19dc:	65 e0       	ldi	r22, 0x05	; 5
    19de:	8c 2f       	mov	r24, r28
    19e0:	0e 94 1f 06 	call	0xc3e	; 0xc3e <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table9) ;
    19e4:	b8 01       	movw	r22, r16
    19e6:	8d 2f       	mov	r24, r29
    19e8:	0e 94 36 09 	call	0x126c	; 0x126c <scanCopyChessBoard>
				if (max < checkers)
    19ec:	f8 16       	cp	r15, r24
    19ee:	30 f4       	brcc	.+12     	; 0x19fc <Tactics+0x728>
				{
					max = checkers ;
					myLine = line ;
    19f0:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <myLine>
					myColumn = column ;
    19f4:	95 e0       	ldi	r25, 0x05	; 5
    19f6:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
    19fa:	f8 2e       	mov	r15, r24
		}
		
		/* Sixth valid move in this line */
		temp = buffer & 0b00100000 ;
		temp = (temp >> 5) ;
		if (temp == 1)
    19fc:	d5 fe       	sbrs	r13, 5
    19fe:	ab c0       	rjmp	.+342    	; 0x1b56 <Tactics+0x882>
		{
			column = 6 ;
			count++ ;
    1a00:	e3 94       	inc	r14
			switch(count)
    1a02:	8e 2d       	mov	r24, r14
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	fc 01       	movw	r30, r24
    1a08:	31 97       	sbiw	r30, 0x01	; 1
    1a0a:	ee 30       	cpi	r30, 0x0E	; 14
    1a0c:	f1 05       	cpc	r31, r1
    1a0e:	08 f0       	brcs	.+2      	; 0x1a12 <Tactics+0x73e>
    1a10:	86 c0       	rjmp	.+268    	; 0x1b1e <Tactics+0x84a>
    1a12:	e0 59       	subi	r30, 0x90	; 144
    1a14:	ff 4f       	sbci	r31, 0xFF	; 255
    1a16:	0c 94 d9 10 	jmp	0x21b2	; 0x21b2 <__tablejump2__>
			{
				case 1:
				setChecker(line,column,mine,table1) ;
    1a1a:	2e ee       	ldi	r18, 0xEE	; 238
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	4d 2f       	mov	r20, r29
    1a20:	66 e0       	ldi	r22, 0x06	; 6
    1a22:	8c 2f       	mov	r24, r28
    1a24:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table1) ;
    1a28:	0e ee       	ldi	r16, 0xEE	; 238
    1a2a:	10 e0       	ldi	r17, 0x00	; 0
    1a2c:	81 c0       	rjmp	.+258    	; 0x1b30 <Tactics+0x85c>
					myColumn = column ;
				}
				break;
				
				case 2:
				setChecker(line,column,mine,table2) ;
    1a2e:	2e e8       	ldi	r18, 0x8E	; 142
    1a30:	31 e0       	ldi	r19, 0x01	; 1
    1a32:	4d 2f       	mov	r20, r29
    1a34:	66 e0       	ldi	r22, 0x06	; 6
    1a36:	8c 2f       	mov	r24, r28
    1a38:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table2) ;
    1a3c:	0e e8       	ldi	r16, 0x8E	; 142
    1a3e:	11 e0       	ldi	r17, 0x01	; 1
    1a40:	77 c0       	rjmp	.+238    	; 0x1b30 <Tactics+0x85c>
					myColumn = column ;
				}
				break;
				
				case 3:
				setChecker(line,column,mine,table3) ;
    1a42:	2e e7       	ldi	r18, 0x7E	; 126
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	4d 2f       	mov	r20, r29
    1a48:	66 e0       	ldi	r22, 0x06	; 6
    1a4a:	8c 2f       	mov	r24, r28
    1a4c:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table3) ;
    1a50:	0e e7       	ldi	r16, 0x7E	; 126
    1a52:	10 e0       	ldi	r17, 0x00	; 0
    1a54:	6d c0       	rjmp	.+218    	; 0x1b30 <Tactics+0x85c>
					myColumn = column ;
				}
				break;
				
				case 4:
				setChecker(line,column,mine,table4) ;
    1a56:	2e e5       	ldi	r18, 0x5E	; 94
    1a58:	31 e0       	ldi	r19, 0x01	; 1
    1a5a:	4d 2f       	mov	r20, r29
    1a5c:	66 e0       	ldi	r22, 0x06	; 6
    1a5e:	8c 2f       	mov	r24, r28
    1a60:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table4) ;
    1a64:	0e e5       	ldi	r16, 0x5E	; 94
    1a66:	11 e0       	ldi	r17, 0x01	; 1
    1a68:	63 c0       	rjmp	.+198    	; 0x1b30 <Tactics+0x85c>
					myColumn = column ;
				}
				break;
				
				case 5:
				setChecker(line,column,mine,table5) ;
    1a6a:	2e e6       	ldi	r18, 0x6E	; 110
    1a6c:	31 e0       	ldi	r19, 0x01	; 1
    1a6e:	4d 2f       	mov	r20, r29
    1a70:	66 e0       	ldi	r22, 0x06	; 6
    1a72:	8c 2f       	mov	r24, r28
    1a74:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table5) ;
    1a78:	0e e6       	ldi	r16, 0x6E	; 110
    1a7a:	11 e0       	ldi	r17, 0x01	; 1
    1a7c:	59 c0       	rjmp	.+178    	; 0x1b30 <Tactics+0x85c>
					myColumn = column ;
				}
				break;
				
				case 6:
				setChecker(line,column,mine,table6) ;
    1a7e:	26 e9       	ldi	r18, 0x96	; 150
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	4d 2f       	mov	r20, r29
    1a84:	66 e0       	ldi	r22, 0x06	; 6
    1a86:	8c 2f       	mov	r24, r28
    1a88:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table6) ;
    1a8c:	06 e9       	ldi	r16, 0x96	; 150
    1a8e:	10 e0       	ldi	r17, 0x00	; 0
    1a90:	4f c0       	rjmp	.+158    	; 0x1b30 <Tactics+0x85c>
					myColumn = column ;
				}
				break;
				
				case 7:
				setChecker(line,column,mine,table7) ;
    1a92:	2e ef       	ldi	r18, 0xFE	; 254
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	4d 2f       	mov	r20, r29
    1a98:	66 e0       	ldi	r22, 0x06	; 6
    1a9a:	8c 2f       	mov	r24, r28
    1a9c:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table7) ;
    1aa0:	0e ef       	ldi	r16, 0xFE	; 254
    1aa2:	10 e0       	ldi	r17, 0x00	; 0
    1aa4:	45 c0       	rjmp	.+138    	; 0x1b30 <Tactics+0x85c>
					myColumn = column ;
				}
				break;
				
				case 8:
				setChecker(line,column,mine,table8) ;
    1aa6:	26 ea       	ldi	r18, 0xA6	; 166
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	4d 2f       	mov	r20, r29
    1aac:	66 e0       	ldi	r22, 0x06	; 6
    1aae:	8c 2f       	mov	r24, r28
    1ab0:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table8) ;
    1ab4:	06 ea       	ldi	r16, 0xA6	; 166
    1ab6:	10 e0       	ldi	r17, 0x00	; 0
    1ab8:	3b c0       	rjmp	.+118    	; 0x1b30 <Tactics+0x85c>
					myColumn = column ;
				}
				break;
				
				case 10:
				setChecker(line,column,mine,table10) ;
    1aba:	2e e9       	ldi	r18, 0x9E	; 158
    1abc:	31 e0       	ldi	r19, 0x01	; 1
    1abe:	4d 2f       	mov	r20, r29
    1ac0:	66 e0       	ldi	r22, 0x06	; 6
    1ac2:	8c 2f       	mov	r24, r28
    1ac4:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table10) ;
    1ac8:	0e e9       	ldi	r16, 0x9E	; 158
    1aca:	11 e0       	ldi	r17, 0x01	; 1
    1acc:	31 c0       	rjmp	.+98     	; 0x1b30 <Tactics+0x85c>
					myColumn = column ;
				}
				break;
				
				case 11:
				setChecker(line,column,mine,table11) ;
    1ace:	2e e3       	ldi	r18, 0x3E	; 62
    1ad0:	31 e0       	ldi	r19, 0x01	; 1
    1ad2:	4d 2f       	mov	r20, r29
    1ad4:	66 e0       	ldi	r22, 0x06	; 6
    1ad6:	8c 2f       	mov	r24, r28
    1ad8:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table11) ;
    1adc:	0e e3       	ldi	r16, 0x3E	; 62
    1ade:	11 e0       	ldi	r17, 0x01	; 1
    1ae0:	27 c0       	rjmp	.+78     	; 0x1b30 <Tactics+0x85c>
					myColumn = column ;
				}
				break;
				
				case 12:
				setChecker(line,column,mine,table12) ;
    1ae2:	2e eb       	ldi	r18, 0xBE	; 190
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	4d 2f       	mov	r20, r29
    1ae8:	66 e0       	ldi	r22, 0x06	; 6
    1aea:	8c 2f       	mov	r24, r28
    1aec:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table12) ;
    1af0:	0e eb       	ldi	r16, 0xBE	; 190
    1af2:	10 e0       	ldi	r17, 0x00	; 0
    1af4:	1d c0       	rjmp	.+58     	; 0x1b30 <Tactics+0x85c>
					myColumn = column ;
				}
				break;
				
				case 13:
				setChecker(line,column,mine,table13) ;
    1af6:	2e ed       	ldi	r18, 0xDE	; 222
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	4d 2f       	mov	r20, r29
    1afc:	66 e0       	ldi	r22, 0x06	; 6
    1afe:	8c 2f       	mov	r24, r28
    1b00:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table13) ;
    1b04:	0e ed       	ldi	r16, 0xDE	; 222
    1b06:	10 e0       	ldi	r17, 0x00	; 0
    1b08:	13 c0       	rjmp	.+38     	; 0x1b30 <Tactics+0x85c>
					myColumn = column ;
				}
				break;
				
				case 14:
				setChecker(line,column,mine,table14) ;
    1b0a:	2e e2       	ldi	r18, 0x2E	; 46
    1b0c:	31 e0       	ldi	r19, 0x01	; 1
    1b0e:	4d 2f       	mov	r20, r29
    1b10:	66 e0       	ldi	r22, 0x06	; 6
    1b12:	8c 2f       	mov	r24, r28
    1b14:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table14) ;
    1b18:	0e e2       	ldi	r16, 0x2E	; 46
    1b1a:	11 e0       	ldi	r17, 0x01	; 1
    1b1c:	09 c0       	rjmp	.+18     	; 0x1b30 <Tactics+0x85c>
				}
				break;
				
			
				default:
				setChecker(line,column,mine,table9) ;
    1b1e:	2e e4       	ldi	r18, 0x4E	; 78
    1b20:	31 e0       	ldi	r19, 0x01	; 1
    1b22:	4d 2f       	mov	r20, r29
    1b24:	66 e0       	ldi	r22, 0x06	; 6
    1b26:	8c 2f       	mov	r24, r28
    1b28:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
    1b2c:	0e e4       	ldi	r16, 0x4E	; 78
    1b2e:	11 e0       	ldi	r17, 0x01	; 1
    1b30:	2d 2f       	mov	r18, r29
    1b32:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    1b36:	66 e0       	ldi	r22, 0x06	; 6
    1b38:	8c 2f       	mov	r24, r28
    1b3a:	0e 94 1f 06 	call	0xc3e	; 0xc3e <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table9) ;
    1b3e:	b8 01       	movw	r22, r16
    1b40:	8d 2f       	mov	r24, r29
    1b42:	0e 94 36 09 	call	0x126c	; 0x126c <scanCopyChessBoard>
				if (max < checkers)
    1b46:	f8 16       	cp	r15, r24
    1b48:	30 f4       	brcc	.+12     	; 0x1b56 <Tactics+0x882>
				{
					max = checkers ;
					myLine = line ;
    1b4a:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <myLine>
					myColumn = column ;
    1b4e:	96 e0       	ldi	r25, 0x06	; 6
    1b50:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
    1b54:	f8 2e       	mov	r15, r24
		}
		
		/* Seventh valid move in this line */
		temp = buffer & 0b01000000 ;
		temp = (temp >> 6) ;
		if (temp == 1)
    1b56:	d6 fe       	sbrs	r13, 6
    1b58:	ab c0       	rjmp	.+342    	; 0x1cb0 <Tactics+0x9dc>
		{
			column = 7 ;
			count++ ;
    1b5a:	e3 94       	inc	r14
			switch(count)
    1b5c:	8e 2d       	mov	r24, r14
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	fc 01       	movw	r30, r24
    1b62:	31 97       	sbiw	r30, 0x01	; 1
    1b64:	ee 30       	cpi	r30, 0x0E	; 14
    1b66:	f1 05       	cpc	r31, r1
    1b68:	08 f0       	brcs	.+2      	; 0x1b6c <Tactics+0x898>
    1b6a:	86 c0       	rjmp	.+268    	; 0x1c78 <Tactics+0x9a4>
    1b6c:	e2 58       	subi	r30, 0x82	; 130
    1b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b70:	0c 94 d9 10 	jmp	0x21b2	; 0x21b2 <__tablejump2__>
			{
				case 1:
				setChecker(line,column,mine,table1) ;
    1b74:	2e ee       	ldi	r18, 0xEE	; 238
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	4d 2f       	mov	r20, r29
    1b7a:	67 e0       	ldi	r22, 0x07	; 7
    1b7c:	8c 2f       	mov	r24, r28
    1b7e:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table1) ;
    1b82:	0e ee       	ldi	r16, 0xEE	; 238
    1b84:	10 e0       	ldi	r17, 0x00	; 0
    1b86:	81 c0       	rjmp	.+258    	; 0x1c8a <Tactics+0x9b6>
					myColumn = column ;
				}
				break;
				
				case 2:
				setChecker(line,column,mine,table2) ;
    1b88:	2e e8       	ldi	r18, 0x8E	; 142
    1b8a:	31 e0       	ldi	r19, 0x01	; 1
    1b8c:	4d 2f       	mov	r20, r29
    1b8e:	67 e0       	ldi	r22, 0x07	; 7
    1b90:	8c 2f       	mov	r24, r28
    1b92:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table2) ;
    1b96:	0e e8       	ldi	r16, 0x8E	; 142
    1b98:	11 e0       	ldi	r17, 0x01	; 1
    1b9a:	77 c0       	rjmp	.+238    	; 0x1c8a <Tactics+0x9b6>
					myColumn = column ;
				}
				break;
				
				case 3:
				setChecker(line,column,mine,table3) ;
    1b9c:	2e e7       	ldi	r18, 0x7E	; 126
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	4d 2f       	mov	r20, r29
    1ba2:	67 e0       	ldi	r22, 0x07	; 7
    1ba4:	8c 2f       	mov	r24, r28
    1ba6:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table3) ;
    1baa:	0e e7       	ldi	r16, 0x7E	; 126
    1bac:	10 e0       	ldi	r17, 0x00	; 0
    1bae:	6d c0       	rjmp	.+218    	; 0x1c8a <Tactics+0x9b6>
					myColumn = column ;
				}
				break;
				
				case 4:
				setChecker(line,column,mine,table4) ;
    1bb0:	2e e5       	ldi	r18, 0x5E	; 94
    1bb2:	31 e0       	ldi	r19, 0x01	; 1
    1bb4:	4d 2f       	mov	r20, r29
    1bb6:	67 e0       	ldi	r22, 0x07	; 7
    1bb8:	8c 2f       	mov	r24, r28
    1bba:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table4) ;
    1bbe:	0e e5       	ldi	r16, 0x5E	; 94
    1bc0:	11 e0       	ldi	r17, 0x01	; 1
    1bc2:	63 c0       	rjmp	.+198    	; 0x1c8a <Tactics+0x9b6>
					myColumn = column ;
				}
				break;
				
				case 5:
				setChecker(line,column,mine,table5) ;
    1bc4:	2e e6       	ldi	r18, 0x6E	; 110
    1bc6:	31 e0       	ldi	r19, 0x01	; 1
    1bc8:	4d 2f       	mov	r20, r29
    1bca:	67 e0       	ldi	r22, 0x07	; 7
    1bcc:	8c 2f       	mov	r24, r28
    1bce:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table5) ;
    1bd2:	0e e6       	ldi	r16, 0x6E	; 110
    1bd4:	11 e0       	ldi	r17, 0x01	; 1
    1bd6:	59 c0       	rjmp	.+178    	; 0x1c8a <Tactics+0x9b6>
					myColumn = column ;
				}
				break;
				
				case 6:
				setChecker(line,column,mine,table6) ;
    1bd8:	26 e9       	ldi	r18, 0x96	; 150
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	4d 2f       	mov	r20, r29
    1bde:	67 e0       	ldi	r22, 0x07	; 7
    1be0:	8c 2f       	mov	r24, r28
    1be2:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table6) ;
    1be6:	06 e9       	ldi	r16, 0x96	; 150
    1be8:	10 e0       	ldi	r17, 0x00	; 0
    1bea:	4f c0       	rjmp	.+158    	; 0x1c8a <Tactics+0x9b6>
					myColumn = column ;
				}
				break;
				
				case 7:
				setChecker(line,column,mine,table7) ;
    1bec:	2e ef       	ldi	r18, 0xFE	; 254
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	4d 2f       	mov	r20, r29
    1bf2:	67 e0       	ldi	r22, 0x07	; 7
    1bf4:	8c 2f       	mov	r24, r28
    1bf6:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table7) ;
    1bfa:	0e ef       	ldi	r16, 0xFE	; 254
    1bfc:	10 e0       	ldi	r17, 0x00	; 0
    1bfe:	45 c0       	rjmp	.+138    	; 0x1c8a <Tactics+0x9b6>
					myColumn = column ;
				}
				break;
				
				case 8:
				setChecker(line,column,mine,table8) ;
    1c00:	26 ea       	ldi	r18, 0xA6	; 166
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	4d 2f       	mov	r20, r29
    1c06:	67 e0       	ldi	r22, 0x07	; 7
    1c08:	8c 2f       	mov	r24, r28
    1c0a:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table8) ;
    1c0e:	06 ea       	ldi	r16, 0xA6	; 166
    1c10:	10 e0       	ldi	r17, 0x00	; 0
    1c12:	3b c0       	rjmp	.+118    	; 0x1c8a <Tactics+0x9b6>
					myColumn = column ;
				}
				break;
				
				case 10:
				setChecker(line,column,mine,table10) ;
    1c14:	2e e9       	ldi	r18, 0x9E	; 158
    1c16:	31 e0       	ldi	r19, 0x01	; 1
    1c18:	4d 2f       	mov	r20, r29
    1c1a:	67 e0       	ldi	r22, 0x07	; 7
    1c1c:	8c 2f       	mov	r24, r28
    1c1e:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table10) ;
    1c22:	0e e9       	ldi	r16, 0x9E	; 158
    1c24:	11 e0       	ldi	r17, 0x01	; 1
    1c26:	31 c0       	rjmp	.+98     	; 0x1c8a <Tactics+0x9b6>
					myColumn = column ;
				}
				break;
				
				case 11:
				setChecker(line,column,mine,table11) ;
    1c28:	2e e3       	ldi	r18, 0x3E	; 62
    1c2a:	31 e0       	ldi	r19, 0x01	; 1
    1c2c:	4d 2f       	mov	r20, r29
    1c2e:	67 e0       	ldi	r22, 0x07	; 7
    1c30:	8c 2f       	mov	r24, r28
    1c32:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table11) ;
    1c36:	0e e3       	ldi	r16, 0x3E	; 62
    1c38:	11 e0       	ldi	r17, 0x01	; 1
    1c3a:	27 c0       	rjmp	.+78     	; 0x1c8a <Tactics+0x9b6>
					myColumn = column ;
				}
				break;
				
				case 12:
				setChecker(line,column,mine,table12) ;
    1c3c:	2e eb       	ldi	r18, 0xBE	; 190
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	4d 2f       	mov	r20, r29
    1c42:	67 e0       	ldi	r22, 0x07	; 7
    1c44:	8c 2f       	mov	r24, r28
    1c46:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table12) ;
    1c4a:	0e eb       	ldi	r16, 0xBE	; 190
    1c4c:	10 e0       	ldi	r17, 0x00	; 0
    1c4e:	1d c0       	rjmp	.+58     	; 0x1c8a <Tactics+0x9b6>
					myColumn = column ;
				}
				break;
				
				case 13:
				setChecker(line,column,mine,table13) ;
    1c50:	2e ed       	ldi	r18, 0xDE	; 222
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	4d 2f       	mov	r20, r29
    1c56:	67 e0       	ldi	r22, 0x07	; 7
    1c58:	8c 2f       	mov	r24, r28
    1c5a:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table13) ;
    1c5e:	0e ed       	ldi	r16, 0xDE	; 222
    1c60:	10 e0       	ldi	r17, 0x00	; 0
    1c62:	13 c0       	rjmp	.+38     	; 0x1c8a <Tactics+0x9b6>
					myColumn = column ;
				}
				break;
				
				case 14:
				setChecker(line,column,mine,table14) ;
    1c64:	2e e2       	ldi	r18, 0x2E	; 46
    1c66:	31 e0       	ldi	r19, 0x01	; 1
    1c68:	4d 2f       	mov	r20, r29
    1c6a:	67 e0       	ldi	r22, 0x07	; 7
    1c6c:	8c 2f       	mov	r24, r28
    1c6e:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table14) ;
    1c72:	0e e2       	ldi	r16, 0x2E	; 46
    1c74:	11 e0       	ldi	r17, 0x01	; 1
    1c76:	09 c0       	rjmp	.+18     	; 0x1c8a <Tactics+0x9b6>
				}
				break;
				
				
				default:
				setChecker(line,column,mine,table9) ;
    1c78:	2e e4       	ldi	r18, 0x4E	; 78
    1c7a:	31 e0       	ldi	r19, 0x01	; 1
    1c7c:	4d 2f       	mov	r20, r29
    1c7e:	67 e0       	ldi	r22, 0x07	; 7
    1c80:	8c 2f       	mov	r24, r28
    1c82:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
    1c86:	0e e4       	ldi	r16, 0x4E	; 78
    1c88:	11 e0       	ldi	r17, 0x01	; 1
    1c8a:	2d 2f       	mov	r18, r29
    1c8c:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    1c90:	67 e0       	ldi	r22, 0x07	; 7
    1c92:	8c 2f       	mov	r24, r28
    1c94:	0e 94 1f 06 	call	0xc3e	; 0xc3e <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table9) ;
    1c98:	b8 01       	movw	r22, r16
    1c9a:	8d 2f       	mov	r24, r29
    1c9c:	0e 94 36 09 	call	0x126c	; 0x126c <scanCopyChessBoard>
				if (max < checkers)
    1ca0:	f8 16       	cp	r15, r24
    1ca2:	30 f4       	brcc	.+12     	; 0x1cb0 <Tactics+0x9dc>
				{
					max = checkers ;
					myLine = line ;
    1ca4:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <myLine>
					myColumn = column ;
    1ca8:	97 e0       	ldi	r25, 0x07	; 7
    1caa:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
    1cae:	f8 2e       	mov	r15, r24
		}
		
		/* Eighth valid move in this line */
		temp = buffer & 0b10000000 ;
		temp = (temp >> 7) ;
		if (temp == 1)
    1cb0:	d7 fe       	sbrs	r13, 7
    1cb2:	ab c0       	rjmp	.+342    	; 0x1e0a <Tactics+0xb36>
		{
			column = 8 ;
			count++ ;
    1cb4:	e3 94       	inc	r14
			switch(count)
    1cb6:	8e 2d       	mov	r24, r14
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	fc 01       	movw	r30, r24
    1cbc:	31 97       	sbiw	r30, 0x01	; 1
    1cbe:	ee 30       	cpi	r30, 0x0E	; 14
    1cc0:	f1 05       	cpc	r31, r1
    1cc2:	08 f0       	brcs	.+2      	; 0x1cc6 <Tactics+0x9f2>
    1cc4:	86 c0       	rjmp	.+268    	; 0x1dd2 <Tactics+0xafe>
    1cc6:	e4 57       	subi	r30, 0x74	; 116
    1cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cca:	0c 94 d9 10 	jmp	0x21b2	; 0x21b2 <__tablejump2__>
			{
				case 1:
				setChecker(line,column,mine,table1) ;
    1cce:	2e ee       	ldi	r18, 0xEE	; 238
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	4d 2f       	mov	r20, r29
    1cd4:	68 e0       	ldi	r22, 0x08	; 8
    1cd6:	8c 2f       	mov	r24, r28
    1cd8:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table1) ;
    1cdc:	0e ee       	ldi	r16, 0xEE	; 238
    1cde:	10 e0       	ldi	r17, 0x00	; 0
    1ce0:	81 c0       	rjmp	.+258    	; 0x1de4 <Tactics+0xb10>
					myColumn = column ;
				}
				break;
				
				case 2:
				setChecker(line,column,mine,table2) ;
    1ce2:	2e e8       	ldi	r18, 0x8E	; 142
    1ce4:	31 e0       	ldi	r19, 0x01	; 1
    1ce6:	4d 2f       	mov	r20, r29
    1ce8:	68 e0       	ldi	r22, 0x08	; 8
    1cea:	8c 2f       	mov	r24, r28
    1cec:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table2) ;
    1cf0:	0e e8       	ldi	r16, 0x8E	; 142
    1cf2:	11 e0       	ldi	r17, 0x01	; 1
    1cf4:	77 c0       	rjmp	.+238    	; 0x1de4 <Tactics+0xb10>
					myColumn = column ;
				}
				break;
				
				case 3:
				setChecker(line,column,mine,table3) ;
    1cf6:	2e e7       	ldi	r18, 0x7E	; 126
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	4d 2f       	mov	r20, r29
    1cfc:	68 e0       	ldi	r22, 0x08	; 8
    1cfe:	8c 2f       	mov	r24, r28
    1d00:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table3) ;
    1d04:	0e e7       	ldi	r16, 0x7E	; 126
    1d06:	10 e0       	ldi	r17, 0x00	; 0
    1d08:	6d c0       	rjmp	.+218    	; 0x1de4 <Tactics+0xb10>
					myColumn = column ;
				}
				break;
				
				case 4:
				setChecker(line,column,mine,table4) ;
    1d0a:	2e e5       	ldi	r18, 0x5E	; 94
    1d0c:	31 e0       	ldi	r19, 0x01	; 1
    1d0e:	4d 2f       	mov	r20, r29
    1d10:	68 e0       	ldi	r22, 0x08	; 8
    1d12:	8c 2f       	mov	r24, r28
    1d14:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table4) ;
    1d18:	0e e5       	ldi	r16, 0x5E	; 94
    1d1a:	11 e0       	ldi	r17, 0x01	; 1
    1d1c:	63 c0       	rjmp	.+198    	; 0x1de4 <Tactics+0xb10>
					myColumn = column ;
				}
				break;
				
				case 5:
				setChecker(line,column,mine,table5) ;
    1d1e:	2e e6       	ldi	r18, 0x6E	; 110
    1d20:	31 e0       	ldi	r19, 0x01	; 1
    1d22:	4d 2f       	mov	r20, r29
    1d24:	68 e0       	ldi	r22, 0x08	; 8
    1d26:	8c 2f       	mov	r24, r28
    1d28:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table5) ;
    1d2c:	0e e6       	ldi	r16, 0x6E	; 110
    1d2e:	11 e0       	ldi	r17, 0x01	; 1
    1d30:	59 c0       	rjmp	.+178    	; 0x1de4 <Tactics+0xb10>
					myColumn = column ;
				}
				break;
				
				case 6:
				setChecker(line,column,mine,table6) ;
    1d32:	26 e9       	ldi	r18, 0x96	; 150
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	4d 2f       	mov	r20, r29
    1d38:	68 e0       	ldi	r22, 0x08	; 8
    1d3a:	8c 2f       	mov	r24, r28
    1d3c:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table6) ;
    1d40:	06 e9       	ldi	r16, 0x96	; 150
    1d42:	10 e0       	ldi	r17, 0x00	; 0
    1d44:	4f c0       	rjmp	.+158    	; 0x1de4 <Tactics+0xb10>
					myColumn = column ;
				}
				break;
				
				case 7:
				setChecker(line,column,mine,table7) ;
    1d46:	2e ef       	ldi	r18, 0xFE	; 254
    1d48:	30 e0       	ldi	r19, 0x00	; 0
    1d4a:	4d 2f       	mov	r20, r29
    1d4c:	68 e0       	ldi	r22, 0x08	; 8
    1d4e:	8c 2f       	mov	r24, r28
    1d50:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table7) ;
    1d54:	0e ef       	ldi	r16, 0xFE	; 254
    1d56:	10 e0       	ldi	r17, 0x00	; 0
    1d58:	45 c0       	rjmp	.+138    	; 0x1de4 <Tactics+0xb10>
					myColumn = column ;
				}
				break;
				
				case 8:
				setChecker(line,column,mine,table8) ;
    1d5a:	26 ea       	ldi	r18, 0xA6	; 166
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	4d 2f       	mov	r20, r29
    1d60:	68 e0       	ldi	r22, 0x08	; 8
    1d62:	8c 2f       	mov	r24, r28
    1d64:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table8) ;
    1d68:	06 ea       	ldi	r16, 0xA6	; 166
    1d6a:	10 e0       	ldi	r17, 0x00	; 0
    1d6c:	3b c0       	rjmp	.+118    	; 0x1de4 <Tactics+0xb10>
					myColumn = column ;
				}
				break;
				
				case 10:
				setChecker(line,column,mine,table10) ;
    1d6e:	2e e9       	ldi	r18, 0x9E	; 158
    1d70:	31 e0       	ldi	r19, 0x01	; 1
    1d72:	4d 2f       	mov	r20, r29
    1d74:	68 e0       	ldi	r22, 0x08	; 8
    1d76:	8c 2f       	mov	r24, r28
    1d78:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table10) ;
    1d7c:	0e e9       	ldi	r16, 0x9E	; 158
    1d7e:	11 e0       	ldi	r17, 0x01	; 1
    1d80:	31 c0       	rjmp	.+98     	; 0x1de4 <Tactics+0xb10>
					myColumn = column ;
				}
				break;
				
				case 11:
				setChecker(line,column,mine,table11) ;
    1d82:	2e e3       	ldi	r18, 0x3E	; 62
    1d84:	31 e0       	ldi	r19, 0x01	; 1
    1d86:	4d 2f       	mov	r20, r29
    1d88:	68 e0       	ldi	r22, 0x08	; 8
    1d8a:	8c 2f       	mov	r24, r28
    1d8c:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table11) ;
    1d90:	0e e3       	ldi	r16, 0x3E	; 62
    1d92:	11 e0       	ldi	r17, 0x01	; 1
    1d94:	27 c0       	rjmp	.+78     	; 0x1de4 <Tactics+0xb10>
					myColumn = column ;
				}
				break;
				
				case 12:
				setChecker(line,column,mine,table12) ;
    1d96:	2e eb       	ldi	r18, 0xBE	; 190
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	4d 2f       	mov	r20, r29
    1d9c:	68 e0       	ldi	r22, 0x08	; 8
    1d9e:	8c 2f       	mov	r24, r28
    1da0:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table12) ;
    1da4:	0e eb       	ldi	r16, 0xBE	; 190
    1da6:	10 e0       	ldi	r17, 0x00	; 0
    1da8:	1d c0       	rjmp	.+58     	; 0x1de4 <Tactics+0xb10>
					myColumn = column ;
				}
				break;
				
				case 13:
				setChecker(line,column,mine,table13) ;
    1daa:	2e ed       	ldi	r18, 0xDE	; 222
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	4d 2f       	mov	r20, r29
    1db0:	68 e0       	ldi	r22, 0x08	; 8
    1db2:	8c 2f       	mov	r24, r28
    1db4:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table13) ;
    1db8:	0e ed       	ldi	r16, 0xDE	; 222
    1dba:	10 e0       	ldi	r17, 0x00	; 0
    1dbc:	13 c0       	rjmp	.+38     	; 0x1de4 <Tactics+0xb10>
					myColumn = column ;
				}
				break;
				
				case 14:
				setChecker(line,column,mine,table14) ;
    1dbe:	2e e2       	ldi	r18, 0x2E	; 46
    1dc0:	31 e0       	ldi	r19, 0x01	; 1
    1dc2:	4d 2f       	mov	r20, r29
    1dc4:	68 e0       	ldi	r22, 0x08	; 8
    1dc6:	8c 2f       	mov	r24, r28
    1dc8:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table14) ;
    1dcc:	0e e2       	ldi	r16, 0x2E	; 46
    1dce:	11 e0       	ldi	r17, 0x01	; 1
    1dd0:	09 c0       	rjmp	.+18     	; 0x1de4 <Tactics+0xb10>
				}
				break;
				
				
				default:
				setChecker(line,column,mine,table9) ;
    1dd2:	2e e4       	ldi	r18, 0x4E	; 78
    1dd4:	31 e0       	ldi	r19, 0x01	; 1
    1dd6:	4d 2f       	mov	r20, r29
    1dd8:	68 e0       	ldi	r22, 0x08	; 8
    1dda:	8c 2f       	mov	r24, r28
    1ddc:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
    1de0:	0e e4       	ldi	r16, 0x4E	; 78
    1de2:	11 e0       	ldi	r17, 0x01	; 1
    1de4:	2d 2f       	mov	r18, r29
    1de6:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    1dea:	68 e0       	ldi	r22, 0x08	; 8
    1dec:	8c 2f       	mov	r24, r28
    1dee:	0e 94 1f 06 	call	0xc3e	; 0xc3e <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table9) ;
    1df2:	b8 01       	movw	r22, r16
    1df4:	8d 2f       	mov	r24, r29
    1df6:	0e 94 36 09 	call	0x126c	; 0x126c <scanCopyChessBoard>
				if (max < checkers)
    1dfa:	f8 16       	cp	r15, r24
    1dfc:	30 f4       	brcc	.+12     	; 0x1e0a <Tactics+0xb36>
				{
					max = checkers ;
					myLine = line ;
    1dfe:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <myLine>
					myColumn = column ;
    1e02:	98 e0       	ldi	r25, 0x08	; 8
    1e04:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
    1e08:	f8 2e       	mov	r15, r24
    1e0a:	cf 5f       	subi	r28, 0xFF	; 255
	uint8_t count = 0 ;
	uint8_t max = 0 ;
	uint8_t checkers = 0 ;
	char line = (char) 0 ;
	uint8_t column = 0 ;
	for (uint8_t index = 0; index < SIZE/2; index++)
    1e0c:	c9 34       	cpi	r28, 0x49	; 73
    1e0e:	09 f0       	breq	.+2      	; 0x1e12 <Tactics+0xb3e>
    1e10:	73 ca       	rjmp	.-2842   	; 0x12f8 <Tactics+0x24>
				break;
			}
			
		}
	}
    1e12:	df 91       	pop	r29
    1e14:	cf 91       	pop	r28
    1e16:	1f 91       	pop	r17
    1e18:	0f 91       	pop	r16
    1e1a:	ff 90       	pop	r15
    1e1c:	ef 90       	pop	r14
    1e1e:	df 90       	pop	r13
    1e20:	cf 90       	pop	r12
    1e22:	bf 90       	pop	r11
    1e24:	af 90       	pop	r10
    1e26:	08 95       	ret

00001e28 <examineInstr>:
	}
	return c ;
}

void examineInstr(char c[])
{
    1e28:	ef 92       	push	r14
    1e2a:	ff 92       	push	r15
    1e2c:	0f 93       	push	r16
    1e2e:	1f 93       	push	r17
    1e30:	cf 93       	push	r28
    1e32:	df 93       	push	r29
    1e34:	ec 01       	movw	r28, r24
	if (strlen(c) == 2 && c[0] == 'A' && c[1] == 'T')
    1e36:	fc 01       	movw	r30, r24
    1e38:	01 90       	ld	r0, Z+
    1e3a:	00 20       	and	r0, r0
    1e3c:	e9 f7       	brne	.-6      	; 0x1e38 <examineInstr+0x10>
    1e3e:	31 97       	sbiw	r30, 0x01	; 1
    1e40:	cf 01       	movw	r24, r30
    1e42:	8c 1b       	sub	r24, r28
    1e44:	9d 0b       	sbc	r25, r29
    1e46:	82 30       	cpi	r24, 0x02	; 2
    1e48:	91 05       	cpc	r25, r1
    1e4a:	41 f4       	brne	.+16     	; 0x1e5c <examineInstr+0x34>
    1e4c:	88 81       	ld	r24, Y
    1e4e:	81 34       	cpi	r24, 0x41	; 65
    1e50:	b1 f5       	brne	.+108    	; 0x1ebe <examineInstr+0x96>
    1e52:	89 81       	ldd	r24, Y+1	; 0x01
    1e54:	84 35       	cpi	r24, 0x54	; 84
    1e56:	09 f0       	breq	.+2      	; 0x1e5a <examineInstr+0x32>
    1e58:	64 c1       	rjmp	.+712    	; 0x2122 <examineInstr+0x2fa>
    1e5a:	2c c0       	rjmp	.+88     	; 0x1eb4 <examineInstr+0x8c>
		writeByte('\r') ;
		/* Begin timer */
		//TCCR1B |= (1 << CS12) ;
		
	}
	else if (strlen(c) == 3 && c[0] == 'R' && c[1] == 'S' && c[2] == 'T')
    1e5c:	83 30       	cpi	r24, 0x03	; 3
    1e5e:	91 05       	cpc	r25, r1
    1e60:	51 f4       	brne	.+20     	; 0x1e76 <examineInstr+0x4e>
    1e62:	88 81       	ld	r24, Y
    1e64:	82 35       	cpi	r24, 0x52	; 82
    1e66:	09 f0       	breq	.+2      	; 0x1e6a <examineInstr+0x42>
    1e68:	5c c1       	rjmp	.+696    	; 0x2122 <examineInstr+0x2fa>
    1e6a:	89 81       	ldd	r24, Y+1	; 0x01
    1e6c:	83 35       	cpi	r24, 0x53	; 83
    1e6e:	09 f0       	breq	.+2      	; 0x1e72 <examineInstr+0x4a>
    1e70:	58 c1       	rjmp	.+688    	; 0x2122 <examineInstr+0x2fa>
    1e72:	8a 81       	ldd	r24, Y+2	; 0x02
    1e74:	ef cf       	rjmp	.-34     	; 0x1e54 <examineInstr+0x2c>
		writeByte('K') ;
		writeByte('\r') ;
		/*Begin timer */
		//TCCR1B |= (1 << CS12) ;
	}
	else if (strlen(c) == 4 && c[0] == 'S' && c[1] == 'P' && c[2] == ' ' && (c[3] == 'B' || c[3] == 'W'))
    1e76:	84 30       	cpi	r24, 0x04	; 4
    1e78:	91 05       	cpc	r25, r1
    1e7a:	09 f0       	breq	.+2      	; 0x1e7e <examineInstr+0x56>
    1e7c:	84 c0       	rjmp	.+264    	; 0x1f86 <examineInstr+0x15e>
    1e7e:	88 81       	ld	r24, Y
    1e80:	83 35       	cpi	r24, 0x53	; 83
    1e82:	09 f0       	breq	.+2      	; 0x1e86 <examineInstr+0x5e>
    1e84:	4e c1       	rjmp	.+668    	; 0x2122 <examineInstr+0x2fa>
    1e86:	89 81       	ldd	r24, Y+1	; 0x01
    1e88:	80 35       	cpi	r24, 0x50	; 80
    1e8a:	09 f0       	breq	.+2      	; 0x1e8e <examineInstr+0x66>
    1e8c:	50 c0       	rjmp	.+160    	; 0x1f2e <examineInstr+0x106>
    1e8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e90:	80 32       	cpi	r24, 0x20	; 32
    1e92:	09 f0       	breq	.+2      	; 0x1e96 <examineInstr+0x6e>
    1e94:	4c c0       	rjmp	.+152    	; 0x1f2e <examineInstr+0x106>
    1e96:	8b 81       	ldd	r24, Y+3	; 0x03
    1e98:	82 34       	cpi	r24, 0x42	; 66
    1e9a:	39 f0       	breq	.+14     	; 0x1eaa <examineInstr+0x82>
    1e9c:	87 35       	cpi	r24, 0x57	; 87
    1e9e:	09 f0       	breq	.+2      	; 0x1ea2 <examineInstr+0x7a>
    1ea0:	46 c0       	rjmp	.+140    	; 0x1f2e <examineInstr+0x106>
			//TCCR1B |= (1 << CS12) ;
		}
		else
		{
			/* Set player to white */
			enemy = 'W';
    1ea2:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <enemy>
			mine = 'B';
    1ea6:	82 e4       	ldi	r24, 0x42	; 66
    1ea8:	03 c0       	rjmp	.+6      	; 0x1eb0 <examineInstr+0x88>
	{
		/* Set players to black or white */
		if (c[3] == 'B')
		{
			/* Set player to black */
			enemy = 'B';
    1eaa:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <enemy>
			mine = 'W' ;
    1eae:	87 e5       	ldi	r24, 0x57	; 87
    1eb0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <mine>
			/*writeString("\r") ; */
			writeByte('O') ;
    1eb4:	8f e4       	ldi	r24, 0x4F	; 79
    1eb6:	0e 94 05 01 	call	0x20a	; 0x20a <writeByte>
			writeByte('K') ;
    1eba:	8b e4       	ldi	r24, 0x4B	; 75
    1ebc:	36 c1       	rjmp	.+620    	; 0x212a <examineInstr+0x302>
			writeByte('\r') ;
			/* Begin timer */
			//TCCR1B |= (1 << CS12) ;
		}
	}
	else if (strlen(c) == 2 && c[0] == 'N' && c[1] == 'G')
    1ebe:	8e 34       	cpi	r24, 0x4E	; 78
    1ec0:	39 f4       	brne	.+14     	; 0x1ed0 <examineInstr+0xa8>
    1ec2:	89 81       	ldd	r24, Y+1	; 0x01
    1ec4:	87 34       	cpi	r24, 0x47	; 71
    1ec6:	09 f0       	breq	.+2      	; 0x1eca <examineInstr+0xa2>
    1ec8:	2c c1       	rjmp	.+600    	; 0x2122 <examineInstr+0x2fa>
	{
		/* New game */
		tableInit();
    1eca:	0e 94 1d 08 	call	0x103a	; 0x103a <tableInit>
    1ece:	a8 c0       	rjmp	.+336    	; 0x2020 <examineInstr+0x1f8>
		writeByte('\r') ;
		/* Begin timer */
		//TCCR1B |= (1 << CS12) ;
		
	}
	else if (strlen(c) == 2 && c[0] == 'E' && c[1] == 'G')
    1ed0:	85 34       	cpi	r24, 0x45	; 69
    1ed2:	09 f0       	breq	.+2      	; 0x1ed6 <examineInstr+0xae>
    1ed4:	48 c0       	rjmp	.+144    	; 0x1f66 <examineInstr+0x13e>
    1ed6:	89 81       	ldd	r24, Y+1	; 0x01
    1ed8:	87 34       	cpi	r24, 0x47	; 71
    1eda:	09 f0       	breq	.+2      	; 0x1ede <examineInstr+0xb6>
    1edc:	22 c1       	rjmp	.+580    	; 0x2122 <examineInstr+0x2fa>
	{
		/* End game */
		/* Disable timer */
		TCCR1B &= 0b11111011 ;
    1ede:	8e b5       	in	r24, 0x2e	; 46
    1ee0:	8b 7f       	andi	r24, 0xFB	; 251
    1ee2:	8e bd       	out	0x2e, r24	; 46
		TCNT1 = 0 ;
    1ee4:	1d bc       	out	0x2d, r1	; 45
    1ee6:	1c bc       	out	0x2c, r1	; 44
		if (seconds > timelimit)									/* if the opponents exceeds the allowable timelimit then send illegal time */
    1ee8:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <__data_end>
    1eec:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <timelimit>
    1ef0:	89 17       	cp	r24, r25
    1ef2:	48 f4       	brcc	.+18     	; 0x1f06 <examineInstr+0xde>
		{
			writeByte('I') ;
    1ef4:	89 e4       	ldi	r24, 0x49	; 73
    1ef6:	0e 94 05 01 	call	0x20a	; 0x20a <writeByte>
			writeByte('T') ;
    1efa:	84 e5       	ldi	r24, 0x54	; 84
    1efc:	0e 94 05 01 	call	0x20a	; 0x20a <writeByte>
			writeByte('\r') ;
    1f00:	8d e0       	ldi	r24, 0x0D	; 13
    1f02:	0e 94 05 01 	call	0x20a	; 0x20a <writeByte>
		}
		seconds = 0 ;
    1f06:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <__data_end>
		
		if (countMineValidmoves() == 0 && countEnemyValidmoves() == 0)
    1f0a:	0e 94 3d 08 	call	0x107a	; 0x107a <countMineValidmoves>
    1f0e:	81 11       	cpse	r24, r1
    1f10:	04 c0       	rjmp	.+8      	; 0x1f1a <examineInstr+0xf2>
    1f12:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <countEnemyValidmoves>
    1f16:	88 23       	and	r24, r24
    1f18:	09 f1       	breq	.+66     	; 0x1f5c <examineInstr+0x134>
			writeByte('K') ;
			writeByte('\r') ;
		}
		else
		{
			writeByte('P') ;
    1f1a:	80 e5       	ldi	r24, 0x50	; 80
    1f1c:	0e 94 05 01 	call	0x20a	; 0x20a <writeByte>
			writeByte('L') ;
    1f20:	8c e4       	ldi	r24, 0x4C	; 76
    1f22:	0e 94 05 01 	call	0x20a	; 0x20a <writeByte>
			writeByte('\r') ;
    1f26:	8d e0       	ldi	r24, 0x0D	; 13
    1f28:	0e 94 05 01 	call	0x20a	; 0x20a <writeByte>
    1f2c:	ed c0       	rjmp	.+474    	; 0x2108 <examineInstr+0x2e0>
		}
		/* Start again opponents time */
		TCCR1B |= (1 << CS12) ;
	}
	else if (strlen(c) == 4 && c[0] == 'S' && c[1] == 'T' && c[2] == ' ' && (asciiToInteger(c[3]) >= 1 && asciiToInteger(c[3]) <=9))
    1f2e:	89 81       	ldd	r24, Y+1	; 0x01
    1f30:	84 35       	cpi	r24, 0x54	; 84
    1f32:	09 f0       	breq	.+2      	; 0x1f36 <examineInstr+0x10e>
    1f34:	f6 c0       	rjmp	.+492    	; 0x2122 <examineInstr+0x2fa>
    1f36:	8a 81       	ldd	r24, Y+2	; 0x02
    1f38:	80 32       	cpi	r24, 0x20	; 32
    1f3a:	09 f0       	breq	.+2      	; 0x1f3e <examineInstr+0x116>
    1f3c:	f2 c0       	rjmp	.+484    	; 0x2122 <examineInstr+0x2fa>
    1f3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f40:	0e 94 4d 01 	call	0x29a	; 0x29a <asciiToInteger>
    1f44:	81 50       	subi	r24, 0x01	; 1
    1f46:	89 30       	cpi	r24, 0x09	; 9
    1f48:	08 f0       	brcs	.+2      	; 0x1f4c <examineInstr+0x124>
    1f4a:	eb c0       	rjmp	.+470    	; 0x2122 <examineInstr+0x2fa>
	{
		/* set time limit */
		TCCR1B &= 0b11111011 ;										/* Disable timer */
    1f4c:	8e b5       	in	r24, 0x2e	; 46
    1f4e:	8b 7f       	andi	r24, 0xFB	; 251
    1f50:	8e bd       	out	0x2e, r24	; 46
		timelimit = asciiToInteger(c[3]) ;							/* Change timing limit */
    1f52:	8b 81       	ldd	r24, Y+3	; 0x03
    1f54:	0e 94 4d 01 	call	0x29a	; 0x29a <asciiToInteger>
    1f58:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <timelimit>
		writeByte('O') ;
    1f5c:	8f e4       	ldi	r24, 0x4F	; 79
    1f5e:	0e 94 05 01 	call	0x20a	; 0x20a <writeByte>
		writeByte('K') ;
    1f62:	8b e4       	ldi	r24, 0x4B	; 75
    1f64:	de cf       	rjmp	.-68     	; 0x1f22 <examineInstr+0xfa>
		writeByte('\r') ;
		TCCR1B |= (1 << CS12) ;										/* Renable timer */
		
	}
	else if (strlen(c) == 2 && c[0] == 'O' && c[1] == 'K')
    1f66:	8f 34       	cpi	r24, 0x4F	; 79
    1f68:	09 f0       	breq	.+2      	; 0x1f6c <examineInstr+0x144>
    1f6a:	5f c0       	rjmp	.+190    	; 0x202a <examineInstr+0x202>
    1f6c:	89 81       	ldd	r24, Y+1	; 0x01
    1f6e:	8b 34       	cpi	r24, 0x4B	; 75
    1f70:	09 f0       	breq	.+2      	; 0x1f74 <examineInstr+0x14c>
    1f72:	d7 c0       	rjmp	.+430    	; 0x2122 <examineInstr+0x2fa>
		//if (seconds > timelimit)									/* if the opponents exceeds the allowable timelimit then send illegal time */
		//{
			//IllegalTime() ;
		//}
		//seconds = 0 ;
		if (countMineValidmoves() > 0)
    1f74:	0e 94 3d 08 	call	0x107a	; 0x107a <countMineValidmoves>
    1f78:	81 11       	cpse	r24, r1
    1f7a:	9e c0       	rjmp	.+316    	; 0x20b8 <examineInstr+0x290>
			scanChessboard(mine) ;
			MyMove(myLine,myColumn) ;
		}
		else
		{
			writeByte('P') ;
    1f7c:	80 e5       	ldi	r24, 0x50	; 80
    1f7e:	0e 94 05 01 	call	0x20a	; 0x20a <writeByte>
			writeByte('S') ;
    1f82:	83 e5       	ldi	r24, 0x53	; 83
    1f84:	ce cf       	rjmp	.-100    	; 0x1f22 <examineInstr+0xfa>
		}
		/* I played my move. So the enemy stops counting my time and i started counting his time */
		TCCR1B |= (1 << CS12) ;
		
	}
	else if (strlen(c) == 5 && c[0] == 'M' && c[1] == 'V' && c[2] == ' ' && (c[3] >= 'A' && c[3] <= 'H') && (c[4] >= '1' && c[4] <= '8'))
    1f86:	05 97       	sbiw	r24, 0x05	; 5
    1f88:	09 f0       	breq	.+2      	; 0x1f8c <examineInstr+0x164>
    1f8a:	cb c0       	rjmp	.+406    	; 0x2122 <examineInstr+0x2fa>
    1f8c:	88 81       	ld	r24, Y
    1f8e:	8d 34       	cpi	r24, 0x4D	; 77
    1f90:	09 f0       	breq	.+2      	; 0x1f94 <examineInstr+0x16c>
    1f92:	c7 c0       	rjmp	.+398    	; 0x2122 <examineInstr+0x2fa>
    1f94:	89 81       	ldd	r24, Y+1	; 0x01
    1f96:	86 35       	cpi	r24, 0x56	; 86
    1f98:	09 f0       	breq	.+2      	; 0x1f9c <examineInstr+0x174>
    1f9a:	c3 c0       	rjmp	.+390    	; 0x2122 <examineInstr+0x2fa>
    1f9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f9e:	80 32       	cpi	r24, 0x20	; 32
    1fa0:	09 f0       	breq	.+2      	; 0x1fa4 <examineInstr+0x17c>
    1fa2:	bf c0       	rjmp	.+382    	; 0x2122 <examineInstr+0x2fa>
    1fa4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa6:	81 54       	subi	r24, 0x41	; 65
    1fa8:	88 30       	cpi	r24, 0x08	; 8
    1faa:	08 f0       	brcs	.+2      	; 0x1fae <examineInstr+0x186>
    1fac:	ba c0       	rjmp	.+372    	; 0x2122 <examineInstr+0x2fa>
    1fae:	8c 81       	ldd	r24, Y+4	; 0x04
    1fb0:	81 53       	subi	r24, 0x31	; 49
    1fb2:	88 30       	cpi	r24, 0x08	; 8
    1fb4:	08 f0       	brcs	.+2      	; 0x1fb8 <examineInstr+0x190>
    1fb6:	b5 c0       	rjmp	.+362    	; 0x2122 <examineInstr+0x2fa>
	{
		/* Opponent move*/
		/* I am stopping counting his time. Disable timer by clearing prescaler */
		TCCR1B &= 0b11111011 ;
    1fb8:	8e b5       	in	r24, 0x2e	; 46
    1fba:	8b 7f       	andi	r24, 0xFB	; 251
    1fbc:	8e bd       	out	0x2e, r24	; 46
		/* Reset timer's value */
		TCNT1 = 0 ;
    1fbe:	1d bc       	out	0x2d, r1	; 45
    1fc0:	1c bc       	out	0x2c, r1	; 44
		/* Then I check if he exceeds the allowable timelimit */
		if (seconds > timelimit)
    1fc2:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <__data_end>
    1fc6:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <timelimit>
    1fca:	89 17       	cp	r24, r25
    1fcc:	08 f0       	brcs	.+2      	; 0x1fd0 <examineInstr+0x1a8>
    1fce:	b8 c0       	rjmp	.+368    	; 0x2140 <examineInstr+0x318>
		{
			PORTB &= 0b11111011 ;
    1fd0:	c2 98       	cbi	0x18, 2	; 24
		else
		{
			PORTB |= (1 << PB5) ;
		}
		/* reset opponents time - thinking */
		seconds = 0 ;
    1fd2:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <__data_end>
		
		if (checkEnemyMove(c[3],asciiToInteger(c[4])) == 1)
    1fd6:	8c 81       	ldd	r24, Y+4	; 0x04
    1fd8:	0e 94 4d 01 	call	0x29a	; 0x29a <asciiToInteger>
    1fdc:	08 2f       	mov	r16, r24
    1fde:	1b 81       	ldd	r17, Y+3	; 0x03
    1fe0:	68 2f       	mov	r22, r24
    1fe2:	81 2f       	mov	r24, r17
    1fe4:	0e 94 da 01 	call	0x3b4	; 0x3b4 <checkEnemyMove>
    1fe8:	81 30       	cpi	r24, 0x01	; 1
    1fea:	09 f0       	breq	.+2      	; 0x1fee <examineInstr+0x1c6>
    1fec:	42 c0       	rjmp	.+132    	; 0x2072 <examineInstr+0x24a>
		{
			setChecker(c[3],asciiToInteger(c[4]),enemy,table);
    1fee:	2e ec       	ldi	r18, 0xCE	; 206
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    1ff6:	60 2f       	mov	r22, r16
    1ff8:	81 2f       	mov	r24, r17
    1ffa:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
			TurnOtherCheckers(c[3],asciiToInteger(c[4]),mine,enemy,table) ;
    1ffe:	e0 90 63 00 	lds	r14, 0x0063	; 0x800063 <enemy>
    2002:	f0 90 62 00 	lds	r15, 0x0062	; 0x800062 <mine>
    2006:	8c 81       	ldd	r24, Y+4	; 0x04
    2008:	0e 94 4d 01 	call	0x29a	; 0x29a <asciiToInteger>
    200c:	0e ec       	ldi	r16, 0xCE	; 206
    200e:	10 e0       	ldi	r17, 0x00	; 0
    2010:	2e 2d       	mov	r18, r14
    2012:	4f 2d       	mov	r20, r15
    2014:	68 2f       	mov	r22, r24
    2016:	8b 81       	ldd	r24, Y+3	; 0x03
    2018:	0e 94 1f 06 	call	0xc3e	; 0xc3e <TurnOtherCheckers>
			clearValidMoves() ;
    201c:	0e 94 0e 08 	call	0x101c	; 0x101c <clearValidMoves>
			scanChessboard(mine) ;
    2020:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <mine>
    2024:	0e 94 72 05 	call	0xae4	; 0xae4 <scanChessboard>
    2028:	45 cf       	rjmp	.-374    	; 0x1eb4 <examineInstr+0x8c>
			writeByte('L') ;
			writeByte('\r') ;
		}

	}
	else if (strlen(c) == 2 && c[0] == 'P' && c[1] == 'S')
    202a:	80 35       	cpi	r24, 0x50	; 80
    202c:	09 f0       	breq	.+2      	; 0x2030 <examineInstr+0x208>
    202e:	73 c0       	rjmp	.+230    	; 0x2116 <examineInstr+0x2ee>
    2030:	89 81       	ldd	r24, Y+1	; 0x01
    2032:	83 35       	cpi	r24, 0x53	; 83
    2034:	09 f0       	breq	.+2      	; 0x2038 <examineInstr+0x210>
    2036:	6c c0       	rjmp	.+216    	; 0x2110 <examineInstr+0x2e8>
	{
		/* Pass PC doesn't have any move ΞΌC will play again */
		/*writeString("OK\r") ; */
		TCCR1B &= 0b11111011 ;
    2038:	8e b5       	in	r24, 0x2e	; 46
    203a:	8b 7f       	andi	r24, 0xFB	; 251
    203c:	8e bd       	out	0x2e, r24	; 46
		/* Reset timer's value */
		TCNT1 = 0 ;
    203e:	1d bc       	out	0x2d, r1	; 45
    2040:	1c bc       	out	0x2c, r1	; 44
		/* Then I check if he exceeds the allowable timelimit */
		if (seconds > timelimit)
    2042:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <__data_end>
    2046:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <timelimit>
    204a:	89 17       	cp	r24, r25
    204c:	10 f4       	brcc	.+4      	; 0x2052 <examineInstr+0x22a>
		{
			PORTB &= 0b11111011 ;
    204e:	c2 98       	cbi	0x18, 2	; 24
    2050:	01 c0       	rjmp	.+2      	; 0x2054 <examineInstr+0x22c>
			//IllegalTime() ;
		}
		else
		{
			PORTB |= (1 << PB5) ;
    2052:	c5 9a       	sbi	0x18, 5	; 24
		}
		/* reset opponents time - thinking */
		seconds = 0 ;
    2054:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <__data_end>
		
		
		writeByte('O') ;
    2058:	8f e4       	ldi	r24, 0x4F	; 79
    205a:	0e 94 05 01 	call	0x20a	; 0x20a <writeByte>
		writeByte('K') ;
    205e:	8b e4       	ldi	r24, 0x4B	; 75
    2060:	0e 94 05 01 	call	0x20a	; 0x20a <writeByte>
		writeByte('\r') ;
    2064:	8d e0       	ldi	r24, 0x0D	; 13
    2066:	0e 94 05 01 	call	0x20a	; 0x20a <writeByte>
		
		if (countEnemyValidmoves() == 0)
    206a:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <countEnemyValidmoves>
    206e:	88 23       	and	r24, r24
    2070:	11 f0       	breq	.+4      	; 0x2076 <examineInstr+0x24e>
			writeByte('O') ;
			writeByte('K') ;
			writeByte('\r') ;
		}else
		{
			writeByte('I') ;
    2072:	89 e4       	ldi	r24, 0x49	; 73
    2074:	57 c0       	rjmp	.+174    	; 0x2124 <examineInstr+0x2fc>
		writeByte('K') ;
		writeByte('\r') ;
		
		if (countEnemyValidmoves() == 0)
		{
			if (countMineValidmoves() == 0)
    2076:	0e 94 3d 08 	call	0x107a	; 0x107a <countMineValidmoves>
    207a:	81 11       	cpse	r24, r1
    207c:	17 c0       	rjmp	.+46     	; 0x20ac <examineInstr+0x284>
			{
				writeByte('E') ;
    207e:	85 e4       	ldi	r24, 0x45	; 69
    2080:	0e 94 05 01 	call	0x20a	; 0x20a <writeByte>
				writeByte('G') ;
    2084:	87 e4       	ldi	r24, 0x47	; 71
    2086:	0e 94 05 01 	call	0x20a	; 0x20a <writeByte>
				writeByte('\r') ;
    208a:	8d e0       	ldi	r24, 0x0D	; 13
    208c:	0e 94 05 01 	call	0x20a	; 0x20a <writeByte>
				
				/* Check who won the game */
				checkWin(mine,blackCount,whiteCount) ;
    2090:	40 91 7c 00 	lds	r20, 0x007C	; 0x80007c <whiteCount>
    2094:	60 91 7d 00 	lds	r22, 0x007D	; 0x80007d <blackCount>
    2098:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <mine>
	{
		writeByte('P') ;
		writeByte('L') ;
		writeByte('\r') ;
	}
}
    209c:	df 91       	pop	r29
    209e:	cf 91       	pop	r28
    20a0:	1f 91       	pop	r17
    20a2:	0f 91       	pop	r16
    20a4:	ff 90       	pop	r15
    20a6:	ef 90       	pop	r14
				writeByte('E') ;
				writeByte('G') ;
				writeByte('\r') ;
				
				/* Check who won the game */
				checkWin(mine,blackCount,whiteCount) ;
    20a8:	0c 94 77 08 	jmp	0x10ee	; 0x10ee <checkWin>
			}
			else
			{
				clearValidMoves() ;
    20ac:	0e 94 0e 08 	call	0x101c	; 0x101c <clearValidMoves>
				scanChessboard(mine) ;
    20b0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <mine>
    20b4:	0e 94 72 05 	call	0xae4	; 0xae4 <scanChessboard>
				copyChessboard() ;
    20b8:	0e 94 94 08 	call	0x1128	; 0x1128 <copyChessboard>
				Tactics(mine) ;
    20bc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <mine>
    20c0:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <Tactics>
				setChecker(myLine,myColumn,mine,table) ;
    20c4:	2e ec       	ldi	r18, 0xCE	; 206
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <mine>
    20cc:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__data_start>
    20d0:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <myLine>
    20d4:	0e 94 87 01 	call	0x30e	; 0x30e <setChecker>
				TurnOtherCheckers(myLine,myColumn,enemy,mine,table) ;
    20d8:	0e ec       	ldi	r16, 0xCE	; 206
    20da:	10 e0       	ldi	r17, 0x00	; 0
    20dc:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <mine>
    20e0:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    20e4:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__data_start>
    20e8:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <myLine>
    20ec:	0e 94 1f 06 	call	0xc3e	; 0xc3e <TurnOtherCheckers>
				clearValidMoves() ;
    20f0:	0e 94 0e 08 	call	0x101c	; 0x101c <clearValidMoves>
				scanChessboard(mine) ;
    20f4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <mine>
    20f8:	0e 94 72 05 	call	0xae4	; 0xae4 <scanChessboard>
				MyMove(myLine,myColumn) ;
    20fc:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__data_start>
    2100:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <myLine>
    2104:	0e 94 67 01 	call	0x2ce	; 0x2ce <MyMove>
				/* I played my move. So the enemy stops counting my time and i started counting his time */
				TCCR1B |= (1 << CS12) ;
    2108:	8e b5       	in	r24, 0x2e	; 46
    210a:	84 60       	ori	r24, 0x04	; 4
    210c:	8e bd       	out	0x2e, r24	; 46
    210e:	1a c0       	rjmp	.+52     	; 0x2144 <examineInstr+0x31c>
			writeByte('\r') ;
		}
		
		
	}
	else if (strlen(c) == 2 && c[0] == 'P' && c[1] == 'L')
    2110:	8c 34       	cpi	r24, 0x4C	; 76
    2112:	39 f4       	brne	.+14     	; 0x2122 <examineInstr+0x2fa>
    2114:	17 c0       	rjmp	.+46     	; 0x2144 <examineInstr+0x31c>
	{
		/* Reject */
	}
	else if (strlen(c) == 2 && c[0] == 'W' && c[1] == 'N')
    2116:	87 35       	cpi	r24, 0x57	; 87
    2118:	21 f4       	brne	.+8      	; 0x2122 <examineInstr+0x2fa>
    211a:	89 81       	ldd	r24, Y+1	; 0x01
    211c:	8e 34       	cpi	r24, 0x4E	; 78
    211e:	09 f4       	brne	.+2      	; 0x2122 <examineInstr+0x2fa>
    2120:	c9 ce       	rjmp	.-622    	; 0x1eb4 <examineInstr+0x8c>
		writeByte('K') ;
		writeByte('\r') ;
	}
	else
	{
		writeByte('P') ;
    2122:	80 e5       	ldi	r24, 0x50	; 80
    2124:	0e 94 05 01 	call	0x20a	; 0x20a <writeByte>
		writeByte('L') ;
    2128:	8c e4       	ldi	r24, 0x4C	; 76
    212a:	0e 94 05 01 	call	0x20a	; 0x20a <writeByte>
		writeByte('\r') ;
    212e:	8d e0       	ldi	r24, 0x0D	; 13
	}
}
    2130:	df 91       	pop	r29
    2132:	cf 91       	pop	r28
    2134:	1f 91       	pop	r17
    2136:	0f 91       	pop	r16
    2138:	ff 90       	pop	r15
    213a:	ef 90       	pop	r14
	}
	else
	{
		writeByte('P') ;
		writeByte('L') ;
		writeByte('\r') ;
    213c:	0c 94 05 01 	jmp	0x20a	; 0x20a <writeByte>
		{
			PORTB &= 0b11111011 ;
		}
		else
		{
			PORTB |= (1 << PB5) ;
    2140:	c5 9a       	sbi	0x18, 5	; 24
    2142:	47 cf       	rjmp	.-370    	; 0x1fd2 <examineInstr+0x1aa>
	{
		writeByte('P') ;
		writeByte('L') ;
		writeByte('\r') ;
	}
}
    2144:	df 91       	pop	r29
    2146:	cf 91       	pop	r28
    2148:	1f 91       	pop	r17
    214a:	0f 91       	pop	r16
    214c:	ff 90       	pop	r15
    214e:	ef 90       	pop	r14
    2150:	08 95       	ret

00002152 <__vector_11>:
		}
	}
}

ISR(USART_RXC_vect)
{
    2152:	1f 92       	push	r1
    2154:	0f 92       	push	r0
    2156:	0f b6       	in	r0, 0x3f	; 63
    2158:	0f 92       	push	r0
    215a:	11 24       	eor	r1, r1
    215c:	2f 93       	push	r18
    215e:	3f 93       	push	r19
    2160:	4f 93       	push	r20
    2162:	5f 93       	push	r21
    2164:	6f 93       	push	r22
    2166:	7f 93       	push	r23
    2168:	8f 93       	push	r24
    216a:	9f 93       	push	r25
    216c:	af 93       	push	r26
    216e:	bf 93       	push	r27
    2170:	ef 93       	push	r30
    2172:	ff 93       	push	r31
	char c = UDR ;
    2174:	8c b1       	in	r24, 0x0c	; 12
	if ( c != '\r')
    2176:	8d 30       	cpi	r24, 0x0D	; 13
    2178:	19 f0       	breq	.+6      	; 0x2180 <__vector_11+0x2e>
	{
		readByte(c) ;
    217a:	0e 94 23 01 	call	0x246	; 0x246 <readByte>
    217e:	08 c0       	rjmp	.+16     	; 0x2190 <__vector_11+0x3e>
	}
	else
	{
		/* Call Examine function */
		updateRxBuffer(RX_buffer) ;
    2180:	8e e7       	ldi	r24, 0x7E	; 126
    2182:	91 e0       	ldi	r25, 0x01	; 1
    2184:	0e 94 58 01 	call	0x2b0	; 0x2b0 <updateRxBuffer>
		examineInstr(RX_buffer) ;
    2188:	8e e7       	ldi	r24, 0x7E	; 126
    218a:	91 e0       	ldi	r25, 0x01	; 1
    218c:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <examineInstr>
	}
}
    2190:	ff 91       	pop	r31
    2192:	ef 91       	pop	r30
    2194:	bf 91       	pop	r27
    2196:	af 91       	pop	r26
    2198:	9f 91       	pop	r25
    219a:	8f 91       	pop	r24
    219c:	7f 91       	pop	r23
    219e:	6f 91       	pop	r22
    21a0:	5f 91       	pop	r21
    21a2:	4f 91       	pop	r20
    21a4:	3f 91       	pop	r19
    21a6:	2f 91       	pop	r18
    21a8:	0f 90       	pop	r0
    21aa:	0f be       	out	0x3f, r0	; 63
    21ac:	0f 90       	pop	r0
    21ae:	1f 90       	pop	r1
    21b0:	18 95       	reti

000021b2 <__tablejump2__>:
    21b2:	ee 0f       	add	r30, r30
    21b4:	ff 1f       	adc	r31, r31
    21b6:	05 90       	lpm	r0, Z+
    21b8:	f4 91       	lpm	r31, Z
    21ba:	e0 2d       	mov	r30, r0
    21bc:	09 94       	ijmp

000021be <_exit>:
    21be:	f8 94       	cli

000021c0 <__stop_program>:
    21c0:	ff cf       	rjmp	.-2      	; 0x21c0 <__stop_program>
