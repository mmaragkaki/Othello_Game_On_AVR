
Project3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004300  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00004300  00004394  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000126  00800066  00800066  0000439a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000439a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000043cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00004408  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000601b  00000000  00000000  00004548  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000728  00000000  00000000  0000a563  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003027  00000000  00000000  0000ac8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000046c  00000000  00000000  0000dcb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000623  00000000  00000000  0000e120  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004a88  00000000  00000000  0000e743  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  000131cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ac 00 	jmp	0x158	; 0x158 <__ctors_end>
       4:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
       8:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
       c:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      10:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      14:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      18:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__vector_6>
      1c:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      20:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      24:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      28:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      2c:	0c 94 48 21 	jmp	0x4290	; 0x4290 <__vector_11>
      30:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      34:	0c 94 cb 00 	jmp	0x196	; 0x196 <__vector_13>
      38:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      3c:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      40:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      44:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      48:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      4c:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      50:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      54:	7b 01       	movw	r14, r22
      56:	69 01       	movw	r12, r18
      58:	6b 01       	movw	r12, r22
      5a:	6d 01       	movw	r12, r26
      5c:	6f 01       	movw	r12, r30
      5e:	71 01       	movw	r14, r2
      60:	73 01       	movw	r14, r6
      62:	75 01       	movw	r14, r10
      64:	77 01       	movw	r14, r14
      66:	ab 01       	movw	r20, r22
      68:	99 01       	movw	r18, r18
      6a:	9b 01       	movw	r18, r22
      6c:	9d 01       	movw	r18, r26
      6e:	9f 01       	movw	r18, r30
      70:	a1 01       	movw	r20, r2
      72:	a3 01       	movw	r20, r6
      74:	a5 01       	movw	r20, r10
      76:	a7 01       	movw	r20, r14
      78:	6b 0b       	sbc	r22, r27
      7a:	8b 0b       	sbc	r24, r27
      7c:	ab 0b       	sbc	r26, r27
      7e:	cb 0b       	sbc	r28, r27
      80:	eb 0b       	sbc	r30, r27
      82:	0b 0c       	add	r0, r11
      84:	2b 0c       	add	r2, r11
      86:	4b 0c       	add	r4, r11
      88:	6b 0c       	add	r6, r11
      8a:	8b 0c       	add	r8, r11
      8c:	ab 0c       	add	r10, r11
      8e:	cb 0c       	add	r12, r11
      90:	eb 0c       	add	r14, r11
      92:	0b 0d       	add	r16, r11
      94:	56 0d       	add	r21, r6
      96:	76 0d       	add	r23, r6
      98:	96 0d       	add	r25, r6
      9a:	b6 0d       	add	r27, r6
      9c:	d6 0d       	add	r29, r6
      9e:	f6 0d       	add	r31, r6
      a0:	16 0e       	add	r1, r22
      a2:	36 0e       	add	r3, r22
      a4:	56 0e       	add	r5, r22
      a6:	76 0e       	add	r7, r22
      a8:	96 0e       	add	r9, r22
      aa:	b6 0e       	add	r11, r22
      ac:	d6 0e       	add	r13, r22
      ae:	f6 0e       	add	r15, r22
      b0:	45 0f       	add	r20, r21
      b2:	65 0f       	add	r22, r21
      b4:	85 0f       	add	r24, r21
      b6:	a5 0f       	add	r26, r21
      b8:	c5 0f       	add	r28, r21
      ba:	e5 0f       	add	r30, r21
      bc:	05 10       	cpse	r0, r5
      be:	25 10       	cpse	r2, r5
      c0:	45 10       	cpse	r4, r5
      c2:	65 10       	cpse	r6, r5
      c4:	85 10       	cpse	r8, r5
      c6:	a5 10       	cpse	r10, r5
      c8:	c5 10       	cpse	r12, r5
      ca:	e5 10       	cpse	r14, r5
      cc:	39 11       	cpse	r19, r9
      ce:	59 11       	cpse	r21, r9
      d0:	79 11       	cpse	r23, r9
      d2:	99 11       	cpse	r25, r9
      d4:	b9 11       	cpse	r27, r9
      d6:	d9 11       	cpse	r29, r9
      d8:	f9 11       	cpse	r31, r9
      da:	19 12       	cpse	r1, r25
      dc:	39 12       	cpse	r3, r25
      de:	59 12       	cpse	r5, r25
      e0:	79 12       	cpse	r7, r25
      e2:	99 12       	cpse	r9, r25
      e4:	b9 12       	cpse	r11, r25
      e6:	d9 12       	cpse	r13, r25
      e8:	2d 13       	cpse	r18, r29
      ea:	4d 13       	cpse	r20, r29
      ec:	6d 13       	cpse	r22, r29
      ee:	8d 13       	cpse	r24, r29
      f0:	ad 13       	cpse	r26, r29
      f2:	cd 13       	cpse	r28, r29
      f4:	ed 13       	cpse	r30, r29
      f6:	0b 14       	cp	r0, r11
      f8:	29 14       	cp	r2, r9
      fa:	47 14       	cp	r4, r7
      fc:	65 14       	cp	r6, r5
      fe:	83 14       	cp	r8, r3
     100:	a1 14       	cp	r10, r1
     102:	bf 14       	cp	r11, r15
     104:	11 15       	cp	r17, r1
     106:	2f 15       	cp	r18, r15
     108:	4d 15       	cp	r20, r13
     10a:	6b 15       	cp	r22, r11
     10c:	89 15       	cp	r24, r9
     10e:	a7 15       	cp	r26, r7
     110:	c5 15       	cp	r28, r5
     112:	e3 15       	cp	r30, r3
     114:	01 16       	cp	r0, r17
     116:	1f 16       	cp	r1, r31
     118:	3d 16       	cp	r3, r29
     11a:	5b 16       	cp	r5, r27
     11c:	79 16       	cp	r7, r25
     11e:	97 16       	cp	r9, r23
     120:	e9 16       	cp	r14, r25
     122:	07 17       	cp	r16, r23
     124:	25 17       	cp	r18, r21
     126:	43 17       	cp	r20, r19
     128:	61 17       	cp	r22, r17
     12a:	7f 17       	cp	r23, r31
     12c:	9d 17       	cp	r25, r29
     12e:	bb 17       	cp	r27, r27
     130:	d9 17       	cp	r29, r25
     132:	f7 17       	cp	r31, r23
     134:	15 18       	sub	r1, r5
     136:	33 18       	sub	r3, r3
     138:	51 18       	sub	r5, r1
     13a:	6f 18       	sub	r6, r15
     13c:	c2 18       	sub	r12, r2
     13e:	e0 18       	sub	r14, r0
     140:	01 19       	sub	r16, r1
     142:	23 19       	sub	r18, r3
     144:	44 19       	sub	r20, r4
     146:	66 19       	sub	r22, r6
     148:	88 19       	sub	r24, r8
     14a:	aa 19       	sub	r26, r10
     14c:	cb 19       	sub	r28, r11
     14e:	ed 19       	sub	r30, r13
     150:	0f 1a       	sub	r0, r31
     152:	31 1a       	sub	r3, r17
     154:	53 1a       	sub	r5, r19
     156:	75 1a       	sub	r7, r21

00000158 <__ctors_end>:
     158:	11 24       	eor	r1, r1
     15a:	1f be       	out	0x3f, r1	; 63
     15c:	cf e5       	ldi	r28, 0x5F	; 95
     15e:	d4 e0       	ldi	r29, 0x04	; 4
     160:	de bf       	out	0x3e, r29	; 62
     162:	cd bf       	out	0x3d, r28	; 61

00000164 <__do_copy_data>:
     164:	10 e0       	ldi	r17, 0x00	; 0
     166:	a0 e6       	ldi	r26, 0x60	; 96
     168:	b0 e0       	ldi	r27, 0x00	; 0
     16a:	e0 e0       	ldi	r30, 0x00	; 0
     16c:	f3 e4       	ldi	r31, 0x43	; 67
     16e:	02 c0       	rjmp	.+4      	; 0x174 <__do_copy_data+0x10>
     170:	05 90       	lpm	r0, Z+
     172:	0d 92       	st	X+, r0
     174:	a6 36       	cpi	r26, 0x66	; 102
     176:	b1 07       	cpc	r27, r17
     178:	d9 f7       	brne	.-10     	; 0x170 <__do_copy_data+0xc>

0000017a <__do_clear_bss>:
     17a:	21 e0       	ldi	r18, 0x01	; 1
     17c:	a6 e6       	ldi	r26, 0x66	; 102
     17e:	b0 e0       	ldi	r27, 0x00	; 0
     180:	01 c0       	rjmp	.+2      	; 0x184 <.do_clear_bss_start>

00000182 <.do_clear_bss_loop>:
     182:	1d 92       	st	X+, r1

00000184 <.do_clear_bss_start>:
     184:	ac 38       	cpi	r26, 0x8C	; 140
     186:	b2 07       	cpc	r27, r18
     188:	e1 f7       	brne	.-8      	; 0x182 <.do_clear_bss_loop>
     18a:	0e 94 4f 01 	call	0x29e	; 0x29e <main>
     18e:	0c 94 7e 21 	jmp	0x42fc	; 0x42fc <_exit>

00000192 <__bad_interrupt>:
     192:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000196 <__vector_13>:
void quit(void)
{
	/* Surrender */
	writeByte('Q') ;
	writeByte('T') ;
	writeByte('\r') ; 
     196:	1f 92       	push	r1
     198:	0f 92       	push	r0
     19a:	0f b6       	in	r0, 0x3f	; 63
     19c:	0f 92       	push	r0
     19e:	11 24       	eor	r1, r1
     1a0:	8f 93       	push	r24
     1a2:	9f 93       	push	r25
     1a4:	ef 93       	push	r30
     1a6:	ff 93       	push	r31
     1a8:	5d 9b       	sbis	0x0b, 5	; 11
     1aa:	1a c0       	rjmp	.+52     	; 0x1e0 <__vector_13+0x4a>
     1ac:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <TxreadPos>
     1b0:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <TxwritePos>
     1b4:	e8 17       	cp	r30, r24
     1b6:	50 f4       	brcc	.+20     	; 0x1cc <__vector_13+0x36>
     1b8:	f0 e0       	ldi	r31, 0x00	; 0
     1ba:	e4 5f       	subi	r30, 0xF4	; 244
     1bc:	fe 4f       	sbci	r31, 0xFE	; 254
     1be:	80 81       	ld	r24, Z
     1c0:	8c b9       	out	0x0c, r24	; 12
     1c2:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <TxreadPos>
     1c6:	8f 5f       	subi	r24, 0xFF	; 255
     1c8:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <TxreadPos>
     1cc:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <TxreadPos>
     1d0:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <TxwritePos>
     1d4:	98 13       	cpse	r25, r24
     1d6:	04 c0       	rjmp	.+8      	; 0x1e0 <__vector_13+0x4a>
     1d8:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <TxreadPos>
     1dc:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <TxwritePos>
     1e0:	ff 91       	pop	r31
     1e2:	ef 91       	pop	r30
     1e4:	9f 91       	pop	r25
     1e6:	8f 91       	pop	r24
     1e8:	0f 90       	pop	r0
     1ea:	0f be       	out	0x3f, r0	; 63
     1ec:	0f 90       	pop	r0
     1ee:	1f 90       	pop	r1
     1f0:	18 95       	reti

000001f2 <__vector_6>:
     1f2:	1f 92       	push	r1
     1f4:	0f 92       	push	r0
     1f6:	0f b6       	in	r0, 0x3f	; 63
     1f8:	0f 92       	push	r0
     1fa:	11 24       	eor	r1, r1
     1fc:	8f 93       	push	r24
     1fe:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
     202:	8f 5f       	subi	r24, 0xFF	; 255
     204:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_end>
     208:	8f 91       	pop	r24
     20a:	0f 90       	pop	r0
     20c:	0f be       	out	0x3f, r0	; 63
     20e:	0f 90       	pop	r0
     210:	1f 90       	pop	r1
     212:	18 95       	reti

00000214 <init_Tx>:
     214:	90 bd       	out	0x20, r25	; 32
     216:	89 b9       	out	0x09, r24	; 9
     218:	80 e2       	ldi	r24, 0x20	; 32
     21a:	8b b9       	out	0x0b, r24	; 11
     21c:	88 e4       	ldi	r24, 0x48	; 72
     21e:	8a b9       	out	0x0a, r24	; 10
     220:	86 e8       	ldi	r24, 0x86	; 134
     222:	80 bd       	out	0x20, r24	; 32
     224:	08 95       	ret

00000226 <init_Rx>:
     226:	8a b1       	in	r24, 0x0a	; 10
     228:	80 69       	ori	r24, 0x90	; 144
     22a:	8a b9       	out	0x0a, r24	; 10
     22c:	08 95       	ret

0000022e <writeByte>:
     22e:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <TxwritePos>
     232:	e9 2f       	mov	r30, r25
     234:	f0 e0       	ldi	r31, 0x00	; 0
     236:	e4 5f       	subi	r30, 0xF4	; 244
     238:	fe 4f       	sbci	r31, 0xFE	; 254
     23a:	80 83       	st	Z, r24
     23c:	9f 5f       	subi	r25, 0xFF	; 255
     23e:	98 30       	cpi	r25, 0x08	; 8
     240:	19 f0       	breq	.+6      	; 0x248 <writeByte+0x1a>
     242:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <TxwritePos>
     246:	02 c0       	rjmp	.+4      	; 0x24c <writeByte+0x1e>
     248:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <TxwritePos>
     24c:	5d 9b       	sbis	0x0b, 5	; 11
     24e:	0c c0       	rjmp	.+24     	; 0x268 <writeByte+0x3a>
     250:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <TxreadPos>
     254:	f0 e0       	ldi	r31, 0x00	; 0
     256:	e4 5f       	subi	r30, 0xF4	; 244
     258:	fe 4f       	sbci	r31, 0xFE	; 254
     25a:	80 81       	ld	r24, Z
     25c:	8c b9       	out	0x0c, r24	; 12
     25e:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <TxreadPos>
     262:	8f 5f       	subi	r24, 0xFF	; 255
     264:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <TxreadPos>
     268:	08 95       	ret

0000026a <readByte>:
     26a:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <RxwritePos>
     26e:	99 30       	cpi	r25, 0x09	; 9
     270:	40 f4       	brcc	.+16     	; 0x282 <readByte+0x18>
     272:	e9 2f       	mov	r30, r25
     274:	f0 e0       	ldi	r31, 0x00	; 0
     276:	ec 59       	subi	r30, 0x9C	; 156
     278:	fe 4f       	sbci	r31, 0xFE	; 254
     27a:	80 83       	st	Z, r24
     27c:	9f 5f       	subi	r25, 0xFF	; 255
     27e:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <RxwritePos>
     282:	08 95       	ret

00000284 <timerInit>:
     284:	1d bc       	out	0x2d, r1	; 45
     286:	1c bc       	out	0x2c, r1	; 44
     288:	8e b5       	in	r24, 0x2e	; 46
     28a:	88 60       	ori	r24, 0x08	; 8
     28c:	8e bd       	out	0x2e, r24	; 46
     28e:	86 e9       	ldi	r24, 0x96	; 150
     290:	98 e9       	ldi	r25, 0x98	; 152
     292:	9b bd       	out	0x2b, r25	; 43
     294:	8a bd       	out	0x2a, r24	; 42
     296:	89 b7       	in	r24, 0x39	; 57
     298:	80 61       	ori	r24, 0x10	; 16
     29a:	89 bf       	out	0x39, r24	; 57
     29c:	08 95       	ret

0000029e <main>:
     29e:	80 e4       	ldi	r24, 0x40	; 64
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	0e 94 0a 01 	call	0x214	; 0x214 <init_Tx>
     2a6:	0e 94 13 01 	call	0x226	; 0x226 <init_Rx>
     2aa:	87 b3       	in	r24, 0x17	; 23
     2ac:	8f 62       	ori	r24, 0x2F	; 47
     2ae:	87 bb       	out	0x17, r24	; 23
     2b0:	88 b3       	in	r24, 0x18	; 24
     2b2:	8f 62       	ori	r24, 0x2F	; 47
     2b4:	88 bb       	out	0x18, r24	; 24
     2b6:	0e 94 42 01 	call	0x284	; 0x284 <timerInit>
     2ba:	78 94       	sei
     2bc:	ff cf       	rjmp	.-2      	; 0x2bc <main+0x1e>

000002be <asciiToInteger>:
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	fc 01       	movw	r30, r24
     2c2:	f0 97       	sbiw	r30, 0x30	; 48
     2c4:	e9 30       	cpi	r30, 0x09	; 9
     2c6:	f1 05       	cpc	r31, r1
     2c8:	a0 f4       	brcc	.+40     	; 0x2f2 <asciiToInteger+0x34>
     2ca:	e6 5d       	subi	r30, 0xD6	; 214
     2cc:	ff 4f       	sbci	r31, 0xFF	; 255
     2ce:	0c 94 78 21 	jmp	0x42f0	; 0x42f0 <__tablejump2__>
     2d2:	81 e0       	ldi	r24, 0x01	; 1
     2d4:	08 95       	ret
     2d6:	82 e0       	ldi	r24, 0x02	; 2
     2d8:	08 95       	ret
     2da:	83 e0       	ldi	r24, 0x03	; 3
     2dc:	08 95       	ret
     2de:	84 e0       	ldi	r24, 0x04	; 4
     2e0:	08 95       	ret
     2e2:	85 e0       	ldi	r24, 0x05	; 5
     2e4:	08 95       	ret
     2e6:	86 e0       	ldi	r24, 0x06	; 6
     2e8:	08 95       	ret
     2ea:	87 e0       	ldi	r24, 0x07	; 7
     2ec:	08 95       	ret
     2ee:	88 e0       	ldi	r24, 0x08	; 8
     2f0:	08 95       	ret
     2f2:	89 e0       	ldi	r24, 0x09	; 9
     2f4:	08 95       	ret
     2f6:	80 e0       	ldi	r24, 0x00	; 0
     2f8:	08 95       	ret

000002fa <updateRxBuffer>:
     2fa:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <RxwritePos>
     2fe:	8e 2f       	mov	r24, r30
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	88 30       	cpi	r24, 0x08	; 8
     304:	91 05       	cpc	r25, r1
     306:	4c f4       	brge	.+18     	; 0x31a <updateRxBuffer+0x20>
     308:	fc 01       	movw	r30, r24
     30a:	ec 59       	subi	r30, 0x9C	; 156
     30c:	fe 4f       	sbci	r31, 0xFE	; 254
     30e:	8c e6       	ldi	r24, 0x6C	; 108
     310:	91 e0       	ldi	r25, 0x01	; 1
     312:	11 92       	st	Z+, r1
     314:	e8 17       	cp	r30, r24
     316:	f9 07       	cpc	r31, r25
     318:	e1 f7       	brne	.-8      	; 0x312 <updateRxBuffer+0x18>
     31a:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <RxwritePos>
     31e:	08 95       	ret

00000320 <intToAscii>:
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	89 30       	cpi	r24, 0x09	; 9
     324:	91 05       	cpc	r25, r1
     326:	a8 f4       	brcc	.+42     	; 0x352 <intToAscii+0x32>
     328:	fc 01       	movw	r30, r24
     32a:	ed 5c       	subi	r30, 0xCD	; 205
     32c:	ff 4f       	sbci	r31, 0xFF	; 255
     32e:	0c 94 78 21 	jmp	0x42f0	; 0x42f0 <__tablejump2__>
     332:	81 e3       	ldi	r24, 0x31	; 49
     334:	08 95       	ret
     336:	82 e3       	ldi	r24, 0x32	; 50
     338:	08 95       	ret
     33a:	83 e3       	ldi	r24, 0x33	; 51
     33c:	08 95       	ret
     33e:	84 e3       	ldi	r24, 0x34	; 52
     340:	08 95       	ret
     342:	85 e3       	ldi	r24, 0x35	; 53
     344:	08 95       	ret
     346:	86 e3       	ldi	r24, 0x36	; 54
     348:	08 95       	ret
     34a:	87 e3       	ldi	r24, 0x37	; 55
     34c:	08 95       	ret
     34e:	88 e3       	ldi	r24, 0x38	; 56
     350:	08 95       	ret
     352:	89 e3       	ldi	r24, 0x39	; 57
     354:	08 95       	ret
     356:	80 e3       	ldi	r24, 0x30	; 48
     358:	08 95       	ret

0000035a <MyMove>:
     35a:	cf 93       	push	r28
     35c:	df 93       	push	r29
     35e:	d8 2f       	mov	r29, r24
     360:	c6 2f       	mov	r28, r22
     362:	8d e4       	ldi	r24, 0x4D	; 77
     364:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
     368:	8d e4       	ldi	r24, 0x4D	; 77
     36a:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
     36e:	80 e2       	ldi	r24, 0x20	; 32
     370:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
     374:	8d 2f       	mov	r24, r29
     376:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
     37a:	8c 2f       	mov	r24, r28
     37c:	0e 94 90 01 	call	0x320	; 0x320 <intToAscii>
     380:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
     384:	8d e0       	ldi	r24, 0x0D	; 13
     386:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
     38a:	df 91       	pop	r29
     38c:	cf 91       	pop	r28
     38e:	08 95       	ret

00000390 <MyPass>:
     390:	8d e4       	ldi	r24, 0x4D	; 77
     392:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
     396:	80 e5       	ldi	r24, 0x50	; 80
     398:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
     39c:	8d e0       	ldi	r24, 0x0D	; 13
     39e:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
     3a2:	08 95       	ret

000003a4 <Win>:
     3a4:	c1 98       	cbi	0x18, 1	; 24
     3a6:	87 e5       	ldi	r24, 0x57	; 87
     3a8:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
     3ac:	8e e4       	ldi	r24, 0x4E	; 78
     3ae:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
     3b2:	8d e0       	ldi	r24, 0x0D	; 13
     3b4:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
     3b8:	08 95       	ret

000003ba <Lose>:
     3ba:	c2 98       	cbi	0x18, 2	; 24
     3bc:	8c e4       	ldi	r24, 0x4C	; 76
     3be:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
     3c2:	83 e5       	ldi	r24, 0x53	; 83
     3c4:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
     3c8:	8d e0       	ldi	r24, 0x0D	; 13
     3ca:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
     3ce:	08 95       	ret

000003d0 <Tie>:
     3d0:	c3 98       	cbi	0x18, 3	; 24
     3d2:	84 e5       	ldi	r24, 0x54	; 84
     3d4:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
     3d8:	85 e4       	ldi	r24, 0x45	; 69
     3da:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
     3de:	8d e0       	ldi	r24, 0x0D	; 13
     3e0:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
     3e4:	08 95       	ret

000003e6 <IllegalMove>:
     3e6:	89 e4       	ldi	r24, 0x49	; 73
     3e8:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
     3ec:	8c e4       	ldi	r24, 0x4C	; 76
     3ee:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
     3f2:	8d e0       	ldi	r24, 0x0D	; 13
     3f4:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
     3f8:	08 95       	ret

000003fa <IllegalTime>:
     3fa:	89 e4       	ldi	r24, 0x49	; 73
     3fc:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
     400:	84 e5       	ldi	r24, 0x54	; 84
     402:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
     406:	8d e0       	ldi	r24, 0x0D	; 13
     408:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
     40c:	08 95       	ret

0000040e <setChecker>:
	setChecker('E',5,'W',table) ;
}

void setChecker(char c,uint8_t column,char player,uint8_t chessboard[])
{
	uint8_t index = ((c - 65) << 1) ;										/* initial index calculation for byte - array */
     40e:	81 54       	subi	r24, 0x41	; 65
     410:	88 0f       	add	r24, r24
	uint8_t bit = column - 1 ;												/* initial bit that we must enable - disable chess-table cell */
	uint8_t buffer = 0 ;													/* buffer to read the specific byte from memory */
	uint8_t temp = 0 ;
	if (column > 4)
     412:	65 30       	cpi	r22, 0x05	; 5
     414:	10 f4       	brcc	.+4      	; 0x41a <setChecker+0xc>
}

void setChecker(char c,uint8_t column,char player,uint8_t chessboard[])
{
	uint8_t index = ((c - 65) << 1) ;										/* initial index calculation for byte - array */
	uint8_t bit = column - 1 ;												/* initial bit that we must enable - disable chess-table cell */
     416:	61 50       	subi	r22, 0x01	; 1
     418:	02 c0       	rjmp	.+4      	; 0x41e <setChecker+0x10>
	uint8_t buffer = 0 ;													/* buffer to read the specific byte from memory */
	uint8_t temp = 0 ;
	if (column > 4)
	{
		index++ ;
     41a:	8f 5f       	subi	r24, 0xFF	; 255
		bit = bit - 4 ;														/* if column > 4 jump to the next memory position */
     41c:	65 50       	subi	r22, 0x05	; 5
	}
	buffer = chessboard[index] ;
     41e:	f9 01       	movw	r30, r18
     420:	e8 0f       	add	r30, r24
     422:	f1 1d       	adc	r31, r1
     424:	20 81       	ld	r18, Z
	switch(player)
     426:	42 34       	cpi	r20, 0x42	; 66
     428:	99 f4       	brne	.+38     	; 0x450 <setChecker+0x42>
	{
		case 'B':														   /* case black: enable cell and valid bit */
		buffer |= (1 << bit) | (1 << (4 + bit)) ;
     42a:	84 e0       	ldi	r24, 0x04	; 4
     42c:	86 0f       	add	r24, r22
     42e:	41 e0       	ldi	r20, 0x01	; 1
     430:	50 e0       	ldi	r21, 0x00	; 0
     432:	da 01       	movw	r26, r20
     434:	02 c0       	rjmp	.+4      	; 0x43a <setChecker+0x2c>
     436:	aa 0f       	add	r26, r26
     438:	bb 1f       	adc	r27, r27
     43a:	8a 95       	dec	r24
     43c:	e2 f7       	brpl	.-8      	; 0x436 <setChecker+0x28>
     43e:	cd 01       	movw	r24, r26
     440:	82 2b       	or	r24, r18
     442:	02 c0       	rjmp	.+4      	; 0x448 <setChecker+0x3a>
     444:	44 0f       	add	r20, r20
     446:	55 1f       	adc	r21, r21
     448:	6a 95       	dec	r22
     44a:	e2 f7       	brpl	.-8      	; 0x444 <setChecker+0x36>
     44c:	84 2b       	or	r24, r20
		break;
     44e:	12 c0       	rjmp	.+36     	; 0x474 <__stack+0x15>
		default:														  /* case white: reset cell and enable valid bit */
		temp |= (1 << bit) ;
     450:	81 e0       	ldi	r24, 0x01	; 1
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	ac 01       	movw	r20, r24
     456:	06 2e       	mov	r0, r22
     458:	02 c0       	rjmp	.+4      	; 0x45e <setChecker+0x50>
     45a:	44 0f       	add	r20, r20
     45c:	55 1f       	adc	r21, r21
     45e:	0a 94       	dec	r0
     460:	e2 f7       	brpl	.-8      	; 0x45a <setChecker+0x4c>
		temp = ~ temp ;
		buffer = buffer & temp ;
		buffer |= (1 << (4 + bit)) ;
     462:	6c 5f       	subi	r22, 0xFC	; 252
     464:	02 c0       	rjmp	.+4      	; 0x46a <__stack+0xb>
     466:	88 0f       	add	r24, r24
     468:	99 1f       	adc	r25, r25
     46a:	6a 95       	dec	r22
     46c:	e2 f7       	brpl	.-8      	; 0x466 <__stack+0x7>
     46e:	40 95       	com	r20
     470:	42 23       	and	r20, r18
     472:	84 2b       	or	r24, r20
		break;
	}
	chessboard[index] = buffer ;
     474:	80 83       	st	Z, r24
     476:	08 95       	ret

00000478 <readCell>:
	}
}

char readCell(char c,uint8_t column,uint8_t chessboard[])
{
	uint8_t index = ((c - 65) << 1) ;								/* find appropriate index from ascii code */
     478:	81 54       	subi	r24, 0x41	; 65
     47a:	88 0f       	add	r24, r24
	uint8_t bit = column - 1 ;										/* find initial bit position from the column */
	uint8_t buffer = 0 ;
	char retC = 'E' ;
	if (column > 4)													/* if column > jump to the next position for the half byte */
     47c:	65 30       	cpi	r22, 0x05	; 5
     47e:	10 f4       	brcc	.+4      	; 0x484 <readCell+0xc>
}

char readCell(char c,uint8_t column,uint8_t chessboard[])
{
	uint8_t index = ((c - 65) << 1) ;								/* find appropriate index from ascii code */
	uint8_t bit = column - 1 ;										/* find initial bit position from the column */
     480:	61 50       	subi	r22, 0x01	; 1
     482:	02 c0       	rjmp	.+4      	; 0x488 <readCell+0x10>
	uint8_t buffer = 0 ;
	char retC = 'E' ;
	if (column > 4)													/* if column > jump to the next position for the half byte */
	{
		index++ ;
     484:	8f 5f       	subi	r24, 0xFF	; 255
		bit = bit - 4 ;
     486:	65 50       	subi	r22, 0x05	; 5
	}
	buffer = chessboard[index] ;											/* read data from memory cell and store into buffer */
     488:	fa 01       	movw	r30, r20
     48a:	e8 0f       	add	r30, r24
     48c:	f1 1d       	adc	r31, r1
	if (!(buffer & (1 << (4+bit))))									/* if the enable bit of this bit position is zero then this is empty position */
     48e:	80 81       	ld	r24, Z
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	24 e0       	ldi	r18, 0x04	; 4
     494:	26 0f       	add	r18, r22
     496:	ac 01       	movw	r20, r24
     498:	02 c0       	rjmp	.+4      	; 0x49e <readCell+0x26>
     49a:	55 95       	asr	r21
     49c:	47 95       	ror	r20
     49e:	2a 95       	dec	r18
     4a0:	e2 f7       	brpl	.-8      	; 0x49a <readCell+0x22>
     4a2:	40 ff       	sbrs	r20, 0
     4a4:	09 c0       	rjmp	.+18     	; 0x4b8 <readCell+0x40>
	{
		retC = 'E' ;
	}
	else if (buffer & (1 << bit))								   /* if enable-bit is 1 and the bit-pos is 1 then this is black */
     4a6:	02 c0       	rjmp	.+4      	; 0x4ac <readCell+0x34>
     4a8:	95 95       	asr	r25
     4aa:	87 95       	ror	r24
     4ac:	6a 95       	dec	r22
     4ae:	e2 f7       	brpl	.-8      	; 0x4a8 <readCell+0x30>
     4b0:	80 fd       	sbrc	r24, 0
     4b2:	04 c0       	rjmp	.+8      	; 0x4bc <readCell+0x44>
	{
		retC = 'B' ;
	}
	else                                                           /* if only the enable-bit is asserted then this is white */
	{
		retC = 'W' ;
     4b4:	87 e5       	ldi	r24, 0x57	; 87
     4b6:	08 95       	ret
		bit = bit - 4 ;
	}
	buffer = chessboard[index] ;											/* read data from memory cell and store into buffer */
	if (!(buffer & (1 << (4+bit))))									/* if the enable bit of this bit position is zero then this is empty position */
	{
		retC = 'E' ;
     4b8:	85 e4       	ldi	r24, 0x45	; 69
     4ba:	08 95       	ret
	}
	else if (buffer & (1 << bit))								   /* if enable-bit is 1 and the bit-pos is 1 then this is black */
	{
		retC = 'B' ;
     4bc:	82 e4       	ldi	r24, 0x42	; 66
	else                                                           /* if only the enable-bit is asserted then this is white */
	{
		retC = 'W' ;
	}
	return retC ;
}
     4be:	08 95       	ret

000004c0 <checkEnemyMove>:

uint8_t checkEnemyMove(char c, uint8_t column)
{
	uint8_t index = c - 65 ;
	uint8_t bit = column - 1 ;
	uint8_t buffer = enemyValidtable[index] ;
     4c0:	81 54       	subi	r24, 0x41	; 65
     4c2:	e8 2f       	mov	r30, r24
     4c4:	f0 e0       	ldi	r31, 0x00	; 0
     4c6:	e4 58       	subi	r30, 0x84	; 132
     4c8:	ff 4f       	sbci	r31, 0xFF	; 255
	buffer = (buffer >> bit);
     4ca:	20 81       	ld	r18, Z
     4cc:	30 e0       	ldi	r19, 0x00	; 0
     4ce:	61 50       	subi	r22, 0x01	; 1
     4d0:	02 c0       	rjmp	.+4      	; 0x4d6 <checkEnemyMove+0x16>
     4d2:	35 95       	asr	r19
     4d4:	27 95       	ror	r18
     4d6:	6a 95       	dec	r22
     4d8:	e2 f7       	brpl	.-8      	; 0x4d2 <checkEnemyMove+0x12>
     4da:	81 e0       	ldi	r24, 0x01	; 1
     4dc:	20 ff       	sbrs	r18, 0
     4de:	80 e0       	ldi	r24, 0x00	; 0
		return 1;
	}else
	{
		return 0;
	}
}
     4e0:	08 95       	ret

000004e2 <insertMineValid>:

void insertMineValid(char c,uint8_t column)					/* This stores a mine valid move into the validtable */
{
	uint8_t index = c - 65 ;
	uint8_t bit = column - 1 ;
	uint8_t buffer = mineValidtable[index] ;
     4e2:	81 54       	subi	r24, 0x41	; 65
     4e4:	e8 2f       	mov	r30, r24
     4e6:	f0 e0       	ldi	r31, 0x00	; 0
	buffer |= (1 << bit) ;
     4e8:	61 50       	subi	r22, 0x01	; 1
     4ea:	81 e0       	ldi	r24, 0x01	; 1
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <insertMineValid+0x12>
     4f0:	88 0f       	add	r24, r24
     4f2:	99 1f       	adc	r25, r25
     4f4:	6a 95       	dec	r22
     4f6:	e2 f7       	brpl	.-8      	; 0x4f0 <insertMineValid+0xe>

void insertMineValid(char c,uint8_t column)					/* This stores a mine valid move into the validtable */
{
	uint8_t index = c - 65 ;
	uint8_t bit = column - 1 ;
	uint8_t buffer = mineValidtable[index] ;
     4f8:	ec 55       	subi	r30, 0x5C	; 92
     4fa:	ff 4f       	sbci	r31, 0xFF	; 255
	buffer |= (1 << bit) ;
     4fc:	90 81       	ld	r25, Z
     4fe:	89 2b       	or	r24, r25
	mineValidtable[index] = buffer ;
     500:	80 83       	st	Z, r24
     502:	08 95       	ret

00000504 <insertEnemyValid>:

void insertEnemyValid(char c,uint8_t column)					/* This stores a mine valid move into the validtable */
{
	uint8_t index = c - 65 ;
	uint8_t bit = column - 1 ;
	uint8_t buffer = enemyValidtable[index] ;
     504:	81 54       	subi	r24, 0x41	; 65
     506:	e8 2f       	mov	r30, r24
     508:	f0 e0       	ldi	r31, 0x00	; 0
	buffer |= (1 << bit) ;
     50a:	61 50       	subi	r22, 0x01	; 1
     50c:	81 e0       	ldi	r24, 0x01	; 1
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	02 c0       	rjmp	.+4      	; 0x516 <insertEnemyValid+0x12>
     512:	88 0f       	add	r24, r24
     514:	99 1f       	adc	r25, r25
     516:	6a 95       	dec	r22
     518:	e2 f7       	brpl	.-8      	; 0x512 <insertEnemyValid+0xe>

void insertEnemyValid(char c,uint8_t column)					/* This stores a mine valid move into the validtable */
{
	uint8_t index = c - 65 ;
	uint8_t bit = column - 1 ;
	uint8_t buffer = enemyValidtable[index] ;
     51a:	e4 58       	subi	r30, 0x84	; 132
     51c:	ff 4f       	sbci	r31, 0xFF	; 255
	buffer |= (1 << bit) ;
     51e:	90 81       	ld	r25, Z
     520:	89 2b       	or	r24, r25
	enemyValidtable[index] = buffer ;
     522:	80 83       	st	Z, r24
     524:	08 95       	ret

00000526 <checkAvailable>:
	}
	return retC ;
}

void checkAvailable(char c,uint8_t j,char player,char mine)
{
     526:	7f 92       	push	r7
     528:	8f 92       	push	r8
     52a:	9f 92       	push	r9
     52c:	af 92       	push	r10
     52e:	bf 92       	push	r11
     530:	cf 92       	push	r12
     532:	df 92       	push	r13
     534:	ef 92       	push	r14
     536:	ff 92       	push	r15
     538:	0f 93       	push	r16
     53a:	1f 93       	push	r17
     53c:	cf 93       	push	r28
     53e:	df 93       	push	r29
     540:	c8 2f       	mov	r28, r24
     542:	d6 2f       	mov	r29, r22
     544:	c4 2e       	mov	r12, r20
     546:	d2 2e       	mov	r13, r18
	uint8_t found = 0 ;
	uint8_t i = j ;
	uint8_t coltemp = j ;
	switch (player)
     548:	82 e4       	ldi	r24, 0x42	; 66
     54a:	48 13       	cpse	r20, r24
     54c:	c4 c1       	rjmp	.+904    	; 0x8d6 <checkAvailable+0x3b0>
	{
		case 'B':
		/* check right of the enemy - checker for other my own checkers */
		i++ ;
     54e:	01 e0       	ldi	r16, 0x01	; 1
     550:	06 0f       	add	r16, r22
		while (i <= 8 && found == 0 && readCell(c,i,table) != 'E')
     552:	09 30       	cpi	r16, 0x09	; 9
     554:	40 f0       	brcs	.+16     	; 0x566 <checkAvailable+0x40>
     556:	27 c0       	rjmp	.+78     	; 0x5a6 <checkAvailable+0x80>
		{
			
			if (readCell(c,i,table) == 'B')
     558:	82 34       	cpi	r24, 0x42	; 66
     55a:	09 f4       	brne	.+2      	; 0x55e <checkAvailable+0x38>
     55c:	78 c3       	rjmp	.+1776   	; 0xc4e <checkAvailable+0x728>
			{
				found = 1 ;
			}
			i++ ;
     55e:	1f 5f       	subi	r17, 0xFF	; 255
	switch (player)
	{
		case 'B':
		/* check right of the enemy - checker for other my own checkers */
		i++ ;
		while (i <= 8 && found == 0 && readCell(c,i,table) != 'E')
     560:	19 30       	cpi	r17, 0x09	; 9
     562:	11 f4       	brne	.+4      	; 0x568 <checkAvailable+0x42>
     564:	20 c0       	rjmp	.+64     	; 0x5a6 <checkAvailable+0x80>
     566:	10 2f       	mov	r17, r16
     568:	4c eb       	ldi	r20, 0xBC	; 188
     56a:	50 e0       	ldi	r21, 0x00	; 0
     56c:	61 2f       	mov	r22, r17
     56e:	8c 2f       	mov	r24, r28
     570:	0e 94 3c 02 	call	0x478	; 0x478 <readCell>
     574:	85 34       	cpi	r24, 0x45	; 69
     576:	81 f7       	brne	.-32     	; 0x558 <checkAvailable+0x32>
     578:	16 c0       	rjmp	.+44     	; 0x5a6 <checkAvailable+0x80>
			}
			i++ ;
		}
		if (found == 1 && j-1 > 0)
		{
			if (readCell(c,j-1,table) == 'E')
     57a:	1f ef       	ldi	r17, 0xFF	; 255
     57c:	1d 0f       	add	r17, r29
     57e:	4c eb       	ldi	r20, 0xBC	; 188
     580:	50 e0       	ldi	r21, 0x00	; 0
     582:	61 2f       	mov	r22, r17
     584:	8c 2f       	mov	r24, r28
     586:	0e 94 3c 02 	call	0x478	; 0x478 <readCell>
     58a:	85 34       	cpi	r24, 0x45	; 69
     58c:	61 f4       	brne	.+24     	; 0x5a6 <checkAvailable+0x80>
			{
				/* Available move c, j-1 */						/* The valid move is one left */
				if (mine == player)								/* If the colour is mine */
     58e:	92 e4       	ldi	r25, 0x42	; 66
     590:	d9 12       	cpse	r13, r25
     592:	05 c0       	rjmp	.+10     	; 0x59e <checkAvailable+0x78>
				{												/* then save this available move as mine */
					insertMineValid(c,j-1) ;
     594:	61 2f       	mov	r22, r17
     596:	8c 2f       	mov	r24, r28
     598:	0e 94 71 02 	call	0x4e2	; 0x4e2 <insertMineValid>
     59c:	04 c0       	rjmp	.+8      	; 0x5a6 <checkAvailable+0x80>
				}
				else                                           /* else save this move as enemy available move */
				{
					insertEnemyValid(c,j-1) ;
     59e:	61 2f       	mov	r22, r17
     5a0:	8c 2f       	mov	r24, r28
     5a2:	0e 94 82 02 	call	0x504	; 0x504 <insertEnemyValid>
			}
		}
		
		found = 0 ;												/* check left of the enemy - checker for other my own checkers */
		i = j ;
		i-- ;
     5a6:	cc 24       	eor	r12, r12
     5a8:	ca 94       	dec	r12
     5aa:	cd 0e       	add	r12, r29
		while (i > 1 && found == 0 && readCell(c,i,table) != 'E')
     5ac:	81 e0       	ldi	r24, 0x01	; 1
     5ae:	8c 15       	cp	r24, r12
     5b0:	40 f0       	brcs	.+16     	; 0x5c2 <checkAvailable+0x9c>
     5b2:	25 c0       	rjmp	.+74     	; 0x5fe <checkAvailable+0xd8>
		{
			
			if (readCell(c,i,table) == 'B')
     5b4:	82 34       	cpi	r24, 0x42	; 66
     5b6:	09 f4       	brne	.+2      	; 0x5ba <checkAvailable+0x94>
     5b8:	52 c3       	rjmp	.+1700   	; 0xc5e <checkAvailable+0x738>
			{
				found = 1 ;
			}
			i-- ;
     5ba:	11 50       	subi	r17, 0x01	; 1
		}
		
		found = 0 ;												/* check left of the enemy - checker for other my own checkers */
		i = j ;
		i-- ;
		while (i > 1 && found == 0 && readCell(c,i,table) != 'E')
     5bc:	11 30       	cpi	r17, 0x01	; 1
     5be:	11 f4       	brne	.+4      	; 0x5c4 <checkAvailable+0x9e>
     5c0:	1e c0       	rjmp	.+60     	; 0x5fe <checkAvailable+0xd8>
     5c2:	1c 2d       	mov	r17, r12
     5c4:	4c eb       	ldi	r20, 0xBC	; 188
     5c6:	50 e0       	ldi	r21, 0x00	; 0
     5c8:	61 2f       	mov	r22, r17
     5ca:	8c 2f       	mov	r24, r28
     5cc:	0e 94 3c 02 	call	0x478	; 0x478 <readCell>
     5d0:	85 34       	cpi	r24, 0x45	; 69
     5d2:	81 f7       	brne	.-32     	; 0x5b4 <checkAvailable+0x8e>
     5d4:	14 c0       	rjmp	.+40     	; 0x5fe <checkAvailable+0xd8>
			i-- ;
			
		}
		if (found == 1 && j+1 < 9)
		{
			if (readCell(c,j+1,table) == 'E')
     5d6:	4c eb       	ldi	r20, 0xBC	; 188
     5d8:	50 e0       	ldi	r21, 0x00	; 0
     5da:	60 2f       	mov	r22, r16
     5dc:	8c 2f       	mov	r24, r28
     5de:	0e 94 3c 02 	call	0x478	; 0x478 <readCell>
     5e2:	85 34       	cpi	r24, 0x45	; 69
     5e4:	61 f4       	brne	.+24     	; 0x5fe <checkAvailable+0xd8>
			{
				/* Available move c, j+1 */							/* The valid move is one right */
				if (mine == player)									/* If the colour is mine */
     5e6:	92 e4       	ldi	r25, 0x42	; 66
     5e8:	d9 12       	cpse	r13, r25
     5ea:	05 c0       	rjmp	.+10     	; 0x5f6 <checkAvailable+0xd0>
				{                                                   /* then save this move as mine available */
					insertMineValid(c,j+1) ;
     5ec:	60 2f       	mov	r22, r16
     5ee:	8c 2f       	mov	r24, r28
     5f0:	0e 94 71 02 	call	0x4e2	; 0x4e2 <insertMineValid>
     5f4:	04 c0       	rjmp	.+8      	; 0x5fe <checkAvailable+0xd8>
				}
				else                                               /* else save it as opponents available move */
				{
					insertEnemyValid(c,j+1) ;
     5f6:	60 2f       	mov	r22, r16
     5f8:	8c 2f       	mov	r24, r28
     5fa:	0e 94 82 02 	call	0x504	; 0x504 <insertEnemyValid>
			}
		}
		
		found = 0 ;											 /* check up of the enemy - checker for other my own checkers */
		i = c ;
		i-- ;
     5fe:	bb 24       	eor	r11, r11
     600:	ba 94       	dec	r11
     602:	bc 0e       	add	r11, r28
		while (i > '@' && found == 0 && readCell(i,j,table) != 'E')
     604:	80 e4       	ldi	r24, 0x40	; 64
     606:	8b 15       	cp	r24, r11
     608:	40 f0       	brcs	.+16     	; 0x61a <checkAvailable+0xf4>
     60a:	38 c3       	rjmp	.+1648   	; 0xc7c <checkAvailable+0x756>
		{
			
			if (readCell(i,j,table) == 'B')
     60c:	82 34       	cpi	r24, 0x42	; 66
     60e:	09 f4       	brne	.+2      	; 0x612 <checkAvailable+0xec>
     610:	2d c3       	rjmp	.+1626   	; 0xc6c <checkAvailable+0x746>
			{
				found = 1 ;
			}
			i-- ;
     612:	11 50       	subi	r17, 0x01	; 1
		}
		
		found = 0 ;											 /* check up of the enemy - checker for other my own checkers */
		i = c ;
		i-- ;
		while (i > '@' && found == 0 && readCell(i,j,table) != 'E')
     614:	10 34       	cpi	r17, 0x40	; 64
     616:	11 f4       	brne	.+4      	; 0x61c <checkAvailable+0xf6>
     618:	20 c0       	rjmp	.+64     	; 0x65a <checkAvailable+0x134>
     61a:	1b 2d       	mov	r17, r11
     61c:	4c eb       	ldi	r20, 0xBC	; 188
     61e:	50 e0       	ldi	r21, 0x00	; 0
     620:	6d 2f       	mov	r22, r29
     622:	81 2f       	mov	r24, r17
     624:	0e 94 3c 02 	call	0x478	; 0x478 <readCell>
     628:	85 34       	cpi	r24, 0x45	; 69
     62a:	81 f7       	brne	.-32     	; 0x60c <checkAvailable+0xe6>
     62c:	16 c0       	rjmp	.+44     	; 0x65a <checkAvailable+0x134>
			}
			i-- ;
		}
		if (found == 1 && c+1 < 'I')
		{
			if (readCell(c+1,j,table) == 'E')
     62e:	11 e0       	ldi	r17, 0x01	; 1
     630:	1c 0f       	add	r17, r28
     632:	4c eb       	ldi	r20, 0xBC	; 188
     634:	50 e0       	ldi	r21, 0x00	; 0
     636:	6d 2f       	mov	r22, r29
     638:	81 2f       	mov	r24, r17
     63a:	0e 94 3c 02 	call	0x478	; 0x478 <readCell>
     63e:	85 34       	cpi	r24, 0x45	; 69
     640:	61 f4       	brne	.+24     	; 0x65a <checkAvailable+0x134>
			{
				/* Valid pos c+1, j */
				if (mine == player)
     642:	92 e4       	ldi	r25, 0x42	; 66
     644:	d9 12       	cpse	r13, r25
     646:	05 c0       	rjmp	.+10     	; 0x652 <checkAvailable+0x12c>
				{
					insertMineValid(c+1,j) ;
     648:	6d 2f       	mov	r22, r29
     64a:	81 2f       	mov	r24, r17
     64c:	0e 94 71 02 	call	0x4e2	; 0x4e2 <insertMineValid>
     650:	04 c0       	rjmp	.+8      	; 0x65a <checkAvailable+0x134>
				}
				else
				{
					insertEnemyValid(c+1,j) ;
     652:	6d 2f       	mov	r22, r29
     654:	81 2f       	mov	r24, r17
     656:	0e 94 82 02 	call	0x504	; 0x504 <insertEnemyValid>
			}
		}
		
		found = 0 ;										   /* check down of the enemy - checker for other my own checkers */
		i = c ;
		i++ ;
     65a:	11 e0       	ldi	r17, 0x01	; 1
     65c:	1c 0f       	add	r17, r28
		while (i < 'I' && found == 0 && readCell(i,j,table) != 'E')
     65e:	19 34       	cpi	r17, 0x49	; 73
     660:	48 f0       	brcs	.+18     	; 0x674 <checkAvailable+0x14e>
     662:	21 c0       	rjmp	.+66     	; 0x6a6 <checkAvailable+0x180>
		{
			if (readCell(i,j,table) == 'B')
     664:	82 34       	cpi	r24, 0x42	; 66
     666:	09 f4       	brne	.+2      	; 0x66a <checkAvailable+0x144>
     668:	0f c3       	rjmp	.+1566   	; 0xc88 <checkAvailable+0x762>
			{
				found = 1 ;
			}
			i++ ;
     66a:	f3 94       	inc	r15
		}
		
		found = 0 ;										   /* check down of the enemy - checker for other my own checkers */
		i = c ;
		i++ ;
		while (i < 'I' && found == 0 && readCell(i,j,table) != 'E')
     66c:	89 e4       	ldi	r24, 0x49	; 73
     66e:	f8 12       	cpse	r15, r24
     670:	02 c0       	rjmp	.+4      	; 0x676 <checkAvailable+0x150>
     672:	19 c0       	rjmp	.+50     	; 0x6a6 <checkAvailable+0x180>
		}
		
		found = 0 ;											 /* check up of the enemy - checker for other my own checkers */
		i = c ;
		i-- ;
		while (i > '@' && found == 0 && readCell(i,j,table) != 'E')
     674:	f1 2e       	mov	r15, r17
		}
		
		found = 0 ;										   /* check down of the enemy - checker for other my own checkers */
		i = c ;
		i++ ;
		while (i < 'I' && found == 0 && readCell(i,j,table) != 'E')
     676:	4c eb       	ldi	r20, 0xBC	; 188
     678:	50 e0       	ldi	r21, 0x00	; 0
     67a:	6d 2f       	mov	r22, r29
     67c:	8f 2d       	mov	r24, r15
     67e:	0e 94 3c 02 	call	0x478	; 0x478 <readCell>
     682:	85 34       	cpi	r24, 0x45	; 69
     684:	79 f7       	brne	.-34     	; 0x664 <checkAvailable+0x13e>
     686:	0f c0       	rjmp	.+30     	; 0x6a6 <checkAvailable+0x180>
			}
			i++ ;
		}
		if (found == 1 && c - 1 > '@')
		{
			if (readCell(c-1,j,table) == 'E')
     688:	4c eb       	ldi	r20, 0xBC	; 188
     68a:	50 e0       	ldi	r21, 0x00	; 0
     68c:	6d 2f       	mov	r22, r29
     68e:	8b 2d       	mov	r24, r11
     690:	0e 94 3c 02 	call	0x478	; 0x478 <readCell>
     694:	85 34       	cpi	r24, 0x45	; 69
     696:	39 f4       	brne	.+14     	; 0x6a6 <checkAvailable+0x180>
			{
				/* Valid pos c-1,j */
				if (mine == player)
     698:	92 e4       	ldi	r25, 0x42	; 66
     69a:	d9 12       	cpse	r13, r25
     69c:	0b c0       	rjmp	.+22     	; 0x6b4 <checkAvailable+0x18e>
				{
					insertMineValid(c-1,j) ;
     69e:	6d 2f       	mov	r22, r29
     6a0:	8b 2d       	mov	r24, r11
     6a2:	0e 94 71 02 	call	0x4e2	; 0x4e2 <insertMineValid>
		/* check main diagon up */
		found = 0 ;
		i = c ;
		i-- ;
		coltemp++ ;
		while (i > '@' && coltemp < 9 && (readCell(i,coltemp,table) != 'E') && found == 0)
     6a6:	80 e4       	ldi	r24, 0x40	; 64
     6a8:	8b 15       	cp	r24, r11
     6aa:	08 f0       	brcs	.+2      	; 0x6ae <checkAvailable+0x188>
     6ac:	43 c0       	rjmp	.+134    	; 0x734 <checkAvailable+0x20e>
     6ae:	09 30       	cpi	r16, 0x09	; 9
     6b0:	98 f0       	brcs	.+38     	; 0x6d8 <checkAvailable+0x1b2>
     6b2:	40 c0       	rjmp	.+128    	; 0x734 <checkAvailable+0x20e>
				{
					insertMineValid(c-1,j) ;
				}
				else
				{
					insertEnemyValid(c-1,j) ;
     6b4:	6d 2f       	mov	r22, r29
     6b6:	8b 2d       	mov	r24, r11
     6b8:	0e 94 82 02 	call	0x504	; 0x504 <insertEnemyValid>
     6bc:	f4 cf       	rjmp	.-24     	; 0x6a6 <checkAvailable+0x180>
		coltemp++ ;
		while (i > '@' && coltemp < 9 && (readCell(i,coltemp,table) != 'E') && found == 0)
		{
			if (readCell(i,coltemp,table) == 'B')
			{
				found = 1 ;
     6be:	a9 2c       	mov	r10, r9
     6c0:	82 34       	cpi	r24, 0x42	; 66
     6c2:	09 f0       	breq	.+2      	; 0x6c6 <checkAvailable+0x1a0>
     6c4:	a8 2c       	mov	r10, r8
			}
			i-- ;
     6c6:	fa 94       	dec	r15
			coltemp++ ;
     6c8:	e3 94       	inc	r14
		/* check main diagon up */
		found = 0 ;
		i = c ;
		i-- ;
		coltemp++ ;
		while (i > '@' && coltemp < 9 && (readCell(i,coltemp,table) != 'E') && found == 0)
     6ca:	90 e4       	ldi	r25, 0x40	; 64
     6cc:	f9 16       	cp	r15, r25
     6ce:	a1 f0       	breq	.+40     	; 0x6f8 <checkAvailable+0x1d2>
     6d0:	89 e0       	ldi	r24, 0x09	; 9
     6d2:	e8 12       	cpse	r14, r24
     6d4:	07 c0       	rjmp	.+14     	; 0x6e4 <checkAvailable+0x1be>
     6d6:	10 c0       	rjmp	.+32     	; 0x6f8 <checkAvailable+0x1d2>
     6d8:	e0 2e       	mov	r14, r16
     6da:	fb 2c       	mov	r15, r11
     6dc:	a1 2c       	mov	r10, r1
		{
			if (readCell(i,coltemp,table) == 'B')
			{
				found = 1 ;
     6de:	99 24       	eor	r9, r9
     6e0:	93 94       	inc	r9
     6e2:	81 2c       	mov	r8, r1
		/* check main diagon up */
		found = 0 ;
		i = c ;
		i-- ;
		coltemp++ ;
		while (i > '@' && coltemp < 9 && (readCell(i,coltemp,table) != 'E') && found == 0)
     6e4:	4c eb       	ldi	r20, 0xBC	; 188
     6e6:	50 e0       	ldi	r21, 0x00	; 0
     6e8:	6e 2d       	mov	r22, r14
     6ea:	8f 2d       	mov	r24, r15
     6ec:	0e 94 3c 02 	call	0x478	; 0x478 <readCell>
     6f0:	85 34       	cpi	r24, 0x45	; 69
     6f2:	11 f0       	breq	.+4      	; 0x6f8 <checkAvailable+0x1d2>
     6f4:	aa 20       	and	r10, r10
     6f6:	19 f3       	breq	.-58     	; 0x6be <checkAvailable+0x198>
				found = 1 ;
			}
			i-- ;
			coltemp++ ;
		}
		if (found == 1 && (c+1 < 'I') && (j-1 > 0))
     6f8:	91 e0       	ldi	r25, 0x01	; 1
     6fa:	a9 12       	cpse	r10, r25
     6fc:	1b c0       	rjmp	.+54     	; 0x734 <checkAvailable+0x20e>
     6fe:	8c 2f       	mov	r24, r28
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	01 96       	adiw	r24, 0x01	; 1
     704:	89 34       	cpi	r24, 0x49	; 73
     706:	91 05       	cpc	r25, r1
     708:	ac f4       	brge	.+42     	; 0x734 <checkAvailable+0x20e>
     70a:	8d 2f       	mov	r24, r29
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	01 97       	sbiw	r24, 0x01	; 1
     710:	18 16       	cp	r1, r24
     712:	19 06       	cpc	r1, r25
     714:	7c f4       	brge	.+30     	; 0x734 <checkAvailable+0x20e>
		{
			if (readCell(c+1,j-1,table) == 'E')
     716:	4c eb       	ldi	r20, 0xBC	; 188
     718:	50 e0       	ldi	r21, 0x00	; 0
     71a:	6c 2d       	mov	r22, r12
     71c:	81 2f       	mov	r24, r17
     71e:	0e 94 3c 02 	call	0x478	; 0x478 <readCell>
     722:	85 34       	cpi	r24, 0x45	; 69
     724:	39 f4       	brne	.+14     	; 0x734 <checkAvailable+0x20e>
			{
				/* Valid pos c+1,j-1 */
				if (mine == player)
     726:	82 e4       	ldi	r24, 0x42	; 66
     728:	d8 12       	cpse	r13, r24
     72a:	0a c0       	rjmp	.+20     	; 0x740 <checkAvailable+0x21a>
				{
					insertMineValid(c+1,j-1) ;
     72c:	6c 2d       	mov	r22, r12
     72e:	81 2f       	mov	r24, r17
     730:	0e 94 71 02 	call	0x4e2	; 0x4e2 <insertMineValid>
		found = 0 ;
		i = c ;
		coltemp = j ;
		i++ ;
		coltemp-- ;
		while((i < 'I') && (coltemp > 0) && (found == 0) && (readCell(i,coltemp,table) != 'E'))
     734:	19 34       	cpi	r17, 0x49	; 73
     736:	08 f0       	brcs	.+2      	; 0x73a <checkAvailable+0x214>
     738:	af c2       	rjmp	.+1374   	; 0xc98 <checkAvailable+0x772>
     73a:	c1 10       	cpse	r12, r1
     73c:	10 c0       	rjmp	.+32     	; 0x75e <checkAvailable+0x238>
     73e:	80 c0       	rjmp	.+256    	; 0x840 <checkAvailable+0x31a>
				{
					insertMineValid(c+1,j-1) ;
				}
				else
				{
					insertEnemyValid(c+1,j-1) ;
     740:	6c 2d       	mov	r22, r12
     742:	81 2f       	mov	r24, r17
     744:	0e 94 82 02 	call	0x504	; 0x504 <insertEnemyValid>
     748:	f5 cf       	rjmp	.-22     	; 0x734 <checkAvailable+0x20e>
		{
			if (readCell(i,coltemp,table) == 'B')
			{
				found = 1 ;
			}
			i++ ;
     74a:	f3 94       	inc	r15
			coltemp-- ;
     74c:	ea 94       	dec	r14
		found = 0 ;
		i = c ;
		coltemp = j ;
		i++ ;
		coltemp-- ;
		while((i < 'I') && (coltemp > 0) && (found == 0) && (readCell(i,coltemp,table) != 'E'))
     74e:	99 e4       	ldi	r25, 0x49	; 73
     750:	f9 16       	cp	r15, r25
     752:	81 f0       	breq	.+32     	; 0x774 <checkAvailable+0x24e>
     754:	ee 20       	and	r14, r14
     756:	71 f0       	breq	.+28     	; 0x774 <checkAvailable+0x24e>
     758:	82 34       	cpi	r24, 0x42	; 66
     75a:	19 f4       	brne	.+6      	; 0x762 <checkAvailable+0x23c>
     75c:	0b c0       	rjmp	.+22     	; 0x774 <checkAvailable+0x24e>
     75e:	ec 2c       	mov	r14, r12
     760:	f1 2e       	mov	r15, r17
     762:	4c eb       	ldi	r20, 0xBC	; 188
     764:	50 e0       	ldi	r21, 0x00	; 0
     766:	6e 2d       	mov	r22, r14
     768:	8f 2d       	mov	r24, r15
     76a:	0e 94 3c 02 	call	0x478	; 0x478 <readCell>
     76e:	85 34       	cpi	r24, 0x45	; 69
     770:	61 f7       	brne	.-40     	; 0x74a <checkAvailable+0x224>
     772:	21 c0       	rjmp	.+66     	; 0x7b6 <checkAvailable+0x290>
				found = 1 ;
			}
			i++ ;
			coltemp-- ;
		}
		if (found == 1 && (c-1 > '@') && (j+1 < 9))
     774:	82 34       	cpi	r24, 0x42	; 66
     776:	09 f0       	breq	.+2      	; 0x77a <checkAvailable+0x254>
     778:	94 c2       	rjmp	.+1320   	; 0xca2 <checkAvailable+0x77c>
     77a:	8c 2f       	mov	r24, r28
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	01 97       	sbiw	r24, 0x01	; 1
     780:	81 34       	cpi	r24, 0x41	; 65
     782:	91 05       	cpc	r25, r1
     784:	0c f4       	brge	.+2      	; 0x788 <checkAvailable+0x262>
     786:	8d c2       	rjmp	.+1306   	; 0xca2 <checkAvailable+0x77c>
     788:	8d 2f       	mov	r24, r29
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	01 96       	adiw	r24, 0x01	; 1
     78e:	09 97       	sbiw	r24, 0x09	; 9
     790:	0c f0       	brlt	.+2      	; 0x794 <checkAvailable+0x26e>
     792:	87 c2       	rjmp	.+1294   	; 0xca2 <checkAvailable+0x77c>
		{
			if (readCell(c-1,j+1,table) == 'E')
     794:	4c eb       	ldi	r20, 0xBC	; 188
     796:	50 e0       	ldi	r21, 0x00	; 0
     798:	60 2f       	mov	r22, r16
     79a:	8b 2d       	mov	r24, r11
     79c:	0e 94 3c 02 	call	0x478	; 0x478 <readCell>
     7a0:	85 34       	cpi	r24, 0x45	; 69
     7a2:	09 f0       	breq	.+2      	; 0x7a6 <checkAvailable+0x280>
     7a4:	7e c2       	rjmp	.+1276   	; 0xca2 <checkAvailable+0x77c>
			{
				/* Valid pos c-1, j+1 */
				if (player == mine)
     7a6:	82 e4       	ldi	r24, 0x42	; 66
     7a8:	d8 12       	cpse	r13, r24
     7aa:	0c c0       	rjmp	.+24     	; 0x7c4 <checkAvailable+0x29e>
				{
					insertMineValid(c-1,j+1) ;
     7ac:	60 2f       	mov	r22, r16
     7ae:	8b 2d       	mov	r24, r11
     7b0:	0e 94 71 02 	call	0x4e2	; 0x4e2 <insertMineValid>
     7b4:	76 c2       	rjmp	.+1260   	; 0xca2 <checkAvailable+0x77c>
		found = 0 ;
		i = c ;
		coltemp = j ;
		i-- ;
		coltemp-- ;
		while((i > '@') && (coltemp > 0) && (readCell(i,coltemp,table) != 'E') && (found == 0))
     7b6:	90 e4       	ldi	r25, 0x40	; 64
     7b8:	9b 15       	cp	r25, r11
     7ba:	08 f0       	brcs	.+2      	; 0x7be <checkAvailable+0x298>
     7bc:	41 c0       	rjmp	.+130    	; 0x840 <checkAvailable+0x31a>
     7be:	c1 10       	cpse	r12, r1
     7c0:	12 c0       	rjmp	.+36     	; 0x7e6 <checkAvailable+0x2c0>
     7c2:	3e c0       	rjmp	.+124    	; 0x840 <checkAvailable+0x31a>
				{
					insertMineValid(c-1,j+1) ;
				}
				else
				{
					insertEnemyValid(c-1,j+1) ;
     7c4:	60 2f       	mov	r22, r16
     7c6:	8b 2d       	mov	r24, r11
     7c8:	0e 94 82 02 	call	0x504	; 0x504 <insertEnemyValid>
     7cc:	6a c2       	rjmp	.+1236   	; 0xca2 <checkAvailable+0x77c>
		coltemp-- ;
		while((i > '@') && (coltemp > 0) && (readCell(i,coltemp,table) != 'E') && (found == 0))
		{
			if (readCell(i,coltemp,table) == 'B')
			{
				found = 1 ;
     7ce:	a9 2c       	mov	r10, r9
     7d0:	82 34       	cpi	r24, 0x42	; 66
     7d2:	09 f0       	breq	.+2      	; 0x7d6 <checkAvailable+0x2b0>
     7d4:	a8 2c       	mov	r10, r8
			}
			i-- ;
     7d6:	fa 94       	dec	r15
			coltemp-- ;
     7d8:	ea 94       	dec	r14
		found = 0 ;
		i = c ;
		coltemp = j ;
		i-- ;
		coltemp-- ;
		while((i > '@') && (coltemp > 0) && (readCell(i,coltemp,table) != 'E') && (found == 0))
     7da:	80 e4       	ldi	r24, 0x40	; 64
     7dc:	f8 16       	cp	r15, r24
     7de:	99 f0       	breq	.+38     	; 0x806 <checkAvailable+0x2e0>
     7e0:	e1 10       	cpse	r14, r1
     7e2:	07 c0       	rjmp	.+14     	; 0x7f2 <checkAvailable+0x2cc>
     7e4:	10 c0       	rjmp	.+32     	; 0x806 <checkAvailable+0x2e0>
		found = 0 ;
		i = c ;
		coltemp = j ;
		i++ ;
		coltemp-- ;
		while((i < 'I') && (coltemp > 0) && (found == 0) && (readCell(i,coltemp,table) != 'E'))
     7e6:	ec 2c       	mov	r14, r12
     7e8:	fb 2c       	mov	r15, r11
     7ea:	a1 2c       	mov	r10, r1
		coltemp-- ;
		while((i > '@') && (coltemp > 0) && (readCell(i,coltemp,table) != 'E') && (found == 0))
		{
			if (readCell(i,coltemp,table) == 'B')
			{
				found = 1 ;
     7ec:	99 24       	eor	r9, r9
     7ee:	93 94       	inc	r9
     7f0:	81 2c       	mov	r8, r1
		found = 0 ;
		i = c ;
		coltemp = j ;
		i-- ;
		coltemp-- ;
		while((i > '@') && (coltemp > 0) && (readCell(i,coltemp,table) != 'E') && (found == 0))
     7f2:	4c eb       	ldi	r20, 0xBC	; 188
     7f4:	50 e0       	ldi	r21, 0x00	; 0
     7f6:	6e 2d       	mov	r22, r14
     7f8:	8f 2d       	mov	r24, r15
     7fa:	0e 94 3c 02 	call	0x478	; 0x478 <readCell>
     7fe:	85 34       	cpi	r24, 0x45	; 69
     800:	11 f0       	breq	.+4      	; 0x806 <checkAvailable+0x2e0>
     802:	aa 20       	and	r10, r10
     804:	21 f3       	breq	.-56     	; 0x7ce <checkAvailable+0x2a8>
				found = 1 ;
			}
			i-- ;
			coltemp-- ;
		}
		if (found == 1 && (c+1 < 'I') && (j+1 < 9))
     806:	91 e0       	ldi	r25, 0x01	; 1
     808:	a9 12       	cpse	r10, r25
     80a:	1a c0       	rjmp	.+52     	; 0x840 <checkAvailable+0x31a>
     80c:	8c 2f       	mov	r24, r28
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	01 96       	adiw	r24, 0x01	; 1
     812:	89 34       	cpi	r24, 0x49	; 73
     814:	91 05       	cpc	r25, r1
     816:	a4 f4       	brge	.+40     	; 0x840 <checkAvailable+0x31a>
     818:	8d 2f       	mov	r24, r29
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	01 96       	adiw	r24, 0x01	; 1
     81e:	09 97       	sbiw	r24, 0x09	; 9
     820:	7c f4       	brge	.+30     	; 0x840 <checkAvailable+0x31a>
		{
			if (readCell(c+1,j+1,table) == 'E')
     822:	4c eb       	ldi	r20, 0xBC	; 188
     824:	50 e0       	ldi	r21, 0x00	; 0
     826:	60 2f       	mov	r22, r16
     828:	81 2f       	mov	r24, r17
     82a:	0e 94 3c 02 	call	0x478	; 0x478 <readCell>
     82e:	85 34       	cpi	r24, 0x45	; 69
     830:	39 f4       	brne	.+14     	; 0x840 <checkAvailable+0x31a>
			{
				/* Valid move c+1,j+1 */
				if (player == mine)
     832:	82 e4       	ldi	r24, 0x42	; 66
     834:	d8 12       	cpse	r13, r24
     836:	0a c0       	rjmp	.+20     	; 0x84c <checkAvailable+0x326>
				{
					insertMineValid(c+1,j+1) ;
     838:	60 2f       	mov	r22, r16
     83a:	81 2f       	mov	r24, r17
     83c:	0e 94 71 02 	call	0x4e2	; 0x4e2 <insertMineValid>
		found = 0 ;
		i = c ;
		coltemp = j ;
		i++ ;
		coltemp++ ;
		while ((i < 'I') && (coltemp < 9) && (readCell(i,coltemp,table) != 'E') && (found == 0))
     840:	19 34       	cpi	r17, 0x49	; 73
     842:	08 f0       	brcs	.+2      	; 0x846 <checkAvailable+0x320>
     844:	61 c2       	rjmp	.+1218   	; 0xd08 <checkAvailable+0x7e2>
     846:	09 30       	cpi	r16, 0x09	; 9
     848:	88 f0       	brcs	.+34     	; 0x86c <checkAvailable+0x346>
     84a:	5e c2       	rjmp	.+1212   	; 0xd08 <checkAvailable+0x7e2>
				{
					insertMineValid(c+1,j+1) ;
				}
				else
				{
					insertEnemyValid(c+1,j+1) ;
     84c:	60 2f       	mov	r22, r16
     84e:	81 2f       	mov	r24, r17
     850:	0e 94 82 02 	call	0x504	; 0x504 <insertEnemyValid>
     854:	f5 cf       	rjmp	.-22     	; 0x840 <checkAvailable+0x31a>
		coltemp++ ;
		while ((i < 'I') && (coltemp < 9) && (readCell(i,coltemp,table) != 'E') && (found == 0))
		{
			if (readCell(i,coltemp,table) == 'B')
			{
				found = 1 ;
     856:	fe 2c       	mov	r15, r14
     858:	82 34       	cpi	r24, 0x42	; 66
     85a:	09 f0       	breq	.+2      	; 0x85e <checkAvailable+0x338>
     85c:	fa 2c       	mov	r15, r10
			}
			i++ ;
     85e:	1f 5f       	subi	r17, 0xFF	; 255
			coltemp++ ;
     860:	0f 5f       	subi	r16, 0xFF	; 255
		found = 0 ;
		i = c ;
		coltemp = j ;
		i++ ;
		coltemp++ ;
		while ((i < 'I') && (coltemp < 9) && (readCell(i,coltemp,table) != 'E') && (found == 0))
     862:	19 34       	cpi	r17, 0x49	; 73
     864:	89 f0       	breq	.+34     	; 0x888 <checkAvailable+0x362>
     866:	09 30       	cpi	r16, 0x09	; 9
     868:	29 f4       	brne	.+10     	; 0x874 <checkAvailable+0x34e>
     86a:	0e c0       	rjmp	.+28     	; 0x888 <checkAvailable+0x362>
     86c:	f1 2c       	mov	r15, r1
		{
			if (readCell(i,coltemp,table) == 'B')
			{
				found = 1 ;
     86e:	ee 24       	eor	r14, r14
     870:	e3 94       	inc	r14
     872:	a1 2c       	mov	r10, r1
		found = 0 ;
		i = c ;
		coltemp = j ;
		i++ ;
		coltemp++ ;
		while ((i < 'I') && (coltemp < 9) && (readCell(i,coltemp,table) != 'E') && (found == 0))
     874:	4c eb       	ldi	r20, 0xBC	; 188
     876:	50 e0       	ldi	r21, 0x00	; 0
     878:	60 2f       	mov	r22, r16
     87a:	81 2f       	mov	r24, r17
     87c:	0e 94 3c 02 	call	0x478	; 0x478 <readCell>
     880:	85 34       	cpi	r24, 0x45	; 69
     882:	11 f0       	breq	.+4      	; 0x888 <checkAvailable+0x362>
     884:	ff 20       	and	r15, r15
     886:	39 f3       	breq	.-50     	; 0x856 <checkAvailable+0x330>
				found = 1 ;
			}
			i++ ;
			coltemp++ ;
		}
		if ((found == 1) && (c-1 > '@') && (j-1 > 0))
     888:	91 e0       	ldi	r25, 0x01	; 1
     88a:	f9 12       	cpse	r15, r25
     88c:	3d c2       	rjmp	.+1146   	; 0xd08 <checkAvailable+0x7e2>
     88e:	8c 2f       	mov	r24, r28
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	01 97       	sbiw	r24, 0x01	; 1
     894:	81 34       	cpi	r24, 0x41	; 65
     896:	91 05       	cpc	r25, r1
     898:	0c f4       	brge	.+2      	; 0x89c <checkAvailable+0x376>
     89a:	36 c2       	rjmp	.+1132   	; 0xd08 <checkAvailable+0x7e2>
     89c:	8d 2f       	mov	r24, r29
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	01 97       	sbiw	r24, 0x01	; 1
     8a2:	18 16       	cp	r1, r24
     8a4:	19 06       	cpc	r1, r25
     8a6:	0c f0       	brlt	.+2      	; 0x8aa <checkAvailable+0x384>
     8a8:	2f c2       	rjmp	.+1118   	; 0xd08 <checkAvailable+0x7e2>
		{
			if (readCell(c-1,j-1,table) == 'E')
     8aa:	4c eb       	ldi	r20, 0xBC	; 188
     8ac:	50 e0       	ldi	r21, 0x00	; 0
     8ae:	6c 2d       	mov	r22, r12
     8b0:	8b 2d       	mov	r24, r11
     8b2:	0e 94 3c 02 	call	0x478	; 0x478 <readCell>
     8b6:	85 34       	cpi	r24, 0x45	; 69
     8b8:	09 f0       	breq	.+2      	; 0x8bc <checkAvailable+0x396>
     8ba:	26 c2       	rjmp	.+1100   	; 0xd08 <checkAvailable+0x7e2>
			{
				/* Valid pos c-1,j-1 */
				if (player == mine)
     8bc:	82 e4       	ldi	r24, 0x42	; 66
     8be:	d8 12       	cpse	r13, r24
     8c0:	05 c0       	rjmp	.+10     	; 0x8cc <checkAvailable+0x3a6>
				{
					insertMineValid(c-1,j-1) ;
     8c2:	6c 2d       	mov	r22, r12
     8c4:	8b 2d       	mov	r24, r11
     8c6:	0e 94 71 02 	call	0x4e2	; 0x4e2 <insertMineValid>
     8ca:	1e c2       	rjmp	.+1084   	; 0xd08 <checkAvailable+0x7e2>
				}
				else
				{
					insertEnemyValid(c-1,j-1) ;
     8cc:	6c 2d       	mov	r22, r12
     8ce:	8b 2d       	mov	r24, r11
     8d0:	0e 94 82 02 	call	0x504	; 0x504 <insertEnemyValid>
     8d4:	19 c2       	rjmp	.+1074   	; 0xd08 <checkAvailable+0x7e2>
		
		break;
		/* check available moves for white player */
		default:
		/* check right of the enemy - checker for other my own checkers */
		i++ ;
     8d6:	01 e0       	ldi	r16, 0x01	; 1
     8d8:	06 0f       	add	r16, r22
		while (i <= 8 && found == 0 && readCell(c,i,table) != 'E')
     8da:	09 30       	cpi	r16, 0x09	; 9
     8dc:	40 f0       	brcs	.+16     	; 0x8ee <checkAvailable+0x3c8>
     8de:	26 c0       	rjmp	.+76     	; 0x92c <checkAvailable+0x406>
		{
			
			if (readCell(c,i,table) == 'W')
     8e0:	87 35       	cpi	r24, 0x57	; 87
     8e2:	09 f4       	brne	.+2      	; 0x8e6 <checkAvailable+0x3c0>
     8e4:	e3 c1       	rjmp	.+966    	; 0xcac <checkAvailable+0x786>
			{
				found = 1 ;
			}
			i++ ;
     8e6:	1f 5f       	subi	r17, 0xFF	; 255
		break;
		/* check available moves for white player */
		default:
		/* check right of the enemy - checker for other my own checkers */
		i++ ;
		while (i <= 8 && found == 0 && readCell(c,i,table) != 'E')
     8e8:	19 30       	cpi	r17, 0x09	; 9
     8ea:	11 f4       	brne	.+4      	; 0x8f0 <checkAvailable+0x3ca>
     8ec:	1f c0       	rjmp	.+62     	; 0x92c <checkAvailable+0x406>
     8ee:	10 2f       	mov	r17, r16
     8f0:	4c eb       	ldi	r20, 0xBC	; 188
     8f2:	50 e0       	ldi	r21, 0x00	; 0
     8f4:	61 2f       	mov	r22, r17
     8f6:	8c 2f       	mov	r24, r28
     8f8:	0e 94 3c 02 	call	0x478	; 0x478 <readCell>
     8fc:	85 34       	cpi	r24, 0x45	; 69
     8fe:	81 f7       	brne	.-32     	; 0x8e0 <checkAvailable+0x3ba>
     900:	15 c0       	rjmp	.+42     	; 0x92c <checkAvailable+0x406>
			}
			i++ ;
		}
		if (found == 1 && j-1 > 0)
		{
			if (readCell(c,j-1,table) == 'E')
     902:	1f ef       	ldi	r17, 0xFF	; 255
     904:	1d 0f       	add	r17, r29
     906:	4c eb       	ldi	r20, 0xBC	; 188
     908:	50 e0       	ldi	r21, 0x00	; 0
     90a:	61 2f       	mov	r22, r17
     90c:	8c 2f       	mov	r24, r28
     90e:	0e 94 3c 02 	call	0x478	; 0x478 <readCell>
     912:	85 34       	cpi	r24, 0x45	; 69
     914:	59 f4       	brne	.+22     	; 0x92c <checkAvailable+0x406>
			{
				/* Available move c, j-1 */						/* The valid move is one left */
				if (mine == player)
     916:	cd 10       	cpse	r12, r13
     918:	05 c0       	rjmp	.+10     	; 0x924 <checkAvailable+0x3fe>
				{
					insertMineValid(c,j-1) ;
     91a:	61 2f       	mov	r22, r17
     91c:	8c 2f       	mov	r24, r28
     91e:	0e 94 71 02 	call	0x4e2	; 0x4e2 <insertMineValid>
     922:	04 c0       	rjmp	.+8      	; 0x92c <checkAvailable+0x406>
				}
				else
				{
					insertEnemyValid(c,j-1) ;
     924:	61 2f       	mov	r22, r17
     926:	8c 2f       	mov	r24, r28
     928:	0e 94 82 02 	call	0x504	; 0x504 <insertEnemyValid>
			}
		}
		
		found = 0 ;												/* check left of the enemy - checker for other my own checkers */
		i = j ;
		i-- ;
     92c:	bb 24       	eor	r11, r11
     92e:	ba 94       	dec	r11
     930:	bd 0e       	add	r11, r29
		while (i > 1 && found == 0 && readCell(c,i,table) != 'E')
     932:	91 e0       	ldi	r25, 0x01	; 1
     934:	9b 15       	cp	r25, r11
     936:	40 f0       	brcs	.+16     	; 0x948 <checkAvailable+0x422>
     938:	24 c0       	rjmp	.+72     	; 0x982 <checkAvailable+0x45c>
		{
			
			if (readCell(c,i,table) == 'W')
     93a:	87 35       	cpi	r24, 0x57	; 87
     93c:	09 f4       	brne	.+2      	; 0x940 <checkAvailable+0x41a>
     93e:	be c1       	rjmp	.+892    	; 0xcbc <checkAvailable+0x796>
			{
				found = 1 ;
			}
			i-- ;
     940:	11 50       	subi	r17, 0x01	; 1
		}
		
		found = 0 ;												/* check left of the enemy - checker for other my own checkers */
		i = j ;
		i-- ;
		while (i > 1 && found == 0 && readCell(c,i,table) != 'E')
     942:	11 30       	cpi	r17, 0x01	; 1
     944:	11 f4       	brne	.+4      	; 0x94a <checkAvailable+0x424>
     946:	1d c0       	rjmp	.+58     	; 0x982 <checkAvailable+0x45c>
     948:	1b 2d       	mov	r17, r11
     94a:	4c eb       	ldi	r20, 0xBC	; 188
     94c:	50 e0       	ldi	r21, 0x00	; 0
     94e:	61 2f       	mov	r22, r17
     950:	8c 2f       	mov	r24, r28
     952:	0e 94 3c 02 	call	0x478	; 0x478 <readCell>
     956:	85 34       	cpi	r24, 0x45	; 69
     958:	81 f7       	brne	.-32     	; 0x93a <checkAvailable+0x414>
     95a:	13 c0       	rjmp	.+38     	; 0x982 <checkAvailable+0x45c>
			i-- ;
			
		}
		if (found == 1 && j+1 < 9)
		{
			if (readCell(c,j+1,table) == 'E')
     95c:	4c eb       	ldi	r20, 0xBC	; 188
     95e:	50 e0       	ldi	r21, 0x00	; 0
     960:	60 2f       	mov	r22, r16
     962:	8c 2f       	mov	r24, r28
     964:	0e 94 3c 02 	call	0x478	; 0x478 <readCell>
     968:	85 34       	cpi	r24, 0x45	; 69
     96a:	59 f4       	brne	.+22     	; 0x982 <checkAvailable+0x45c>
			{
				/* Available move c, j+1 */					/* The valid move is one right */
				if (mine == player)
     96c:	cd 10       	cpse	r12, r13
     96e:	05 c0       	rjmp	.+10     	; 0x97a <checkAvailable+0x454>
				{
					insertMineValid(c,j+1) ;
     970:	60 2f       	mov	r22, r16
     972:	8c 2f       	mov	r24, r28
     974:	0e 94 71 02 	call	0x4e2	; 0x4e2 <insertMineValid>
     978:	04 c0       	rjmp	.+8      	; 0x982 <checkAvailable+0x45c>
				}
				else
				{
					insertEnemyValid(c,j+1) ;
     97a:	60 2f       	mov	r22, r16
     97c:	8c 2f       	mov	r24, r28
     97e:	0e 94 82 02 	call	0x504	; 0x504 <insertEnemyValid>
			}
		}
		
		found = 0 ;											 /* check up of the enemy - checker for other my own checkers */
		i = c ;
		i-- ;
     982:	aa 24       	eor	r10, r10
     984:	aa 94       	dec	r10
     986:	ac 0e       	add	r10, r28
		while (i > '@' && found == 0 && readCell(i,j,table) != 'E')
     988:	80 e4       	ldi	r24, 0x40	; 64
     98a:	8a 15       	cp	r24, r10
     98c:	40 f0       	brcs	.+16     	; 0x99e <checkAvailable+0x478>
     98e:	a5 c1       	rjmp	.+842    	; 0xcda <checkAvailable+0x7b4>
		{
			
			if (readCell(i,j,table) == 'W')
     990:	87 35       	cpi	r24, 0x57	; 87
     992:	09 f4       	brne	.+2      	; 0x996 <checkAvailable+0x470>
     994:	9a c1       	rjmp	.+820    	; 0xcca <checkAvailable+0x7a4>
			{
				found = 1 ;
			}
			i-- ;
     996:	11 50       	subi	r17, 0x01	; 1
		}
		
		found = 0 ;											 /* check up of the enemy - checker for other my own checkers */
		i = c ;
		i-- ;
		while (i > '@' && found == 0 && readCell(i,j,table) != 'E')
     998:	10 34       	cpi	r17, 0x40	; 64
     99a:	11 f4       	brne	.+4      	; 0x9a0 <checkAvailable+0x47a>
     99c:	1f c0       	rjmp	.+62     	; 0x9dc <checkAvailable+0x4b6>
     99e:	1a 2d       	mov	r17, r10
     9a0:	4c eb       	ldi	r20, 0xBC	; 188
     9a2:	50 e0       	ldi	r21, 0x00	; 0
     9a4:	6d 2f       	mov	r22, r29
     9a6:	81 2f       	mov	r24, r17
     9a8:	0e 94 3c 02 	call	0x478	; 0x478 <readCell>
     9ac:	85 34       	cpi	r24, 0x45	; 69
     9ae:	81 f7       	brne	.-32     	; 0x990 <checkAvailable+0x46a>
     9b0:	15 c0       	rjmp	.+42     	; 0x9dc <checkAvailable+0x4b6>
			}
			i-- ;
		}
		if (found == 1 && c+1 < 'I')
		{
			if (readCell(c+1,j,table) == 'E')
     9b2:	11 e0       	ldi	r17, 0x01	; 1
     9b4:	1c 0f       	add	r17, r28
     9b6:	4c eb       	ldi	r20, 0xBC	; 188
     9b8:	50 e0       	ldi	r21, 0x00	; 0
     9ba:	6d 2f       	mov	r22, r29
     9bc:	81 2f       	mov	r24, r17
     9be:	0e 94 3c 02 	call	0x478	; 0x478 <readCell>
     9c2:	85 34       	cpi	r24, 0x45	; 69
     9c4:	59 f4       	brne	.+22     	; 0x9dc <checkAvailable+0x4b6>
			{
				/* Valid pos c+1, j */
				if (mine == player)
     9c6:	cd 10       	cpse	r12, r13
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <checkAvailable+0x4ae>
				{
					insertMineValid(c+1,j) ;
     9ca:	6d 2f       	mov	r22, r29
     9cc:	81 2f       	mov	r24, r17
     9ce:	0e 94 71 02 	call	0x4e2	; 0x4e2 <insertMineValid>
     9d2:	04 c0       	rjmp	.+8      	; 0x9dc <checkAvailable+0x4b6>
				}
				else
				{
					insertEnemyValid(c+1,j) ;
     9d4:	6d 2f       	mov	r22, r29
     9d6:	81 2f       	mov	r24, r17
     9d8:	0e 94 82 02 	call	0x504	; 0x504 <insertEnemyValid>
			}
		}
		
		found = 0 ;										   /* check down of the enemy - checker for other my own checkers */
		i = c ;
		i++ ;
     9dc:	11 e0       	ldi	r17, 0x01	; 1
     9de:	1c 0f       	add	r17, r28
		while (i < 'I' && found == 0 && readCell(i,j,table) != 'E')
     9e0:	19 34       	cpi	r17, 0x49	; 73
     9e2:	48 f0       	brcs	.+18     	; 0x9f6 <checkAvailable+0x4d0>
     9e4:	20 c0       	rjmp	.+64     	; 0xa26 <checkAvailable+0x500>
		{
			if (readCell(i,j,table) == 'W')
     9e6:	87 35       	cpi	r24, 0x57	; 87
     9e8:	09 f4       	brne	.+2      	; 0x9ec <checkAvailable+0x4c6>
     9ea:	7d c1       	rjmp	.+762    	; 0xce6 <checkAvailable+0x7c0>
			{
				found = 1 ;
			}
			i++ ;
     9ec:	f3 94       	inc	r15
		}
		
		found = 0 ;										   /* check down of the enemy - checker for other my own checkers */
		i = c ;
		i++ ;
		while (i < 'I' && found == 0 && readCell(i,j,table) != 'E')
     9ee:	99 e4       	ldi	r25, 0x49	; 73
     9f0:	f9 12       	cpse	r15, r25
     9f2:	02 c0       	rjmp	.+4      	; 0x9f8 <checkAvailable+0x4d2>
     9f4:	18 c0       	rjmp	.+48     	; 0xa26 <checkAvailable+0x500>
		}
		
		found = 0 ;											 /* check up of the enemy - checker for other my own checkers */
		i = c ;
		i-- ;
		while (i > '@' && found == 0 && readCell(i,j,table) != 'E')
     9f6:	f1 2e       	mov	r15, r17
		}
		
		found = 0 ;										   /* check down of the enemy - checker for other my own checkers */
		i = c ;
		i++ ;
		while (i < 'I' && found == 0 && readCell(i,j,table) != 'E')
     9f8:	4c eb       	ldi	r20, 0xBC	; 188
     9fa:	50 e0       	ldi	r21, 0x00	; 0
     9fc:	6d 2f       	mov	r22, r29
     9fe:	8f 2d       	mov	r24, r15
     a00:	0e 94 3c 02 	call	0x478	; 0x478 <readCell>
     a04:	85 34       	cpi	r24, 0x45	; 69
     a06:	79 f7       	brne	.-34     	; 0x9e6 <checkAvailable+0x4c0>
     a08:	0e c0       	rjmp	.+28     	; 0xa26 <checkAvailable+0x500>
			}
			i++ ;
		}
		if (found == 1 && c - 1 > '@')
		{
			if (readCell(c-1,j,table) == 'E')
     a0a:	4c eb       	ldi	r20, 0xBC	; 188
     a0c:	50 e0       	ldi	r21, 0x00	; 0
     a0e:	6d 2f       	mov	r22, r29
     a10:	8a 2d       	mov	r24, r10
     a12:	0e 94 3c 02 	call	0x478	; 0x478 <readCell>
     a16:	85 34       	cpi	r24, 0x45	; 69
     a18:	31 f4       	brne	.+12     	; 0xa26 <checkAvailable+0x500>
			{
				/* Valid pos c-1,j */
				if (mine == player)
     a1a:	cd 10       	cpse	r12, r13
     a1c:	0b c0       	rjmp	.+22     	; 0xa34 <checkAvailable+0x50e>
				{
					insertMineValid(c-1,j) ;
     a1e:	6d 2f       	mov	r22, r29
     a20:	8a 2d       	mov	r24, r10
     a22:	0e 94 71 02 	call	0x4e2	; 0x4e2 <insertMineValid>
		/* check main diagonal up */
		found = 0 ;
		i = c ;
		i-- ;
		coltemp++ ;
		while (i > '@' && coltemp < 9 && (readCell(i,coltemp,table) != 'E') && found == 0)
     a26:	80 e4       	ldi	r24, 0x40	; 64
     a28:	8a 15       	cp	r24, r10
     a2a:	08 f0       	brcs	.+2      	; 0xa2e <checkAvailable+0x508>
     a2c:	42 c0       	rjmp	.+132    	; 0xab2 <checkAvailable+0x58c>
     a2e:	09 30       	cpi	r16, 0x09	; 9
     a30:	98 f0       	brcs	.+38     	; 0xa58 <checkAvailable+0x532>
     a32:	3f c0       	rjmp	.+126    	; 0xab2 <checkAvailable+0x58c>
				{
					insertMineValid(c-1,j) ;
				}
				else
				{
					insertEnemyValid(c-1,j) ;
     a34:	6d 2f       	mov	r22, r29
     a36:	8a 2d       	mov	r24, r10
     a38:	0e 94 82 02 	call	0x504	; 0x504 <insertEnemyValid>
     a3c:	f4 cf       	rjmp	.-24     	; 0xa26 <checkAvailable+0x500>
		coltemp++ ;
		while (i > '@' && coltemp < 9 && (readCell(i,coltemp,table) != 'E') && found == 0)
		{
			if (readCell(i,coltemp,table) == 'W')
			{
				found = 1 ;
     a3e:	98 2c       	mov	r9, r8
     a40:	87 35       	cpi	r24, 0x57	; 87
     a42:	09 f0       	breq	.+2      	; 0xa46 <checkAvailable+0x520>
     a44:	97 2c       	mov	r9, r7
			}
			i-- ;
     a46:	fa 94       	dec	r15
			coltemp++ ;
     a48:	e3 94       	inc	r14
		/* check main diagonal up */
		found = 0 ;
		i = c ;
		i-- ;
		coltemp++ ;
		while (i > '@' && coltemp < 9 && (readCell(i,coltemp,table) != 'E') && found == 0)
     a4a:	90 e4       	ldi	r25, 0x40	; 64
     a4c:	f9 16       	cp	r15, r25
     a4e:	a1 f0       	breq	.+40     	; 0xa78 <checkAvailable+0x552>
     a50:	89 e0       	ldi	r24, 0x09	; 9
     a52:	e8 12       	cpse	r14, r24
     a54:	07 c0       	rjmp	.+14     	; 0xa64 <checkAvailable+0x53e>
     a56:	10 c0       	rjmp	.+32     	; 0xa78 <checkAvailable+0x552>
     a58:	e0 2e       	mov	r14, r16
     a5a:	fa 2c       	mov	r15, r10
     a5c:	91 2c       	mov	r9, r1
		{
			if (readCell(i,coltemp,table) == 'W')
			{
				found = 1 ;
     a5e:	88 24       	eor	r8, r8
     a60:	83 94       	inc	r8
     a62:	71 2c       	mov	r7, r1
		/* check main diagonal up */
		found = 0 ;
		i = c ;
		i-- ;
		coltemp++ ;
		while (i > '@' && coltemp < 9 && (readCell(i,coltemp,table) != 'E') && found == 0)
     a64:	4c eb       	ldi	r20, 0xBC	; 188
     a66:	50 e0       	ldi	r21, 0x00	; 0
     a68:	6e 2d       	mov	r22, r14
     a6a:	8f 2d       	mov	r24, r15
     a6c:	0e 94 3c 02 	call	0x478	; 0x478 <readCell>
     a70:	85 34       	cpi	r24, 0x45	; 69
     a72:	11 f0       	breq	.+4      	; 0xa78 <checkAvailable+0x552>
     a74:	99 20       	and	r9, r9
     a76:	19 f3       	breq	.-58     	; 0xa3e <checkAvailable+0x518>
				found = 1 ;
			}
			i-- ;
			coltemp++ ;
		}
		if (found == 1 && (c+1 < 'I') && (j-1 > 0))
     a78:	91 e0       	ldi	r25, 0x01	; 1
     a7a:	99 12       	cpse	r9, r25
     a7c:	1a c0       	rjmp	.+52     	; 0xab2 <checkAvailable+0x58c>
     a7e:	8c 2f       	mov	r24, r28
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	01 96       	adiw	r24, 0x01	; 1
     a84:	89 34       	cpi	r24, 0x49	; 73
     a86:	91 05       	cpc	r25, r1
     a88:	a4 f4       	brge	.+40     	; 0xab2 <checkAvailable+0x58c>
     a8a:	8d 2f       	mov	r24, r29
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	18 16       	cp	r1, r24
     a92:	19 06       	cpc	r1, r25
     a94:	74 f4       	brge	.+28     	; 0xab2 <checkAvailable+0x58c>
		{
			if (readCell(c+1,j-1,table) == 'E')
     a96:	4c eb       	ldi	r20, 0xBC	; 188
     a98:	50 e0       	ldi	r21, 0x00	; 0
     a9a:	6b 2d       	mov	r22, r11
     a9c:	81 2f       	mov	r24, r17
     a9e:	0e 94 3c 02 	call	0x478	; 0x478 <readCell>
     aa2:	85 34       	cpi	r24, 0x45	; 69
     aa4:	31 f4       	brne	.+12     	; 0xab2 <checkAvailable+0x58c>
			{
				/* Valid pos c+1,j-1 */
				if (mine == player)
     aa6:	cd 10       	cpse	r12, r13
     aa8:	0a c0       	rjmp	.+20     	; 0xabe <checkAvailable+0x598>
				{
					insertMineValid(c+1,j-1) ;
     aaa:	6b 2d       	mov	r22, r11
     aac:	81 2f       	mov	r24, r17
     aae:	0e 94 71 02 	call	0x4e2	; 0x4e2 <insertMineValid>
		found = 0 ;
		i = c ;
		coltemp = j ;
		i++ ;
		coltemp-- ;
		while((i < 'I') && (coltemp > 0) && (found == 0) && (readCell(i,coltemp,table) != 'E'))
     ab2:	19 34       	cpi	r17, 0x49	; 73
     ab4:	08 f0       	brcs	.+2      	; 0xab8 <checkAvailable+0x592>
     ab6:	24 c1       	rjmp	.+584    	; 0xd00 <checkAvailable+0x7da>
     ab8:	b1 10       	cpse	r11, r1
     aba:	10 c0       	rjmp	.+32     	; 0xadc <checkAvailable+0x5b6>
     abc:	7e c0       	rjmp	.+252    	; 0xbba <checkAvailable+0x694>
				{
					insertMineValid(c+1,j-1) ;
				}
				else
				{
					insertEnemyValid(c+1,j-1) ;
     abe:	6b 2d       	mov	r22, r11
     ac0:	81 2f       	mov	r24, r17
     ac2:	0e 94 82 02 	call	0x504	; 0x504 <insertEnemyValid>
     ac6:	f5 cf       	rjmp	.-22     	; 0xab2 <checkAvailable+0x58c>
		{
			if (readCell(i,coltemp,table) == 'W')
			{
				found = 1 ;
			}
			i++ ;
     ac8:	f3 94       	inc	r15
			coltemp-- ;
     aca:	ea 94       	dec	r14
		found = 0 ;
		i = c ;
		coltemp = j ;
		i++ ;
		coltemp-- ;
		while((i < 'I') && (coltemp > 0) && (found == 0) && (readCell(i,coltemp,table) != 'E'))
     acc:	99 e4       	ldi	r25, 0x49	; 73
     ace:	f9 16       	cp	r15, r25
     ad0:	81 f0       	breq	.+32     	; 0xaf2 <checkAvailable+0x5cc>
     ad2:	ee 20       	and	r14, r14
     ad4:	71 f0       	breq	.+28     	; 0xaf2 <checkAvailable+0x5cc>
     ad6:	87 35       	cpi	r24, 0x57	; 87
     ad8:	19 f4       	brne	.+6      	; 0xae0 <checkAvailable+0x5ba>
     ada:	0b c0       	rjmp	.+22     	; 0xaf2 <checkAvailable+0x5cc>
     adc:	eb 2c       	mov	r14, r11
     ade:	f1 2e       	mov	r15, r17
     ae0:	4c eb       	ldi	r20, 0xBC	; 188
     ae2:	50 e0       	ldi	r21, 0x00	; 0
     ae4:	6e 2d       	mov	r22, r14
     ae6:	8f 2d       	mov	r24, r15
     ae8:	0e 94 3c 02 	call	0x478	; 0x478 <readCell>
     aec:	85 34       	cpi	r24, 0x45	; 69
     aee:	61 f7       	brne	.-40     	; 0xac8 <checkAvailable+0x5a2>
     af0:	20 c0       	rjmp	.+64     	; 0xb32 <checkAvailable+0x60c>
				found = 1 ;
			}
			i++ ;
			coltemp-- ;
		}
		if (found == 1 && (c-1 > '@') && (j+1 < 9))
     af2:	87 35       	cpi	r24, 0x57	; 87
     af4:	09 f0       	breq	.+2      	; 0xaf8 <checkAvailable+0x5d2>
     af6:	ff c0       	rjmp	.+510    	; 0xcf6 <checkAvailable+0x7d0>
     af8:	8c 2f       	mov	r24, r28
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	01 97       	sbiw	r24, 0x01	; 1
     afe:	81 34       	cpi	r24, 0x41	; 65
     b00:	91 05       	cpc	r25, r1
     b02:	0c f4       	brge	.+2      	; 0xb06 <checkAvailable+0x5e0>
     b04:	f8 c0       	rjmp	.+496    	; 0xcf6 <checkAvailable+0x7d0>
     b06:	8d 2f       	mov	r24, r29
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	01 96       	adiw	r24, 0x01	; 1
     b0c:	09 97       	sbiw	r24, 0x09	; 9
     b0e:	0c f0       	brlt	.+2      	; 0xb12 <checkAvailable+0x5ec>
     b10:	f2 c0       	rjmp	.+484    	; 0xcf6 <checkAvailable+0x7d0>
		{
			if (readCell(c-1,j+1,table) == 'E')
     b12:	4c eb       	ldi	r20, 0xBC	; 188
     b14:	50 e0       	ldi	r21, 0x00	; 0
     b16:	60 2f       	mov	r22, r16
     b18:	8a 2d       	mov	r24, r10
     b1a:	0e 94 3c 02 	call	0x478	; 0x478 <readCell>
     b1e:	85 34       	cpi	r24, 0x45	; 69
     b20:	09 f0       	breq	.+2      	; 0xb24 <checkAvailable+0x5fe>
     b22:	e9 c0       	rjmp	.+466    	; 0xcf6 <checkAvailable+0x7d0>
			{
				/* Valid pos c-1, j+1 */
				if (player == mine)
     b24:	cd 10       	cpse	r12, r13
     b26:	0c c0       	rjmp	.+24     	; 0xb40 <checkAvailable+0x61a>
				{
					insertMineValid(c-1,j+1) ;
     b28:	60 2f       	mov	r22, r16
     b2a:	8a 2d       	mov	r24, r10
     b2c:	0e 94 71 02 	call	0x4e2	; 0x4e2 <insertMineValid>
     b30:	e2 c0       	rjmp	.+452    	; 0xcf6 <checkAvailable+0x7d0>
		found = 0 ;
		i = c ;
		coltemp = j ;
		i-- ;
		coltemp-- ;
		while((i > '@') && (coltemp > 0) && (readCell(i,coltemp,table) != 'E') && (found == 0))
     b32:	80 e4       	ldi	r24, 0x40	; 64
     b34:	8a 15       	cp	r24, r10
     b36:	08 f0       	brcs	.+2      	; 0xb3a <checkAvailable+0x614>
     b38:	40 c0       	rjmp	.+128    	; 0xbba <checkAvailable+0x694>
     b3a:	b1 10       	cpse	r11, r1
     b3c:	12 c0       	rjmp	.+36     	; 0xb62 <checkAvailable+0x63c>
     b3e:	3d c0       	rjmp	.+122    	; 0xbba <checkAvailable+0x694>
				{
					insertMineValid(c-1,j+1) ;
				}
				else
				{
					insertEnemyValid(c-1,j+1) ;
     b40:	60 2f       	mov	r22, r16
     b42:	8a 2d       	mov	r24, r10
     b44:	0e 94 82 02 	call	0x504	; 0x504 <insertEnemyValid>
     b48:	d6 c0       	rjmp	.+428    	; 0xcf6 <checkAvailable+0x7d0>
		coltemp-- ;
		while((i > '@') && (coltemp > 0) && (readCell(i,coltemp,table) != 'E') && (found == 0))
		{
			if (readCell(i,coltemp,table) == 'W')
			{
				found = 1 ;
     b4a:	98 2c       	mov	r9, r8
     b4c:	87 35       	cpi	r24, 0x57	; 87
     b4e:	09 f0       	breq	.+2      	; 0xb52 <checkAvailable+0x62c>
     b50:	97 2c       	mov	r9, r7
			}
			i-- ;
     b52:	fa 94       	dec	r15
			coltemp-- ;
     b54:	ea 94       	dec	r14
		found = 0 ;
		i = c ;
		coltemp = j ;
		i-- ;
		coltemp-- ;
		while((i > '@') && (coltemp > 0) && (readCell(i,coltemp,table) != 'E') && (found == 0))
     b56:	90 e4       	ldi	r25, 0x40	; 64
     b58:	f9 16       	cp	r15, r25
     b5a:	99 f0       	breq	.+38     	; 0xb82 <checkAvailable+0x65c>
     b5c:	e1 10       	cpse	r14, r1
     b5e:	07 c0       	rjmp	.+14     	; 0xb6e <checkAvailable+0x648>
     b60:	10 c0       	rjmp	.+32     	; 0xb82 <checkAvailable+0x65c>
		found = 0 ;
		i = c ;
		coltemp = j ;
		i++ ;
		coltemp-- ;
		while((i < 'I') && (coltemp > 0) && (found == 0) && (readCell(i,coltemp,table) != 'E'))
     b62:	eb 2c       	mov	r14, r11
     b64:	fa 2c       	mov	r15, r10
     b66:	91 2c       	mov	r9, r1
		coltemp-- ;
		while((i > '@') && (coltemp > 0) && (readCell(i,coltemp,table) != 'E') && (found == 0))
		{
			if (readCell(i,coltemp,table) == 'W')
			{
				found = 1 ;
     b68:	88 24       	eor	r8, r8
     b6a:	83 94       	inc	r8
     b6c:	71 2c       	mov	r7, r1
		found = 0 ;
		i = c ;
		coltemp = j ;
		i-- ;
		coltemp-- ;
		while((i > '@') && (coltemp > 0) && (readCell(i,coltemp,table) != 'E') && (found == 0))
     b6e:	4c eb       	ldi	r20, 0xBC	; 188
     b70:	50 e0       	ldi	r21, 0x00	; 0
     b72:	6e 2d       	mov	r22, r14
     b74:	8f 2d       	mov	r24, r15
     b76:	0e 94 3c 02 	call	0x478	; 0x478 <readCell>
     b7a:	85 34       	cpi	r24, 0x45	; 69
     b7c:	11 f0       	breq	.+4      	; 0xb82 <checkAvailable+0x65c>
     b7e:	99 20       	and	r9, r9
     b80:	21 f3       	breq	.-56     	; 0xb4a <checkAvailable+0x624>
				found = 1 ;
			}
			i-- ;
			coltemp-- ;
		}
		if (found == 1 && (c+1 < 'I') && (j+1 < 9))
     b82:	81 e0       	ldi	r24, 0x01	; 1
     b84:	98 12       	cpse	r9, r24
     b86:	19 c0       	rjmp	.+50     	; 0xbba <checkAvailable+0x694>
     b88:	8c 2f       	mov	r24, r28
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	01 96       	adiw	r24, 0x01	; 1
     b8e:	89 34       	cpi	r24, 0x49	; 73
     b90:	91 05       	cpc	r25, r1
     b92:	9c f4       	brge	.+38     	; 0xbba <checkAvailable+0x694>
     b94:	8d 2f       	mov	r24, r29
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	01 96       	adiw	r24, 0x01	; 1
     b9a:	09 97       	sbiw	r24, 0x09	; 9
     b9c:	74 f4       	brge	.+28     	; 0xbba <checkAvailable+0x694>
		{
			if (readCell(c+1,j+1,table) == 'E')
     b9e:	4c eb       	ldi	r20, 0xBC	; 188
     ba0:	50 e0       	ldi	r21, 0x00	; 0
     ba2:	60 2f       	mov	r22, r16
     ba4:	81 2f       	mov	r24, r17
     ba6:	0e 94 3c 02 	call	0x478	; 0x478 <readCell>
     baa:	85 34       	cpi	r24, 0x45	; 69
     bac:	31 f4       	brne	.+12     	; 0xbba <checkAvailable+0x694>
			{
				/* Valid move c+1,j+1 */
				if (player == mine)
     bae:	cd 10       	cpse	r12, r13
     bb0:	0a c0       	rjmp	.+20     	; 0xbc6 <checkAvailable+0x6a0>
				{
					insertMineValid(c+1,j+1) ;
     bb2:	60 2f       	mov	r22, r16
     bb4:	81 2f       	mov	r24, r17
     bb6:	0e 94 71 02 	call	0x4e2	; 0x4e2 <insertMineValid>
		found = 0 ;
		i = c ;
		coltemp = j ;
		i++ ;
		coltemp++ ;
		while ((i < 'I') && (coltemp < 9) && (readCell(i,coltemp,table) != 'E') && (found == 0))
     bba:	19 34       	cpi	r17, 0x49	; 73
     bbc:	08 f0       	brcs	.+2      	; 0xbc0 <checkAvailable+0x69a>
     bbe:	a4 c0       	rjmp	.+328    	; 0xd08 <checkAvailable+0x7e2>
     bc0:	09 30       	cpi	r16, 0x09	; 9
     bc2:	88 f0       	brcs	.+34     	; 0xbe6 <checkAvailable+0x6c0>
     bc4:	a1 c0       	rjmp	.+322    	; 0xd08 <checkAvailable+0x7e2>
				{
					insertMineValid(c+1,j+1) ;
				}
				else
				{
					insertEnemyValid(c+1,j+1) ;
     bc6:	60 2f       	mov	r22, r16
     bc8:	81 2f       	mov	r24, r17
     bca:	0e 94 82 02 	call	0x504	; 0x504 <insertEnemyValid>
     bce:	f5 cf       	rjmp	.-22     	; 0xbba <checkAvailable+0x694>
		coltemp++ ;
		while ((i < 'I') && (coltemp < 9) && (readCell(i,coltemp,table) != 'E') && (found == 0))
		{
			if (readCell(i,coltemp,table) == 'W')
			{
				found = 1 ;
     bd0:	fe 2c       	mov	r15, r14
     bd2:	87 35       	cpi	r24, 0x57	; 87
     bd4:	09 f0       	breq	.+2      	; 0xbd8 <checkAvailable+0x6b2>
     bd6:	f9 2c       	mov	r15, r9
			}
			i++ ;
     bd8:	1f 5f       	subi	r17, 0xFF	; 255
			coltemp++ ;
     bda:	0f 5f       	subi	r16, 0xFF	; 255
		found = 0 ;
		i = c ;
		coltemp = j ;
		i++ ;
		coltemp++ ;
		while ((i < 'I') && (coltemp < 9) && (readCell(i,coltemp,table) != 'E') && (found == 0))
     bdc:	19 34       	cpi	r17, 0x49	; 73
     bde:	89 f0       	breq	.+34     	; 0xc02 <checkAvailable+0x6dc>
     be0:	09 30       	cpi	r16, 0x09	; 9
     be2:	29 f4       	brne	.+10     	; 0xbee <checkAvailable+0x6c8>
     be4:	0e c0       	rjmp	.+28     	; 0xc02 <checkAvailable+0x6dc>
     be6:	f1 2c       	mov	r15, r1
		{
			if (readCell(i,coltemp,table) == 'W')
			{
				found = 1 ;
     be8:	ee 24       	eor	r14, r14
     bea:	e3 94       	inc	r14
     bec:	91 2c       	mov	r9, r1
		found = 0 ;
		i = c ;
		coltemp = j ;
		i++ ;
		coltemp++ ;
		while ((i < 'I') && (coltemp < 9) && (readCell(i,coltemp,table) != 'E') && (found == 0))
     bee:	4c eb       	ldi	r20, 0xBC	; 188
     bf0:	50 e0       	ldi	r21, 0x00	; 0
     bf2:	60 2f       	mov	r22, r16
     bf4:	81 2f       	mov	r24, r17
     bf6:	0e 94 3c 02 	call	0x478	; 0x478 <readCell>
     bfa:	85 34       	cpi	r24, 0x45	; 69
     bfc:	11 f0       	breq	.+4      	; 0xc02 <checkAvailable+0x6dc>
     bfe:	ff 20       	and	r15, r15
     c00:	39 f3       	breq	.-50     	; 0xbd0 <checkAvailable+0x6aa>
				found = 1 ;
			}
			i++ ;
			coltemp++ ;
		}
		if ((found == 1) && (c-1 > '@') && (j-1 > 0))
     c02:	91 e0       	ldi	r25, 0x01	; 1
     c04:	f9 12       	cpse	r15, r25
     c06:	80 c0       	rjmp	.+256    	; 0xd08 <checkAvailable+0x7e2>
     c08:	8c 2f       	mov	r24, r28
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	01 97       	sbiw	r24, 0x01	; 1
     c0e:	81 34       	cpi	r24, 0x41	; 65
     c10:	91 05       	cpc	r25, r1
     c12:	0c f4       	brge	.+2      	; 0xc16 <checkAvailable+0x6f0>
     c14:	79 c0       	rjmp	.+242    	; 0xd08 <checkAvailable+0x7e2>
     c16:	8d 2f       	mov	r24, r29
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	01 97       	sbiw	r24, 0x01	; 1
     c1c:	18 16       	cp	r1, r24
     c1e:	19 06       	cpc	r1, r25
     c20:	0c f0       	brlt	.+2      	; 0xc24 <checkAvailable+0x6fe>
     c22:	72 c0       	rjmp	.+228    	; 0xd08 <checkAvailable+0x7e2>
		{
			if (readCell(c-1,j-1,table) == 'E')
     c24:	4c eb       	ldi	r20, 0xBC	; 188
     c26:	50 e0       	ldi	r21, 0x00	; 0
     c28:	6b 2d       	mov	r22, r11
     c2a:	8a 2d       	mov	r24, r10
     c2c:	0e 94 3c 02 	call	0x478	; 0x478 <readCell>
     c30:	85 34       	cpi	r24, 0x45	; 69
     c32:	09 f0       	breq	.+2      	; 0xc36 <checkAvailable+0x710>
     c34:	69 c0       	rjmp	.+210    	; 0xd08 <checkAvailable+0x7e2>
			{
				/* Valid pos c-1,j-1 */
				if (player == mine)
     c36:	cd 10       	cpse	r12, r13
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <checkAvailable+0x71e>
				{
					insertMineValid(c-1,j-1) ;
     c3a:	6b 2d       	mov	r22, r11
     c3c:	8a 2d       	mov	r24, r10
     c3e:	0e 94 71 02 	call	0x4e2	; 0x4e2 <insertMineValid>
     c42:	62 c0       	rjmp	.+196    	; 0xd08 <checkAvailable+0x7e2>
				}
				else
				{
					insertEnemyValid(c-1,j-1) ;
     c44:	6b 2d       	mov	r22, r11
     c46:	8a 2d       	mov	r24, r10
     c48:	0e 94 82 02 	call	0x504	; 0x504 <insertEnemyValid>
		}
		
		break;
	}
	
}
     c4c:	5d c0       	rjmp	.+186    	; 0xd08 <checkAvailable+0x7e2>
			{
				found = 1 ;
			}
			i++ ;
		}
		if (found == 1 && j-1 > 0)
     c4e:	8d 2f       	mov	r24, r29
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	01 97       	sbiw	r24, 0x01	; 1
     c54:	18 16       	cp	r1, r24
     c56:	19 06       	cpc	r1, r25
     c58:	0c f4       	brge	.+2      	; 0xc5c <checkAvailable+0x736>
     c5a:	8f cc       	rjmp	.-1762   	; 0x57a <checkAvailable+0x54>
     c5c:	a4 cc       	rjmp	.-1720   	; 0x5a6 <checkAvailable+0x80>
				found = 1 ;
			}
			i-- ;
			
		}
		if (found == 1 && j+1 < 9)
     c5e:	8d 2f       	mov	r24, r29
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	01 96       	adiw	r24, 0x01	; 1
     c64:	09 97       	sbiw	r24, 0x09	; 9
     c66:	0c f4       	brge	.+2      	; 0xc6a <checkAvailable+0x744>
     c68:	b6 cc       	rjmp	.-1684   	; 0x5d6 <checkAvailable+0xb0>
     c6a:	c9 cc       	rjmp	.-1646   	; 0x5fe <checkAvailable+0xd8>
			{
				found = 1 ;
			}
			i-- ;
		}
		if (found == 1 && c+1 < 'I')
     c6c:	8c 2f       	mov	r24, r28
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	01 96       	adiw	r24, 0x01	; 1
     c72:	89 34       	cpi	r24, 0x49	; 73
     c74:	91 05       	cpc	r25, r1
     c76:	0c f4       	brge	.+2      	; 0xc7a <checkAvailable+0x754>
     c78:	da cc       	rjmp	.-1612   	; 0x62e <checkAvailable+0x108>
     c7a:	ef cc       	rjmp	.-1570   	; 0x65a <checkAvailable+0x134>
			}
		}
		
		found = 0 ;										   /* check down of the enemy - checker for other my own checkers */
		i = c ;
		i++ ;
     c7c:	11 e0       	ldi	r17, 0x01	; 1
     c7e:	1c 0f       	add	r17, r28
		while (i < 'I' && found == 0 && readCell(i,j,table) != 'E')
     c80:	19 34       	cpi	r17, 0x49	; 73
     c82:	08 f4       	brcc	.+2      	; 0xc86 <checkAvailable+0x760>
     c84:	f7 cc       	rjmp	.-1554   	; 0x674 <checkAvailable+0x14e>
     c86:	56 cd       	rjmp	.-1364   	; 0x734 <checkAvailable+0x20e>
			{
				found = 1 ;
			}
			i++ ;
		}
		if (found == 1 && c - 1 > '@')
     c88:	8c 2f       	mov	r24, r28
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	01 97       	sbiw	r24, 0x01	; 1
     c8e:	81 34       	cpi	r24, 0x41	; 65
     c90:	91 05       	cpc	r25, r1
     c92:	0c f0       	brlt	.+2      	; 0xc96 <checkAvailable+0x770>
     c94:	f9 cc       	rjmp	.-1550   	; 0x688 <checkAvailable+0x162>
     c96:	07 cd       	rjmp	.-1522   	; 0x6a6 <checkAvailable+0x180>
		found = 0 ;
		i = c ;
		coltemp = j ;
		i-- ;
		coltemp-- ;
		while((i > '@') && (coltemp > 0) && (readCell(i,coltemp,table) != 'E') && (found == 0))
     c98:	80 e4       	ldi	r24, 0x40	; 64
     c9a:	8b 15       	cp	r24, r11
     c9c:	08 f4       	brcc	.+2      	; 0xca0 <checkAvailable+0x77a>
     c9e:	8f cd       	rjmp	.-1250   	; 0x7be <checkAvailable+0x298>
     ca0:	33 c0       	rjmp	.+102    	; 0xd08 <checkAvailable+0x7e2>
     ca2:	90 e4       	ldi	r25, 0x40	; 64
     ca4:	9b 15       	cp	r25, r11
     ca6:	08 f4       	brcc	.+2      	; 0xcaa <checkAvailable+0x784>
     ca8:	9e cd       	rjmp	.-1220   	; 0x7e6 <checkAvailable+0x2c0>
     caa:	ca cd       	rjmp	.-1132   	; 0x840 <checkAvailable+0x31a>
			{
				found = 1 ;
			}
			i++ ;
		}
		if (found == 1 && j-1 > 0)
     cac:	8d 2f       	mov	r24, r29
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	01 97       	sbiw	r24, 0x01	; 1
     cb2:	18 16       	cp	r1, r24
     cb4:	19 06       	cpc	r1, r25
     cb6:	0c f4       	brge	.+2      	; 0xcba <checkAvailable+0x794>
     cb8:	24 ce       	rjmp	.-952    	; 0x902 <checkAvailable+0x3dc>
     cba:	38 ce       	rjmp	.-912    	; 0x92c <checkAvailable+0x406>
				found = 1 ;
			}
			i-- ;
			
		}
		if (found == 1 && j+1 < 9)
     cbc:	8d 2f       	mov	r24, r29
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	01 96       	adiw	r24, 0x01	; 1
     cc2:	09 97       	sbiw	r24, 0x09	; 9
     cc4:	0c f4       	brge	.+2      	; 0xcc8 <checkAvailable+0x7a2>
     cc6:	4a ce       	rjmp	.-876    	; 0x95c <checkAvailable+0x436>
     cc8:	5c ce       	rjmp	.-840    	; 0x982 <checkAvailable+0x45c>
			{
				found = 1 ;
			}
			i-- ;
		}
		if (found == 1 && c+1 < 'I')
     cca:	8c 2f       	mov	r24, r28
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	01 96       	adiw	r24, 0x01	; 1
     cd0:	89 34       	cpi	r24, 0x49	; 73
     cd2:	91 05       	cpc	r25, r1
     cd4:	0c f4       	brge	.+2      	; 0xcd8 <checkAvailable+0x7b2>
     cd6:	6d ce       	rjmp	.-806    	; 0x9b2 <checkAvailable+0x48c>
     cd8:	81 ce       	rjmp	.-766    	; 0x9dc <checkAvailable+0x4b6>
			}
		}
		
		found = 0 ;										   /* check down of the enemy - checker for other my own checkers */
		i = c ;
		i++ ;
     cda:	11 e0       	ldi	r17, 0x01	; 1
     cdc:	1c 0f       	add	r17, r28
		while (i < 'I' && found == 0 && readCell(i,j,table) != 'E')
     cde:	19 34       	cpi	r17, 0x49	; 73
     ce0:	08 f4       	brcc	.+2      	; 0xce4 <checkAvailable+0x7be>
     ce2:	89 ce       	rjmp	.-750    	; 0x9f6 <checkAvailable+0x4d0>
     ce4:	e6 ce       	rjmp	.-564    	; 0xab2 <checkAvailable+0x58c>
			{
				found = 1 ;
			}
			i++ ;
		}
		if (found == 1 && c - 1 > '@')
     ce6:	8c 2f       	mov	r24, r28
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	01 97       	sbiw	r24, 0x01	; 1
     cec:	81 34       	cpi	r24, 0x41	; 65
     cee:	91 05       	cpc	r25, r1
     cf0:	0c f0       	brlt	.+2      	; 0xcf4 <checkAvailable+0x7ce>
     cf2:	8b ce       	rjmp	.-746    	; 0xa0a <checkAvailable+0x4e4>
     cf4:	98 ce       	rjmp	.-720    	; 0xa26 <checkAvailable+0x500>
		found = 0 ;
		i = c ;
		coltemp = j ;
		i-- ;
		coltemp-- ;
		while((i > '@') && (coltemp > 0) && (readCell(i,coltemp,table) != 'E') && (found == 0))
     cf6:	80 e4       	ldi	r24, 0x40	; 64
     cf8:	8a 15       	cp	r24, r10
     cfa:	08 f4       	brcc	.+2      	; 0xcfe <checkAvailable+0x7d8>
     cfc:	32 cf       	rjmp	.-412    	; 0xb62 <checkAvailable+0x63c>
     cfe:	5d cf       	rjmp	.-326    	; 0xbba <checkAvailable+0x694>
     d00:	90 e4       	ldi	r25, 0x40	; 64
     d02:	9a 15       	cp	r25, r10
     d04:	08 f4       	brcc	.+2      	; 0xd08 <checkAvailable+0x7e2>
     d06:	19 cf       	rjmp	.-462    	; 0xb3a <checkAvailable+0x614>
		}
		
		break;
	}
	
}
     d08:	df 91       	pop	r29
     d0a:	cf 91       	pop	r28
     d0c:	1f 91       	pop	r17
     d0e:	0f 91       	pop	r16
     d10:	ff 90       	pop	r15
     d12:	ef 90       	pop	r14
     d14:	df 90       	pop	r13
     d16:	cf 90       	pop	r12
     d18:	bf 90       	pop	r11
     d1a:	af 90       	pop	r10
     d1c:	9f 90       	pop	r9
     d1e:	8f 90       	pop	r8
     d20:	7f 90       	pop	r7
     d22:	08 95       	ret

00000d24 <scanChessboard>:
	}
	chessboard[index] = buffer ;
}

void scanChessboard(char mine)								/* This function scans the whole chessboard for white checkers */
{
     d24:	5f 92       	push	r5
     d26:	6f 92       	push	r6
     d28:	7f 92       	push	r7
     d2a:	8f 92       	push	r8
     d2c:	9f 92       	push	r9
     d2e:	af 92       	push	r10
     d30:	bf 92       	push	r11
     d32:	cf 92       	push	r12
     d34:	df 92       	push	r13
     d36:	ef 92       	push	r14
     d38:	ff 92       	push	r15
     d3a:	0f 93       	push	r16
     d3c:	1f 93       	push	r17
     d3e:	cf 93       	push	r28
     d40:	df 93       	push	r29
     d42:	08 2f       	mov	r16, r24
     d44:	0f 2e       	mov	r0, r31
     d46:	fc eb       	ldi	r31, 0xBC	; 188
     d48:	ef 2e       	mov	r14, r31
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	ff 2e       	mov	r15, r31
     d4e:	f0 2d       	mov	r31, r0
	char c = 0 ;											/* For every one white checker checks for my available moves */
	uint8_t j = 0 ;											/* and stores them in a parallel memory board the validtable */
	uint8_t buffer = 0 ;
	uint8_t temp = 0 ;
	for (uint8_t index = 0; index < SIZE ; index++)
     d50:	10 e0       	ldi	r17, 0x00	; 0
		c = 65 + (index >> 1) ;								/* Convert the index into specific ascii that we want to scan */
		buffer = table[index] ;								/* Read the data-byte and store it into a buffer */
		temp = buffer & 0b00010000 ;						/* Find the column which depends on the enabled-bits */
		if (temp == 0b00010000)
		{
			j = 1 ;
     d52:	55 24       	eor	r5, r5
     d54:	53 94       	inc	r5
			if (index % 2 == 1)								/* In the odd number indexes there are the second half-bytes */
			{                                               /* Opposite, in the even number indexes there are the first half-bytes */
				j = j + 4 ;
     d56:	0f 2e       	mov	r0, r31
     d58:	f5 e0       	ldi	r31, 0x05	; 5
     d5a:	6f 2e       	mov	r6, r31
     d5c:	f0 2d       	mov	r31, r0
			
		}
		temp = buffer & 0b00100000 ;
		if (temp == 0b00100000)
		{
			j = 2 ;
     d5e:	68 94       	set
     d60:	77 24       	eor	r7, r7
     d62:	71 f8       	bld	r7, 1
			if (index % 2 == 1)
			{
				j = j + 4 ;
     d64:	0f 2e       	mov	r0, r31
     d66:	f6 e0       	ldi	r31, 0x06	; 6
     d68:	8f 2e       	mov	r8, r31
     d6a:	f0 2d       	mov	r31, r0
			}
		}
		temp = buffer & 0b01000000 ;
		if (temp == 0b01000000)
		{
			j = 3 ;
     d6c:	0f 2e       	mov	r0, r31
     d6e:	f3 e0       	ldi	r31, 0x03	; 3
     d70:	9f 2e       	mov	r9, r31
     d72:	f0 2d       	mov	r31, r0
			if (index % 2 == 1)
			{
				j = j + 4 ;
     d74:	0f 2e       	mov	r0, r31
     d76:	f7 e0       	ldi	r31, 0x07	; 7
     d78:	af 2e       	mov	r10, r31
     d7a:	f0 2d       	mov	r31, r0
			}
		}
		temp = buffer & 0b10000000 ;
		if (temp == 0b10000000)
		{
			j = 4 ;
     d7c:	68 94       	set
     d7e:	bb 24       	eor	r11, r11
     d80:	b2 f8       	bld	r11, 2
			if (index % 2 == 1)
			{
				j = j + 4 ;
     d82:	68 94       	set
     d84:	cc 24       	eor	r12, r12
     d86:	c3 f8       	bld	r12, 3
	uint8_t j = 0 ;											/* and stores them in a parallel memory board the validtable */
	uint8_t buffer = 0 ;
	uint8_t temp = 0 ;
	for (uint8_t index = 0; index < SIZE ; index++)
	{
		c = 65 + (index >> 1) ;								/* Convert the index into specific ascii that we want to scan */
     d88:	c1 2f       	mov	r28, r17
     d8a:	c6 95       	lsr	r28
     d8c:	cf 5b       	subi	r28, 0xBF	; 191
		buffer = table[index] ;								/* Read the data-byte and store it into a buffer */
     d8e:	f7 01       	movw	r30, r14
     d90:	d1 91       	ld	r29, Z+
     d92:	7f 01       	movw	r14, r30
		temp = buffer & 0b00010000 ;						/* Find the column which depends on the enabled-bits */
		if (temp == 0b00010000)
     d94:	d4 ff       	sbrs	r29, 4
     d96:	24 c0       	rjmp	.+72     	; 0xde0 <scanChessboard+0xbc>
		{
			j = 1 ;
			if (index % 2 == 1)								/* In the odd number indexes there are the second half-bytes */
     d98:	10 ff       	sbrs	r17, 0
     d9a:	02 c0       	rjmp	.+4      	; 0xda0 <scanChessboard+0x7c>
			{                                               /* Opposite, in the even number indexes there are the first half-bytes */
				j = j + 4 ;
     d9c:	d6 2c       	mov	r13, r6
     d9e:	01 c0       	rjmp	.+2      	; 0xda2 <scanChessboard+0x7e>
		c = 65 + (index >> 1) ;								/* Convert the index into specific ascii that we want to scan */
		buffer = table[index] ;								/* Read the data-byte and store it into a buffer */
		temp = buffer & 0b00010000 ;						/* Find the column which depends on the enabled-bits */
		if (temp == 0b00010000)
		{
			j = 1 ;
     da0:	d5 2c       	mov	r13, r5
			if (index % 2 == 1)								/* In the odd number indexes there are the second half-bytes */
			{                                               /* Opposite, in the even number indexes there are the first half-bytes */
				j = j + 4 ;
			}
			/* scan for black player available moves */
			if (readCell(c,j,table) == 'W')
     da2:	4c eb       	ldi	r20, 0xBC	; 188
     da4:	50 e0       	ldi	r21, 0x00	; 0
     da6:	6d 2d       	mov	r22, r13
     da8:	8c 2f       	mov	r24, r28
     daa:	0e 94 3c 02 	call	0x478	; 0x478 <readCell>
     dae:	87 35       	cpi	r24, 0x57	; 87
     db0:	61 f4       	brne	.+24     	; 0xdca <scanChessboard+0xa6>
			{
				whiteCount++ ;
     db2:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <whiteCount>
     db6:	8f 5f       	subi	r24, 0xFF	; 255
     db8:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <whiteCount>
				checkAvailable(c,j,'B',mine) ;
     dbc:	20 2f       	mov	r18, r16
     dbe:	42 e4       	ldi	r20, 0x42	; 66
     dc0:	6d 2d       	mov	r22, r13
     dc2:	8c 2f       	mov	r24, r28
     dc4:	0e 94 93 02 	call	0x526	; 0x526 <checkAvailable>
     dc8:	0b c0       	rjmp	.+22     	; 0xde0 <scanChessboard+0xbc>
			}
			/* scan for white player available moves */
			else
			{
				blackCount++ ;
     dca:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <blackCount>
     dce:	8f 5f       	subi	r24, 0xFF	; 255
     dd0:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <blackCount>
				checkAvailable(c,j,'W',mine) ;
     dd4:	20 2f       	mov	r18, r16
     dd6:	47 e5       	ldi	r20, 0x57	; 87
     dd8:	6d 2d       	mov	r22, r13
     dda:	8c 2f       	mov	r24, r28
     ddc:	0e 94 93 02 	call	0x526	; 0x526 <checkAvailable>
			}
			
		}
		temp = buffer & 0b00100000 ;
		if (temp == 0b00100000)
     de0:	d5 ff       	sbrs	r29, 5
     de2:	24 c0       	rjmp	.+72     	; 0xe2c <scanChessboard+0x108>
		{
			j = 2 ;
			if (index % 2 == 1)
     de4:	10 ff       	sbrs	r17, 0
     de6:	02 c0       	rjmp	.+4      	; 0xdec <scanChessboard+0xc8>
			{
				j = j + 4 ;
     de8:	d8 2c       	mov	r13, r8
     dea:	01 c0       	rjmp	.+2      	; 0xdee <scanChessboard+0xca>
			
		}
		temp = buffer & 0b00100000 ;
		if (temp == 0b00100000)
		{
			j = 2 ;
     dec:	d7 2c       	mov	r13, r7
			if (index % 2 == 1)
			{
				j = j + 4 ;
			}
			/* scan for black player available moves */
			if (readCell(c,j,table) == 'W')
     dee:	4c eb       	ldi	r20, 0xBC	; 188
     df0:	50 e0       	ldi	r21, 0x00	; 0
     df2:	6d 2d       	mov	r22, r13
     df4:	8c 2f       	mov	r24, r28
     df6:	0e 94 3c 02 	call	0x478	; 0x478 <readCell>
     dfa:	87 35       	cpi	r24, 0x57	; 87
     dfc:	61 f4       	brne	.+24     	; 0xe16 <scanChessboard+0xf2>
			{
				whiteCount++ ;
     dfe:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <whiteCount>
     e02:	8f 5f       	subi	r24, 0xFF	; 255
     e04:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <whiteCount>
				checkAvailable(c,j,'B',mine) ;
     e08:	20 2f       	mov	r18, r16
     e0a:	42 e4       	ldi	r20, 0x42	; 66
     e0c:	6d 2d       	mov	r22, r13
     e0e:	8c 2f       	mov	r24, r28
     e10:	0e 94 93 02 	call	0x526	; 0x526 <checkAvailable>
     e14:	0b c0       	rjmp	.+22     	; 0xe2c <scanChessboard+0x108>
			}
			/* scan for white player available moves */
			else
			{
				blackCount++ ;
     e16:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <blackCount>
     e1a:	8f 5f       	subi	r24, 0xFF	; 255
     e1c:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <blackCount>
				checkAvailable(c,j,'W',mine) ;
     e20:	20 2f       	mov	r18, r16
     e22:	47 e5       	ldi	r20, 0x57	; 87
     e24:	6d 2d       	mov	r22, r13
     e26:	8c 2f       	mov	r24, r28
     e28:	0e 94 93 02 	call	0x526	; 0x526 <checkAvailable>
			}
		}
		temp = buffer & 0b01000000 ;
		if (temp == 0b01000000)
     e2c:	d6 ff       	sbrs	r29, 6
     e2e:	24 c0       	rjmp	.+72     	; 0xe78 <scanChessboard+0x154>
		{
			j = 3 ;
			if (index % 2 == 1)
     e30:	10 ff       	sbrs	r17, 0
     e32:	02 c0       	rjmp	.+4      	; 0xe38 <scanChessboard+0x114>
			{
				j = j + 4 ;
     e34:	da 2c       	mov	r13, r10
     e36:	01 c0       	rjmp	.+2      	; 0xe3a <scanChessboard+0x116>
			}
		}
		temp = buffer & 0b01000000 ;
		if (temp == 0b01000000)
		{
			j = 3 ;
     e38:	d9 2c       	mov	r13, r9
			if (index % 2 == 1)
			{
				j = j + 4 ;
			}
			/* scan for black player available moves */
			if (readCell(c,j,table) == 'W')
     e3a:	4c eb       	ldi	r20, 0xBC	; 188
     e3c:	50 e0       	ldi	r21, 0x00	; 0
     e3e:	6d 2d       	mov	r22, r13
     e40:	8c 2f       	mov	r24, r28
     e42:	0e 94 3c 02 	call	0x478	; 0x478 <readCell>
     e46:	87 35       	cpi	r24, 0x57	; 87
     e48:	61 f4       	brne	.+24     	; 0xe62 <scanChessboard+0x13e>
			{
				whiteCount++ ;
     e4a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <whiteCount>
     e4e:	8f 5f       	subi	r24, 0xFF	; 255
     e50:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <whiteCount>
				checkAvailable(c,j,'B',mine) ;
     e54:	20 2f       	mov	r18, r16
     e56:	42 e4       	ldi	r20, 0x42	; 66
     e58:	6d 2d       	mov	r22, r13
     e5a:	8c 2f       	mov	r24, r28
     e5c:	0e 94 93 02 	call	0x526	; 0x526 <checkAvailable>
     e60:	0b c0       	rjmp	.+22     	; 0xe78 <scanChessboard+0x154>
			}
			/* scan for white player available moves */
			else
			{
				blackCount++ ;
     e62:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <blackCount>
     e66:	8f 5f       	subi	r24, 0xFF	; 255
     e68:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <blackCount>
				checkAvailable(c,j,'W',mine) ;
     e6c:	20 2f       	mov	r18, r16
     e6e:	47 e5       	ldi	r20, 0x57	; 87
     e70:	6d 2d       	mov	r22, r13
     e72:	8c 2f       	mov	r24, r28
     e74:	0e 94 93 02 	call	0x526	; 0x526 <checkAvailable>
			}
		}
		temp = buffer & 0b10000000 ;
		if (temp == 0b10000000)
     e78:	dd 23       	and	r29, r29
     e7a:	24 f5       	brge	.+72     	; 0xec4 <scanChessboard+0x1a0>
		{
			j = 4 ;
			if (index % 2 == 1)
     e7c:	10 ff       	sbrs	r17, 0
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <scanChessboard+0x160>
			{
				j = j + 4 ;
     e80:	dc 2d       	mov	r29, r12
     e82:	01 c0       	rjmp	.+2      	; 0xe86 <scanChessboard+0x162>
			}
		}
		temp = buffer & 0b10000000 ;
		if (temp == 0b10000000)
		{
			j = 4 ;
     e84:	db 2d       	mov	r29, r11
			if (index % 2 == 1)
			{
				j = j + 4 ;
			}
			/* scan for black player available moves */
			if (readCell(c,j,table) == 'W')
     e86:	4c eb       	ldi	r20, 0xBC	; 188
     e88:	50 e0       	ldi	r21, 0x00	; 0
     e8a:	6d 2f       	mov	r22, r29
     e8c:	8c 2f       	mov	r24, r28
     e8e:	0e 94 3c 02 	call	0x478	; 0x478 <readCell>
     e92:	87 35       	cpi	r24, 0x57	; 87
     e94:	61 f4       	brne	.+24     	; 0xeae <scanChessboard+0x18a>
			{
				whiteCount++ ;
     e96:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <whiteCount>
     e9a:	8f 5f       	subi	r24, 0xFF	; 255
     e9c:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <whiteCount>
				checkAvailable(c,j,'B',mine) ;
     ea0:	20 2f       	mov	r18, r16
     ea2:	42 e4       	ldi	r20, 0x42	; 66
     ea4:	6d 2f       	mov	r22, r29
     ea6:	8c 2f       	mov	r24, r28
     ea8:	0e 94 93 02 	call	0x526	; 0x526 <checkAvailable>
     eac:	0b c0       	rjmp	.+22     	; 0xec4 <scanChessboard+0x1a0>
			}
			/* scan for white player available moves */
			else
			{
				blackCount++ ;
     eae:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <blackCount>
     eb2:	8f 5f       	subi	r24, 0xFF	; 255
     eb4:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <blackCount>
				checkAvailable(c,j,'W',mine) ;
     eb8:	20 2f       	mov	r18, r16
     eba:	47 e5       	ldi	r20, 0x57	; 87
     ebc:	6d 2f       	mov	r22, r29
     ebe:	8c 2f       	mov	r24, r28
     ec0:	0e 94 93 02 	call	0x526	; 0x526 <checkAvailable>
{
	char c = 0 ;											/* For every one white checker checks for my available moves */
	uint8_t j = 0 ;											/* and stores them in a parallel memory board the validtable */
	uint8_t buffer = 0 ;
	uint8_t temp = 0 ;
	for (uint8_t index = 0; index < SIZE ; index++)
     ec4:	1f 5f       	subi	r17, 0xFF	; 255
     ec6:	10 31       	cpi	r17, 0x10	; 16
     ec8:	09 f0       	breq	.+2      	; 0xecc <scanChessboard+0x1a8>
     eca:	5e cf       	rjmp	.-324    	; 0xd88 <scanChessboard+0x64>
				checkAvailable(c,j,'W',mine) ;
			}
		}
		
	}
}
     ecc:	df 91       	pop	r29
     ece:	cf 91       	pop	r28
     ed0:	1f 91       	pop	r17
     ed2:	0f 91       	pop	r16
     ed4:	ff 90       	pop	r15
     ed6:	ef 90       	pop	r14
     ed8:	df 90       	pop	r13
     eda:	cf 90       	pop	r12
     edc:	bf 90       	pop	r11
     ede:	af 90       	pop	r10
     ee0:	9f 90       	pop	r9
     ee2:	8f 90       	pop	r8
     ee4:	7f 90       	pop	r7
     ee6:	6f 90       	pop	r6
     ee8:	5f 90       	pop	r5
     eea:	08 95       	ret

00000eec <TurnOtherCheckers>:
	enemyValidtable[index] = buffer ;
}


void TurnOtherCheckers(char c,uint8_t column,char enemy,char player,uint8_t chessboard[])
{
     eec:	7f 92       	push	r7
     eee:	8f 92       	push	r8
     ef0:	9f 92       	push	r9
     ef2:	af 92       	push	r10
     ef4:	bf 92       	push	r11
     ef6:	cf 92       	push	r12
     ef8:	df 92       	push	r13
     efa:	ef 92       	push	r14
     efc:	ff 92       	push	r15
     efe:	0f 93       	push	r16
     f00:	1f 93       	push	r17
     f02:	cf 93       	push	r28
     f04:	df 93       	push	r29
     f06:	f8 2e       	mov	r15, r24
     f08:	e6 2e       	mov	r14, r22
     f0a:	c4 2f       	mov	r28, r20
     f0c:	d2 2e       	mov	r13, r18
	char row = c;
	uint8_t col = column;
	uint8_t found = 0;
	/*Check for players checkers from right*/
	col++;
     f0e:	cc 24       	eor	r12, r12
     f10:	c3 94       	inc	r12
     f12:	c6 0e       	add	r12, r22
	while (col < 9 && readCell(row,col,chessboard) == enemy && found == 0)
     f14:	88 e0       	ldi	r24, 0x08	; 8
     f16:	8c 15       	cp	r24, r12
     f18:	98 f4       	brcc	.+38     	; 0xf40 <TurnOtherCheckers+0x54>
     f1a:	31 c0       	rjmp	.+98     	; 0xf7e <TurnOtherCheckers+0x92>
	{
		if (col+1 < 9)
     f1c:	8d 2f       	mov	r24, r29
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	01 96       	adiw	r24, 0x01	; 1
     f22:	09 97       	sbiw	r24, 0x09	; 9
     f24:	4c f4       	brge	.+18     	; 0xf38 <TurnOtherCheckers+0x4c>
		{
			if(readCell(row,(col+1),chessboard) == player)
     f26:	a8 01       	movw	r20, r16
     f28:	61 e0       	ldi	r22, 0x01	; 1
     f2a:	6d 0f       	add	r22, r29
     f2c:	8f 2d       	mov	r24, r15
     f2e:	0e 94 3c 02 	call	0x478	; 0x478 <readCell>
     f32:	ba 2c       	mov	r11, r10
     f34:	8d 11       	cpse	r24, r13
     f36:	b9 2c       	mov	r11, r9
			{
				found = 1;
			}
		}
		col++;
     f38:	df 5f       	subi	r29, 0xFF	; 255
	char row = c;
	uint8_t col = column;
	uint8_t found = 0;
	/*Check for players checkers from right*/
	col++;
	while (col < 9 && readCell(row,col,chessboard) == enemy && found == 0)
     f3a:	d9 30       	cpi	r29, 0x09	; 9
     f3c:	31 f4       	brne	.+12     	; 0xf4a <TurnOtherCheckers+0x5e>
     f3e:	1f c0       	rjmp	.+62     	; 0xf7e <TurnOtherCheckers+0x92>
     f40:	dc 2d       	mov	r29, r12
     f42:	b1 2c       	mov	r11, r1
     f44:	aa 24       	eor	r10, r10
     f46:	a3 94       	inc	r10
     f48:	91 2c       	mov	r9, r1
     f4a:	a8 01       	movw	r20, r16
     f4c:	6d 2f       	mov	r22, r29
     f4e:	8f 2d       	mov	r24, r15
     f50:	0e 94 3c 02 	call	0x478	; 0x478 <readCell>
     f54:	8c 13       	cpse	r24, r28
     f56:	02 c0       	rjmp	.+4      	; 0xf5c <TurnOtherCheckers+0x70>
     f58:	bb 20       	and	r11, r11
     f5a:	01 f3       	breq	.-64     	; 0xf1c <TurnOtherCheckers+0x30>
				found = 1;
			}
		}
		col++;
	}
	if(found == 1 && (col < 9))
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	b8 12       	cpse	r11, r24
     f60:	0e c0       	rjmp	.+28     	; 0xf7e <TurnOtherCheckers+0x92>
     f62:	d9 30       	cpi	r29, 0x09	; 9
     f64:	60 f4       	brcc	.+24     	; 0xf7e <TurnOtherCheckers+0x92>
	{
		for(uint8_t i = (column + 1); i < col; i++)
     f66:	cd 16       	cp	r12, r29
     f68:	50 f4       	brcc	.+20     	; 0xf7e <TurnOtherCheckers+0x92>
     f6a:	bc 2c       	mov	r11, r12
		{
			setChecker(c,i,player,chessboard);
     f6c:	98 01       	movw	r18, r16
     f6e:	4d 2d       	mov	r20, r13
     f70:	6b 2d       	mov	r22, r11
     f72:	8f 2d       	mov	r24, r15
     f74:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
		}
		col++;
	}
	if(found == 1 && (col < 9))
	{
		for(uint8_t i = (column + 1); i < col; i++)
     f78:	b3 94       	inc	r11
     f7a:	bd 16       	cp	r11, r29
     f7c:	b8 f3       	brcs	.-18     	; 0xf6c <TurnOtherCheckers+0x80>
		}
	}
	/*Check for players checkers from left*/
	found = 0 ;
	col = column;
	col--;
     f7e:	bb 24       	eor	r11, r11
     f80:	ba 94       	dec	r11
     f82:	be 0c       	add	r11, r14
	while (col > 0 && readCell(row,col,chessboard) == enemy && found == 0)
     f84:	99 f4       	brne	.+38     	; 0xfac <TurnOtherCheckers+0xc0>
     f86:	35 c0       	rjmp	.+106    	; 0xff2 <TurnOtherCheckers+0x106>
	{
		if (col-1 > 0)
     f88:	8d 2f       	mov	r24, r29
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	01 97       	sbiw	r24, 0x01	; 1
     f8e:	18 16       	cp	r1, r24
     f90:	19 06       	cpc	r1, r25
     f92:	4c f4       	brge	.+18     	; 0xfa6 <TurnOtherCheckers+0xba>
		{
			if(readCell(row,(col-1),chessboard) == player)
     f94:	a8 01       	movw	r20, r16
     f96:	6f ef       	ldi	r22, 0xFF	; 255
     f98:	6d 0f       	add	r22, r29
     f9a:	8f 2d       	mov	r24, r15
     f9c:	0e 94 3c 02 	call	0x478	; 0x478 <readCell>
     fa0:	a9 2c       	mov	r10, r9
     fa2:	d8 12       	cpse	r13, r24
     fa4:	a8 2c       	mov	r10, r8
			{
				found = 1;
			}
		}
		col--;
     fa6:	d1 50       	subi	r29, 0x01	; 1
	}
	/*Check for players checkers from left*/
	found = 0 ;
	col = column;
	col--;
	while (col > 0 && readCell(row,col,chessboard) == enemy && found == 0)
     fa8:	31 f4       	brne	.+12     	; 0xfb6 <TurnOtherCheckers+0xca>
     faa:	0e c0       	rjmp	.+28     	; 0xfc8 <TurnOtherCheckers+0xdc>
     fac:	db 2d       	mov	r29, r11
     fae:	a1 2c       	mov	r10, r1
     fb0:	99 24       	eor	r9, r9
     fb2:	93 94       	inc	r9
     fb4:	81 2c       	mov	r8, r1
     fb6:	a8 01       	movw	r20, r16
     fb8:	6d 2f       	mov	r22, r29
     fba:	8f 2d       	mov	r24, r15
     fbc:	0e 94 3c 02 	call	0x478	; 0x478 <readCell>
     fc0:	c8 13       	cpse	r28, r24
     fc2:	02 c0       	rjmp	.+4      	; 0xfc8 <TurnOtherCheckers+0xdc>
     fc4:	aa 20       	and	r10, r10
     fc6:	01 f3       	breq	.-64     	; 0xf88 <TurnOtherCheckers+0x9c>
				found = 1;
			}
		}
		col--;
	}
	if(found == 1 && (column - 1 > 0))
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	a8 12       	cpse	r10, r24
     fcc:	12 c0       	rjmp	.+36     	; 0xff2 <TurnOtherCheckers+0x106>
     fce:	8e 2d       	mov	r24, r14
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	01 97       	sbiw	r24, 0x01	; 1
     fd4:	18 16       	cp	r1, r24
     fd6:	19 06       	cpc	r1, r25
     fd8:	64 f4       	brge	.+24     	; 0xff2 <TurnOtherCheckers+0x106>
	{
		for(uint8_t i = (column -1); i > col; i--)
     fda:	db 15       	cp	r29, r11
     fdc:	50 f4       	brcc	.+20     	; 0xff2 <TurnOtherCheckers+0x106>
     fde:	ab 2c       	mov	r10, r11
		{
			setChecker(c,i,player,chessboard);
     fe0:	98 01       	movw	r18, r16
     fe2:	4d 2d       	mov	r20, r13
     fe4:	6a 2d       	mov	r22, r10
     fe6:	8f 2d       	mov	r24, r15
     fe8:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
		}
		col--;
	}
	if(found == 1 && (column - 1 > 0))
	{
		for(uint8_t i = (column -1); i > col; i--)
     fec:	aa 94       	dec	r10
     fee:	da 15       	cp	r29, r10
     ff0:	b8 f3       	brcs	.-18     	; 0xfe0 <TurnOtherCheckers+0xf4>
		}
	}
	/*Check for players checkers from up*/
	found = 0 ;
	col = column;
	row-- ;
     ff2:	aa 24       	eor	r10, r10
     ff4:	aa 94       	dec	r10
     ff6:	af 0c       	add	r10, r15
	while (row > '@' && readCell(row,col,chessboard) == enemy && found == 0)
     ff8:	80 e4       	ldi	r24, 0x40	; 64
     ffa:	8a 15       	cp	r24, r10
     ffc:	a0 f0       	brcs	.+40     	; 0x1026 <TurnOtherCheckers+0x13a>
     ffe:	a7 c1       	rjmp	.+846    	; 0x134e <TurnOtherCheckers+0x462>
	{
		if (row - 1 > '@')
    1000:	8d 2f       	mov	r24, r29
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	01 97       	sbiw	r24, 0x01	; 1
    1006:	81 34       	cpi	r24, 0x41	; 65
    1008:	91 05       	cpc	r25, r1
    100a:	4c f0       	brlt	.+18     	; 0x101e <TurnOtherCheckers+0x132>
		{
			if(readCell((row-1),col,chessboard) == player)
    100c:	a8 01       	movw	r20, r16
    100e:	6e 2d       	mov	r22, r14
    1010:	8f ef       	ldi	r24, 0xFF	; 255
    1012:	8d 0f       	add	r24, r29
    1014:	0e 94 3c 02 	call	0x478	; 0x478 <readCell>
    1018:	98 2c       	mov	r9, r8
    101a:	d8 12       	cpse	r13, r24
    101c:	97 2c       	mov	r9, r7
			{
				found = 1;
			}
		}
		row--;
    101e:	d1 50       	subi	r29, 0x01	; 1
	}
	/*Check for players checkers from up*/
	found = 0 ;
	col = column;
	row-- ;
	while (row > '@' && readCell(row,col,chessboard) == enemy && found == 0)
    1020:	d0 34       	cpi	r29, 0x40	; 64
    1022:	31 f4       	brne	.+12     	; 0x1030 <TurnOtherCheckers+0x144>
    1024:	0e c0       	rjmp	.+28     	; 0x1042 <TurnOtherCheckers+0x156>
    1026:	da 2d       	mov	r29, r10
    1028:	91 2c       	mov	r9, r1
    102a:	88 24       	eor	r8, r8
    102c:	83 94       	inc	r8
    102e:	71 2c       	mov	r7, r1
    1030:	a8 01       	movw	r20, r16
    1032:	6e 2d       	mov	r22, r14
    1034:	8d 2f       	mov	r24, r29
    1036:	0e 94 3c 02 	call	0x478	; 0x478 <readCell>
    103a:	c8 13       	cpse	r28, r24
    103c:	02 c0       	rjmp	.+4      	; 0x1042 <TurnOtherCheckers+0x156>
    103e:	99 20       	and	r9, r9
    1040:	f9 f2       	breq	.-66     	; 0x1000 <TurnOtherCheckers+0x114>
				found = 1;
			}
		}
		row--;
	}
	if(found == 1 && (row > '@'))
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	98 12       	cpse	r9, r24
    1046:	0e c0       	rjmp	.+28     	; 0x1064 <TurnOtherCheckers+0x178>
    1048:	d1 34       	cpi	r29, 0x41	; 65
    104a:	60 f0       	brcs	.+24     	; 0x1064 <TurnOtherCheckers+0x178>
	{
		for(uint8_t i = (c -1); i > row; i--)
    104c:	da 15       	cp	r29, r10
    104e:	50 f4       	brcc	.+20     	; 0x1064 <TurnOtherCheckers+0x178>
    1050:	9a 2c       	mov	r9, r10
		{
			setChecker(i,col,player,chessboard);
    1052:	98 01       	movw	r18, r16
    1054:	4d 2d       	mov	r20, r13
    1056:	6e 2d       	mov	r22, r14
    1058:	89 2d       	mov	r24, r9
    105a:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
		}
		row--;
	}
	if(found == 1 && (row > '@'))
	{
		for(uint8_t i = (c -1); i > row; i--)
    105e:	9a 94       	dec	r9
    1060:	d9 15       	cp	r29, r9
    1062:	b8 f3       	brcs	.-18     	; 0x1052 <TurnOtherCheckers+0x166>
	}
	/*Check for players checkers from down*/
	found = 0 ;
	row = c;
	col = column;
	row++ ;
    1064:	f3 94       	inc	r15
	while (row < 'I' && readCell(row,col,chessboard) == enemy && found == 0)
    1066:	88 e4       	ldi	r24, 0x48	; 72
    1068:	8f 15       	cp	r24, r15
    106a:	a0 f4       	brcc	.+40     	; 0x1094 <TurnOtherCheckers+0x1a8>
    106c:	28 c0       	rjmp	.+80     	; 0x10be <TurnOtherCheckers+0x1d2>
	{
		if (row + 1 < 'I')
    106e:	8d 2f       	mov	r24, r29
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	01 96       	adiw	r24, 0x01	; 1
    1074:	89 34       	cpi	r24, 0x49	; 73
    1076:	91 05       	cpc	r25, r1
    1078:	4c f4       	brge	.+18     	; 0x108c <TurnOtherCheckers+0x1a0>
		{
			if(readCell((row+1),col,chessboard) == player)
    107a:	a8 01       	movw	r20, r16
    107c:	6e 2d       	mov	r22, r14
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	8d 0f       	add	r24, r29
    1082:	0e 94 3c 02 	call	0x478	; 0x478 <readCell>
    1086:	98 2c       	mov	r9, r8
    1088:	d8 12       	cpse	r13, r24
    108a:	97 2c       	mov	r9, r7
			{
				found = 1;
			}
		}
		row++;
    108c:	df 5f       	subi	r29, 0xFF	; 255
	/*Check for players checkers from down*/
	found = 0 ;
	row = c;
	col = column;
	row++ ;
	while (row < 'I' && readCell(row,col,chessboard) == enemy && found == 0)
    108e:	d9 34       	cpi	r29, 0x49	; 73
    1090:	31 f4       	brne	.+12     	; 0x109e <TurnOtherCheckers+0x1b2>
    1092:	0e c0       	rjmp	.+28     	; 0x10b0 <TurnOtherCheckers+0x1c4>
		}
		row--;
	}
	if(found == 1 && (row > '@'))
	{
		for(uint8_t i = (c -1); i > row; i--)
    1094:	df 2d       	mov	r29, r15
    1096:	91 2c       	mov	r9, r1
    1098:	88 24       	eor	r8, r8
    109a:	83 94       	inc	r8
    109c:	71 2c       	mov	r7, r1
	/*Check for players checkers from down*/
	found = 0 ;
	row = c;
	col = column;
	row++ ;
	while (row < 'I' && readCell(row,col,chessboard) == enemy && found == 0)
    109e:	a8 01       	movw	r20, r16
    10a0:	6e 2d       	mov	r22, r14
    10a2:	8d 2f       	mov	r24, r29
    10a4:	0e 94 3c 02 	call	0x478	; 0x478 <readCell>
    10a8:	c8 13       	cpse	r28, r24
    10aa:	02 c0       	rjmp	.+4      	; 0x10b0 <TurnOtherCheckers+0x1c4>
    10ac:	99 20       	and	r9, r9
    10ae:	f9 f2       	breq	.-66     	; 0x106e <TurnOtherCheckers+0x182>
				found = 1;
			}
		}
		row++;
	}
	if(found == 1 && (row < 'I'))
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	98 12       	cpse	r9, r24
    10b4:	04 c0       	rjmp	.+8      	; 0x10be <TurnOtherCheckers+0x1d2>
    10b6:	d9 34       	cpi	r29, 0x49	; 73
    10b8:	10 f4       	brcc	.+4      	; 0x10be <TurnOtherCheckers+0x1d2>
	{
		for(uint8_t i = c+1; i < row; i++)
    10ba:	fd 16       	cp	r15, r29
    10bc:	40 f0       	brcs	.+16     	; 0x10ce <TurnOtherCheckers+0x1e2>
	found = 0 ;
	row = c;
	col = column;
	row--;
	col++;
	while ((row > '@' && col < 9) && readCell(row,col,chessboard) == enemy && found != 1)
    10be:	80 e4       	ldi	r24, 0x40	; 64
    10c0:	8a 15       	cp	r24, r10
    10c2:	08 f0       	brcs	.+2      	; 0x10c6 <TurnOtherCheckers+0x1da>
    10c4:	40 c0       	rjmp	.+128    	; 0x1146 <TurnOtherCheckers+0x25a>
    10c6:	88 e0       	ldi	r24, 0x08	; 8
    10c8:	8c 15       	cp	r24, r12
    10ca:	48 f5       	brcc	.+82     	; 0x111e <TurnOtherCheckers+0x232>
    10cc:	3c c0       	rjmp	.+120    	; 0x1146 <TurnOtherCheckers+0x25a>
		}
		row++;
	}
	if(found == 1 && (row < 'I'))
	{
		for(uint8_t i = c+1; i < row; i++)
    10ce:	9f 2c       	mov	r9, r15
		{
			setChecker(i,col,player,chessboard);
    10d0:	98 01       	movw	r18, r16
    10d2:	4d 2d       	mov	r20, r13
    10d4:	6e 2d       	mov	r22, r14
    10d6:	89 2d       	mov	r24, r9
    10d8:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
		}
		row++;
	}
	if(found == 1 && (row < 'I'))
	{
		for(uint8_t i = c+1; i < row; i++)
    10dc:	93 94       	inc	r9
    10de:	9d 16       	cp	r9, r29
    10e0:	b8 f3       	brcs	.-18     	; 0x10d0 <TurnOtherCheckers+0x1e4>
    10e2:	ed cf       	rjmp	.-38     	; 0x10be <TurnOtherCheckers+0x1d2>
	col = column;
	row--;
	col++;
	while ((row > '@' && col < 9) && readCell(row,col,chessboard) == enemy && found != 1)
	{
		if ((row - 1 > '@') && (col + 1 < 9))
    10e4:	8d 2f       	mov	r24, r29
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	01 97       	sbiw	r24, 0x01	; 1
    10ea:	81 34       	cpi	r24, 0x41	; 65
    10ec:	91 05       	cpc	r25, r1
    10ee:	7c f0       	brlt	.+30     	; 0x110e <TurnOtherCheckers+0x222>
    10f0:	8e 2d       	mov	r24, r14
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	01 96       	adiw	r24, 0x01	; 1
    10f6:	09 97       	sbiw	r24, 0x09	; 9
    10f8:	54 f4       	brge	.+20     	; 0x110e <TurnOtherCheckers+0x222>
		{
			if(readCell((row-1),(col+1),chessboard) == player)
    10fa:	a8 01       	movw	r20, r16
    10fc:	61 e0       	ldi	r22, 0x01	; 1
    10fe:	6e 0d       	add	r22, r14
    1100:	8f ef       	ldi	r24, 0xFF	; 255
    1102:	8d 0f       	add	r24, r29
    1104:	0e 94 3c 02 	call	0x478	; 0x478 <readCell>
    1108:	d8 12       	cpse	r13, r24
    110a:	01 c0       	rjmp	.+2      	; 0x110e <TurnOtherCheckers+0x222>
			{
				found = 1;
    110c:	98 2c       	mov	r9, r8
			}
		}
		row--;
    110e:	d1 50       	subi	r29, 0x01	; 1
		col++;
    1110:	e3 94       	inc	r14
	found = 0 ;
	row = c;
	col = column;
	row--;
	col++;
	while ((row > '@' && col < 9) && readCell(row,col,chessboard) == enemy && found != 1)
    1112:	d0 34       	cpi	r29, 0x40	; 64
    1114:	a1 f0       	breq	.+40     	; 0x113e <TurnOtherCheckers+0x252>
    1116:	89 e0       	ldi	r24, 0x09	; 9
    1118:	e8 12       	cpse	r14, r24
    111a:	06 c0       	rjmp	.+12     	; 0x1128 <TurnOtherCheckers+0x23c>
    111c:	03 c1       	rjmp	.+518    	; 0x1324 <TurnOtherCheckers+0x438>
    111e:	ec 2c       	mov	r14, r12
    1120:	da 2d       	mov	r29, r10
    1122:	91 2c       	mov	r9, r1
	{
		if ((row - 1 > '@') && (col + 1 < 9))
		{
			if(readCell((row-1),(col+1),chessboard) == player)
			{
				found = 1;
    1124:	88 24       	eor	r8, r8
    1126:	83 94       	inc	r8
	found = 0 ;
	row = c;
	col = column;
	row--;
	col++;
	while ((row > '@' && col < 9) && readCell(row,col,chessboard) == enemy && found != 1)
    1128:	a8 01       	movw	r20, r16
    112a:	6e 2d       	mov	r22, r14
    112c:	8d 2f       	mov	r24, r29
    112e:	0e 94 3c 02 	call	0x478	; 0x478 <readCell>
    1132:	c8 13       	cpse	r28, r24
    1134:	04 c0       	rjmp	.+8      	; 0x113e <TurnOtherCheckers+0x252>
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	98 12       	cpse	r9, r24
    113a:	d4 cf       	rjmp	.-88     	; 0x10e4 <TurnOtherCheckers+0x1f8>
    113c:	0e c1       	rjmp	.+540    	; 0x135a <TurnOtherCheckers+0x46e>
		row--;
		col++;
	}
	col = column;
	col++ ;
	if(found == 1 && (row > '@') && (col < 9))
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	98 16       	cp	r9, r24
    1142:	09 f4       	brne	.+2      	; 0x1146 <TurnOtherCheckers+0x25a>
    1144:	0a c1       	rjmp	.+532    	; 0x135a <TurnOtherCheckers+0x46e>
	found = 0 ;
	row = c;
	col = column;
	row++;
	col--;
	while ((row < 'I' && col > 0) && readCell(row,col,chessboard) == enemy && found != 1)
    1146:	88 e4       	ldi	r24, 0x48	; 72
    1148:	8f 15       	cp	r24, r15
    114a:	08 f4       	brcc	.+2      	; 0x114e <TurnOtherCheckers+0x262>
    114c:	13 c1       	rjmp	.+550    	; 0x1374 <TurnOtherCheckers+0x488>
    114e:	b1 10       	cpse	r11, r1
    1150:	2d c0       	rjmp	.+90     	; 0x11ac <TurnOtherCheckers+0x2c0>
    1152:	8c c0       	rjmp	.+280    	; 0x126c <TurnOtherCheckers+0x380>
	}
	col = column;
	col++ ;
	if(found == 1 && (row > '@') && (col < 9))
	{
		for(uint8_t i = c - 1; i > row; i--)
    1154:	da 15       	cp	r29, r10
    1156:	b8 f7       	brcc	.-18     	; 0x1146 <TurnOtherCheckers+0x25a>
    1158:	ea 2c       	mov	r14, r10
    115a:	9c 2c       	mov	r9, r12
		{
			setChecker(i,col,player,chessboard);
    115c:	98 01       	movw	r18, r16
    115e:	4d 2d       	mov	r20, r13
    1160:	69 2d       	mov	r22, r9
    1162:	8e 2d       	mov	r24, r14
    1164:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
			col++;
    1168:	93 94       	inc	r9
	}
	col = column;
	col++ ;
	if(found == 1 && (row > '@') && (col < 9))
	{
		for(uint8_t i = c - 1; i > row; i--)
    116a:	ea 94       	dec	r14
    116c:	de 15       	cp	r29, r14
    116e:	b0 f3       	brcs	.-20     	; 0x115c <TurnOtherCheckers+0x270>
    1170:	ea cf       	rjmp	.-44     	; 0x1146 <TurnOtherCheckers+0x25a>
	col = column;
	row++;
	col--;
	while ((row < 'I' && col > 0) && readCell(row,col,chessboard) == enemy && found != 1)
	{
		if ((row + 1 < 'I') && (col - 1 > 0))
    1172:	8d 2f       	mov	r24, r29
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	01 96       	adiw	r24, 0x01	; 1
    1178:	89 34       	cpi	r24, 0x49	; 73
    117a:	91 05       	cpc	r25, r1
    117c:	84 f4       	brge	.+32     	; 0x119e <TurnOtherCheckers+0x2b2>
    117e:	8e 2d       	mov	r24, r14
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	01 97       	sbiw	r24, 0x01	; 1
    1184:	18 16       	cp	r1, r24
    1186:	19 06       	cpc	r1, r25
    1188:	54 f4       	brge	.+20     	; 0x119e <TurnOtherCheckers+0x2b2>
		{
			if(readCell((row+1),(col-1),chessboard) == player)
    118a:	a8 01       	movw	r20, r16
    118c:	6f ef       	ldi	r22, 0xFF	; 255
    118e:	6e 0d       	add	r22, r14
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	8d 0f       	add	r24, r29
    1194:	0e 94 3c 02 	call	0x478	; 0x478 <readCell>
    1198:	d8 12       	cpse	r13, r24
    119a:	01 c0       	rjmp	.+2      	; 0x119e <TurnOtherCheckers+0x2b2>
			{
				found = 1;
    119c:	98 2c       	mov	r9, r8
			}
		}
		row++;
    119e:	df 5f       	subi	r29, 0xFF	; 255
		col--;
    11a0:	ea 94       	dec	r14
	found = 0 ;
	row = c;
	col = column;
	row++;
	col--;
	while ((row < 'I' && col > 0) && readCell(row,col,chessboard) == enemy && found != 1)
    11a2:	d9 34       	cpi	r29, 0x49	; 73
    11a4:	99 f0       	breq	.+38     	; 0x11cc <TurnOtherCheckers+0x2e0>
    11a6:	e1 10       	cpse	r14, r1
    11a8:	06 c0       	rjmp	.+12     	; 0x11b6 <TurnOtherCheckers+0x2ca>
    11aa:	c0 c0       	rjmp	.+384    	; 0x132c <TurnOtherCheckers+0x440>
    11ac:	eb 2c       	mov	r14, r11
    11ae:	df 2d       	mov	r29, r15
    11b0:	91 2c       	mov	r9, r1
	{
		if ((row + 1 < 'I') && (col - 1 > 0))
		{
			if(readCell((row+1),(col-1),chessboard) == player)
			{
				found = 1;
    11b2:	88 24       	eor	r8, r8
    11b4:	83 94       	inc	r8
	found = 0 ;
	row = c;
	col = column;
	row++;
	col--;
	while ((row < 'I' && col > 0) && readCell(row,col,chessboard) == enemy && found != 1)
    11b6:	a8 01       	movw	r20, r16
    11b8:	6e 2d       	mov	r22, r14
    11ba:	8d 2f       	mov	r24, r29
    11bc:	0e 94 3c 02 	call	0x478	; 0x478 <readCell>
    11c0:	c8 13       	cpse	r28, r24
    11c2:	04 c0       	rjmp	.+8      	; 0x11cc <TurnOtherCheckers+0x2e0>
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	98 12       	cpse	r9, r24
    11c8:	d4 cf       	rjmp	.-88     	; 0x1172 <TurnOtherCheckers+0x286>
    11ca:	cb c0       	rjmp	.+406    	; 0x1362 <TurnOtherCheckers+0x476>
		row++;
		col--;
	}
	col = column;
	col-- ;
	if(found == 1 && (row < 'I') && (col > 0))
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	98 12       	cpse	r9, r24
    11d0:	cc c0       	rjmp	.+408    	; 0x136a <TurnOtherCheckers+0x47e>
    11d2:	c7 c0       	rjmp	.+398    	; 0x1362 <TurnOtherCheckers+0x476>
	found = 0 ;
	row = c;
	col = column;
	row--;
	col--;
	while ((row > '@' && col > 0) && readCell(row,col,chessboard) == enemy && found != 1)
    11d4:	80 e4       	ldi	r24, 0x40	; 64
    11d6:	8a 15       	cp	r24, r10
    11d8:	08 f0       	brcs	.+2      	; 0x11dc <TurnOtherCheckers+0x2f0>
    11da:	48 c0       	rjmp	.+144    	; 0x126c <TurnOtherCheckers+0x380>
    11dc:	b1 10       	cpse	r11, r1
    11de:	31 c0       	rjmp	.+98     	; 0x1242 <TurnOtherCheckers+0x356>
    11e0:	45 c0       	rjmp	.+138    	; 0x126c <TurnOtherCheckers+0x380>
	}
	col = column;
	col-- ;
	if(found == 1 && (row < 'I') && (col > 0))
	{
		for(uint8_t i = c+1; ((i < row) && (col > 0));  i++)
    11e2:	fd 16       	cp	r15, r29
    11e4:	08 f0       	brcs	.+2      	; 0x11e8 <TurnOtherCheckers+0x2fc>
    11e6:	a6 c0       	rjmp	.+332    	; 0x1334 <TurnOtherCheckers+0x448>
    11e8:	ef 2c       	mov	r14, r15
    11ea:	9b 2c       	mov	r9, r11
		{
			setChecker(i,col,player,chessboard);
    11ec:	98 01       	movw	r18, r16
    11ee:	4d 2d       	mov	r20, r13
    11f0:	69 2d       	mov	r22, r9
    11f2:	8e 2d       	mov	r24, r14
    11f4:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
			col--;
    11f8:	9a 94       	dec	r9
	}
	col = column;
	col-- ;
	if(found == 1 && (row < 'I') && (col > 0))
	{
		for(uint8_t i = c+1; ((i < row) && (col > 0));  i++)
    11fa:	e3 94       	inc	r14
    11fc:	ed 16       	cp	r14, r29
    11fe:	08 f0       	brcs	.+2      	; 0x1202 <TurnOtherCheckers+0x316>
    1200:	99 c0       	rjmp	.+306    	; 0x1334 <TurnOtherCheckers+0x448>
    1202:	91 10       	cpse	r9, r1
    1204:	f3 cf       	rjmp	.-26     	; 0x11ec <TurnOtherCheckers+0x300>
    1206:	96 c0       	rjmp	.+300    	; 0x1334 <TurnOtherCheckers+0x448>
	col = column;
	row--;
	col--;
	while ((row > '@' && col > 0) && readCell(row,col,chessboard) == enemy && found != 1)
	{
		if ((row - 1 > '@') && (col - 1 > 0))
    1208:	8d 2f       	mov	r24, r29
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	01 97       	sbiw	r24, 0x01	; 1
    120e:	81 34       	cpi	r24, 0x41	; 65
    1210:	91 05       	cpc	r25, r1
    1212:	84 f0       	brlt	.+32     	; 0x1234 <TurnOtherCheckers+0x348>
    1214:	8e 2d       	mov	r24, r14
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	01 97       	sbiw	r24, 0x01	; 1
    121a:	18 16       	cp	r1, r24
    121c:	19 06       	cpc	r1, r25
    121e:	54 f4       	brge	.+20     	; 0x1234 <TurnOtherCheckers+0x348>
		{
			if(readCell((row-1),(col-1),chessboard) == player)
    1220:	a8 01       	movw	r20, r16
    1222:	6f ef       	ldi	r22, 0xFF	; 255
    1224:	6e 0d       	add	r22, r14
    1226:	8f ef       	ldi	r24, 0xFF	; 255
    1228:	8d 0f       	add	r24, r29
    122a:	0e 94 3c 02 	call	0x478	; 0x478 <readCell>
    122e:	d8 12       	cpse	r13, r24
    1230:	01 c0       	rjmp	.+2      	; 0x1234 <TurnOtherCheckers+0x348>
			{
				found = 1;
    1232:	98 2c       	mov	r9, r8
			}
		}
		row--;
    1234:	d1 50       	subi	r29, 0x01	; 1
		col--;
    1236:	ea 94       	dec	r14
	found = 0 ;
	row = c;
	col = column;
	row--;
	col--;
	while ((row > '@' && col > 0) && readCell(row,col,chessboard) == enemy && found != 1)
    1238:	d1 34       	cpi	r29, 0x41	; 65
    123a:	98 f0       	brcs	.+38     	; 0x1262 <TurnOtherCheckers+0x376>
    123c:	e1 10       	cpse	r14, r1
    123e:	06 c0       	rjmp	.+12     	; 0x124c <TurnOtherCheckers+0x360>
    1240:	7e c0       	rjmp	.+252    	; 0x133e <TurnOtherCheckers+0x452>
	{
		if ((row - 1 > '@') && (col - 1 > 0))
		{
			if(readCell((row-1),(col-1),chessboard) == player)
			{
				found = 1;
    1242:	eb 2c       	mov	r14, r11
    1244:	da 2d       	mov	r29, r10
    1246:	91 2c       	mov	r9, r1
    1248:	88 24       	eor	r8, r8
    124a:	83 94       	inc	r8
	found = 0 ;
	row = c;
	col = column;
	row--;
	col--;
	while ((row > '@' && col > 0) && readCell(row,col,chessboard) == enemy && found != 1)
    124c:	a8 01       	movw	r20, r16
    124e:	6e 2d       	mov	r22, r14
    1250:	8d 2f       	mov	r24, r29
    1252:	0e 94 3c 02 	call	0x478	; 0x478 <readCell>
    1256:	c8 13       	cpse	r28, r24
    1258:	04 c0       	rjmp	.+8      	; 0x1262 <TurnOtherCheckers+0x376>
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	98 12       	cpse	r9, r24
    125e:	d4 cf       	rjmp	.-88     	; 0x1208 <TurnOtherCheckers+0x31c>
    1260:	03 c0       	rjmp	.+6      	; 0x1268 <TurnOtherCheckers+0x37c>
		row--;
		col--;
	}
	col = column;
	col-- ;
	if(found == 1 && (row > '@') && (col > 0))
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	98 12       	cpse	r9, r24
    1266:	02 c0       	rjmp	.+4      	; 0x126c <TurnOtherCheckers+0x380>
    1268:	d1 34       	cpi	r29, 0x41	; 65
    126a:	40 f4       	brcc	.+16     	; 0x127c <TurnOtherCheckers+0x390>
	found = 0 ;
	row = c;
	col = column;
	row++;
	col++;
	while ((row < 'I' && col < 9) && readCell(row,col,chessboard) == enemy && found != 1)
    126c:	88 e4       	ldi	r24, 0x48	; 72
    126e:	8f 15       	cp	r24, r15
    1270:	08 f4       	brcc	.+2      	; 0x1274 <TurnOtherCheckers+0x388>
    1272:	88 c0       	rjmp	.+272    	; 0x1384 <TurnOtherCheckers+0x498>
    1274:	88 e0       	ldi	r24, 0x08	; 8
    1276:	8c 15       	cp	r24, r12
    1278:	80 f5       	brcc	.+96     	; 0x12da <TurnOtherCheckers+0x3ee>
    127a:	84 c0       	rjmp	.+264    	; 0x1384 <TurnOtherCheckers+0x498>
		row--;
		col--;
	}
	col = column;
	col-- ;
	if(found == 1 && (row > '@') && (col > 0))
    127c:	bb 20       	and	r11, r11
    127e:	b1 f3       	breq	.-20     	; 0x126c <TurnOtherCheckers+0x380>
	{
		for(uint8_t i = c-1; ((i > row) && (col > 0)); i--)
    1280:	da 15       	cp	r29, r10
    1282:	a0 f7       	brcc	.-24     	; 0x126c <TurnOtherCheckers+0x380>
		{
			setChecker(i,col,player,chessboard);
    1284:	98 01       	movw	r18, r16
    1286:	4d 2d       	mov	r20, r13
    1288:	6b 2d       	mov	r22, r11
    128a:	8a 2d       	mov	r24, r10
    128c:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
			col--;
    1290:	ba 94       	dec	r11
	}
	col = column;
	col-- ;
	if(found == 1 && (row > '@') && (col > 0))
	{
		for(uint8_t i = c-1; ((i > row) && (col > 0)); i--)
    1292:	aa 94       	dec	r10
    1294:	da 15       	cp	r29, r10
    1296:	50 f7       	brcc	.-44     	; 0x126c <TurnOtherCheckers+0x380>
    1298:	b1 10       	cpse	r11, r1
    129a:	f4 cf       	rjmp	.-24     	; 0x1284 <TurnOtherCheckers+0x398>
    129c:	e7 cf       	rjmp	.-50     	; 0x126c <TurnOtherCheckers+0x380>
	col = column;
	row++;
	col++;
	while ((row < 'I' && col < 9) && readCell(row,col,chessboard) == enemy && found != 1)
	{
		if ((row+1 < 'I') && (col + 1 < 9))
    129e:	8d 2f       	mov	r24, r29
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	01 96       	adiw	r24, 0x01	; 1
    12a4:	89 34       	cpi	r24, 0x49	; 73
    12a6:	91 05       	cpc	r25, r1
    12a8:	7c f4       	brge	.+30     	; 0x12c8 <TurnOtherCheckers+0x3dc>
    12aa:	8e 2d       	mov	r24, r14
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	01 96       	adiw	r24, 0x01	; 1
    12b0:	09 97       	sbiw	r24, 0x09	; 9
    12b2:	54 f4       	brge	.+20     	; 0x12c8 <TurnOtherCheckers+0x3dc>
		{
			if(readCell((row+1),(col+1),chessboard) == player)
    12b4:	a8 01       	movw	r20, r16
    12b6:	61 e0       	ldi	r22, 0x01	; 1
    12b8:	6e 0d       	add	r22, r14
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	8d 0f       	add	r24, r29
    12be:	0e 94 3c 02 	call	0x478	; 0x478 <readCell>
    12c2:	d8 12       	cpse	r13, r24
    12c4:	01 c0       	rjmp	.+2      	; 0x12c8 <TurnOtherCheckers+0x3dc>
			{
				found = 1;
    12c6:	ba 2c       	mov	r11, r10
			}
		}
		row++;
    12c8:	df 5f       	subi	r29, 0xFF	; 255
		col++;
    12ca:	e3 94       	inc	r14
	found = 0 ;
	row = c;
	col = column;
	row++;
	col++;
	while ((row < 'I' && col < 9) && readCell(row,col,chessboard) == enemy && found != 1)
    12cc:	d9 34       	cpi	r29, 0x49	; 73
    12ce:	09 f4       	brne	.+2      	; 0x12d2 <TurnOtherCheckers+0x3e6>
    12d0:	59 c0       	rjmp	.+178    	; 0x1384 <TurnOtherCheckers+0x498>
    12d2:	89 e0       	ldi	r24, 0x09	; 9
    12d4:	e8 12       	cpse	r14, r24
    12d6:	06 c0       	rjmp	.+12     	; 0x12e4 <TurnOtherCheckers+0x3f8>
    12d8:	36 c0       	rjmp	.+108    	; 0x1346 <TurnOtherCheckers+0x45a>
    12da:	ec 2c       	mov	r14, r12
    12dc:	df 2d       	mov	r29, r15
    12de:	b1 2c       	mov	r11, r1
	{
		if ((row+1 < 'I') && (col + 1 < 9))
		{
			if(readCell((row+1),(col+1),chessboard) == player)
			{
				found = 1;
    12e0:	aa 24       	eor	r10, r10
    12e2:	a3 94       	inc	r10
	found = 0 ;
	row = c;
	col = column;
	row++;
	col++;
	while ((row < 'I' && col < 9) && readCell(row,col,chessboard) == enemy && found != 1)
    12e4:	a8 01       	movw	r20, r16
    12e6:	6e 2d       	mov	r22, r14
    12e8:	8d 2f       	mov	r24, r29
    12ea:	0e 94 3c 02 	call	0x478	; 0x478 <readCell>
    12ee:	c8 13       	cpse	r28, r24
    12f0:	04 c0       	rjmp	.+8      	; 0x12fa <TurnOtherCheckers+0x40e>
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	b8 12       	cpse	r11, r24
    12f6:	d3 cf       	rjmp	.-90     	; 0x129e <TurnOtherCheckers+0x3b2>
    12f8:	42 c0       	rjmp	.+132    	; 0x137e <TurnOtherCheckers+0x492>
		row++;
		col++;
	}
	col = column;
	col++ ;
	if(found == 1 && (row < 'I') && (col < 9))
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	b8 12       	cpse	r11, r24
    12fe:	42 c0       	rjmp	.+132    	; 0x1384 <TurnOtherCheckers+0x498>
    1300:	3e c0       	rjmp	.+124    	; 0x137e <TurnOtherCheckers+0x492>
	{
		for(uint8_t i = c+1; ((i < row) && (col < 9)); i++)
    1302:	fd 16       	cp	r15, r29
    1304:	08 f0       	brcs	.+2      	; 0x1308 <TurnOtherCheckers+0x41c>
    1306:	3e c0       	rjmp	.+124    	; 0x1384 <TurnOtherCheckers+0x498>
		{
			setChecker(i,col,player,chessboard);
    1308:	98 01       	movw	r18, r16
    130a:	4d 2d       	mov	r20, r13
    130c:	6c 2d       	mov	r22, r12
    130e:	8f 2d       	mov	r24, r15
    1310:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
			col++;
    1314:	c3 94       	inc	r12
	}
	col = column;
	col++ ;
	if(found == 1 && (row < 'I') && (col < 9))
	{
		for(uint8_t i = c+1; ((i < row) && (col < 9)); i++)
    1316:	f3 94       	inc	r15
    1318:	fd 16       	cp	r15, r29
    131a:	a0 f5       	brcc	.+104    	; 0x1384 <TurnOtherCheckers+0x498>
    131c:	89 e0       	ldi	r24, 0x09	; 9
    131e:	c8 12       	cpse	r12, r24
    1320:	f3 cf       	rjmp	.-26     	; 0x1308 <TurnOtherCheckers+0x41c>
    1322:	30 c0       	rjmp	.+96     	; 0x1384 <TurnOtherCheckers+0x498>
		row--;
		col++;
	}
	col = column;
	col++ ;
	if(found == 1 && (row > '@') && (col < 9))
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	98 12       	cpse	r9, r24
    1328:	0e cf       	rjmp	.-484    	; 0x1146 <TurnOtherCheckers+0x25a>
    132a:	14 cf       	rjmp	.-472    	; 0x1154 <TurnOtherCheckers+0x268>
		row++;
		col--;
	}
	col = column;
	col-- ;
	if(found == 1 && (row < 'I') && (col > 0))
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	98 12       	cpse	r9, r24
    1330:	1c c0       	rjmp	.+56     	; 0x136a <TurnOtherCheckers+0x47e>
    1332:	57 cf       	rjmp	.-338    	; 0x11e2 <TurnOtherCheckers+0x2f6>
	found = 0 ;
	row = c;
	col = column;
	row--;
	col--;
	while ((row > '@' && col > 0) && readCell(row,col,chessboard) == enemy && found != 1)
    1334:	80 e4       	ldi	r24, 0x40	; 64
    1336:	8a 15       	cp	r24, r10
    1338:	08 f4       	brcc	.+2      	; 0x133c <TurnOtherCheckers+0x450>
    133a:	83 cf       	rjmp	.-250    	; 0x1242 <TurnOtherCheckers+0x356>
    133c:	97 cf       	rjmp	.-210    	; 0x126c <TurnOtherCheckers+0x380>
		row--;
		col--;
	}
	col = column;
	col-- ;
	if(found == 1 && (row > '@') && (col > 0))
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	98 12       	cpse	r9, r24
    1342:	94 cf       	rjmp	.-216    	; 0x126c <TurnOtherCheckers+0x380>
    1344:	9b cf       	rjmp	.-202    	; 0x127c <TurnOtherCheckers+0x390>
		row++;
		col++;
	}
	col = column;
	col++ ;
	if(found == 1 && (row < 'I') && (col < 9))
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	b8 12       	cpse	r11, r24
    134a:	1c c0       	rjmp	.+56     	; 0x1384 <TurnOtherCheckers+0x498>
    134c:	da cf       	rjmp	.-76     	; 0x1302 <TurnOtherCheckers+0x416>
	}
	/*Check for players checkers from down*/
	found = 0 ;
	row = c;
	col = column;
	row++ ;
    134e:	f3 94       	inc	r15
	while (row < 'I' && readCell(row,col,chessboard) == enemy && found == 0)
    1350:	88 e4       	ldi	r24, 0x48	; 72
    1352:	8f 15       	cp	r24, r15
    1354:	08 f0       	brcs	.+2      	; 0x1358 <TurnOtherCheckers+0x46c>
    1356:	9e ce       	rjmp	.-708    	; 0x1094 <TurnOtherCheckers+0x1a8>
    1358:	f6 ce       	rjmp	.-532    	; 0x1146 <TurnOtherCheckers+0x25a>
		row--;
		col++;
	}
	col = column;
	col++ ;
	if(found == 1 && (row > '@') && (col < 9))
    135a:	d1 34       	cpi	r29, 0x41	; 65
    135c:	08 f4       	brcc	.+2      	; 0x1360 <TurnOtherCheckers+0x474>
    135e:	f3 ce       	rjmp	.-538    	; 0x1146 <TurnOtherCheckers+0x25a>
    1360:	f9 ce       	rjmp	.-526    	; 0x1154 <TurnOtherCheckers+0x268>
		row++;
		col--;
	}
	col = column;
	col-- ;
	if(found == 1 && (row < 'I') && (col > 0))
    1362:	d9 34       	cpi	r29, 0x49	; 73
    1364:	08 f0       	brcs	.+2      	; 0x1368 <TurnOtherCheckers+0x47c>
    1366:	36 cf       	rjmp	.-404    	; 0x11d4 <TurnOtherCheckers+0x2e8>
    1368:	3c cf       	rjmp	.-392    	; 0x11e2 <TurnOtherCheckers+0x2f6>
	found = 0 ;
	row = c;
	col = column;
	row--;
	col--;
	while ((row > '@' && col > 0) && readCell(row,col,chessboard) == enemy && found != 1)
    136a:	80 e4       	ldi	r24, 0x40	; 64
    136c:	8a 15       	cp	r24, r10
    136e:	08 f4       	brcc	.+2      	; 0x1372 <TurnOtherCheckers+0x486>
    1370:	68 cf       	rjmp	.-304    	; 0x1242 <TurnOtherCheckers+0x356>
    1372:	7c cf       	rjmp	.-264    	; 0x126c <TurnOtherCheckers+0x380>
    1374:	80 e4       	ldi	r24, 0x40	; 64
    1376:	8a 15       	cp	r24, r10
    1378:	08 f4       	brcc	.+2      	; 0x137c <TurnOtherCheckers+0x490>
    137a:	30 cf       	rjmp	.-416    	; 0x11dc <TurnOtherCheckers+0x2f0>
    137c:	03 c0       	rjmp	.+6      	; 0x1384 <TurnOtherCheckers+0x498>
		row++;
		col++;
	}
	col = column;
	col++ ;
	if(found == 1 && (row < 'I') && (col < 9))
    137e:	d9 34       	cpi	r29, 0x49	; 73
    1380:	08 f4       	brcc	.+2      	; 0x1384 <TurnOtherCheckers+0x498>
    1382:	bf cf       	rjmp	.-130    	; 0x1302 <TurnOtherCheckers+0x416>
		{
			setChecker(i,col,player,chessboard);
			col++;
		}
	}
}
    1384:	df 91       	pop	r29
    1386:	cf 91       	pop	r28
    1388:	1f 91       	pop	r17
    138a:	0f 91       	pop	r16
    138c:	ff 90       	pop	r15
    138e:	ef 90       	pop	r14
    1390:	df 90       	pop	r13
    1392:	cf 90       	pop	r12
    1394:	bf 90       	pop	r11
    1396:	af 90       	pop	r10
    1398:	9f 90       	pop	r9
    139a:	8f 90       	pop	r8
    139c:	7f 90       	pop	r7
    139e:	08 95       	ret

000013a0 <clearValidMoves>:

void clearValidMoves(void)
{
	blackCount = 0 ;
    13a0:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <blackCount>
	whiteCount = 0 ;
    13a4:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <whiteCount>
    13a8:	e4 ea       	ldi	r30, 0xA4	; 164
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	ac e7       	ldi	r26, 0x7C	; 124
    13ae:	b0 e0       	ldi	r27, 0x00	; 0
    13b0:	8c ea       	ldi	r24, 0xAC	; 172
    13b2:	90 e0       	ldi	r25, 0x00	; 0
	for (uint8_t i = 0; i < SIZE / 2; i++)
	{
		mineValidtable[i] = 0 ;
    13b4:	11 92       	st	Z+, r1
		enemyValidtable[i] = 0 ;
    13b6:	1d 92       	st	X+, r1

void clearValidMoves(void)
{
	blackCount = 0 ;
	whiteCount = 0 ;
	for (uint8_t i = 0; i < SIZE / 2; i++)
    13b8:	e8 17       	cp	r30, r24
    13ba:	f9 07       	cpc	r31, r25
    13bc:	d9 f7       	brne	.-10     	; 0x13b4 <clearValidMoves+0x14>
	{
		mineValidtable[i] = 0 ;
		enemyValidtable[i] = 0 ;
	}
}
    13be:	08 95       	ret

000013c0 <tableInit>:
	writeByte('\r') ; 
}


void tableInit(void)
{
    13c0:	ec eb       	ldi	r30, 0xBC	; 188
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	8c ec       	ldi	r24, 0xCC	; 204
    13c6:	90 e0       	ldi	r25, 0x00	; 0
	for (uint8_t i = 0; i < SIZE; i++)
	{
		table[i] = 0 ;
    13c8:	11 92       	st	Z+, r1
}


void tableInit(void)
{
	for (uint8_t i = 0; i < SIZE; i++)
    13ca:	e8 17       	cp	r30, r24
    13cc:	f9 07       	cpc	r31, r25
    13ce:	e1 f7       	brne	.-8      	; 0x13c8 <tableInit+0x8>
	{
		table[i] = 0 ;
	}
	clearValidMoves();
    13d0:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <clearValidMoves>
	setChecker('D',4,'W',table) ;
    13d4:	2c eb       	ldi	r18, 0xBC	; 188
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	47 e5       	ldi	r20, 0x57	; 87
    13da:	64 e0       	ldi	r22, 0x04	; 4
    13dc:	84 e4       	ldi	r24, 0x44	; 68
    13de:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
	setChecker('D',5,'B',table) ;
    13e2:	2c eb       	ldi	r18, 0xBC	; 188
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	42 e4       	ldi	r20, 0x42	; 66
    13e8:	65 e0       	ldi	r22, 0x05	; 5
    13ea:	84 e4       	ldi	r24, 0x44	; 68
    13ec:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
	setChecker('E',4,'B',table) ;
    13f0:	2c eb       	ldi	r18, 0xBC	; 188
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	42 e4       	ldi	r20, 0x42	; 66
    13f6:	64 e0       	ldi	r22, 0x04	; 4
    13f8:	85 e4       	ldi	r24, 0x45	; 69
    13fa:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
	setChecker('E',5,'W',table) ;
    13fe:	2c eb       	ldi	r18, 0xBC	; 188
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	47 e5       	ldi	r20, 0x57	; 87
    1404:	65 e0       	ldi	r22, 0x05	; 5
    1406:	85 e4       	ldi	r24, 0x45	; 69
    1408:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
    140c:	08 95       	ret

0000140e <countMineValidmoves>:
		enemyValidtable[i] = 0 ;
	}
}

uint8_t countMineValidmoves(void)
{
    140e:	e4 ea       	ldi	r30, 0xA4	; 164
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	2c ea       	ldi	r18, 0xAC	; 172
    1414:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t buffer = 0 ;
	uint8_t temp = 0 ;
	uint8_t i = 0 ;
	while (i < SIZE/2 && count == 0)
	{
		buffer = mineValidtable[i] ;
    1416:	91 91       	ld	r25, Z+
		temp = buffer & 0b00000001 ;
		if (temp == 1)
		{
			count++ ;
    1418:	81 e0       	ldi	r24, 0x01	; 1
    141a:	90 ff       	sbrs	r25, 0
    141c:	80 e0       	ldi	r24, 0x00	; 0
		}
		temp = buffer & 0b00000010 ;
		temp = (temp >> 1) ;
		if (temp == 1)
    141e:	91 fd       	sbrc	r25, 1
		{
			count++ ;
    1420:	8f 5f       	subi	r24, 0xFF	; 255
		}
		temp = buffer & 0b00000100 ;
		temp = (temp >> 2) ;
		if (temp == 1)
    1422:	92 fd       	sbrc	r25, 2
		{
			count++ ;
    1424:	8f 5f       	subi	r24, 0xFF	; 255
		}
		temp = buffer & 0b00001000 ;
		temp = (temp >> 3) ;
		if (temp == 1)
    1426:	93 fd       	sbrc	r25, 3
		{
			count++ ;
    1428:	8f 5f       	subi	r24, 0xFF	; 255
		}
		temp = buffer & 0b00010000 ;
		temp = (temp >> 4) ;
		if (temp == 1)
    142a:	94 fd       	sbrc	r25, 4
		{
			count++ ;
    142c:	8f 5f       	subi	r24, 0xFF	; 255
		}
		temp = buffer & 0b00100000 ;
		temp = (temp >> 5) ;
		if (temp == 1)
    142e:	95 fd       	sbrc	r25, 5
		{
			count++ ;
    1430:	8f 5f       	subi	r24, 0xFF	; 255
		}
		temp = buffer & 0b01000000 ;
		temp = (temp >> 6) ;
		if (temp == 1)
    1432:	96 fd       	sbrc	r25, 6
		{
			count++ ;
    1434:	8f 5f       	subi	r24, 0xFF	; 255
		}
		temp = buffer & 0b10000000 ;
		temp = (temp >> 7) ;
		if (temp == 1)
    1436:	99 23       	and	r25, r25
    1438:	0c f4       	brge	.+2      	; 0x143c <countMineValidmoves+0x2e>
		{
			count++ ;
    143a:	8f 5f       	subi	r24, 0xFF	; 255
{
	uint8_t count = 0 ;
	uint8_t buffer = 0 ;
	uint8_t temp = 0 ;
	uint8_t i = 0 ;
	while (i < SIZE/2 && count == 0)
    143c:	e2 17       	cp	r30, r18
    143e:	f3 07       	cpc	r31, r19
    1440:	11 f0       	breq	.+4      	; 0x1446 <countMineValidmoves+0x38>
    1442:	88 23       	and	r24, r24
    1444:	41 f3       	breq	.-48     	; 0x1416 <countMineValidmoves+0x8>
		}
		
		i++ ;
	}
	return count ;
}
    1446:	08 95       	ret

00001448 <countEnemyValidmoves>:


uint8_t countEnemyValidmoves(void)
{
    1448:	ec e7       	ldi	r30, 0x7C	; 124
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	24 e8       	ldi	r18, 0x84	; 132
    144e:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t buffer = 0 ;
	uint8_t temp = 0 ;
	uint8_t i = 0 ;
	while (i < SIZE/2 && count == 0)
	{
		buffer = enemyValidtable[i] ;
    1450:	91 91       	ld	r25, Z+
		temp = buffer & 0b00000001 ;
		if (temp == 1)
		{
			count++ ;
    1452:	81 e0       	ldi	r24, 0x01	; 1
    1454:	90 ff       	sbrs	r25, 0
    1456:	80 e0       	ldi	r24, 0x00	; 0
		}
		temp = buffer & 0b00000010 ;
		temp = (temp >> 1) ;
		if (temp == 1)
    1458:	91 fd       	sbrc	r25, 1
		{
			count++ ;
    145a:	8f 5f       	subi	r24, 0xFF	; 255
		}
		temp = buffer & 0b00000100 ;
		temp = (temp >> 2) ;
		if (temp == 1)
    145c:	92 fd       	sbrc	r25, 2
		{
			count++ ;
    145e:	8f 5f       	subi	r24, 0xFF	; 255
		}
		temp = buffer & 0b00001000 ;
		temp = (temp >> 3) ;
		if (temp == 1)
    1460:	93 fd       	sbrc	r25, 3
		{
			count++ ;
    1462:	8f 5f       	subi	r24, 0xFF	; 255
		}
		temp = buffer & 0b00010000 ;
		temp = (temp >> 4) ;
		if (temp == 1)
    1464:	94 fd       	sbrc	r25, 4
		{
			count++ ;
    1466:	8f 5f       	subi	r24, 0xFF	; 255
		}
		temp = buffer & 0b00100000 ;
		temp = (temp >> 5) ;
		if (temp == 1)
    1468:	95 fd       	sbrc	r25, 5
		{
			count++ ;
    146a:	8f 5f       	subi	r24, 0xFF	; 255
		}
		temp = buffer & 0b01000000 ;
		temp = (temp >> 6) ;
		if (temp == 1)
    146c:	96 fd       	sbrc	r25, 6
		{
			count++ ;
    146e:	8f 5f       	subi	r24, 0xFF	; 255
		}
		temp = buffer & 0b10000000 ;
		temp = (temp >> 7) ;
		if (temp == 1)
    1470:	99 23       	and	r25, r25
    1472:	0c f4       	brge	.+2      	; 0x1476 <countEnemyValidmoves+0x2e>
		{
			count++ ;
    1474:	8f 5f       	subi	r24, 0xFF	; 255
{
	uint8_t count = 0 ;
	uint8_t buffer = 0 ;
	uint8_t temp = 0 ;
	uint8_t i = 0 ;
	while (i < SIZE/2 && count == 0)
    1476:	e2 17       	cp	r30, r18
    1478:	f3 07       	cpc	r31, r19
    147a:	11 f0       	breq	.+4      	; 0x1480 <countEnemyValidmoves+0x38>
    147c:	88 23       	and	r24, r24
    147e:	41 f3       	breq	.-48     	; 0x1450 <countEnemyValidmoves+0x8>
		}
		
		i++ ;
	}
	return count ;
}
    1480:	08 95       	ret

00001482 <checkWin>:


void checkWin(char mine, uint8_t black, uint8_t white)
{
	switch(mine)
    1482:	82 34       	cpi	r24, 0x42	; 66
    1484:	69 f4       	brne	.+26     	; 0x14a0 <checkWin+0x1e>
	{
		case 'B':
			if (black > white)
    1486:	46 17       	cp	r20, r22
    1488:	18 f4       	brcc	.+6      	; 0x1490 <checkWin+0xe>
			{
				/* I WIN */
				Win() ;
    148a:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <Win>
    148e:	08 95       	ret
			}
			else if (black < white)
    1490:	64 17       	cp	r22, r20
    1492:	18 f4       	brcc	.+6      	; 0x149a <checkWin+0x18>
			{
				Lose() ;
    1494:	0e 94 dd 01 	call	0x3ba	; 0x3ba <Lose>
    1498:	08 95       	ret
			}
			else
			{
				Tie() ;
    149a:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <Tie>
    149e:	08 95       	ret
			}
		break;
      default:
			if (white > black)
    14a0:	64 17       	cp	r22, r20
    14a2:	18 f4       	brcc	.+6      	; 0x14aa <checkWin+0x28>
			{
				/* I WIN TATA */
				Win() ;
    14a4:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <Win>
    14a8:	08 95       	ret
			}
			else if (white < black)
    14aa:	46 17       	cp	r20, r22
    14ac:	18 f4       	brcc	.+6      	; 0x14b4 <checkWin+0x32>
			{
				Lose() ;
    14ae:	0e 94 dd 01 	call	0x3ba	; 0x3ba <Lose>
    14b2:	08 95       	ret
			}
			else
			{
				Tie() ;
    14b4:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <Tie>
    14b8:	08 95       	ret

000014ba <copyChessboard>:
		break;
	}
}

void copyChessboard(void)
{
    14ba:	2f 92       	push	r2
    14bc:	3f 92       	push	r3
    14be:	4f 92       	push	r4
    14c0:	5f 92       	push	r5
    14c2:	6f 92       	push	r6
    14c4:	7f 92       	push	r7
    14c6:	8f 92       	push	r8
    14c8:	9f 92       	push	r9
    14ca:	af 92       	push	r10
    14cc:	bf 92       	push	r11
    14ce:	cf 92       	push	r12
    14d0:	df 92       	push	r13
    14d2:	ef 92       	push	r14
    14d4:	ff 92       	push	r15
    14d6:	0f 93       	push	r16
    14d8:	1f 93       	push	r17
    14da:	cf 93       	push	r28
    14dc:	df 93       	push	r29
    14de:	cd b7       	in	r28, 0x3d	; 61
    14e0:	de b7       	in	r29, 0x3e	; 62
    14e2:	2a 97       	sbiw	r28, 0x0a	; 10
    14e4:	0f b6       	in	r0, 0x3f	; 63
    14e6:	f8 94       	cli
    14e8:	de bf       	out	0x3e, r29	; 62
    14ea:	0f be       	out	0x3f, r0	; 63
    14ec:	cd bf       	out	0x3d, r28	; 61
    14ee:	8c eb       	ldi	r24, 0xBC	; 188
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	9a 83       	std	Y+2, r25	; 0x02
    14f4:	89 83       	std	Y+1, r24	; 0x01
    14f6:	0f 2e       	mov	r0, r31
    14f8:	fc ed       	ldi	r31, 0xDC	; 220
    14fa:	4f 2e       	mov	r4, r31
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	5f 2e       	mov	r5, r31
    1500:	f0 2d       	mov	r31, r0
    1502:	ac e6       	ldi	r26, 0x6C	; 108
    1504:	b1 e0       	ldi	r27, 0x01	; 1
    1506:	bc 83       	std	Y+4, r27	; 0x04
    1508:	ab 83       	std	Y+3, r26	; 0x03
    150a:	0f 2e       	mov	r0, r31
    150c:	fc e6       	ldi	r31, 0x6C	; 108
    150e:	6f 2e       	mov	r6, r31
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	7f 2e       	mov	r7, r31
    1514:	f0 2d       	mov	r31, r0
    1516:	0f 2e       	mov	r0, r31
    1518:	f4 e4       	ldi	r31, 0x44	; 68
    151a:	8f 2e       	mov	r8, r31
    151c:	f1 e0       	ldi	r31, 0x01	; 1
    151e:	9f 2e       	mov	r9, r31
    1520:	f0 2d       	mov	r31, r0
    1522:	0f 2e       	mov	r0, r31
    1524:	f4 e5       	ldi	r31, 0x54	; 84
    1526:	cf 2e       	mov	r12, r31
    1528:	f1 e0       	ldi	r31, 0x01	; 1
    152a:	df 2e       	mov	r13, r31
    152c:	f0 2d       	mov	r31, r0
    152e:	0f 2e       	mov	r0, r31
    1530:	f4 e8       	ldi	r31, 0x84	; 132
    1532:	af 2e       	mov	r10, r31
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	bf 2e       	mov	r11, r31
    1538:	f0 2d       	mov	r31, r0
    153a:	0f 2e       	mov	r0, r31
    153c:	fc ee       	ldi	r31, 0xEC	; 236
    153e:	ef 2e       	mov	r14, r31
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	ff 2e       	mov	r15, r31
    1544:	f0 2d       	mov	r31, r0
    1546:	04 e9       	ldi	r16, 0x94	; 148
    1548:	10 e0       	ldi	r17, 0x00	; 0
    154a:	64 e3       	ldi	r22, 0x34	; 52
    154c:	71 e0       	ldi	r23, 0x01	; 1
    154e:	4c e7       	ldi	r20, 0x7C	; 124
    1550:	51 e0       	ldi	r21, 0x01	; 1
    1552:	24 e2       	ldi	r18, 0x24	; 36
    1554:	31 e0       	ldi	r19, 0x01	; 1
    1556:	8c ea       	ldi	r24, 0xAC	; 172
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	ec ec       	ldi	r30, 0xCC	; 204
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	f8 87       	std	Y+8, r31	; 0x08
    1560:	ef 83       	std	Y+7, r30	; 0x07
    1562:	a4 e1       	ldi	r26, 0x14	; 20
    1564:	b1 e0       	ldi	r27, 0x01	; 1
    1566:	ec ef       	ldi	r30, 0xFC	; 252
    1568:	f0 e0       	ldi	r31, 0x00	; 0
	for (uint8_t i = 0; i < SIZE; i++)
    156a:	21 2c       	mov	r2, r1
    156c:	9e 83       	std	Y+6, r25	; 0x06
    156e:	8d 83       	std	Y+5, r24	; 0x05
    1570:	92 2d       	mov	r25, r2
    1572:	ba 87       	std	Y+10, r27	; 0x0a
    1574:	a9 87       	std	Y+9, r26	; 0x09
	{
		table1[i] = table[i];
    1576:	a9 81       	ldd	r26, Y+1	; 0x01
    1578:	ba 81       	ldd	r27, Y+2	; 0x02
    157a:	3d 90       	ld	r3, X+
    157c:	ba 83       	std	Y+2, r27	; 0x02
    157e:	a9 83       	std	Y+1, r26	; 0x01
    1580:	d2 01       	movw	r26, r4
    1582:	3d 92       	st	X+, r3
    1584:	2d 01       	movw	r4, r26
		table2[i] = table[i];
    1586:	ab 81       	ldd	r26, Y+3	; 0x03
    1588:	bc 81       	ldd	r27, Y+4	; 0x04
    158a:	3d 92       	st	X+, r3
    158c:	bc 83       	std	Y+4, r27	; 0x04
    158e:	ab 83       	std	Y+3, r26	; 0x03
		table3[i] = table[i];
    1590:	d3 01       	movw	r26, r6
    1592:	3d 92       	st	X+, r3
    1594:	3d 01       	movw	r6, r26
		table4[i] = table[i];
    1596:	d4 01       	movw	r26, r8
    1598:	3d 92       	st	X+, r3
    159a:	4d 01       	movw	r8, r26
		table5[i] = table[i];
    159c:	d6 01       	movw	r26, r12
    159e:	3d 92       	st	X+, r3
    15a0:	6d 01       	movw	r12, r26
		table6[i] = table[i];
    15a2:	d5 01       	movw	r26, r10
    15a4:	3d 92       	st	X+, r3
    15a6:	5d 01       	movw	r10, r26
		table7[i] = table[i];
    15a8:	d7 01       	movw	r26, r14
    15aa:	3d 92       	st	X+, r3
    15ac:	7d 01       	movw	r14, r26
		table8[i] = table[i];
    15ae:	d8 01       	movw	r26, r16
    15b0:	3d 92       	st	X+, r3
    15b2:	8d 01       	movw	r16, r26
		table9[i] = table[i];
    15b4:	db 01       	movw	r26, r22
    15b6:	3d 92       	st	X+, r3
    15b8:	bd 01       	movw	r22, r26
		table10[i] = table[i];
    15ba:	da 01       	movw	r26, r20
    15bc:	3d 92       	st	X+, r3
    15be:	ad 01       	movw	r20, r26
		table11[i] = table[i];
    15c0:	d9 01       	movw	r26, r18
    15c2:	3d 92       	st	X+, r3
    15c4:	9d 01       	movw	r18, r26
		table12[i] = table[i];
    15c6:	ad 81       	ldd	r26, Y+5	; 0x05
    15c8:	be 81       	ldd	r27, Y+6	; 0x06
    15ca:	3d 92       	st	X+, r3
    15cc:	be 83       	std	Y+6, r27	; 0x06
    15ce:	ad 83       	std	Y+5, r26	; 0x05
		table13[i] = table[i];
    15d0:	af 81       	ldd	r26, Y+7	; 0x07
    15d2:	b8 85       	ldd	r27, Y+8	; 0x08
    15d4:	3d 92       	st	X+, r3
    15d6:	b8 87       	std	Y+8, r27	; 0x08
    15d8:	af 83       	std	Y+7, r26	; 0x07
		table14[i] = table[i];
    15da:	a9 85       	ldd	r26, Y+9	; 0x09
    15dc:	ba 85       	ldd	r27, Y+10	; 0x0a
    15de:	3d 92       	st	X+, r3
    15e0:	ba 87       	std	Y+10, r27	; 0x0a
    15e2:	a9 87       	std	Y+9, r26	; 0x09
		table15[i] = table[i];
    15e4:	31 92       	st	Z+, r3
	}
}

void copyChessboard(void)
{
	for (uint8_t i = 0; i < SIZE; i++)
    15e6:	9f 5f       	subi	r25, 0xFF	; 255
    15e8:	90 31       	cpi	r25, 0x10	; 16
    15ea:	29 f6       	brne	.-118    	; 0x1576 <copyChessboard+0xbc>
		table13[i] = table[i];
		table14[i] = table[i];
		table15[i] = table[i];
	}
	
}
    15ec:	2a 96       	adiw	r28, 0x0a	; 10
    15ee:	0f b6       	in	r0, 0x3f	; 63
    15f0:	f8 94       	cli
    15f2:	de bf       	out	0x3e, r29	; 62
    15f4:	0f be       	out	0x3f, r0	; 63
    15f6:	cd bf       	out	0x3d, r28	; 61
    15f8:	df 91       	pop	r29
    15fa:	cf 91       	pop	r28
    15fc:	1f 91       	pop	r17
    15fe:	0f 91       	pop	r16
    1600:	ff 90       	pop	r15
    1602:	ef 90       	pop	r14
    1604:	df 90       	pop	r13
    1606:	cf 90       	pop	r12
    1608:	bf 90       	pop	r11
    160a:	af 90       	pop	r10
    160c:	9f 90       	pop	r9
    160e:	8f 90       	pop	r8
    1610:	7f 90       	pop	r7
    1612:	6f 90       	pop	r6
    1614:	5f 90       	pop	r5
    1616:	4f 90       	pop	r4
    1618:	3f 90       	pop	r3
    161a:	2f 90       	pop	r2
    161c:	08 95       	ret

0000161e <scanCopyChessBoard>:

uint8_t scanCopyChessBoard(char mine,uint8_t chessBoard[])
{
    161e:	fb 01       	movw	r30, r22
    1620:	9b 01       	movw	r18, r22
    1622:	20 5f       	subi	r18, 0xF0	; 240
    1624:	3f 4f       	sbci	r19, 0xFF	; 255
	uint8_t buffer = 0 ;
	uint8_t temp1 = 0 ;
	uint8_t temp2 = 0 ;
	uint8_t mineCount = 0 ;
    1626:	40 e0       	ldi	r20, 0x00	; 0
	
	for (uint8_t index = 0 ; index < SIZE ; index++)
	{
		buffer = chessBoard[index] ;
    1628:	91 91       	ld	r25, Z+
		/* First column in half byte */
		temp1 = buffer & 0b00010000 ;								/* Checks for enabled position in chessboard */
		temp1 = (temp1 >> 4) ;
		if (temp1 == 1)
    162a:	94 ff       	sbrs	r25, 4
    162c:	09 c0       	rjmp	.+18     	; 0x1640 <scanCopyChessBoard+0x22>
		{
			temp2 = buffer & 0b00000001 ;							/* Checks the colour of this checker */
			if (temp2 == 1)
    162e:	90 ff       	sbrs	r25, 0
    1630:	04 c0       	rjmp	.+8      	; 0x163a <scanCopyChessBoard+0x1c>
			{
				/* Black checker */
				if (mine == 'B')
    1632:	82 34       	cpi	r24, 0x42	; 66
    1634:	29 f4       	brne	.+10     	; 0x1640 <scanCopyChessBoard+0x22>
				{
					mineCount++ ;
    1636:	4f 5f       	subi	r20, 0xFF	; 255
    1638:	03 c0       	rjmp	.+6      	; 0x1640 <scanCopyChessBoard+0x22>
				}
			}
			else
			{
				/* White checker */
				if (mine == 'W')
    163a:	87 35       	cpi	r24, 0x57	; 87
    163c:	09 f4       	brne	.+2      	; 0x1640 <scanCopyChessBoard+0x22>
				{
					mineCount++ ;
    163e:	4f 5f       	subi	r20, 0xFF	; 255
		}
		
		/* Second column in half byte */
		temp1 = buffer & 0b00100000 ;
		temp1 = (temp1 >> 5) ;
		if (temp1 == 1)
    1640:	95 ff       	sbrs	r25, 5
    1642:	09 c0       	rjmp	.+18     	; 0x1656 <scanCopyChessBoard+0x38>
		{
			/* Enabled position. There is a checker */
			temp2 = buffer & 0b00000010 ;
			temp2 = (temp2 >> 1) ;
			if (temp2 == 1)
    1644:	91 ff       	sbrs	r25, 1
    1646:	04 c0       	rjmp	.+8      	; 0x1650 <scanCopyChessBoard+0x32>
			{
				/* Black checker */
				if (mine == 'B')
    1648:	82 34       	cpi	r24, 0x42	; 66
    164a:	29 f4       	brne	.+10     	; 0x1656 <scanCopyChessBoard+0x38>
				{
					mineCount++ ;
    164c:	4f 5f       	subi	r20, 0xFF	; 255
    164e:	03 c0       	rjmp	.+6      	; 0x1656 <scanCopyChessBoard+0x38>
				}
			}
			else
			{
				/* White checker */
				if (mine == 'W')
    1650:	87 35       	cpi	r24, 0x57	; 87
    1652:	09 f4       	brne	.+2      	; 0x1656 <scanCopyChessBoard+0x38>
				{
					mineCount++ ;
    1654:	4f 5f       	subi	r20, 0xFF	; 255
		}
		
		/* Third column in half byte */
		temp1 = buffer & 0b01000000 ;
		temp1 = (temp1 >> 6) ;
		if (temp1 == 1)
    1656:	96 ff       	sbrs	r25, 6
    1658:	09 c0       	rjmp	.+18     	; 0x166c <scanCopyChessBoard+0x4e>
		{
			/* There is a checker */
			temp2 = buffer & 0b00000100 ;
			temp2 = (temp2 >> 2) ;
			if (temp2 == 1)
    165a:	92 ff       	sbrs	r25, 2
    165c:	04 c0       	rjmp	.+8      	; 0x1666 <scanCopyChessBoard+0x48>
			{
				/* Black checker */
				if (mine == 'B')
    165e:	82 34       	cpi	r24, 0x42	; 66
    1660:	29 f4       	brne	.+10     	; 0x166c <scanCopyChessBoard+0x4e>
				{
					mineCount++ ;
    1662:	4f 5f       	subi	r20, 0xFF	; 255
    1664:	03 c0       	rjmp	.+6      	; 0x166c <scanCopyChessBoard+0x4e>
				}
			}
			else
			{
				/* White checker */
				if (mine == 'W')
    1666:	87 35       	cpi	r24, 0x57	; 87
    1668:	09 f4       	brne	.+2      	; 0x166c <scanCopyChessBoard+0x4e>
				{
					mineCount++ ;
    166a:	4f 5f       	subi	r20, 0xFF	; 255
		}
		
		/* Fourth column in half byte */
		temp1 = buffer & 0b10000000 ;
		temp1 = (temp1 >> 7) ;
		if (temp1)
    166c:	99 23       	and	r25, r25
    166e:	4c f4       	brge	.+18     	; 0x1682 <scanCopyChessBoard+0x64>
		{
			/* There is a checker */
			temp2 = buffer & 0b00001000 ;
			temp2 = (temp2 >> 3) ;
			if (temp2 == 1)
    1670:	93 ff       	sbrs	r25, 3
    1672:	04 c0       	rjmp	.+8      	; 0x167c <scanCopyChessBoard+0x5e>
			{
				/* Black checker */
				if (mine == 'B')
    1674:	82 34       	cpi	r24, 0x42	; 66
    1676:	29 f4       	brne	.+10     	; 0x1682 <scanCopyChessBoard+0x64>
				{
					mineCount++ ;
    1678:	4f 5f       	subi	r20, 0xFF	; 255
    167a:	03 c0       	rjmp	.+6      	; 0x1682 <scanCopyChessBoard+0x64>
				}
			}
			else
			{
				/* White checker */
				if (mine == 'W')
    167c:	87 35       	cpi	r24, 0x57	; 87
    167e:	09 f4       	brne	.+2      	; 0x1682 <scanCopyChessBoard+0x64>
				{
					mineCount++ ;
    1680:	4f 5f       	subi	r20, 0xFF	; 255
	uint8_t buffer = 0 ;
	uint8_t temp1 = 0 ;
	uint8_t temp2 = 0 ;
	uint8_t mineCount = 0 ;
	
	for (uint8_t index = 0 ; index < SIZE ; index++)
    1682:	e2 17       	cp	r30, r18
    1684:	f3 07       	cpc	r31, r19
    1686:	81 f6       	brne	.-96     	; 0x1628 <scanCopyChessBoard+0xa>
		
	}
	
	return mineCount ;
	
}
    1688:	84 2f       	mov	r24, r20
    168a:	08 95       	ret

0000168c <Tactics>:


void Tactics(char mine)
{
    168c:	af 92       	push	r10
    168e:	bf 92       	push	r11
    1690:	df 92       	push	r13
    1692:	ef 92       	push	r14
    1694:	ff 92       	push	r15
    1696:	0f 93       	push	r16
    1698:	1f 93       	push	r17
    169a:	cf 93       	push	r28
    169c:	df 93       	push	r29
    169e:	f8 2e       	mov	r15, r24
    16a0:	0f 2e       	mov	r0, r31
    16a2:	f4 ea       	ldi	r31, 0xA4	; 164
    16a4:	af 2e       	mov	r10, r31
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	bf 2e       	mov	r11, r31
    16aa:	f0 2d       	mov	r31, r0
    16ac:	d1 e4       	ldi	r29, 0x41	; 65
	uint8_t buffer = 0 ;
	uint8_t temp = 0;
	uint8_t count = 0 ;
	uint8_t max = 0 ;
    16ae:	d1 2c       	mov	r13, r1

void Tactics(char mine)
{
	uint8_t buffer = 0 ;
	uint8_t temp = 0;
	uint8_t count = 0 ;
    16b0:	e1 2c       	mov	r14, r1
	uint8_t column = 0 ;
	for (uint8_t index = 0; index < SIZE/2; index++)
	{
		/* First check line */
		line = 65 + index ;
		buffer = mineValidtable[index] ;
    16b2:	f5 01       	movw	r30, r10
    16b4:	c1 91       	ld	r28, Z+
    16b6:	5f 01       	movw	r10, r30
		/* Check column */
		temp = buffer & 0b00000001 ;
		if (temp == 1)
    16b8:	c0 ff       	sbrs	r28, 0
    16ba:	e9 c1       	rjmp	.+978    	; 0x1a8e <Tactics+0x402>
		{
			/* First Valid in this line */
			column = 1 ;
			count++ ;
    16bc:	e3 94       	inc	r14
			switch(count)
    16be:	8e 2d       	mov	r24, r14
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	fc 01       	movw	r30, r24
    16c4:	31 97       	sbiw	r30, 0x01	; 1
    16c6:	ee 30       	cpi	r30, 0x0E	; 14
    16c8:	f1 05       	cpc	r31, r1
    16ca:	08 f0       	brcs	.+2      	; 0x16ce <Tactics+0x42>
    16cc:	c4 c1       	rjmp	.+904    	; 0x1a56 <Tactics+0x3ca>
    16ce:	e4 5c       	subi	r30, 0xC4	; 196
    16d0:	ff 4f       	sbci	r31, 0xFF	; 255
    16d2:	0c 94 78 21 	jmp	0x42f0	; 0x42f0 <__tablejump2__>
			{
				case 1:
					setChecker(line,column,mine,table1) ;
    16d6:	2c ed       	ldi	r18, 0xDC	; 220
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	4f 2d       	mov	r20, r15
    16dc:	61 e0       	ldi	r22, 0x01	; 1
    16de:	8d 2f       	mov	r24, r29
    16e0:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
					TurnOtherCheckers(line,column,enemy,mine,table1) ;
    16e4:	0c ed       	ldi	r16, 0xDC	; 220
    16e6:	10 e0       	ldi	r17, 0x00	; 0
    16e8:	2f 2d       	mov	r18, r15
    16ea:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    16ee:	61 e0       	ldi	r22, 0x01	; 1
    16f0:	8d 2f       	mov	r24, r29
    16f2:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
					checkers = scanCopyChessBoard(mine,table1) ;
    16f6:	b8 01       	movw	r22, r16
    16f8:	8f 2d       	mov	r24, r15
    16fa:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
					if (max < checkers)
    16fe:	d8 16       	cp	r13, r24
    1700:	10 f0       	brcs	.+4      	; 0x1706 <Tactics+0x7a>
    1702:	0c 94 09 1b 	jmp	0x3612	; 0x3612 <Tactics+0x1f86>
					{
						max = checkers ;
						myLine = line ;
    1706:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
						myColumn = column ;
    170a:	91 e0       	ldi	r25, 0x01	; 1
    170c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
					setChecker(line,column,mine,table1) ;
					TurnOtherCheckers(line,column,enemy,mine,table1) ;
					checkers = scanCopyChessBoard(mine,table1) ;
					if (max < checkers)
					{
						max = checkers ;
    1710:	d8 2e       	mov	r13, r24
    1712:	0c 94 09 1b 	jmp	0x3612	; 0x3612 <Tactics+0x1f86>
						myColumn = column ;
					}
				break;
				
				case 2:
					setChecker(line,column,mine,table2) ;
    1716:	2c e6       	ldi	r18, 0x6C	; 108
    1718:	31 e0       	ldi	r19, 0x01	; 1
    171a:	4f 2d       	mov	r20, r15
    171c:	61 e0       	ldi	r22, 0x01	; 1
    171e:	8d 2f       	mov	r24, r29
    1720:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
					TurnOtherCheckers(line,column,enemy,mine,table2) ;
    1724:	0c e6       	ldi	r16, 0x6C	; 108
    1726:	11 e0       	ldi	r17, 0x01	; 1
    1728:	2f 2d       	mov	r18, r15
    172a:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    172e:	61 e0       	ldi	r22, 0x01	; 1
    1730:	8d 2f       	mov	r24, r29
    1732:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
					checkers = scanCopyChessBoard(mine,table2) ;
    1736:	b8 01       	movw	r22, r16
    1738:	8f 2d       	mov	r24, r15
    173a:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
					if (max < checkers)
    173e:	d8 16       	cp	r13, r24
    1740:	10 f0       	brcs	.+4      	; 0x1746 <Tactics+0xba>
    1742:	0c 94 0d 1b 	jmp	0x361a	; 0x361a <Tactics+0x1f8e>
					{
						max = checkers ;
						myLine = line ;
    1746:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
						myColumn = column ;
    174a:	91 e0       	ldi	r25, 0x01	; 1
    174c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
					setChecker(line,column,mine,table2) ;
					TurnOtherCheckers(line,column,enemy,mine,table2) ;
					checkers = scanCopyChessBoard(mine,table2) ;
					if (max < checkers)
					{
						max = checkers ;
    1750:	d8 2e       	mov	r13, r24
    1752:	0c 94 0d 1b 	jmp	0x361a	; 0x361a <Tactics+0x1f8e>
						myColumn = column ;
					}
				break;
				
				case 3:
					setChecker(line,column,mine,table3) ;
    1756:	2c e6       	ldi	r18, 0x6C	; 108
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	4f 2d       	mov	r20, r15
    175c:	61 e0       	ldi	r22, 0x01	; 1
    175e:	8d 2f       	mov	r24, r29
    1760:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
					TurnOtherCheckers(line,column,enemy,mine,table3) ;
    1764:	0c e6       	ldi	r16, 0x6C	; 108
    1766:	10 e0       	ldi	r17, 0x00	; 0
    1768:	2f 2d       	mov	r18, r15
    176a:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    176e:	61 e0       	ldi	r22, 0x01	; 1
    1770:	8d 2f       	mov	r24, r29
    1772:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
					checkers = scanCopyChessBoard(mine,table3) ;
    1776:	b8 01       	movw	r22, r16
    1778:	8f 2d       	mov	r24, r15
    177a:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
					if (max < checkers)
    177e:	d8 16       	cp	r13, r24
    1780:	10 f0       	brcs	.+4      	; 0x1786 <Tactics+0xfa>
    1782:	0c 94 11 1b 	jmp	0x3622	; 0x3622 <Tactics+0x1f96>
					{
						max = checkers ;
						myLine = line ;
    1786:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
						myColumn = column ;
    178a:	91 e0       	ldi	r25, 0x01	; 1
    178c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
					setChecker(line,column,mine,table3) ;
					TurnOtherCheckers(line,column,enemy,mine,table3) ;
					checkers = scanCopyChessBoard(mine,table3) ;
					if (max < checkers)
					{
						max = checkers ;
    1790:	d8 2e       	mov	r13, r24
    1792:	0c 94 11 1b 	jmp	0x3622	; 0x3622 <Tactics+0x1f96>
						myColumn = column ;
					}
				break;
				
				case 4:
					setChecker(line,column,mine,table4) ;
    1796:	24 e4       	ldi	r18, 0x44	; 68
    1798:	31 e0       	ldi	r19, 0x01	; 1
    179a:	4f 2d       	mov	r20, r15
    179c:	61 e0       	ldi	r22, 0x01	; 1
    179e:	8d 2f       	mov	r24, r29
    17a0:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
					TurnOtherCheckers(line,column,enemy,mine,table4) ;
    17a4:	04 e4       	ldi	r16, 0x44	; 68
    17a6:	11 e0       	ldi	r17, 0x01	; 1
    17a8:	2f 2d       	mov	r18, r15
    17aa:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    17ae:	61 e0       	ldi	r22, 0x01	; 1
    17b0:	8d 2f       	mov	r24, r29
    17b2:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
					checkers = scanCopyChessBoard(mine,table4) ;
    17b6:	b8 01       	movw	r22, r16
    17b8:	8f 2d       	mov	r24, r15
    17ba:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
					if (max < checkers)
    17be:	d8 16       	cp	r13, r24
    17c0:	10 f0       	brcs	.+4      	; 0x17c6 <Tactics+0x13a>
    17c2:	0c 94 15 1b 	jmp	0x362a	; 0x362a <Tactics+0x1f9e>
					{
						max = checkers ;
						myLine = line ;
    17c6:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
						myColumn = column ;
    17ca:	91 e0       	ldi	r25, 0x01	; 1
    17cc:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
					setChecker(line,column,mine,table4) ;
					TurnOtherCheckers(line,column,enemy,mine,table4) ;
					checkers = scanCopyChessBoard(mine,table4) ;
					if (max < checkers)
					{
						max = checkers ;
    17d0:	d8 2e       	mov	r13, r24
    17d2:	0c 94 15 1b 	jmp	0x362a	; 0x362a <Tactics+0x1f9e>
						myColumn = column ;
					}
				break;
				
				case 5:
					setChecker(line,column,mine,table5) ;
    17d6:	24 e5       	ldi	r18, 0x54	; 84
    17d8:	31 e0       	ldi	r19, 0x01	; 1
    17da:	4f 2d       	mov	r20, r15
    17dc:	61 e0       	ldi	r22, 0x01	; 1
    17de:	8d 2f       	mov	r24, r29
    17e0:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
					TurnOtherCheckers(line,column,enemy,mine,table5) ;
    17e4:	04 e5       	ldi	r16, 0x54	; 84
    17e6:	11 e0       	ldi	r17, 0x01	; 1
    17e8:	2f 2d       	mov	r18, r15
    17ea:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    17ee:	61 e0       	ldi	r22, 0x01	; 1
    17f0:	8d 2f       	mov	r24, r29
    17f2:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
					checkers = scanCopyChessBoard(mine,table5) ;
    17f6:	b8 01       	movw	r22, r16
    17f8:	8f 2d       	mov	r24, r15
    17fa:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
					if (max < checkers)
    17fe:	d8 16       	cp	r13, r24
    1800:	10 f0       	brcs	.+4      	; 0x1806 <Tactics+0x17a>
    1802:	0c 94 19 1b 	jmp	0x3632	; 0x3632 <Tactics+0x1fa6>
					{
						max = checkers ;
						myLine = line ;
    1806:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
						myColumn = column ;
    180a:	91 e0       	ldi	r25, 0x01	; 1
    180c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
					setChecker(line,column,mine,table5) ;
					TurnOtherCheckers(line,column,enemy,mine,table5) ;
					checkers = scanCopyChessBoard(mine,table5) ;
					if (max < checkers)
					{
						max = checkers ;
    1810:	d8 2e       	mov	r13, r24
    1812:	0c 94 19 1b 	jmp	0x3632	; 0x3632 <Tactics+0x1fa6>
						myColumn = column ;
					}
				break;
				
				case 6:
					setChecker(line,column,mine,table6) ;
    1816:	24 e8       	ldi	r18, 0x84	; 132
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	4f 2d       	mov	r20, r15
    181c:	61 e0       	ldi	r22, 0x01	; 1
    181e:	8d 2f       	mov	r24, r29
    1820:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
					TurnOtherCheckers(line,column,enemy,mine,table6) ;
    1824:	04 e8       	ldi	r16, 0x84	; 132
    1826:	10 e0       	ldi	r17, 0x00	; 0
    1828:	2f 2d       	mov	r18, r15
    182a:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    182e:	61 e0       	ldi	r22, 0x01	; 1
    1830:	8d 2f       	mov	r24, r29
    1832:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
					checkers = scanCopyChessBoard(mine,table6) ;
    1836:	b8 01       	movw	r22, r16
    1838:	8f 2d       	mov	r24, r15
    183a:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
					if (max < checkers)
    183e:	d8 16       	cp	r13, r24
    1840:	10 f0       	brcs	.+4      	; 0x1846 <Tactics+0x1ba>
    1842:	0c 94 1d 1b 	jmp	0x363a	; 0x363a <Tactics+0x1fae>
					{
						max = checkers ;
						myLine = line ;
    1846:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
						myColumn = column ;
    184a:	91 e0       	ldi	r25, 0x01	; 1
    184c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
					setChecker(line,column,mine,table6) ;
					TurnOtherCheckers(line,column,enemy,mine,table6) ;
					checkers = scanCopyChessBoard(mine,table6) ;
					if (max < checkers)
					{
						max = checkers ;
    1850:	d8 2e       	mov	r13, r24
    1852:	0c 94 1d 1b 	jmp	0x363a	; 0x363a <Tactics+0x1fae>
						myColumn = column ;
					}
				break;
				
				case 7:
					setChecker(line,column,mine,table7) ;
    1856:	2c ee       	ldi	r18, 0xEC	; 236
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	4f 2d       	mov	r20, r15
    185c:	61 e0       	ldi	r22, 0x01	; 1
    185e:	8d 2f       	mov	r24, r29
    1860:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
					TurnOtherCheckers(line,column,enemy,mine,table7) ;
    1864:	0c ee       	ldi	r16, 0xEC	; 236
    1866:	10 e0       	ldi	r17, 0x00	; 0
    1868:	2f 2d       	mov	r18, r15
    186a:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    186e:	61 e0       	ldi	r22, 0x01	; 1
    1870:	8d 2f       	mov	r24, r29
    1872:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
					checkers = scanCopyChessBoard(mine,table7) ;
    1876:	b8 01       	movw	r22, r16
    1878:	8f 2d       	mov	r24, r15
    187a:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
					if (max < checkers)
    187e:	d8 16       	cp	r13, r24
    1880:	10 f0       	brcs	.+4      	; 0x1886 <Tactics+0x1fa>
    1882:	0c 94 21 1b 	jmp	0x3642	; 0x3642 <Tactics+0x1fb6>
					{
						max = checkers ;
						myLine = line ;
    1886:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
						myColumn = column ;
    188a:	91 e0       	ldi	r25, 0x01	; 1
    188c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
					setChecker(line,column,mine,table7) ;
					TurnOtherCheckers(line,column,enemy,mine,table7) ;
					checkers = scanCopyChessBoard(mine,table7) ;
					if (max < checkers)
					{
						max = checkers ;
    1890:	d8 2e       	mov	r13, r24
    1892:	0c 94 21 1b 	jmp	0x3642	; 0x3642 <Tactics+0x1fb6>
						myColumn = column ;
					}
				break;
				
				case 8:
				setChecker(line,column,mine,table8) ;
    1896:	24 e9       	ldi	r18, 0x94	; 148
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	4f 2d       	mov	r20, r15
    189c:	61 e0       	ldi	r22, 0x01	; 1
    189e:	8d 2f       	mov	r24, r29
    18a0:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table8) ;
    18a4:	04 e9       	ldi	r16, 0x94	; 148
    18a6:	10 e0       	ldi	r17, 0x00	; 0
    18a8:	2f 2d       	mov	r18, r15
    18aa:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    18ae:	61 e0       	ldi	r22, 0x01	; 1
    18b0:	8d 2f       	mov	r24, r29
    18b2:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table8) ;
    18b6:	b8 01       	movw	r22, r16
    18b8:	8f 2d       	mov	r24, r15
    18ba:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    18be:	d8 16       	cp	r13, r24
    18c0:	10 f0       	brcs	.+4      	; 0x18c6 <Tactics+0x23a>
    18c2:	0c 94 25 1b 	jmp	0x364a	; 0x364a <Tactics+0x1fbe>
				{
					max = checkers ;
					myLine = line ;
    18c6:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    18ca:	91 e0       	ldi	r25, 0x01	; 1
    18cc:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table8) ;
				TurnOtherCheckers(line,column,enemy,mine,table8) ;
				checkers = scanCopyChessBoard(mine,table8) ;
				if (max < checkers)
				{
					max = checkers ;
    18d0:	d8 2e       	mov	r13, r24
    18d2:	0c 94 25 1b 	jmp	0x364a	; 0x364a <Tactics+0x1fbe>
					myColumn = column ;
				}
				break;
				
				case 9:
				setChecker(line,column,mine,table9) ;
    18d6:	24 e3       	ldi	r18, 0x34	; 52
    18d8:	31 e0       	ldi	r19, 0x01	; 1
    18da:	4f 2d       	mov	r20, r15
    18dc:	61 e0       	ldi	r22, 0x01	; 1
    18de:	8d 2f       	mov	r24, r29
    18e0:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
    18e4:	04 e3       	ldi	r16, 0x34	; 52
    18e6:	11 e0       	ldi	r17, 0x01	; 1
    18e8:	2f 2d       	mov	r18, r15
    18ea:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    18ee:	61 e0       	ldi	r22, 0x01	; 1
    18f0:	8d 2f       	mov	r24, r29
    18f2:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table9) ;
    18f6:	b8 01       	movw	r22, r16
    18f8:	8f 2d       	mov	r24, r15
    18fa:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    18fe:	d8 16       	cp	r13, r24
    1900:	10 f0       	brcs	.+4      	; 0x1906 <Tactics+0x27a>
    1902:	0c 94 29 1b 	jmp	0x3652	; 0x3652 <Tactics+0x1fc6>
				{
					max = checkers ;
					myLine = line ;
    1906:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    190a:	91 e0       	ldi	r25, 0x01	; 1
    190c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table9) ;
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
				checkers = scanCopyChessBoard(mine,table9) ;
				if (max < checkers)
				{
					max = checkers ;
    1910:	d8 2e       	mov	r13, r24
    1912:	0c 94 29 1b 	jmp	0x3652	; 0x3652 <Tactics+0x1fc6>
					myColumn = column ;
				}
				break;
				
				case 10:
				setChecker(line,column,mine,table10) ;
    1916:	2c e7       	ldi	r18, 0x7C	; 124
    1918:	31 e0       	ldi	r19, 0x01	; 1
    191a:	4f 2d       	mov	r20, r15
    191c:	61 e0       	ldi	r22, 0x01	; 1
    191e:	8d 2f       	mov	r24, r29
    1920:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table10) ;
    1924:	0c e7       	ldi	r16, 0x7C	; 124
    1926:	11 e0       	ldi	r17, 0x01	; 1
    1928:	2f 2d       	mov	r18, r15
    192a:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    192e:	61 e0       	ldi	r22, 0x01	; 1
    1930:	8d 2f       	mov	r24, r29
    1932:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table10) ;
    1936:	b8 01       	movw	r22, r16
    1938:	8f 2d       	mov	r24, r15
    193a:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    193e:	d8 16       	cp	r13, r24
    1940:	10 f0       	brcs	.+4      	; 0x1946 <Tactics+0x2ba>
    1942:	0c 94 2d 1b 	jmp	0x365a	; 0x365a <Tactics+0x1fce>
				{
					max = checkers ;
					myLine = line ;
    1946:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    194a:	91 e0       	ldi	r25, 0x01	; 1
    194c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table10) ;
				TurnOtherCheckers(line,column,enemy,mine,table10) ;
				checkers = scanCopyChessBoard(mine,table10) ;
				if (max < checkers)
				{
					max = checkers ;
    1950:	d8 2e       	mov	r13, r24
    1952:	0c 94 2d 1b 	jmp	0x365a	; 0x365a <Tactics+0x1fce>
					myColumn = column ;
				}
				break;
				
				case 11:
				setChecker(line,column,mine,table11) ;
    1956:	24 e2       	ldi	r18, 0x24	; 36
    1958:	31 e0       	ldi	r19, 0x01	; 1
    195a:	4f 2d       	mov	r20, r15
    195c:	61 e0       	ldi	r22, 0x01	; 1
    195e:	8d 2f       	mov	r24, r29
    1960:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table11) ;
    1964:	04 e2       	ldi	r16, 0x24	; 36
    1966:	11 e0       	ldi	r17, 0x01	; 1
    1968:	2f 2d       	mov	r18, r15
    196a:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    196e:	61 e0       	ldi	r22, 0x01	; 1
    1970:	8d 2f       	mov	r24, r29
    1972:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table11) ;
    1976:	b8 01       	movw	r22, r16
    1978:	8f 2d       	mov	r24, r15
    197a:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    197e:	d8 16       	cp	r13, r24
    1980:	10 f0       	brcs	.+4      	; 0x1986 <Tactics+0x2fa>
    1982:	0c 94 31 1b 	jmp	0x3662	; 0x3662 <Tactics+0x1fd6>
				{
					max = checkers ;
					myLine = line ;
    1986:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    198a:	91 e0       	ldi	r25, 0x01	; 1
    198c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table11) ;
				TurnOtherCheckers(line,column,enemy,mine,table11) ;
				checkers = scanCopyChessBoard(mine,table11) ;
				if (max < checkers)
				{
					max = checkers ;
    1990:	d8 2e       	mov	r13, r24
    1992:	0c 94 31 1b 	jmp	0x3662	; 0x3662 <Tactics+0x1fd6>
					myColumn = column ;
				}
				break;
				
				case 12:
				setChecker(line,column,mine,table12) ;
    1996:	2c ea       	ldi	r18, 0xAC	; 172
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	4f 2d       	mov	r20, r15
    199c:	61 e0       	ldi	r22, 0x01	; 1
    199e:	8d 2f       	mov	r24, r29
    19a0:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table12) ;
    19a4:	0c ea       	ldi	r16, 0xAC	; 172
    19a6:	10 e0       	ldi	r17, 0x00	; 0
    19a8:	2f 2d       	mov	r18, r15
    19aa:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    19ae:	61 e0       	ldi	r22, 0x01	; 1
    19b0:	8d 2f       	mov	r24, r29
    19b2:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table12) ;
    19b6:	b8 01       	movw	r22, r16
    19b8:	8f 2d       	mov	r24, r15
    19ba:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    19be:	d8 16       	cp	r13, r24
    19c0:	10 f0       	brcs	.+4      	; 0x19c6 <Tactics+0x33a>
    19c2:	0c 94 35 1b 	jmp	0x366a	; 0x366a <Tactics+0x1fde>
				{
					max = checkers ;
					myLine = line ;
    19c6:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    19ca:	91 e0       	ldi	r25, 0x01	; 1
    19cc:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table12) ;
				TurnOtherCheckers(line,column,enemy,mine,table12) ;
				checkers = scanCopyChessBoard(mine,table12) ;
				if (max < checkers)
				{
					max = checkers ;
    19d0:	d8 2e       	mov	r13, r24
    19d2:	0c 94 35 1b 	jmp	0x366a	; 0x366a <Tactics+0x1fde>
					myColumn = column ;
				}
				break;
				
				case 13:
				setChecker(line,column,mine,table13) ;
    19d6:	2c ec       	ldi	r18, 0xCC	; 204
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	4f 2d       	mov	r20, r15
    19dc:	61 e0       	ldi	r22, 0x01	; 1
    19de:	8d 2f       	mov	r24, r29
    19e0:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table13) ;
    19e4:	0c ec       	ldi	r16, 0xCC	; 204
    19e6:	10 e0       	ldi	r17, 0x00	; 0
    19e8:	2f 2d       	mov	r18, r15
    19ea:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    19ee:	61 e0       	ldi	r22, 0x01	; 1
    19f0:	8d 2f       	mov	r24, r29
    19f2:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table13) ;
    19f6:	b8 01       	movw	r22, r16
    19f8:	8f 2d       	mov	r24, r15
    19fa:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    19fe:	d8 16       	cp	r13, r24
    1a00:	10 f0       	brcs	.+4      	; 0x1a06 <Tactics+0x37a>
    1a02:	0c 94 01 1b 	jmp	0x3602	; 0x3602 <Tactics+0x1f76>
				{
					max = checkers ;
					myLine = line ;
    1a06:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    1a0a:	91 e0       	ldi	r25, 0x01	; 1
    1a0c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table13) ;
				TurnOtherCheckers(line,column,enemy,mine,table13) ;
				checkers = scanCopyChessBoard(mine,table13) ;
				if (max < checkers)
				{
					max = checkers ;
    1a10:	d8 2e       	mov	r13, r24
    1a12:	0c 94 01 1b 	jmp	0x3602	; 0x3602 <Tactics+0x1f76>
					myColumn = column ;
				}
				break;
				
				case 14:
				setChecker(line,column,mine,table14) ;
    1a16:	24 e1       	ldi	r18, 0x14	; 20
    1a18:	31 e0       	ldi	r19, 0x01	; 1
    1a1a:	4f 2d       	mov	r20, r15
    1a1c:	61 e0       	ldi	r22, 0x01	; 1
    1a1e:	8d 2f       	mov	r24, r29
    1a20:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table14) ;
    1a24:	04 e1       	ldi	r16, 0x14	; 20
    1a26:	11 e0       	ldi	r17, 0x01	; 1
    1a28:	2f 2d       	mov	r18, r15
    1a2a:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    1a2e:	61 e0       	ldi	r22, 0x01	; 1
    1a30:	8d 2f       	mov	r24, r29
    1a32:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table14) ;
    1a36:	b8 01       	movw	r22, r16
    1a38:	8f 2d       	mov	r24, r15
    1a3a:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    1a3e:	d8 16       	cp	r13, r24
    1a40:	10 f0       	brcs	.+4      	; 0x1a46 <Tactics+0x3ba>
    1a42:	0c 94 05 1b 	jmp	0x360a	; 0x360a <Tactics+0x1f7e>
				{
					max = checkers ;
					myLine = line ;
    1a46:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    1a4a:	91 e0       	ldi	r25, 0x01	; 1
    1a4c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table14) ;
				TurnOtherCheckers(line,column,enemy,mine,table14) ;
				checkers = scanCopyChessBoard(mine,table14) ;
				if (max < checkers)
				{
					max = checkers ;
    1a50:	d8 2e       	mov	r13, r24
    1a52:	0c 94 05 1b 	jmp	0x360a	; 0x360a <Tactics+0x1f7e>
					myColumn = column ;
				}
				break; 
				
				default:
				setChecker(line,column,mine,table9) ;
    1a56:	24 e3       	ldi	r18, 0x34	; 52
    1a58:	31 e0       	ldi	r19, 0x01	; 1
    1a5a:	4f 2d       	mov	r20, r15
    1a5c:	61 e0       	ldi	r22, 0x01	; 1
    1a5e:	8d 2f       	mov	r24, r29
    1a60:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
    1a64:	04 e3       	ldi	r16, 0x34	; 52
    1a66:	11 e0       	ldi	r17, 0x01	; 1
    1a68:	2f 2d       	mov	r18, r15
    1a6a:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    1a6e:	61 e0       	ldi	r22, 0x01	; 1
    1a70:	8d 2f       	mov	r24, r29
    1a72:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table9) ;
    1a76:	b8 01       	movw	r22, r16
    1a78:	8f 2d       	mov	r24, r15
    1a7a:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    1a7e:	d8 16       	cp	r13, r24
    1a80:	30 f4       	brcc	.+12     	; 0x1a8e <Tactics+0x402>
				{
					max = checkers ;
					myLine = line ;
    1a82:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    1a86:	91 e0       	ldi	r25, 0x01	; 1
    1a88:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table9) ;
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
				checkers = scanCopyChessBoard(mine,table9) ;
				if (max < checkers)
				{
					max = checkers ;
    1a8c:	d8 2e       	mov	r13, r24
		}
		
		/* Second valid in this line */
		temp = buffer & 0b00000010 ;
		temp = (temp >> 1) ;
		if (temp == 1)
    1a8e:	c1 ff       	sbrs	r28, 1
    1a90:	ed c1       	rjmp	.+986    	; 0x1e6c <Tactics+0x7e0>
		{
			column = 2 ;
			count++ ;
    1a92:	e3 94       	inc	r14
			switch(count)
    1a94:	8e 2d       	mov	r24, r14
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	fc 01       	movw	r30, r24
    1a9a:	31 97       	sbiw	r30, 0x01	; 1
    1a9c:	ee 30       	cpi	r30, 0x0E	; 14
    1a9e:	f1 05       	cpc	r31, r1
    1aa0:	08 f0       	brcs	.+2      	; 0x1aa4 <Tactics+0x418>
    1aa2:	c8 c1       	rjmp	.+912    	; 0x1e34 <Tactics+0x7a8>
    1aa4:	e6 5b       	subi	r30, 0xB6	; 182
    1aa6:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa8:	0c 94 78 21 	jmp	0x42f0	; 0x42f0 <__tablejump2__>
			{
				case 1:
				setChecker(line,column,mine,table1) ;
    1aac:	2c ed       	ldi	r18, 0xDC	; 220
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	4f 2d       	mov	r20, r15
    1ab2:	62 e0       	ldi	r22, 0x02	; 2
    1ab4:	8d 2f       	mov	r24, r29
    1ab6:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table1) ;
    1aba:	0c ed       	ldi	r16, 0xDC	; 220
    1abc:	10 e0       	ldi	r17, 0x00	; 0
    1abe:	2f 2d       	mov	r18, r15
    1ac0:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    1ac4:	62 e0       	ldi	r22, 0x02	; 2
    1ac6:	8d 2f       	mov	r24, r29
    1ac8:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table1) ;
    1acc:	b8 01       	movw	r22, r16
    1ace:	8f 2d       	mov	r24, r15
    1ad0:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    1ad4:	d8 16       	cp	r13, r24
    1ad6:	10 f0       	brcs	.+4      	; 0x1adc <Tactics+0x450>
    1ad8:	0c 94 45 1b 	jmp	0x368a	; 0x368a <Tactics+0x1ffe>
				{
					max = checkers ;
					myLine = line ;
    1adc:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    1ae0:	92 e0       	ldi	r25, 0x02	; 2
    1ae2:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table1) ;
				TurnOtherCheckers(line,column,enemy,mine,table1) ;
				checkers = scanCopyChessBoard(mine,table1) ;
				if (max < checkers)
				{
					max = checkers ;
    1ae6:	d8 2e       	mov	r13, r24
    1ae8:	0c 94 45 1b 	jmp	0x368a	; 0x368a <Tactics+0x1ffe>
					myColumn = column ;
				}
				break;
				
				case 2:
				setChecker(line,column,mine,table2) ;
    1aec:	2c e6       	ldi	r18, 0x6C	; 108
    1aee:	31 e0       	ldi	r19, 0x01	; 1
    1af0:	4f 2d       	mov	r20, r15
    1af2:	62 e0       	ldi	r22, 0x02	; 2
    1af4:	8d 2f       	mov	r24, r29
    1af6:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table2) ;
    1afa:	0c e6       	ldi	r16, 0x6C	; 108
    1afc:	11 e0       	ldi	r17, 0x01	; 1
    1afe:	2f 2d       	mov	r18, r15
    1b00:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    1b04:	62 e0       	ldi	r22, 0x02	; 2
    1b06:	8d 2f       	mov	r24, r29
    1b08:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table2) ;
    1b0c:	b8 01       	movw	r22, r16
    1b0e:	8f 2d       	mov	r24, r15
    1b10:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    1b14:	d8 16       	cp	r13, r24
    1b16:	10 f0       	brcs	.+4      	; 0x1b1c <Tactics+0x490>
    1b18:	0c 94 49 1b 	jmp	0x3692	; 0x3692 <Tactics+0x2006>
				{
					max = checkers ;
					myLine = line ;
    1b1c:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    1b20:	92 e0       	ldi	r25, 0x02	; 2
    1b22:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table2) ;
				TurnOtherCheckers(line,column,enemy,mine,table2) ;
				checkers = scanCopyChessBoard(mine,table2) ;
				if (max < checkers)
				{
					max = checkers ;
    1b26:	d8 2e       	mov	r13, r24
    1b28:	0c 94 49 1b 	jmp	0x3692	; 0x3692 <Tactics+0x2006>
					myColumn = column ;
				}
				break;
				
				case 3:
				setChecker(line,column,mine,table3) ;
    1b2c:	2c e6       	ldi	r18, 0x6C	; 108
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	4f 2d       	mov	r20, r15
    1b32:	62 e0       	ldi	r22, 0x02	; 2
    1b34:	8d 2f       	mov	r24, r29
    1b36:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table3) ;
    1b3a:	0c e6       	ldi	r16, 0x6C	; 108
    1b3c:	10 e0       	ldi	r17, 0x00	; 0
    1b3e:	2f 2d       	mov	r18, r15
    1b40:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    1b44:	62 e0       	ldi	r22, 0x02	; 2
    1b46:	8d 2f       	mov	r24, r29
    1b48:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table3) ;
    1b4c:	b8 01       	movw	r22, r16
    1b4e:	8f 2d       	mov	r24, r15
    1b50:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    1b54:	d8 16       	cp	r13, r24
    1b56:	10 f0       	brcs	.+4      	; 0x1b5c <Tactics+0x4d0>
    1b58:	0c 94 4d 1b 	jmp	0x369a	; 0x369a <Tactics+0x200e>
				{
					max = checkers ;
					myLine = line ;
    1b5c:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    1b60:	92 e0       	ldi	r25, 0x02	; 2
    1b62:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table3) ;
				TurnOtherCheckers(line,column,enemy,mine,table3) ;
				checkers = scanCopyChessBoard(mine,table3) ;
				if (max < checkers)
				{
					max = checkers ;
    1b66:	d8 2e       	mov	r13, r24
    1b68:	0c 94 4d 1b 	jmp	0x369a	; 0x369a <Tactics+0x200e>
					myColumn = column ;
				}
				break;
				
				case 4:
				setChecker(line,column,mine,table4) ;
    1b6c:	24 e4       	ldi	r18, 0x44	; 68
    1b6e:	31 e0       	ldi	r19, 0x01	; 1
    1b70:	4f 2d       	mov	r20, r15
    1b72:	62 e0       	ldi	r22, 0x02	; 2
    1b74:	8d 2f       	mov	r24, r29
    1b76:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table4) ;
    1b7a:	04 e4       	ldi	r16, 0x44	; 68
    1b7c:	11 e0       	ldi	r17, 0x01	; 1
    1b7e:	2f 2d       	mov	r18, r15
    1b80:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    1b84:	62 e0       	ldi	r22, 0x02	; 2
    1b86:	8d 2f       	mov	r24, r29
    1b88:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table4) ;
    1b8c:	b8 01       	movw	r22, r16
    1b8e:	8f 2d       	mov	r24, r15
    1b90:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    1b94:	d8 16       	cp	r13, r24
    1b96:	10 f0       	brcs	.+4      	; 0x1b9c <Tactics+0x510>
    1b98:	0c 94 51 1b 	jmp	0x36a2	; 0x36a2 <Tactics+0x2016>
				{
					max = checkers ;
					myLine = line ;
    1b9c:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    1ba0:	92 e0       	ldi	r25, 0x02	; 2
    1ba2:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table4) ;
				TurnOtherCheckers(line,column,enemy,mine,table4) ;
				checkers = scanCopyChessBoard(mine,table4) ;
				if (max < checkers)
				{
					max = checkers ;
    1ba6:	d8 2e       	mov	r13, r24
    1ba8:	0c 94 51 1b 	jmp	0x36a2	; 0x36a2 <Tactics+0x2016>
					myColumn = column ;
				}
				break;
				
				case 5:
				setChecker(line,column,mine,table5) ;
    1bac:	24 e5       	ldi	r18, 0x54	; 84
    1bae:	31 e0       	ldi	r19, 0x01	; 1
    1bb0:	4f 2d       	mov	r20, r15
    1bb2:	62 e0       	ldi	r22, 0x02	; 2
    1bb4:	8d 2f       	mov	r24, r29
    1bb6:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table5) ;
    1bba:	04 e5       	ldi	r16, 0x54	; 84
    1bbc:	11 e0       	ldi	r17, 0x01	; 1
    1bbe:	2f 2d       	mov	r18, r15
    1bc0:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    1bc4:	62 e0       	ldi	r22, 0x02	; 2
    1bc6:	8d 2f       	mov	r24, r29
    1bc8:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table5) ;
    1bcc:	b8 01       	movw	r22, r16
    1bce:	8f 2d       	mov	r24, r15
    1bd0:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    1bd4:	d8 16       	cp	r13, r24
    1bd6:	10 f0       	brcs	.+4      	; 0x1bdc <Tactics+0x550>
    1bd8:	0c 94 55 1b 	jmp	0x36aa	; 0x36aa <Tactics+0x201e>
				{
					max = checkers ;
					myLine = line ;
    1bdc:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    1be0:	92 e0       	ldi	r25, 0x02	; 2
    1be2:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table5) ;
				TurnOtherCheckers(line,column,enemy,mine,table5) ;
				checkers = scanCopyChessBoard(mine,table5) ;
				if (max < checkers)
				{
					max = checkers ;
    1be6:	d8 2e       	mov	r13, r24
    1be8:	0c 94 55 1b 	jmp	0x36aa	; 0x36aa <Tactics+0x201e>
					myColumn = column ;
				}
				break;
				
				case 6:
				setChecker(line,column,mine,table6) ;
    1bec:	24 e8       	ldi	r18, 0x84	; 132
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	4f 2d       	mov	r20, r15
    1bf2:	62 e0       	ldi	r22, 0x02	; 2
    1bf4:	8d 2f       	mov	r24, r29
    1bf6:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table6) ;
    1bfa:	04 e8       	ldi	r16, 0x84	; 132
    1bfc:	10 e0       	ldi	r17, 0x00	; 0
    1bfe:	2f 2d       	mov	r18, r15
    1c00:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    1c04:	62 e0       	ldi	r22, 0x02	; 2
    1c06:	8d 2f       	mov	r24, r29
    1c08:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table6) ;
    1c0c:	b8 01       	movw	r22, r16
    1c0e:	8f 2d       	mov	r24, r15
    1c10:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    1c14:	d8 16       	cp	r13, r24
    1c16:	10 f0       	brcs	.+4      	; 0x1c1c <Tactics+0x590>
    1c18:	0c 94 59 1b 	jmp	0x36b2	; 0x36b2 <Tactics+0x2026>
				{
					max = checkers ;
					myLine = line ;
    1c1c:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    1c20:	92 e0       	ldi	r25, 0x02	; 2
    1c22:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table6) ;
				TurnOtherCheckers(line,column,enemy,mine,table6) ;
				checkers = scanCopyChessBoard(mine,table6) ;
				if (max < checkers)
				{
					max = checkers ;
    1c26:	d8 2e       	mov	r13, r24
    1c28:	0c 94 59 1b 	jmp	0x36b2	; 0x36b2 <Tactics+0x2026>
					myColumn = column ;
				}
				break;
				
				case 7:
				setChecker(line,column,mine,table7) ;
    1c2c:	2c ee       	ldi	r18, 0xEC	; 236
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
    1c30:	4f 2d       	mov	r20, r15
    1c32:	62 e0       	ldi	r22, 0x02	; 2
    1c34:	8d 2f       	mov	r24, r29
    1c36:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table7) ;
    1c3a:	0c ee       	ldi	r16, 0xEC	; 236
    1c3c:	10 e0       	ldi	r17, 0x00	; 0
    1c3e:	2f 2d       	mov	r18, r15
    1c40:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    1c44:	62 e0       	ldi	r22, 0x02	; 2
    1c46:	8d 2f       	mov	r24, r29
    1c48:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table7) ;
    1c4c:	b8 01       	movw	r22, r16
    1c4e:	8f 2d       	mov	r24, r15
    1c50:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    1c54:	d8 16       	cp	r13, r24
    1c56:	10 f0       	brcs	.+4      	; 0x1c5c <Tactics+0x5d0>
    1c58:	0c 94 5d 1b 	jmp	0x36ba	; 0x36ba <Tactics+0x202e>
				{
					max = checkers ;
					myLine = line ;
    1c5c:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    1c60:	92 e0       	ldi	r25, 0x02	; 2
    1c62:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table7) ;
				TurnOtherCheckers(line,column,enemy,mine,table7) ;
				checkers = scanCopyChessBoard(mine,table7) ;
				if (max < checkers)
				{
					max = checkers ;
    1c66:	d8 2e       	mov	r13, r24
    1c68:	0c 94 5d 1b 	jmp	0x36ba	; 0x36ba <Tactics+0x202e>
					myColumn = column ;
				}
				break;
				
				case 8:
				setChecker(line,column,mine,table8) ;
    1c6c:	24 e9       	ldi	r18, 0x94	; 148
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	4f 2d       	mov	r20, r15
    1c72:	62 e0       	ldi	r22, 0x02	; 2
    1c74:	8d 2f       	mov	r24, r29
    1c76:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table8) ;
    1c7a:	04 e9       	ldi	r16, 0x94	; 148
    1c7c:	10 e0       	ldi	r17, 0x00	; 0
    1c7e:	2f 2d       	mov	r18, r15
    1c80:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    1c84:	62 e0       	ldi	r22, 0x02	; 2
    1c86:	8d 2f       	mov	r24, r29
    1c88:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table8) ;
    1c8c:	b8 01       	movw	r22, r16
    1c8e:	8f 2d       	mov	r24, r15
    1c90:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    1c94:	d8 16       	cp	r13, r24
    1c96:	10 f0       	brcs	.+4      	; 0x1c9c <Tactics+0x610>
    1c98:	0c 94 61 1b 	jmp	0x36c2	; 0x36c2 <Tactics+0x2036>
				{
					max = checkers ;
					myLine = line ;
    1c9c:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    1ca0:	92 e0       	ldi	r25, 0x02	; 2
    1ca2:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table8) ;
				TurnOtherCheckers(line,column,enemy,mine,table8) ;
				checkers = scanCopyChessBoard(mine,table8) ;
				if (max < checkers)
				{
					max = checkers ;
    1ca6:	d8 2e       	mov	r13, r24
    1ca8:	0c 94 61 1b 	jmp	0x36c2	; 0x36c2 <Tactics+0x2036>
					myColumn = column ;
				}
				break;
			
				case 9:
				setChecker(line,column,mine,table9) ;
    1cac:	24 e3       	ldi	r18, 0x34	; 52
    1cae:	31 e0       	ldi	r19, 0x01	; 1
    1cb0:	4f 2d       	mov	r20, r15
    1cb2:	62 e0       	ldi	r22, 0x02	; 2
    1cb4:	8d 2f       	mov	r24, r29
    1cb6:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
    1cba:	04 e3       	ldi	r16, 0x34	; 52
    1cbc:	11 e0       	ldi	r17, 0x01	; 1
    1cbe:	2f 2d       	mov	r18, r15
    1cc0:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    1cc4:	62 e0       	ldi	r22, 0x02	; 2
    1cc6:	8d 2f       	mov	r24, r29
    1cc8:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table9) ;
    1ccc:	b8 01       	movw	r22, r16
    1cce:	8f 2d       	mov	r24, r15
    1cd0:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    1cd4:	d8 16       	cp	r13, r24
    1cd6:	10 f0       	brcs	.+4      	; 0x1cdc <Tactics+0x650>
    1cd8:	0c 94 65 1b 	jmp	0x36ca	; 0x36ca <Tactics+0x203e>
				{
					max = checkers ;
					myLine = line ;
    1cdc:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    1ce0:	92 e0       	ldi	r25, 0x02	; 2
    1ce2:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table9) ;
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
				checkers = scanCopyChessBoard(mine,table9) ;
				if (max < checkers)
				{
					max = checkers ;
    1ce6:	d8 2e       	mov	r13, r24
    1ce8:	0c 94 65 1b 	jmp	0x36ca	; 0x36ca <Tactics+0x203e>
					myColumn = column ;
				}
				break;
				
				case 10:
				setChecker(line,column,mine,table10) ;
    1cec:	2c e7       	ldi	r18, 0x7C	; 124
    1cee:	31 e0       	ldi	r19, 0x01	; 1
    1cf0:	4f 2d       	mov	r20, r15
    1cf2:	62 e0       	ldi	r22, 0x02	; 2
    1cf4:	8d 2f       	mov	r24, r29
    1cf6:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table10) ;
    1cfa:	0c e7       	ldi	r16, 0x7C	; 124
    1cfc:	11 e0       	ldi	r17, 0x01	; 1
    1cfe:	2f 2d       	mov	r18, r15
    1d00:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    1d04:	62 e0       	ldi	r22, 0x02	; 2
    1d06:	8d 2f       	mov	r24, r29
    1d08:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table10) ;
    1d0c:	b8 01       	movw	r22, r16
    1d0e:	8f 2d       	mov	r24, r15
    1d10:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    1d14:	d8 16       	cp	r13, r24
    1d16:	10 f0       	brcs	.+4      	; 0x1d1c <Tactics+0x690>
    1d18:	0c 94 69 1b 	jmp	0x36d2	; 0x36d2 <Tactics+0x2046>
				{
					max = checkers ;
					myLine = line ;
    1d1c:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    1d20:	92 e0       	ldi	r25, 0x02	; 2
    1d22:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table10) ;
				TurnOtherCheckers(line,column,enemy,mine,table10) ;
				checkers = scanCopyChessBoard(mine,table10) ;
				if (max < checkers)
				{
					max = checkers ;
    1d26:	d8 2e       	mov	r13, r24
    1d28:	0c 94 69 1b 	jmp	0x36d2	; 0x36d2 <Tactics+0x2046>
					myColumn = column ;
				}
				break;
				
				case 11:
				setChecker(line,column,mine,table11) ;
    1d2c:	24 e2       	ldi	r18, 0x24	; 36
    1d2e:	31 e0       	ldi	r19, 0x01	; 1
    1d30:	4f 2d       	mov	r20, r15
    1d32:	62 e0       	ldi	r22, 0x02	; 2
    1d34:	8d 2f       	mov	r24, r29
    1d36:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table11) ;
    1d3a:	04 e2       	ldi	r16, 0x24	; 36
    1d3c:	11 e0       	ldi	r17, 0x01	; 1
    1d3e:	2f 2d       	mov	r18, r15
    1d40:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    1d44:	62 e0       	ldi	r22, 0x02	; 2
    1d46:	8d 2f       	mov	r24, r29
    1d48:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table11) ;
    1d4c:	b8 01       	movw	r22, r16
    1d4e:	8f 2d       	mov	r24, r15
    1d50:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    1d54:	d8 16       	cp	r13, r24
    1d56:	10 f0       	brcs	.+4      	; 0x1d5c <Tactics+0x6d0>
    1d58:	0c 94 6d 1b 	jmp	0x36da	; 0x36da <Tactics+0x204e>
				{
					max = checkers ;
					myLine = line ;
    1d5c:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    1d60:	92 e0       	ldi	r25, 0x02	; 2
    1d62:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table11) ;
				TurnOtherCheckers(line,column,enemy,mine,table11) ;
				checkers = scanCopyChessBoard(mine,table11) ;
				if (max < checkers)
				{
					max = checkers ;
    1d66:	d8 2e       	mov	r13, r24
    1d68:	0c 94 6d 1b 	jmp	0x36da	; 0x36da <Tactics+0x204e>
					myColumn = column ;
				}
				break;
				
				case 12:
				setChecker(line,column,mine,table12) ;
    1d6c:	2c ea       	ldi	r18, 0xAC	; 172
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	4f 2d       	mov	r20, r15
    1d72:	62 e0       	ldi	r22, 0x02	; 2
    1d74:	8d 2f       	mov	r24, r29
    1d76:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table12) ;
    1d7a:	0c ea       	ldi	r16, 0xAC	; 172
    1d7c:	10 e0       	ldi	r17, 0x00	; 0
    1d7e:	2f 2d       	mov	r18, r15
    1d80:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    1d84:	62 e0       	ldi	r22, 0x02	; 2
    1d86:	8d 2f       	mov	r24, r29
    1d88:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table12) ;
    1d8c:	b8 01       	movw	r22, r16
    1d8e:	8f 2d       	mov	r24, r15
    1d90:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    1d94:	d8 16       	cp	r13, r24
    1d96:	10 f0       	brcs	.+4      	; 0x1d9c <Tactics+0x710>
    1d98:	0c 94 39 1b 	jmp	0x3672	; 0x3672 <Tactics+0x1fe6>
				{
					max = checkers ;
					myLine = line ;
    1d9c:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    1da0:	92 e0       	ldi	r25, 0x02	; 2
    1da2:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table12) ;
				TurnOtherCheckers(line,column,enemy,mine,table12) ;
				checkers = scanCopyChessBoard(mine,table12) ;
				if (max < checkers)
				{
					max = checkers ;
    1da6:	d8 2e       	mov	r13, r24
    1da8:	0c 94 39 1b 	jmp	0x3672	; 0x3672 <Tactics+0x1fe6>
					myColumn = column ;
				}
				break;
				
				case 13:
				setChecker(line,column,mine,table13) ;
    1dac:	2c ec       	ldi	r18, 0xCC	; 204
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	4f 2d       	mov	r20, r15
    1db2:	62 e0       	ldi	r22, 0x02	; 2
    1db4:	8d 2f       	mov	r24, r29
    1db6:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table13) ;
    1dba:	0c ec       	ldi	r16, 0xCC	; 204
    1dbc:	10 e0       	ldi	r17, 0x00	; 0
    1dbe:	2f 2d       	mov	r18, r15
    1dc0:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    1dc4:	62 e0       	ldi	r22, 0x02	; 2
    1dc6:	8d 2f       	mov	r24, r29
    1dc8:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table13) ;
    1dcc:	b8 01       	movw	r22, r16
    1dce:	8f 2d       	mov	r24, r15
    1dd0:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    1dd4:	d8 16       	cp	r13, r24
    1dd6:	10 f0       	brcs	.+4      	; 0x1ddc <Tactics+0x750>
    1dd8:	0c 94 3d 1b 	jmp	0x367a	; 0x367a <Tactics+0x1fee>
				{
					max = checkers ;
					myLine = line ;
    1ddc:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    1de0:	92 e0       	ldi	r25, 0x02	; 2
    1de2:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table13) ;
				TurnOtherCheckers(line,column,enemy,mine,table13) ;
				checkers = scanCopyChessBoard(mine,table13) ;
				if (max < checkers)
				{
					max = checkers ;
    1de6:	d8 2e       	mov	r13, r24
    1de8:	0c 94 3d 1b 	jmp	0x367a	; 0x367a <Tactics+0x1fee>
					myColumn = column ;
				}
				break;
				
				case 14:
				setChecker(line,column,mine,table14) ;
    1dec:	24 e1       	ldi	r18, 0x14	; 20
    1dee:	31 e0       	ldi	r19, 0x01	; 1
    1df0:	4f 2d       	mov	r20, r15
    1df2:	62 e0       	ldi	r22, 0x02	; 2
    1df4:	8d 2f       	mov	r24, r29
    1df6:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table14) ;
    1dfa:	04 e1       	ldi	r16, 0x14	; 20
    1dfc:	11 e0       	ldi	r17, 0x01	; 1
    1dfe:	2f 2d       	mov	r18, r15
    1e00:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    1e04:	62 e0       	ldi	r22, 0x02	; 2
    1e06:	8d 2f       	mov	r24, r29
    1e08:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table14) ;
    1e0c:	b8 01       	movw	r22, r16
    1e0e:	8f 2d       	mov	r24, r15
    1e10:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    1e14:	d8 16       	cp	r13, r24
    1e16:	10 f0       	brcs	.+4      	; 0x1e1c <Tactics+0x790>
    1e18:	0c 94 41 1b 	jmp	0x3682	; 0x3682 <Tactics+0x1ff6>
				{
					max = checkers ;
					myLine = line ;
    1e1c:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    1e20:	92 e0       	ldi	r25, 0x02	; 2
    1e22:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table14) ;
				TurnOtherCheckers(line,column,enemy,mine,table14) ;
				checkers = scanCopyChessBoard(mine,table14) ;
				if (max < checkers)
				{
					max = checkers ;
    1e26:	d8 2e       	mov	r13, r24
    1e28:	0c 94 41 1b 	jmp	0x3682	; 0x3682 <Tactics+0x1ff6>
		temp = buffer & 0b00000010 ;
		temp = (temp >> 1) ;
		if (temp == 1)
		{
			column = 2 ;
			count++ ;
    1e2c:	0f 2e       	mov	r0, r31
    1e2e:	ff e0       	ldi	r31, 0x0F	; 15
    1e30:	ef 2e       	mov	r14, r31
    1e32:	f0 2d       	mov	r31, r0
					myColumn = column ;
				}
				break;
			
				default:
				setChecker(line,column,mine,table9) ;
    1e34:	24 e3       	ldi	r18, 0x34	; 52
    1e36:	31 e0       	ldi	r19, 0x01	; 1
    1e38:	4f 2d       	mov	r20, r15
    1e3a:	62 e0       	ldi	r22, 0x02	; 2
    1e3c:	8d 2f       	mov	r24, r29
    1e3e:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
    1e42:	04 e3       	ldi	r16, 0x34	; 52
    1e44:	11 e0       	ldi	r17, 0x01	; 1
    1e46:	2f 2d       	mov	r18, r15
    1e48:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    1e4c:	62 e0       	ldi	r22, 0x02	; 2
    1e4e:	8d 2f       	mov	r24, r29
    1e50:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table9) ;
    1e54:	b8 01       	movw	r22, r16
    1e56:	8f 2d       	mov	r24, r15
    1e58:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    1e5c:	d8 16       	cp	r13, r24
    1e5e:	30 f4       	brcc	.+12     	; 0x1e6c <Tactics+0x7e0>
				{
					max = checkers ;
					myLine = line ;
    1e60:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    1e64:	92 e0       	ldi	r25, 0x02	; 2
    1e66:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table9) ;
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
				checkers = scanCopyChessBoard(mine,table9) ;
				if (max < checkers)
				{
					max = checkers ;
    1e6a:	d8 2e       	mov	r13, r24
			
		}
		/* Third valid move in this line */
		temp = buffer & 0b00000100 ;
		temp = (temp >> 2) ;
		if (temp == 1)
    1e6c:	c2 ff       	sbrs	r28, 2
    1e6e:	f2 c1       	rjmp	.+996    	; 0x2254 <Tactics+0xbc8>
		{
			
			column = 3 ;
			count++ ;
    1e70:	e3 94       	inc	r14
			switch(count)
    1e72:	8e 2d       	mov	r24, r14
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	fc 01       	movw	r30, r24
    1e78:	31 97       	sbiw	r30, 0x01	; 1
    1e7a:	ee 30       	cpi	r30, 0x0E	; 14
    1e7c:	f1 05       	cpc	r31, r1
    1e7e:	08 f0       	brcs	.+2      	; 0x1e82 <Tactics+0x7f6>
    1e80:	cd c1       	rjmp	.+922    	; 0x221c <Tactics+0xb90>
    1e82:	e8 5a       	subi	r30, 0xA8	; 168
    1e84:	ff 4f       	sbci	r31, 0xFF	; 255
    1e86:	0c 94 78 21 	jmp	0x42f0	; 0x42f0 <__tablejump2__>
			{
				case 1:
				setChecker(line,column,mine,table1) ;
    1e8a:	2c ed       	ldi	r18, 0xDC	; 220
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	4f 2d       	mov	r20, r15
    1e90:	63 e0       	ldi	r22, 0x03	; 3
    1e92:	8d 2f       	mov	r24, r29
    1e94:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table1) ;
    1e98:	0c ed       	ldi	r16, 0xDC	; 220
    1e9a:	10 e0       	ldi	r17, 0x00	; 0
    1e9c:	2f 2d       	mov	r18, r15
    1e9e:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    1ea2:	63 e0       	ldi	r22, 0x03	; 3
    1ea4:	8d 2f       	mov	r24, r29
    1ea6:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table1) ;
    1eaa:	b8 01       	movw	r22, r16
    1eac:	8f 2d       	mov	r24, r15
    1eae:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    1eb2:	d8 16       	cp	r13, r24
    1eb4:	10 f0       	brcs	.+4      	; 0x1eba <Tactics+0x82e>
    1eb6:	0c 94 7d 1b 	jmp	0x36fa	; 0x36fa <Tactics+0x206e>
				{
					max = checkers ;
					myLine = line ;
    1eba:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    1ebe:	93 e0       	ldi	r25, 0x03	; 3
    1ec0:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table1) ;
				TurnOtherCheckers(line,column,enemy,mine,table1) ;
				checkers = scanCopyChessBoard(mine,table1) ;
				if (max < checkers)
				{
					max = checkers ;
    1ec4:	d8 2e       	mov	r13, r24
    1ec6:	0c 94 7d 1b 	jmp	0x36fa	; 0x36fa <Tactics+0x206e>
					myColumn = column ;
				}
				break;
				
				case 2:
				setChecker(line,column,mine,table2) ;
    1eca:	2c e6       	ldi	r18, 0x6C	; 108
    1ecc:	31 e0       	ldi	r19, 0x01	; 1
    1ece:	4f 2d       	mov	r20, r15
    1ed0:	63 e0       	ldi	r22, 0x03	; 3
    1ed2:	8d 2f       	mov	r24, r29
    1ed4:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table2) ;
    1ed8:	0c e6       	ldi	r16, 0x6C	; 108
    1eda:	11 e0       	ldi	r17, 0x01	; 1
    1edc:	2f 2d       	mov	r18, r15
    1ede:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    1ee2:	63 e0       	ldi	r22, 0x03	; 3
    1ee4:	8d 2f       	mov	r24, r29
    1ee6:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table2) ;
    1eea:	b8 01       	movw	r22, r16
    1eec:	8f 2d       	mov	r24, r15
    1eee:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    1ef2:	d8 16       	cp	r13, r24
    1ef4:	10 f0       	brcs	.+4      	; 0x1efa <Tactics+0x86e>
    1ef6:	0c 94 81 1b 	jmp	0x3702	; 0x3702 <Tactics+0x2076>
				{
					max = checkers ;
					myLine = line ;
    1efa:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    1efe:	93 e0       	ldi	r25, 0x03	; 3
    1f00:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table2) ;
				TurnOtherCheckers(line,column,enemy,mine,table2) ;
				checkers = scanCopyChessBoard(mine,table2) ;
				if (max < checkers)
				{
					max = checkers ;
    1f04:	d8 2e       	mov	r13, r24
    1f06:	0c 94 81 1b 	jmp	0x3702	; 0x3702 <Tactics+0x2076>
					myColumn = column ;
				}
				break;
				
				case 3:
				setChecker(line,column,mine,table3) ;
    1f0a:	2c e6       	ldi	r18, 0x6C	; 108
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	4f 2d       	mov	r20, r15
    1f10:	63 e0       	ldi	r22, 0x03	; 3
    1f12:	8d 2f       	mov	r24, r29
    1f14:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table3) ;
    1f18:	0c e6       	ldi	r16, 0x6C	; 108
    1f1a:	10 e0       	ldi	r17, 0x00	; 0
    1f1c:	2f 2d       	mov	r18, r15
    1f1e:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    1f22:	63 e0       	ldi	r22, 0x03	; 3
    1f24:	8d 2f       	mov	r24, r29
    1f26:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table3) ;
    1f2a:	b8 01       	movw	r22, r16
    1f2c:	8f 2d       	mov	r24, r15
    1f2e:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    1f32:	d8 16       	cp	r13, r24
    1f34:	10 f0       	brcs	.+4      	; 0x1f3a <Tactics+0x8ae>
    1f36:	0c 94 85 1b 	jmp	0x370a	; 0x370a <Tactics+0x207e>
				{
					max = checkers ;
					myLine = line ;
    1f3a:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    1f3e:	93 e0       	ldi	r25, 0x03	; 3
    1f40:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table3) ;
				TurnOtherCheckers(line,column,enemy,mine,table3) ;
				checkers = scanCopyChessBoard(mine,table3) ;
				if (max < checkers)
				{
					max = checkers ;
    1f44:	d8 2e       	mov	r13, r24
    1f46:	0c 94 85 1b 	jmp	0x370a	; 0x370a <Tactics+0x207e>
					myColumn = column ;
				}
				break;
				
				case 4:
				setChecker(line,column,mine,table4) ;
    1f4a:	24 e4       	ldi	r18, 0x44	; 68
    1f4c:	31 e0       	ldi	r19, 0x01	; 1
    1f4e:	4f 2d       	mov	r20, r15
    1f50:	63 e0       	ldi	r22, 0x03	; 3
    1f52:	8d 2f       	mov	r24, r29
    1f54:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table4) ;
    1f58:	04 e4       	ldi	r16, 0x44	; 68
    1f5a:	11 e0       	ldi	r17, 0x01	; 1
    1f5c:	2f 2d       	mov	r18, r15
    1f5e:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    1f62:	63 e0       	ldi	r22, 0x03	; 3
    1f64:	8d 2f       	mov	r24, r29
    1f66:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table4) ;
    1f6a:	b8 01       	movw	r22, r16
    1f6c:	8f 2d       	mov	r24, r15
    1f6e:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    1f72:	d8 16       	cp	r13, r24
    1f74:	10 f0       	brcs	.+4      	; 0x1f7a <Tactics+0x8ee>
    1f76:	0c 94 89 1b 	jmp	0x3712	; 0x3712 <Tactics+0x2086>
				{
					max = checkers ;
					myLine = line ;
    1f7a:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    1f7e:	93 e0       	ldi	r25, 0x03	; 3
    1f80:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table4) ;
				TurnOtherCheckers(line,column,enemy,mine,table4) ;
				checkers = scanCopyChessBoard(mine,table4) ;
				if (max < checkers)
				{
					max = checkers ;
    1f84:	d8 2e       	mov	r13, r24
    1f86:	0c 94 89 1b 	jmp	0x3712	; 0x3712 <Tactics+0x2086>
					myColumn = column ;
				}
				break;
				
				case 5:
				setChecker(line,column,mine,table5) ;
    1f8a:	24 e5       	ldi	r18, 0x54	; 84
    1f8c:	31 e0       	ldi	r19, 0x01	; 1
    1f8e:	4f 2d       	mov	r20, r15
    1f90:	63 e0       	ldi	r22, 0x03	; 3
    1f92:	8d 2f       	mov	r24, r29
    1f94:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table5) ;
    1f98:	04 e5       	ldi	r16, 0x54	; 84
    1f9a:	11 e0       	ldi	r17, 0x01	; 1
    1f9c:	2f 2d       	mov	r18, r15
    1f9e:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    1fa2:	63 e0       	ldi	r22, 0x03	; 3
    1fa4:	8d 2f       	mov	r24, r29
    1fa6:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table5) ;
    1faa:	b8 01       	movw	r22, r16
    1fac:	8f 2d       	mov	r24, r15
    1fae:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    1fb2:	d8 16       	cp	r13, r24
    1fb4:	10 f0       	brcs	.+4      	; 0x1fba <Tactics+0x92e>
    1fb6:	0c 94 8d 1b 	jmp	0x371a	; 0x371a <Tactics+0x208e>
				{
					max = checkers ;
					myLine = line ;
    1fba:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    1fbe:	93 e0       	ldi	r25, 0x03	; 3
    1fc0:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table5) ;
				TurnOtherCheckers(line,column,enemy,mine,table5) ;
				checkers = scanCopyChessBoard(mine,table5) ;
				if (max < checkers)
				{
					max = checkers ;
    1fc4:	d8 2e       	mov	r13, r24
    1fc6:	0c 94 8d 1b 	jmp	0x371a	; 0x371a <Tactics+0x208e>
					myColumn = column ;
				}
				break;
				
				case 6:
				setChecker(line,column,mine,table6) ;
    1fca:	24 e8       	ldi	r18, 0x84	; 132
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	4f 2d       	mov	r20, r15
    1fd0:	63 e0       	ldi	r22, 0x03	; 3
    1fd2:	8d 2f       	mov	r24, r29
    1fd4:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table6) ;
    1fd8:	04 e8       	ldi	r16, 0x84	; 132
    1fda:	10 e0       	ldi	r17, 0x00	; 0
    1fdc:	2f 2d       	mov	r18, r15
    1fde:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    1fe2:	63 e0       	ldi	r22, 0x03	; 3
    1fe4:	8d 2f       	mov	r24, r29
    1fe6:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table6) ;
    1fea:	b8 01       	movw	r22, r16
    1fec:	8f 2d       	mov	r24, r15
    1fee:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    1ff2:	d8 16       	cp	r13, r24
    1ff4:	10 f0       	brcs	.+4      	; 0x1ffa <Tactics+0x96e>
    1ff6:	0c 94 91 1b 	jmp	0x3722	; 0x3722 <Tactics+0x2096>
				{
					max = checkers ;
					myLine = line ;
    1ffa:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    1ffe:	93 e0       	ldi	r25, 0x03	; 3
    2000:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table6) ;
				TurnOtherCheckers(line,column,enemy,mine,table6) ;
				checkers = scanCopyChessBoard(mine,table6) ;
				if (max < checkers)
				{
					max = checkers ;
    2004:	d8 2e       	mov	r13, r24
    2006:	0c 94 91 1b 	jmp	0x3722	; 0x3722 <Tactics+0x2096>
					myColumn = column ;
				}
				break;
				
				case 7:
				setChecker(line,column,mine,table7) ;
    200a:	2c ee       	ldi	r18, 0xEC	; 236
    200c:	30 e0       	ldi	r19, 0x00	; 0
    200e:	4f 2d       	mov	r20, r15
    2010:	63 e0       	ldi	r22, 0x03	; 3
    2012:	8d 2f       	mov	r24, r29
    2014:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table7) ;
    2018:	0c ee       	ldi	r16, 0xEC	; 236
    201a:	10 e0       	ldi	r17, 0x00	; 0
    201c:	2f 2d       	mov	r18, r15
    201e:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2022:	63 e0       	ldi	r22, 0x03	; 3
    2024:	8d 2f       	mov	r24, r29
    2026:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table7) ;
    202a:	b8 01       	movw	r22, r16
    202c:	8f 2d       	mov	r24, r15
    202e:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    2032:	d8 16       	cp	r13, r24
    2034:	10 f0       	brcs	.+4      	; 0x203a <Tactics+0x9ae>
    2036:	0c 94 95 1b 	jmp	0x372a	; 0x372a <Tactics+0x209e>
				{
					max = checkers ;
					myLine = line ;
    203a:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    203e:	93 e0       	ldi	r25, 0x03	; 3
    2040:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table7) ;
				TurnOtherCheckers(line,column,enemy,mine,table7) ;
				checkers = scanCopyChessBoard(mine,table7) ;
				if (max < checkers)
				{
					max = checkers ;
    2044:	d8 2e       	mov	r13, r24
    2046:	0c 94 95 1b 	jmp	0x372a	; 0x372a <Tactics+0x209e>
					myColumn = column ;
				}
				break;
				
				case 8:
				setChecker(line,column,mine,table8) ;
    204a:	24 e9       	ldi	r18, 0x94	; 148
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	4f 2d       	mov	r20, r15
    2050:	63 e0       	ldi	r22, 0x03	; 3
    2052:	8d 2f       	mov	r24, r29
    2054:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table8) ;
    2058:	04 e9       	ldi	r16, 0x94	; 148
    205a:	10 e0       	ldi	r17, 0x00	; 0
    205c:	2f 2d       	mov	r18, r15
    205e:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2062:	63 e0       	ldi	r22, 0x03	; 3
    2064:	8d 2f       	mov	r24, r29
    2066:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table8) ;
    206a:	b8 01       	movw	r22, r16
    206c:	8f 2d       	mov	r24, r15
    206e:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    2072:	d8 16       	cp	r13, r24
    2074:	10 f0       	brcs	.+4      	; 0x207a <Tactics+0x9ee>
    2076:	0c 94 99 1b 	jmp	0x3732	; 0x3732 <Tactics+0x20a6>
				{
					max = checkers ;
					myLine = line ;
    207a:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    207e:	93 e0       	ldi	r25, 0x03	; 3
    2080:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table8) ;
				TurnOtherCheckers(line,column,enemy,mine,table8) ;
				checkers = scanCopyChessBoard(mine,table8) ;
				if (max < checkers)
				{
					max = checkers ;
    2084:	d8 2e       	mov	r13, r24
    2086:	0c 94 99 1b 	jmp	0x3732	; 0x3732 <Tactics+0x20a6>
					myColumn = column ;
				}
				break;
				
				case 9:
				setChecker(line,column,mine,table9) ;
    208a:	24 e3       	ldi	r18, 0x34	; 52
    208c:	31 e0       	ldi	r19, 0x01	; 1
    208e:	4f 2d       	mov	r20, r15
    2090:	63 e0       	ldi	r22, 0x03	; 3
    2092:	8d 2f       	mov	r24, r29
    2094:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
    2098:	04 e3       	ldi	r16, 0x34	; 52
    209a:	11 e0       	ldi	r17, 0x01	; 1
    209c:	2f 2d       	mov	r18, r15
    209e:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    20a2:	63 e0       	ldi	r22, 0x03	; 3
    20a4:	8d 2f       	mov	r24, r29
    20a6:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table9) ;
    20aa:	b8 01       	movw	r22, r16
    20ac:	8f 2d       	mov	r24, r15
    20ae:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    20b2:	d8 16       	cp	r13, r24
    20b4:	10 f0       	brcs	.+4      	; 0x20ba <Tactics+0xa2e>
    20b6:	0c 94 9d 1b 	jmp	0x373a	; 0x373a <Tactics+0x20ae>
				{
					max = checkers ;
					myLine = line ;
    20ba:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    20be:	93 e0       	ldi	r25, 0x03	; 3
    20c0:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table9) ;
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
				checkers = scanCopyChessBoard(mine,table9) ;
				if (max < checkers)
				{
					max = checkers ;
    20c4:	d8 2e       	mov	r13, r24
    20c6:	0c 94 9d 1b 	jmp	0x373a	; 0x373a <Tactics+0x20ae>
					myColumn = column ;
				}
				break;
				
				case 10:
				setChecker(line,column,mine,table10) ;
    20ca:	2c e7       	ldi	r18, 0x7C	; 124
    20cc:	31 e0       	ldi	r19, 0x01	; 1
    20ce:	4f 2d       	mov	r20, r15
    20d0:	63 e0       	ldi	r22, 0x03	; 3
    20d2:	8d 2f       	mov	r24, r29
    20d4:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table10) ;
    20d8:	0c e7       	ldi	r16, 0x7C	; 124
    20da:	11 e0       	ldi	r17, 0x01	; 1
    20dc:	2f 2d       	mov	r18, r15
    20de:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    20e2:	63 e0       	ldi	r22, 0x03	; 3
    20e4:	8d 2f       	mov	r24, r29
    20e6:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table10) ;
    20ea:	b8 01       	movw	r22, r16
    20ec:	8f 2d       	mov	r24, r15
    20ee:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    20f2:	d8 16       	cp	r13, r24
    20f4:	10 f0       	brcs	.+4      	; 0x20fa <Tactics+0xa6e>
    20f6:	0c 94 a1 1b 	jmp	0x3742	; 0x3742 <Tactics+0x20b6>
				{
					max = checkers ;
					myLine = line ;
    20fa:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    20fe:	93 e0       	ldi	r25, 0x03	; 3
    2100:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table10) ;
				TurnOtherCheckers(line,column,enemy,mine,table10) ;
				checkers = scanCopyChessBoard(mine,table10) ;
				if (max < checkers)
				{
					max = checkers ;
    2104:	d8 2e       	mov	r13, r24
    2106:	0c 94 a1 1b 	jmp	0x3742	; 0x3742 <Tactics+0x20b6>
					myColumn = column ;
				}
				break;
				
				case 11:
				setChecker(line,column,mine,table11) ;
    210a:	24 e2       	ldi	r18, 0x24	; 36
    210c:	31 e0       	ldi	r19, 0x01	; 1
    210e:	4f 2d       	mov	r20, r15
    2110:	63 e0       	ldi	r22, 0x03	; 3
    2112:	8d 2f       	mov	r24, r29
    2114:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table11) ;
    2118:	04 e2       	ldi	r16, 0x24	; 36
    211a:	11 e0       	ldi	r17, 0x01	; 1
    211c:	2f 2d       	mov	r18, r15
    211e:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2122:	63 e0       	ldi	r22, 0x03	; 3
    2124:	8d 2f       	mov	r24, r29
    2126:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table11) ;
    212a:	b8 01       	movw	r22, r16
    212c:	8f 2d       	mov	r24, r15
    212e:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    2132:	d8 16       	cp	r13, r24
    2134:	10 f0       	brcs	.+4      	; 0x213a <Tactics+0xaae>
    2136:	0c 94 a5 1b 	jmp	0x374a	; 0x374a <Tactics+0x20be>
				{
					max = checkers ;
					myLine = line ;
    213a:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    213e:	93 e0       	ldi	r25, 0x03	; 3
    2140:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table11) ;
				TurnOtherCheckers(line,column,enemy,mine,table11) ;
				checkers = scanCopyChessBoard(mine,table11) ;
				if (max < checkers)
				{
					max = checkers ;
    2144:	d8 2e       	mov	r13, r24
    2146:	0c 94 a5 1b 	jmp	0x374a	; 0x374a <Tactics+0x20be>
					myColumn = column ;
				}
				break;
				
				case 12:
				setChecker(line,column,mine,table12) ;
    214a:	2c ea       	ldi	r18, 0xAC	; 172
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	4f 2d       	mov	r20, r15
    2150:	63 e0       	ldi	r22, 0x03	; 3
    2152:	8d 2f       	mov	r24, r29
    2154:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table12) ;
    2158:	0c ea       	ldi	r16, 0xAC	; 172
    215a:	10 e0       	ldi	r17, 0x00	; 0
    215c:	2f 2d       	mov	r18, r15
    215e:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2162:	63 e0       	ldi	r22, 0x03	; 3
    2164:	8d 2f       	mov	r24, r29
    2166:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table12) ;
    216a:	b8 01       	movw	r22, r16
    216c:	8f 2d       	mov	r24, r15
    216e:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    2172:	d8 16       	cp	r13, r24
    2174:	10 f0       	brcs	.+4      	; 0x217a <Tactics+0xaee>
    2176:	0c 94 71 1b 	jmp	0x36e2	; 0x36e2 <Tactics+0x2056>
				{
					max = checkers ;
					myLine = line ;
    217a:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    217e:	93 e0       	ldi	r25, 0x03	; 3
    2180:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table12) ;
				TurnOtherCheckers(line,column,enemy,mine,table12) ;
				checkers = scanCopyChessBoard(mine,table12) ;
				if (max < checkers)
				{
					max = checkers ;
    2184:	d8 2e       	mov	r13, r24
    2186:	0c 94 71 1b 	jmp	0x36e2	; 0x36e2 <Tactics+0x2056>
					myColumn = column ;
				}
				break;
				
				case 13:
				setChecker(line,column,mine,table13) ;
    218a:	2c ec       	ldi	r18, 0xCC	; 204
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	4f 2d       	mov	r20, r15
    2190:	63 e0       	ldi	r22, 0x03	; 3
    2192:	8d 2f       	mov	r24, r29
    2194:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table13) ;
    2198:	0c ec       	ldi	r16, 0xCC	; 204
    219a:	10 e0       	ldi	r17, 0x00	; 0
    219c:	2f 2d       	mov	r18, r15
    219e:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    21a2:	63 e0       	ldi	r22, 0x03	; 3
    21a4:	8d 2f       	mov	r24, r29
    21a6:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table13) ;
    21aa:	b8 01       	movw	r22, r16
    21ac:	8f 2d       	mov	r24, r15
    21ae:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    21b2:	d8 16       	cp	r13, r24
    21b4:	10 f0       	brcs	.+4      	; 0x21ba <Tactics+0xb2e>
    21b6:	0c 94 75 1b 	jmp	0x36ea	; 0x36ea <Tactics+0x205e>
				{
					max = checkers ;
					myLine = line ;
    21ba:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    21be:	93 e0       	ldi	r25, 0x03	; 3
    21c0:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table13) ;
				TurnOtherCheckers(line,column,enemy,mine,table13) ;
				checkers = scanCopyChessBoard(mine,table13) ;
				if (max < checkers)
				{
					max = checkers ;
    21c4:	d8 2e       	mov	r13, r24
    21c6:	0c 94 75 1b 	jmp	0x36ea	; 0x36ea <Tactics+0x205e>
					myColumn = column ;
				}
				break;
				
				case 14:
				setChecker(line,column,mine,table14) ;
    21ca:	24 e1       	ldi	r18, 0x14	; 20
    21cc:	31 e0       	ldi	r19, 0x01	; 1
    21ce:	4f 2d       	mov	r20, r15
    21d0:	63 e0       	ldi	r22, 0x03	; 3
    21d2:	8d 2f       	mov	r24, r29
    21d4:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table14) ;
    21d8:	04 e1       	ldi	r16, 0x14	; 20
    21da:	11 e0       	ldi	r17, 0x01	; 1
    21dc:	2f 2d       	mov	r18, r15
    21de:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    21e2:	63 e0       	ldi	r22, 0x03	; 3
    21e4:	8d 2f       	mov	r24, r29
    21e6:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table14) ;
    21ea:	b8 01       	movw	r22, r16
    21ec:	8f 2d       	mov	r24, r15
    21ee:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    21f2:	d8 16       	cp	r13, r24
    21f4:	10 f0       	brcs	.+4      	; 0x21fa <Tactics+0xb6e>
    21f6:	0c 94 79 1b 	jmp	0x36f2	; 0x36f2 <Tactics+0x2066>
				{
					max = checkers ;
					myLine = line ;
    21fa:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    21fe:	93 e0       	ldi	r25, 0x03	; 3
    2200:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table14) ;
				TurnOtherCheckers(line,column,enemy,mine,table14) ;
				checkers = scanCopyChessBoard(mine,table14) ;
				if (max < checkers)
				{
					max = checkers ;
    2204:	d8 2e       	mov	r13, r24
    2206:	0c 94 79 1b 	jmp	0x36f2	; 0x36f2 <Tactics+0x2066>
		temp = (temp >> 2) ;
		if (temp == 1)
		{
			
			column = 3 ;
			count++ ;
    220a:	0f 2e       	mov	r0, r31
    220c:	ff e0       	ldi	r31, 0x0F	; 15
    220e:	ef 2e       	mov	r14, r31
    2210:	f0 2d       	mov	r31, r0
    2212:	04 c0       	rjmp	.+8      	; 0x221c <Tactics+0xb90>
    2214:	0f 2e       	mov	r0, r31
    2216:	ff e0       	ldi	r31, 0x0F	; 15
    2218:	ef 2e       	mov	r14, r31
    221a:	f0 2d       	mov	r31, r0
				}
				break;
				
				
				default:
				setChecker(line,column,mine,table9) ;
    221c:	24 e3       	ldi	r18, 0x34	; 52
    221e:	31 e0       	ldi	r19, 0x01	; 1
    2220:	4f 2d       	mov	r20, r15
    2222:	63 e0       	ldi	r22, 0x03	; 3
    2224:	8d 2f       	mov	r24, r29
    2226:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
    222a:	04 e3       	ldi	r16, 0x34	; 52
    222c:	11 e0       	ldi	r17, 0x01	; 1
    222e:	2f 2d       	mov	r18, r15
    2230:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2234:	63 e0       	ldi	r22, 0x03	; 3
    2236:	8d 2f       	mov	r24, r29
    2238:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table9) ;
    223c:	b8 01       	movw	r22, r16
    223e:	8f 2d       	mov	r24, r15
    2240:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    2244:	d8 16       	cp	r13, r24
    2246:	30 f4       	brcc	.+12     	; 0x2254 <Tactics+0xbc8>
				{
					max = checkers ;
					myLine = line ;
    2248:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    224c:	93 e0       	ldi	r25, 0x03	; 3
    224e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table9) ;
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
				checkers = scanCopyChessBoard(mine,table9) ;
				if (max < checkers)
				{
					max = checkers ;
    2252:	d8 2e       	mov	r13, r24
		}
		
		/* Fourth valid move in this line */
		temp = buffer & 0b00001000 ;
		temp = (temp >> 3) ;
		if (temp == 1)
    2254:	c3 ff       	sbrs	r28, 3
    2256:	f2 c1       	rjmp	.+996    	; 0x263c <Tactics+0xfb0>
		{
			column = 4 ;
			count++ ;
    2258:	e3 94       	inc	r14
			switch(count)
    225a:	8e 2d       	mov	r24, r14
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	fc 01       	movw	r30, r24
    2260:	31 97       	sbiw	r30, 0x01	; 1
    2262:	ee 30       	cpi	r30, 0x0E	; 14
    2264:	f1 05       	cpc	r31, r1
    2266:	08 f0       	brcs	.+2      	; 0x226a <Tactics+0xbde>
    2268:	cd c1       	rjmp	.+922    	; 0x2604 <Tactics+0xf78>
    226a:	ea 59       	subi	r30, 0x9A	; 154
    226c:	ff 4f       	sbci	r31, 0xFF	; 255
    226e:	0c 94 78 21 	jmp	0x42f0	; 0x42f0 <__tablejump2__>
			{
				case 1:
				setChecker(line,column,mine,table1) ;
    2272:	2c ed       	ldi	r18, 0xDC	; 220
    2274:	30 e0       	ldi	r19, 0x00	; 0
    2276:	4f 2d       	mov	r20, r15
    2278:	64 e0       	ldi	r22, 0x04	; 4
    227a:	8d 2f       	mov	r24, r29
    227c:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table1) ;
    2280:	0c ed       	ldi	r16, 0xDC	; 220
    2282:	10 e0       	ldi	r17, 0x00	; 0
    2284:	2f 2d       	mov	r18, r15
    2286:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    228a:	64 e0       	ldi	r22, 0x04	; 4
    228c:	8d 2f       	mov	r24, r29
    228e:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table1) ;
    2292:	b8 01       	movw	r22, r16
    2294:	8f 2d       	mov	r24, r15
    2296:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    229a:	d8 16       	cp	r13, r24
    229c:	10 f0       	brcs	.+4      	; 0x22a2 <Tactics+0xc16>
    229e:	0c 94 b5 1b 	jmp	0x376a	; 0x376a <Tactics+0x20de>
				{
					max = checkers ;
					myLine = line ;
    22a2:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    22a6:	94 e0       	ldi	r25, 0x04	; 4
    22a8:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table1) ;
				TurnOtherCheckers(line,column,enemy,mine,table1) ;
				checkers = scanCopyChessBoard(mine,table1) ;
				if (max < checkers)
				{
					max = checkers ;
    22ac:	d8 2e       	mov	r13, r24
    22ae:	0c 94 b5 1b 	jmp	0x376a	; 0x376a <Tactics+0x20de>
					myColumn = column ;
				}
				break;
				
				case 2:
				setChecker(line,column,mine,table2) ;
    22b2:	2c e6       	ldi	r18, 0x6C	; 108
    22b4:	31 e0       	ldi	r19, 0x01	; 1
    22b6:	4f 2d       	mov	r20, r15
    22b8:	64 e0       	ldi	r22, 0x04	; 4
    22ba:	8d 2f       	mov	r24, r29
    22bc:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table2) ;
    22c0:	0c e6       	ldi	r16, 0x6C	; 108
    22c2:	11 e0       	ldi	r17, 0x01	; 1
    22c4:	2f 2d       	mov	r18, r15
    22c6:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    22ca:	64 e0       	ldi	r22, 0x04	; 4
    22cc:	8d 2f       	mov	r24, r29
    22ce:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table2) ;
    22d2:	b8 01       	movw	r22, r16
    22d4:	8f 2d       	mov	r24, r15
    22d6:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    22da:	d8 16       	cp	r13, r24
    22dc:	10 f0       	brcs	.+4      	; 0x22e2 <Tactics+0xc56>
    22de:	0c 94 b9 1b 	jmp	0x3772	; 0x3772 <Tactics+0x20e6>
				{
					max = checkers ;
					myLine = line ;
    22e2:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    22e6:	94 e0       	ldi	r25, 0x04	; 4
    22e8:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table2) ;
				TurnOtherCheckers(line,column,enemy,mine,table2) ;
				checkers = scanCopyChessBoard(mine,table2) ;
				if (max < checkers)
				{
					max = checkers ;
    22ec:	d8 2e       	mov	r13, r24
    22ee:	0c 94 b9 1b 	jmp	0x3772	; 0x3772 <Tactics+0x20e6>
					myColumn = column ;
				}
				break;
				
				case 3:
				setChecker(line,column,mine,table3) ;
    22f2:	2c e6       	ldi	r18, 0x6C	; 108
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	4f 2d       	mov	r20, r15
    22f8:	64 e0       	ldi	r22, 0x04	; 4
    22fa:	8d 2f       	mov	r24, r29
    22fc:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table3) ;
    2300:	0c e6       	ldi	r16, 0x6C	; 108
    2302:	10 e0       	ldi	r17, 0x00	; 0
    2304:	2f 2d       	mov	r18, r15
    2306:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    230a:	64 e0       	ldi	r22, 0x04	; 4
    230c:	8d 2f       	mov	r24, r29
    230e:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table3) ;
    2312:	b8 01       	movw	r22, r16
    2314:	8f 2d       	mov	r24, r15
    2316:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    231a:	d8 16       	cp	r13, r24
    231c:	10 f0       	brcs	.+4      	; 0x2322 <Tactics+0xc96>
    231e:	0c 94 bd 1b 	jmp	0x377a	; 0x377a <Tactics+0x20ee>
				{
					max = checkers ;
					myLine = line ;
    2322:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    2326:	94 e0       	ldi	r25, 0x04	; 4
    2328:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table3) ;
				TurnOtherCheckers(line,column,enemy,mine,table3) ;
				checkers = scanCopyChessBoard(mine,table3) ;
				if (max < checkers)
				{
					max = checkers ;
    232c:	d8 2e       	mov	r13, r24
    232e:	0c 94 bd 1b 	jmp	0x377a	; 0x377a <Tactics+0x20ee>
					myColumn = column ;
				}
				break;
				
				case 4:
				setChecker(line,column,mine,table4) ;
    2332:	24 e4       	ldi	r18, 0x44	; 68
    2334:	31 e0       	ldi	r19, 0x01	; 1
    2336:	4f 2d       	mov	r20, r15
    2338:	64 e0       	ldi	r22, 0x04	; 4
    233a:	8d 2f       	mov	r24, r29
    233c:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table4) ;
    2340:	04 e4       	ldi	r16, 0x44	; 68
    2342:	11 e0       	ldi	r17, 0x01	; 1
    2344:	2f 2d       	mov	r18, r15
    2346:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    234a:	64 e0       	ldi	r22, 0x04	; 4
    234c:	8d 2f       	mov	r24, r29
    234e:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table4) ;
    2352:	b8 01       	movw	r22, r16
    2354:	8f 2d       	mov	r24, r15
    2356:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    235a:	d8 16       	cp	r13, r24
    235c:	10 f0       	brcs	.+4      	; 0x2362 <Tactics+0xcd6>
    235e:	0c 94 c1 1b 	jmp	0x3782	; 0x3782 <Tactics+0x20f6>
				{
					max = checkers ;
					myLine = line ;
    2362:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    2366:	94 e0       	ldi	r25, 0x04	; 4
    2368:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table4) ;
				TurnOtherCheckers(line,column,enemy,mine,table4) ;
				checkers = scanCopyChessBoard(mine,table4) ;
				if (max < checkers)
				{
					max = checkers ;
    236c:	d8 2e       	mov	r13, r24
    236e:	0c 94 c1 1b 	jmp	0x3782	; 0x3782 <Tactics+0x20f6>
					myColumn = column ;
				}
				break;
				
				case 5:
				setChecker(line,column,mine,table5) ;
    2372:	24 e5       	ldi	r18, 0x54	; 84
    2374:	31 e0       	ldi	r19, 0x01	; 1
    2376:	4f 2d       	mov	r20, r15
    2378:	64 e0       	ldi	r22, 0x04	; 4
    237a:	8d 2f       	mov	r24, r29
    237c:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table5) ;
    2380:	04 e5       	ldi	r16, 0x54	; 84
    2382:	11 e0       	ldi	r17, 0x01	; 1
    2384:	2f 2d       	mov	r18, r15
    2386:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    238a:	64 e0       	ldi	r22, 0x04	; 4
    238c:	8d 2f       	mov	r24, r29
    238e:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table5) ;
    2392:	b8 01       	movw	r22, r16
    2394:	8f 2d       	mov	r24, r15
    2396:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    239a:	d8 16       	cp	r13, r24
    239c:	10 f0       	brcs	.+4      	; 0x23a2 <Tactics+0xd16>
    239e:	0c 94 c5 1b 	jmp	0x378a	; 0x378a <Tactics+0x20fe>
				{
					max = checkers ;
					myLine = line ;
    23a2:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    23a6:	94 e0       	ldi	r25, 0x04	; 4
    23a8:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table5) ;
				TurnOtherCheckers(line,column,enemy,mine,table5) ;
				checkers = scanCopyChessBoard(mine,table5) ;
				if (max < checkers)
				{
					max = checkers ;
    23ac:	d8 2e       	mov	r13, r24
    23ae:	0c 94 c5 1b 	jmp	0x378a	; 0x378a <Tactics+0x20fe>
					myColumn = column ;
				}
				break;
				
				case 6:
				setChecker(line,column,mine,table6) ;
    23b2:	24 e8       	ldi	r18, 0x84	; 132
    23b4:	30 e0       	ldi	r19, 0x00	; 0
    23b6:	4f 2d       	mov	r20, r15
    23b8:	64 e0       	ldi	r22, 0x04	; 4
    23ba:	8d 2f       	mov	r24, r29
    23bc:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table6) ;
    23c0:	04 e8       	ldi	r16, 0x84	; 132
    23c2:	10 e0       	ldi	r17, 0x00	; 0
    23c4:	2f 2d       	mov	r18, r15
    23c6:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    23ca:	64 e0       	ldi	r22, 0x04	; 4
    23cc:	8d 2f       	mov	r24, r29
    23ce:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table6) ;
    23d2:	b8 01       	movw	r22, r16
    23d4:	8f 2d       	mov	r24, r15
    23d6:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    23da:	d8 16       	cp	r13, r24
    23dc:	10 f0       	brcs	.+4      	; 0x23e2 <Tactics+0xd56>
    23de:	0c 94 c8 1b 	jmp	0x3790	; 0x3790 <Tactics+0x2104>
				{
					max = checkers ;
					myLine = line ;
    23e2:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    23e6:	94 e0       	ldi	r25, 0x04	; 4
    23e8:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table6) ;
				TurnOtherCheckers(line,column,enemy,mine,table6) ;
				checkers = scanCopyChessBoard(mine,table6) ;
				if (max < checkers)
				{
					max = checkers ;
    23ec:	d8 2e       	mov	r13, r24
    23ee:	0c 94 c8 1b 	jmp	0x3790	; 0x3790 <Tactics+0x2104>
					myColumn = column ;
				}
				break;
				
				case 7:
				setChecker(line,column,mine,table7) ;
    23f2:	2c ee       	ldi	r18, 0xEC	; 236
    23f4:	30 e0       	ldi	r19, 0x00	; 0
    23f6:	4f 2d       	mov	r20, r15
    23f8:	64 e0       	ldi	r22, 0x04	; 4
    23fa:	8d 2f       	mov	r24, r29
    23fc:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table7) ;
    2400:	0c ee       	ldi	r16, 0xEC	; 236
    2402:	10 e0       	ldi	r17, 0x00	; 0
    2404:	2f 2d       	mov	r18, r15
    2406:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    240a:	64 e0       	ldi	r22, 0x04	; 4
    240c:	8d 2f       	mov	r24, r29
    240e:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table7) ;
    2412:	b8 01       	movw	r22, r16
    2414:	8f 2d       	mov	r24, r15
    2416:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    241a:	d8 16       	cp	r13, r24
    241c:	10 f0       	brcs	.+4      	; 0x2422 <Tactics+0xd96>
    241e:	0c 94 cb 1b 	jmp	0x3796	; 0x3796 <Tactics+0x210a>
				{
					max = checkers ;
					myLine = line ;
    2422:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    2426:	94 e0       	ldi	r25, 0x04	; 4
    2428:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table7) ;
				TurnOtherCheckers(line,column,enemy,mine,table7) ;
				checkers = scanCopyChessBoard(mine,table7) ;
				if (max < checkers)
				{
					max = checkers ;
    242c:	d8 2e       	mov	r13, r24
    242e:	0c 94 cb 1b 	jmp	0x3796	; 0x3796 <Tactics+0x210a>
					myColumn = column ;
				}
				break;
				
				case 8:
				setChecker(line,column,mine,table8) ;
    2432:	24 e9       	ldi	r18, 0x94	; 148
    2434:	30 e0       	ldi	r19, 0x00	; 0
    2436:	4f 2d       	mov	r20, r15
    2438:	64 e0       	ldi	r22, 0x04	; 4
    243a:	8d 2f       	mov	r24, r29
    243c:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table8) ;
    2440:	04 e9       	ldi	r16, 0x94	; 148
    2442:	10 e0       	ldi	r17, 0x00	; 0
    2444:	2f 2d       	mov	r18, r15
    2446:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    244a:	64 e0       	ldi	r22, 0x04	; 4
    244c:	8d 2f       	mov	r24, r29
    244e:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table8) ;
    2452:	b8 01       	movw	r22, r16
    2454:	8f 2d       	mov	r24, r15
    2456:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    245a:	d8 16       	cp	r13, r24
    245c:	10 f0       	brcs	.+4      	; 0x2462 <Tactics+0xdd6>
    245e:	0c 94 ce 1b 	jmp	0x379c	; 0x379c <Tactics+0x2110>
				{
					max = checkers ;
					myLine = line ;
    2462:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    2466:	94 e0       	ldi	r25, 0x04	; 4
    2468:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table8) ;
				TurnOtherCheckers(line,column,enemy,mine,table8) ;
				checkers = scanCopyChessBoard(mine,table8) ;
				if (max < checkers)
				{
					max = checkers ;
    246c:	d8 2e       	mov	r13, r24
    246e:	0c 94 ce 1b 	jmp	0x379c	; 0x379c <Tactics+0x2110>
					myColumn = column ;
				}
				break;
				
				case 9:
				setChecker(line,column,mine,table9) ;
    2472:	24 e3       	ldi	r18, 0x34	; 52
    2474:	31 e0       	ldi	r19, 0x01	; 1
    2476:	4f 2d       	mov	r20, r15
    2478:	64 e0       	ldi	r22, 0x04	; 4
    247a:	8d 2f       	mov	r24, r29
    247c:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
    2480:	04 e3       	ldi	r16, 0x34	; 52
    2482:	11 e0       	ldi	r17, 0x01	; 1
    2484:	2f 2d       	mov	r18, r15
    2486:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    248a:	64 e0       	ldi	r22, 0x04	; 4
    248c:	8d 2f       	mov	r24, r29
    248e:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table9) ;
    2492:	b8 01       	movw	r22, r16
    2494:	8f 2d       	mov	r24, r15
    2496:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    249a:	d8 16       	cp	r13, r24
    249c:	10 f0       	brcs	.+4      	; 0x24a2 <Tactics+0xe16>
    249e:	0c 94 d1 1b 	jmp	0x37a2	; 0x37a2 <Tactics+0x2116>
				{
					max = checkers ;
					myLine = line ;
    24a2:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    24a6:	94 e0       	ldi	r25, 0x04	; 4
    24a8:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table9) ;
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
				checkers = scanCopyChessBoard(mine,table9) ;
				if (max < checkers)
				{
					max = checkers ;
    24ac:	d8 2e       	mov	r13, r24
    24ae:	0c 94 d1 1b 	jmp	0x37a2	; 0x37a2 <Tactics+0x2116>
					myColumn = column ;
				}
				break;
				
				case 10:
				setChecker(line,column,mine,table10) ;
    24b2:	2c e7       	ldi	r18, 0x7C	; 124
    24b4:	31 e0       	ldi	r19, 0x01	; 1
    24b6:	4f 2d       	mov	r20, r15
    24b8:	64 e0       	ldi	r22, 0x04	; 4
    24ba:	8d 2f       	mov	r24, r29
    24bc:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table10) ;
    24c0:	0c e7       	ldi	r16, 0x7C	; 124
    24c2:	11 e0       	ldi	r17, 0x01	; 1
    24c4:	2f 2d       	mov	r18, r15
    24c6:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    24ca:	64 e0       	ldi	r22, 0x04	; 4
    24cc:	8d 2f       	mov	r24, r29
    24ce:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table10) ;
    24d2:	b8 01       	movw	r22, r16
    24d4:	8f 2d       	mov	r24, r15
    24d6:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    24da:	d8 16       	cp	r13, r24
    24dc:	10 f0       	brcs	.+4      	; 0x24e2 <Tactics+0xe56>
    24de:	0c 94 d4 1b 	jmp	0x37a8	; 0x37a8 <Tactics+0x211c>
				{
					max = checkers ;
					myLine = line ;
    24e2:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    24e6:	94 e0       	ldi	r25, 0x04	; 4
    24e8:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table10) ;
				TurnOtherCheckers(line,column,enemy,mine,table10) ;
				checkers = scanCopyChessBoard(mine,table10) ;
				if (max < checkers)
				{
					max = checkers ;
    24ec:	d8 2e       	mov	r13, r24
    24ee:	0c 94 d4 1b 	jmp	0x37a8	; 0x37a8 <Tactics+0x211c>
					myColumn = column ;
				}
				break;
				
				case 11:
				setChecker(line,column,mine,table11) ;
    24f2:	24 e2       	ldi	r18, 0x24	; 36
    24f4:	31 e0       	ldi	r19, 0x01	; 1
    24f6:	4f 2d       	mov	r20, r15
    24f8:	64 e0       	ldi	r22, 0x04	; 4
    24fa:	8d 2f       	mov	r24, r29
    24fc:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table11) ;
    2500:	04 e2       	ldi	r16, 0x24	; 36
    2502:	11 e0       	ldi	r17, 0x01	; 1
    2504:	2f 2d       	mov	r18, r15
    2506:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    250a:	64 e0       	ldi	r22, 0x04	; 4
    250c:	8d 2f       	mov	r24, r29
    250e:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table11) ;
    2512:	b8 01       	movw	r22, r16
    2514:	8f 2d       	mov	r24, r15
    2516:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    251a:	d8 16       	cp	r13, r24
    251c:	10 f0       	brcs	.+4      	; 0x2522 <Tactics+0xe96>
    251e:	0c 94 a9 1b 	jmp	0x3752	; 0x3752 <Tactics+0x20c6>
				{
					max = checkers ;
					myLine = line ;
    2522:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    2526:	94 e0       	ldi	r25, 0x04	; 4
    2528:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table11) ;
				TurnOtherCheckers(line,column,enemy,mine,table11) ;
				checkers = scanCopyChessBoard(mine,table11) ;
				if (max < checkers)
				{
					max = checkers ;
    252c:	d8 2e       	mov	r13, r24
    252e:	0c 94 a9 1b 	jmp	0x3752	; 0x3752 <Tactics+0x20c6>
					myColumn = column ;
				}
				break;
				
				case 12:
				setChecker(line,column,mine,table12) ;
    2532:	2c ea       	ldi	r18, 0xAC	; 172
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	4f 2d       	mov	r20, r15
    2538:	64 e0       	ldi	r22, 0x04	; 4
    253a:	8d 2f       	mov	r24, r29
    253c:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table12) ;
    2540:	0c ea       	ldi	r16, 0xAC	; 172
    2542:	10 e0       	ldi	r17, 0x00	; 0
    2544:	2f 2d       	mov	r18, r15
    2546:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    254a:	64 e0       	ldi	r22, 0x04	; 4
    254c:	8d 2f       	mov	r24, r29
    254e:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table12) ;
    2552:	b8 01       	movw	r22, r16
    2554:	8f 2d       	mov	r24, r15
    2556:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    255a:	d8 16       	cp	r13, r24
    255c:	10 f0       	brcs	.+4      	; 0x2562 <Tactics+0xed6>
    255e:	0c 94 ac 1b 	jmp	0x3758	; 0x3758 <Tactics+0x20cc>
				{
					max = checkers ;
					myLine = line ;
    2562:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    2566:	94 e0       	ldi	r25, 0x04	; 4
    2568:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table12) ;
				TurnOtherCheckers(line,column,enemy,mine,table12) ;
				checkers = scanCopyChessBoard(mine,table12) ;
				if (max < checkers)
				{
					max = checkers ;
    256c:	d8 2e       	mov	r13, r24
    256e:	0c 94 ac 1b 	jmp	0x3758	; 0x3758 <Tactics+0x20cc>
					myColumn = column ;
				}
				break;
				
				case 13:
				setChecker(line,column,mine,table13) ;
    2572:	2c ec       	ldi	r18, 0xCC	; 204
    2574:	30 e0       	ldi	r19, 0x00	; 0
    2576:	4f 2d       	mov	r20, r15
    2578:	64 e0       	ldi	r22, 0x04	; 4
    257a:	8d 2f       	mov	r24, r29
    257c:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table13) ;
    2580:	0c ec       	ldi	r16, 0xCC	; 204
    2582:	10 e0       	ldi	r17, 0x00	; 0
    2584:	2f 2d       	mov	r18, r15
    2586:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    258a:	64 e0       	ldi	r22, 0x04	; 4
    258c:	8d 2f       	mov	r24, r29
    258e:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table13) ;
    2592:	b8 01       	movw	r22, r16
    2594:	8f 2d       	mov	r24, r15
    2596:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    259a:	d8 16       	cp	r13, r24
    259c:	10 f0       	brcs	.+4      	; 0x25a2 <Tactics+0xf16>
    259e:	0c 94 af 1b 	jmp	0x375e	; 0x375e <Tactics+0x20d2>
				{
					max = checkers ;
					myLine = line ;
    25a2:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    25a6:	94 e0       	ldi	r25, 0x04	; 4
    25a8:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table13) ;
				TurnOtherCheckers(line,column,enemy,mine,table13) ;
				checkers = scanCopyChessBoard(mine,table13) ;
				if (max < checkers)
				{
					max = checkers ;
    25ac:	d8 2e       	mov	r13, r24
    25ae:	0c 94 af 1b 	jmp	0x375e	; 0x375e <Tactics+0x20d2>
					myColumn = column ;
				}
				break;
				
				case 14:
				setChecker(line,column,mine,table14) ;
    25b2:	24 e1       	ldi	r18, 0x14	; 20
    25b4:	31 e0       	ldi	r19, 0x01	; 1
    25b6:	4f 2d       	mov	r20, r15
    25b8:	64 e0       	ldi	r22, 0x04	; 4
    25ba:	8d 2f       	mov	r24, r29
    25bc:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table14) ;
    25c0:	04 e1       	ldi	r16, 0x14	; 20
    25c2:	11 e0       	ldi	r17, 0x01	; 1
    25c4:	2f 2d       	mov	r18, r15
    25c6:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    25ca:	64 e0       	ldi	r22, 0x04	; 4
    25cc:	8d 2f       	mov	r24, r29
    25ce:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table14) ;
    25d2:	b8 01       	movw	r22, r16
    25d4:	8f 2d       	mov	r24, r15
    25d6:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    25da:	d8 16       	cp	r13, r24
    25dc:	10 f0       	brcs	.+4      	; 0x25e2 <Tactics+0xf56>
    25de:	0c 94 b2 1b 	jmp	0x3764	; 0x3764 <Tactics+0x20d8>
				{
					max = checkers ;
					myLine = line ;
    25e2:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    25e6:	94 e0       	ldi	r25, 0x04	; 4
    25e8:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table14) ;
				TurnOtherCheckers(line,column,enemy,mine,table14) ;
				checkers = scanCopyChessBoard(mine,table14) ;
				if (max < checkers)
				{
					max = checkers ;
    25ec:	d8 2e       	mov	r13, r24
    25ee:	0c 94 b2 1b 	jmp	0x3764	; 0x3764 <Tactics+0x20d8>
		temp = buffer & 0b00001000 ;
		temp = (temp >> 3) ;
		if (temp == 1)
		{
			column = 4 ;
			count++ ;
    25f2:	0f 2e       	mov	r0, r31
    25f4:	ff e0       	ldi	r31, 0x0F	; 15
    25f6:	ef 2e       	mov	r14, r31
    25f8:	f0 2d       	mov	r31, r0
    25fa:	04 c0       	rjmp	.+8      	; 0x2604 <Tactics+0xf78>
    25fc:	0f 2e       	mov	r0, r31
    25fe:	ff e0       	ldi	r31, 0x0F	; 15
    2600:	ef 2e       	mov	r14, r31
    2602:	f0 2d       	mov	r31, r0
					myColumn = column ;
				}
				break;
			
				default:
				setChecker(line,column,mine,table9) ;
    2604:	24 e3       	ldi	r18, 0x34	; 52
    2606:	31 e0       	ldi	r19, 0x01	; 1
    2608:	4f 2d       	mov	r20, r15
    260a:	64 e0       	ldi	r22, 0x04	; 4
    260c:	8d 2f       	mov	r24, r29
    260e:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
    2612:	04 e3       	ldi	r16, 0x34	; 52
    2614:	11 e0       	ldi	r17, 0x01	; 1
    2616:	2f 2d       	mov	r18, r15
    2618:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    261c:	64 e0       	ldi	r22, 0x04	; 4
    261e:	8d 2f       	mov	r24, r29
    2620:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table9) ;
    2624:	b8 01       	movw	r22, r16
    2626:	8f 2d       	mov	r24, r15
    2628:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    262c:	d8 16       	cp	r13, r24
    262e:	30 f4       	brcc	.+12     	; 0x263c <Tactics+0xfb0>
				{
					max = checkers ;
					myLine = line ;
    2630:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    2634:	94 e0       	ldi	r25, 0x04	; 4
    2636:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table9) ;
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
				checkers = scanCopyChessBoard(mine,table9) ;
				if (max < checkers)
				{
					max = checkers ;
    263a:	d8 2e       	mov	r13, r24
		}
		
		/* Fifth valid move in this line */
		temp = buffer & 0b00010000 ;
		temp = (temp >> 4) ;
		if (temp == 1)
    263c:	c4 ff       	sbrs	r28, 4
    263e:	e2 c1       	rjmp	.+964    	; 0x2a04 <Tactics+0x1378>
		{
			column = 5 ;
			count++ ;
    2640:	e3 94       	inc	r14
			switch(count)
    2642:	8e 2d       	mov	r24, r14
    2644:	90 e0       	ldi	r25, 0x00	; 0
    2646:	fc 01       	movw	r30, r24
    2648:	31 97       	sbiw	r30, 0x01	; 1
    264a:	ee 30       	cpi	r30, 0x0E	; 14
    264c:	f1 05       	cpc	r31, r1
    264e:	08 f0       	brcs	.+2      	; 0x2652 <Tactics+0xfc6>
    2650:	bd c1       	rjmp	.+890    	; 0x29cc <Tactics+0x1340>
    2652:	ec 58       	subi	r30, 0x8C	; 140
    2654:	ff 4f       	sbci	r31, 0xFF	; 255
    2656:	0c 94 78 21 	jmp	0x42f0	; 0x42f0 <__tablejump2__>
			{
				case 1:
				setChecker(line,column,mine,table1) ;
    265a:	2c ed       	ldi	r18, 0xDC	; 220
    265c:	30 e0       	ldi	r19, 0x00	; 0
    265e:	4f 2d       	mov	r20, r15
    2660:	65 e0       	ldi	r22, 0x05	; 5
    2662:	8d 2f       	mov	r24, r29
    2664:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table1) ;
    2668:	0c ed       	ldi	r16, 0xDC	; 220
    266a:	10 e0       	ldi	r17, 0x00	; 0
    266c:	2f 2d       	mov	r18, r15
    266e:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2672:	65 e0       	ldi	r22, 0x05	; 5
    2674:	8d 2f       	mov	r24, r29
    2676:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table1) ;
    267a:	b8 01       	movw	r22, r16
    267c:	8f 2d       	mov	r24, r15
    267e:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    2682:	d8 16       	cp	r13, r24
    2684:	10 f0       	brcs	.+4      	; 0x268a <Tactics+0xffe>
    2686:	0c 94 e3 1b 	jmp	0x37c6	; 0x37c6 <Tactics+0x213a>
				{
					max = checkers ;
					myLine = line ;
    268a:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    268e:	95 e0       	ldi	r25, 0x05	; 5
    2690:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table1) ;
				TurnOtherCheckers(line,column,enemy,mine,table1) ;
				checkers = scanCopyChessBoard(mine,table1) ;
				if (max < checkers)
				{
					max = checkers ;
    2694:	d8 2e       	mov	r13, r24
    2696:	0c 94 e3 1b 	jmp	0x37c6	; 0x37c6 <Tactics+0x213a>
					myColumn = column ;
				}
				break;
				
				case 2:
				setChecker(line,column,mine,table2) ;
    269a:	2c e6       	ldi	r18, 0x6C	; 108
    269c:	31 e0       	ldi	r19, 0x01	; 1
    269e:	4f 2d       	mov	r20, r15
    26a0:	65 e0       	ldi	r22, 0x05	; 5
    26a2:	8d 2f       	mov	r24, r29
    26a4:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table2) ;
    26a8:	0c e6       	ldi	r16, 0x6C	; 108
    26aa:	11 e0       	ldi	r17, 0x01	; 1
    26ac:	2f 2d       	mov	r18, r15
    26ae:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    26b2:	65 e0       	ldi	r22, 0x05	; 5
    26b4:	8d 2f       	mov	r24, r29
    26b6:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table2) ;
    26ba:	b8 01       	movw	r22, r16
    26bc:	8f 2d       	mov	r24, r15
    26be:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    26c2:	d8 16       	cp	r13, r24
    26c4:	10 f0       	brcs	.+4      	; 0x26ca <Tactics+0x103e>
    26c6:	0c 94 e6 1b 	jmp	0x37cc	; 0x37cc <Tactics+0x2140>
				{
					max = checkers ;
					myLine = line ;
    26ca:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    26ce:	95 e0       	ldi	r25, 0x05	; 5
    26d0:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table2) ;
				TurnOtherCheckers(line,column,enemy,mine,table2) ;
				checkers = scanCopyChessBoard(mine,table2) ;
				if (max < checkers)
				{
					max = checkers ;
    26d4:	d8 2e       	mov	r13, r24
    26d6:	0c 94 e6 1b 	jmp	0x37cc	; 0x37cc <Tactics+0x2140>
					myColumn = column ;
				}
				break;
				
				case 3:
				setChecker(line,column,mine,table3) ;
    26da:	2c e6       	ldi	r18, 0x6C	; 108
    26dc:	30 e0       	ldi	r19, 0x00	; 0
    26de:	4f 2d       	mov	r20, r15
    26e0:	65 e0       	ldi	r22, 0x05	; 5
    26e2:	8d 2f       	mov	r24, r29
    26e4:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table3) ;
    26e8:	0c e6       	ldi	r16, 0x6C	; 108
    26ea:	10 e0       	ldi	r17, 0x00	; 0
    26ec:	2f 2d       	mov	r18, r15
    26ee:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    26f2:	65 e0       	ldi	r22, 0x05	; 5
    26f4:	8d 2f       	mov	r24, r29
    26f6:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table3) ;
    26fa:	b8 01       	movw	r22, r16
    26fc:	8f 2d       	mov	r24, r15
    26fe:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    2702:	d8 16       	cp	r13, r24
    2704:	10 f0       	brcs	.+4      	; 0x270a <Tactics+0x107e>
    2706:	0c 94 e9 1b 	jmp	0x37d2	; 0x37d2 <Tactics+0x2146>
				{
					max = checkers ;
					myLine = line ;
    270a:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    270e:	95 e0       	ldi	r25, 0x05	; 5
    2710:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table3) ;
				TurnOtherCheckers(line,column,enemy,mine,table3) ;
				checkers = scanCopyChessBoard(mine,table3) ;
				if (max < checkers)
				{
					max = checkers ;
    2714:	d8 2e       	mov	r13, r24
    2716:	0c 94 e9 1b 	jmp	0x37d2	; 0x37d2 <Tactics+0x2146>
					myColumn = column ;
				}
				break;
				
				case 4:
				setChecker(line,column,mine,table4) ;
    271a:	24 e4       	ldi	r18, 0x44	; 68
    271c:	31 e0       	ldi	r19, 0x01	; 1
    271e:	4f 2d       	mov	r20, r15
    2720:	65 e0       	ldi	r22, 0x05	; 5
    2722:	8d 2f       	mov	r24, r29
    2724:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table4) ;
    2728:	04 e4       	ldi	r16, 0x44	; 68
    272a:	11 e0       	ldi	r17, 0x01	; 1
    272c:	2f 2d       	mov	r18, r15
    272e:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2732:	65 e0       	ldi	r22, 0x05	; 5
    2734:	8d 2f       	mov	r24, r29
    2736:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table4) ;
    273a:	b8 01       	movw	r22, r16
    273c:	8f 2d       	mov	r24, r15
    273e:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    2742:	d8 16       	cp	r13, r24
    2744:	10 f0       	brcs	.+4      	; 0x274a <Tactics+0x10be>
    2746:	0c 94 ec 1b 	jmp	0x37d8	; 0x37d8 <Tactics+0x214c>
				{
					max = checkers ;
					myLine = line ;
    274a:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    274e:	95 e0       	ldi	r25, 0x05	; 5
    2750:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table4) ;
				TurnOtherCheckers(line,column,enemy,mine,table4) ;
				checkers = scanCopyChessBoard(mine,table4) ;
				if (max < checkers)
				{
					max = checkers ;
    2754:	d8 2e       	mov	r13, r24
    2756:	0c 94 ec 1b 	jmp	0x37d8	; 0x37d8 <Tactics+0x214c>
					myColumn = column ;
				}
				break;
				
				case 5:
				setChecker(line,column,mine,table5) ;
    275a:	24 e5       	ldi	r18, 0x54	; 84
    275c:	31 e0       	ldi	r19, 0x01	; 1
    275e:	4f 2d       	mov	r20, r15
    2760:	65 e0       	ldi	r22, 0x05	; 5
    2762:	8d 2f       	mov	r24, r29
    2764:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table5) ;
    2768:	04 e5       	ldi	r16, 0x54	; 84
    276a:	11 e0       	ldi	r17, 0x01	; 1
    276c:	2f 2d       	mov	r18, r15
    276e:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2772:	65 e0       	ldi	r22, 0x05	; 5
    2774:	8d 2f       	mov	r24, r29
    2776:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table5) ;
    277a:	b8 01       	movw	r22, r16
    277c:	8f 2d       	mov	r24, r15
    277e:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    2782:	d8 16       	cp	r13, r24
    2784:	10 f0       	brcs	.+4      	; 0x278a <Tactics+0x10fe>
    2786:	0c 94 ef 1b 	jmp	0x37de	; 0x37de <Tactics+0x2152>
				{
					max = checkers ;
					myLine = line ;
    278a:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    278e:	95 e0       	ldi	r25, 0x05	; 5
    2790:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table5) ;
				TurnOtherCheckers(line,column,enemy,mine,table5) ;
				checkers = scanCopyChessBoard(mine,table5) ;
				if (max < checkers)
				{
					max = checkers ;
    2794:	d8 2e       	mov	r13, r24
    2796:	0c 94 ef 1b 	jmp	0x37de	; 0x37de <Tactics+0x2152>
					myColumn = column ;
				}
				break;
				
				case 6:
				setChecker(line,column,mine,table6) ;
    279a:	24 e8       	ldi	r18, 0x84	; 132
    279c:	30 e0       	ldi	r19, 0x00	; 0
    279e:	4f 2d       	mov	r20, r15
    27a0:	65 e0       	ldi	r22, 0x05	; 5
    27a2:	8d 2f       	mov	r24, r29
    27a4:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table6) ;
    27a8:	04 e8       	ldi	r16, 0x84	; 132
    27aa:	10 e0       	ldi	r17, 0x00	; 0
    27ac:	2f 2d       	mov	r18, r15
    27ae:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    27b2:	65 e0       	ldi	r22, 0x05	; 5
    27b4:	8d 2f       	mov	r24, r29
    27b6:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table6) ;
    27ba:	b8 01       	movw	r22, r16
    27bc:	8f 2d       	mov	r24, r15
    27be:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    27c2:	d8 16       	cp	r13, r24
    27c4:	10 f0       	brcs	.+4      	; 0x27ca <Tactics+0x113e>
    27c6:	0c 94 f2 1b 	jmp	0x37e4	; 0x37e4 <Tactics+0x2158>
				{
					max = checkers ;
					myLine = line ;
    27ca:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    27ce:	95 e0       	ldi	r25, 0x05	; 5
    27d0:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table6) ;
				TurnOtherCheckers(line,column,enemy,mine,table6) ;
				checkers = scanCopyChessBoard(mine,table6) ;
				if (max < checkers)
				{
					max = checkers ;
    27d4:	d8 2e       	mov	r13, r24
    27d6:	0c 94 f2 1b 	jmp	0x37e4	; 0x37e4 <Tactics+0x2158>
					myColumn = column ;
				}
				break;
				
				case 7:
				setChecker(line,column,mine,table7) ;
    27da:	2c ee       	ldi	r18, 0xEC	; 236
    27dc:	30 e0       	ldi	r19, 0x00	; 0
    27de:	4f 2d       	mov	r20, r15
    27e0:	65 e0       	ldi	r22, 0x05	; 5
    27e2:	8d 2f       	mov	r24, r29
    27e4:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table7) ;
    27e8:	0c ee       	ldi	r16, 0xEC	; 236
    27ea:	10 e0       	ldi	r17, 0x00	; 0
    27ec:	2f 2d       	mov	r18, r15
    27ee:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    27f2:	65 e0       	ldi	r22, 0x05	; 5
    27f4:	8d 2f       	mov	r24, r29
    27f6:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table7) ;
    27fa:	b8 01       	movw	r22, r16
    27fc:	8f 2d       	mov	r24, r15
    27fe:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    2802:	d8 16       	cp	r13, r24
    2804:	08 f0       	brcs	.+2      	; 0x2808 <Tactics+0x117c>
    2806:	f1 c7       	rjmp	.+4066   	; 0x37ea <Tactics+0x215e>
				{
					max = checkers ;
					myLine = line ;
    2808:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    280c:	95 e0       	ldi	r25, 0x05	; 5
    280e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table7) ;
				TurnOtherCheckers(line,column,enemy,mine,table7) ;
				checkers = scanCopyChessBoard(mine,table7) ;
				if (max < checkers)
				{
					max = checkers ;
    2812:	d8 2e       	mov	r13, r24
    2814:	ea c7       	rjmp	.+4052   	; 0x37ea <Tactics+0x215e>
					myColumn = column ;
				}
				break;
				
				case 8:
				setChecker(line,column,mine,table8) ;
    2816:	24 e9       	ldi	r18, 0x94	; 148
    2818:	30 e0       	ldi	r19, 0x00	; 0
    281a:	4f 2d       	mov	r20, r15
    281c:	65 e0       	ldi	r22, 0x05	; 5
    281e:	8d 2f       	mov	r24, r29
    2820:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table8) ;
    2824:	04 e9       	ldi	r16, 0x94	; 148
    2826:	10 e0       	ldi	r17, 0x00	; 0
    2828:	2f 2d       	mov	r18, r15
    282a:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    282e:	65 e0       	ldi	r22, 0x05	; 5
    2830:	8d 2f       	mov	r24, r29
    2832:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table8) ;
    2836:	b8 01       	movw	r22, r16
    2838:	8f 2d       	mov	r24, r15
    283a:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    283e:	d8 16       	cp	r13, r24
    2840:	08 f0       	brcs	.+2      	; 0x2844 <Tactics+0x11b8>
    2842:	d6 c7       	rjmp	.+4012   	; 0x37f0 <Tactics+0x2164>
				{
					max = checkers ;
					myLine = line ;
    2844:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    2848:	95 e0       	ldi	r25, 0x05	; 5
    284a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table8) ;
				TurnOtherCheckers(line,column,enemy,mine,table8) ;
				checkers = scanCopyChessBoard(mine,table8) ;
				if (max < checkers)
				{
					max = checkers ;
    284e:	d8 2e       	mov	r13, r24
    2850:	cf c7       	rjmp	.+3998   	; 0x37f0 <Tactics+0x2164>
					myColumn = column ;
				}
				break;
				
				case 9:
				setChecker(line,column,mine,table9) ;
    2852:	24 e3       	ldi	r18, 0x34	; 52
    2854:	31 e0       	ldi	r19, 0x01	; 1
    2856:	4f 2d       	mov	r20, r15
    2858:	65 e0       	ldi	r22, 0x05	; 5
    285a:	8d 2f       	mov	r24, r29
    285c:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
    2860:	04 e3       	ldi	r16, 0x34	; 52
    2862:	11 e0       	ldi	r17, 0x01	; 1
    2864:	2f 2d       	mov	r18, r15
    2866:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    286a:	65 e0       	ldi	r22, 0x05	; 5
    286c:	8d 2f       	mov	r24, r29
    286e:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table9) ;
    2872:	b8 01       	movw	r22, r16
    2874:	8f 2d       	mov	r24, r15
    2876:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    287a:	d8 16       	cp	r13, r24
    287c:	08 f0       	brcs	.+2      	; 0x2880 <Tactics+0x11f4>
    287e:	bb c7       	rjmp	.+3958   	; 0x37f6 <Tactics+0x216a>
				{
					max = checkers ;
					myLine = line ;
    2880:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    2884:	95 e0       	ldi	r25, 0x05	; 5
    2886:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table9) ;
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
				checkers = scanCopyChessBoard(mine,table9) ;
				if (max < checkers)
				{
					max = checkers ;
    288a:	d8 2e       	mov	r13, r24
    288c:	b4 c7       	rjmp	.+3944   	; 0x37f6 <Tactics+0x216a>
					myColumn = column ;
				}
				break;
				
				case 10:
				setChecker(line,column,mine,table10) ;
    288e:	2c e7       	ldi	r18, 0x7C	; 124
    2890:	31 e0       	ldi	r19, 0x01	; 1
    2892:	4f 2d       	mov	r20, r15
    2894:	65 e0       	ldi	r22, 0x05	; 5
    2896:	8d 2f       	mov	r24, r29
    2898:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table10) ;
    289c:	0c e7       	ldi	r16, 0x7C	; 124
    289e:	11 e0       	ldi	r17, 0x01	; 1
    28a0:	2f 2d       	mov	r18, r15
    28a2:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    28a6:	65 e0       	ldi	r22, 0x05	; 5
    28a8:	8d 2f       	mov	r24, r29
    28aa:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table10) ;
    28ae:	b8 01       	movw	r22, r16
    28b0:	8f 2d       	mov	r24, r15
    28b2:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    28b6:	d8 16       	cp	r13, r24
    28b8:	08 f0       	brcs	.+2      	; 0x28bc <Tactics+0x1230>
    28ba:	a0 c7       	rjmp	.+3904   	; 0x37fc <Tactics+0x2170>
				{
					max = checkers ;
					myLine = line ;
    28bc:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    28c0:	95 e0       	ldi	r25, 0x05	; 5
    28c2:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table10) ;
				TurnOtherCheckers(line,column,enemy,mine,table10) ;
				checkers = scanCopyChessBoard(mine,table10) ;
				if (max < checkers)
				{
					max = checkers ;
    28c6:	d8 2e       	mov	r13, r24
    28c8:	99 c7       	rjmp	.+3890   	; 0x37fc <Tactics+0x2170>
					myColumn = column ;
				}
				break;
				
				case 11:
				setChecker(line,column,mine,table11) ;
    28ca:	24 e2       	ldi	r18, 0x24	; 36
    28cc:	31 e0       	ldi	r19, 0x01	; 1
    28ce:	4f 2d       	mov	r20, r15
    28d0:	65 e0       	ldi	r22, 0x05	; 5
    28d2:	8d 2f       	mov	r24, r29
    28d4:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table11) ;
    28d8:	04 e2       	ldi	r16, 0x24	; 36
    28da:	11 e0       	ldi	r17, 0x01	; 1
    28dc:	2f 2d       	mov	r18, r15
    28de:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    28e2:	65 e0       	ldi	r22, 0x05	; 5
    28e4:	8d 2f       	mov	r24, r29
    28e6:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table11) ;
    28ea:	b8 01       	movw	r22, r16
    28ec:	8f 2d       	mov	r24, r15
    28ee:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    28f2:	d8 16       	cp	r13, r24
    28f4:	08 f0       	brcs	.+2      	; 0x28f8 <Tactics+0x126c>
    28f6:	5b c7       	rjmp	.+3766   	; 0x37ae <Tactics+0x2122>
				{
					max = checkers ;
					myLine = line ;
    28f8:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    28fc:	95 e0       	ldi	r25, 0x05	; 5
    28fe:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table11) ;
				TurnOtherCheckers(line,column,enemy,mine,table11) ;
				checkers = scanCopyChessBoard(mine,table11) ;
				if (max < checkers)
				{
					max = checkers ;
    2902:	d8 2e       	mov	r13, r24
    2904:	54 c7       	rjmp	.+3752   	; 0x37ae <Tactics+0x2122>
					myColumn = column ;
				}
				break;
				
				case 12:
				setChecker(line,column,mine,table12) ;
    2906:	2c ea       	ldi	r18, 0xAC	; 172
    2908:	30 e0       	ldi	r19, 0x00	; 0
    290a:	4f 2d       	mov	r20, r15
    290c:	65 e0       	ldi	r22, 0x05	; 5
    290e:	8d 2f       	mov	r24, r29
    2910:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table12) ;
    2914:	0c ea       	ldi	r16, 0xAC	; 172
    2916:	10 e0       	ldi	r17, 0x00	; 0
    2918:	2f 2d       	mov	r18, r15
    291a:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    291e:	65 e0       	ldi	r22, 0x05	; 5
    2920:	8d 2f       	mov	r24, r29
    2922:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table12) ;
    2926:	b8 01       	movw	r22, r16
    2928:	8f 2d       	mov	r24, r15
    292a:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    292e:	d8 16       	cp	r13, r24
    2930:	08 f0       	brcs	.+2      	; 0x2934 <Tactics+0x12a8>
    2932:	40 c7       	rjmp	.+3712   	; 0x37b4 <Tactics+0x2128>
				{
					max = checkers ;
					myLine = line ;
    2934:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    2938:	95 e0       	ldi	r25, 0x05	; 5
    293a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table12) ;
				TurnOtherCheckers(line,column,enemy,mine,table12) ;
				checkers = scanCopyChessBoard(mine,table12) ;
				if (max < checkers)
				{
					max = checkers ;
    293e:	d8 2e       	mov	r13, r24
    2940:	39 c7       	rjmp	.+3698   	; 0x37b4 <Tactics+0x2128>
					myColumn = column ;
				}
				break;
				
				case 13:
				setChecker(line,column,mine,table13) ;
    2942:	2c ec       	ldi	r18, 0xCC	; 204
    2944:	30 e0       	ldi	r19, 0x00	; 0
    2946:	4f 2d       	mov	r20, r15
    2948:	65 e0       	ldi	r22, 0x05	; 5
    294a:	8d 2f       	mov	r24, r29
    294c:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table13) ;
    2950:	0c ec       	ldi	r16, 0xCC	; 204
    2952:	10 e0       	ldi	r17, 0x00	; 0
    2954:	2f 2d       	mov	r18, r15
    2956:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    295a:	65 e0       	ldi	r22, 0x05	; 5
    295c:	8d 2f       	mov	r24, r29
    295e:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table13) ;
    2962:	b8 01       	movw	r22, r16
    2964:	8f 2d       	mov	r24, r15
    2966:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    296a:	d8 16       	cp	r13, r24
    296c:	08 f0       	brcs	.+2      	; 0x2970 <Tactics+0x12e4>
    296e:	25 c7       	rjmp	.+3658   	; 0x37ba <Tactics+0x212e>
				{
					max = checkers ;
					myLine = line ;
    2970:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    2974:	95 e0       	ldi	r25, 0x05	; 5
    2976:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table13) ;
				TurnOtherCheckers(line,column,enemy,mine,table13) ;
				checkers = scanCopyChessBoard(mine,table13) ;
				if (max < checkers)
				{
					max = checkers ;
    297a:	d8 2e       	mov	r13, r24
    297c:	1e c7       	rjmp	.+3644   	; 0x37ba <Tactics+0x212e>
					myColumn = column ;
				}
				break;
				
				case 14:
				setChecker(line,column,mine,table14) ;
    297e:	24 e1       	ldi	r18, 0x14	; 20
    2980:	31 e0       	ldi	r19, 0x01	; 1
    2982:	4f 2d       	mov	r20, r15
    2984:	65 e0       	ldi	r22, 0x05	; 5
    2986:	8d 2f       	mov	r24, r29
    2988:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table14) ;
    298c:	04 e1       	ldi	r16, 0x14	; 20
    298e:	11 e0       	ldi	r17, 0x01	; 1
    2990:	2f 2d       	mov	r18, r15
    2992:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2996:	65 e0       	ldi	r22, 0x05	; 5
    2998:	8d 2f       	mov	r24, r29
    299a:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table14) ;
    299e:	b8 01       	movw	r22, r16
    29a0:	8f 2d       	mov	r24, r15
    29a2:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    29a6:	d8 16       	cp	r13, r24
    29a8:	08 f0       	brcs	.+2      	; 0x29ac <Tactics+0x1320>
    29aa:	0a c7       	rjmp	.+3604   	; 0x37c0 <Tactics+0x2134>
				{
					max = checkers ;
					myLine = line ;
    29ac:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    29b0:	95 e0       	ldi	r25, 0x05	; 5
    29b2:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table14) ;
				TurnOtherCheckers(line,column,enemy,mine,table14) ;
				checkers = scanCopyChessBoard(mine,table14) ;
				if (max < checkers)
				{
					max = checkers ;
    29b6:	d8 2e       	mov	r13, r24
    29b8:	03 c7       	rjmp	.+3590   	; 0x37c0 <Tactics+0x2134>
		temp = buffer & 0b00010000 ;
		temp = (temp >> 4) ;
		if (temp == 1)
		{
			column = 5 ;
			count++ ;
    29ba:	0f 2e       	mov	r0, r31
    29bc:	ff e0       	ldi	r31, 0x0F	; 15
    29be:	ef 2e       	mov	r14, r31
    29c0:	f0 2d       	mov	r31, r0
    29c2:	04 c0       	rjmp	.+8      	; 0x29cc <Tactics+0x1340>
    29c4:	0f 2e       	mov	r0, r31
    29c6:	ff e0       	ldi	r31, 0x0F	; 15
    29c8:	ef 2e       	mov	r14, r31
    29ca:	f0 2d       	mov	r31, r0
				}
				break;
				
				
				default:
				setChecker(line,column,mine,table9) ;
    29cc:	24 e3       	ldi	r18, 0x34	; 52
    29ce:	31 e0       	ldi	r19, 0x01	; 1
    29d0:	4f 2d       	mov	r20, r15
    29d2:	65 e0       	ldi	r22, 0x05	; 5
    29d4:	8d 2f       	mov	r24, r29
    29d6:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
    29da:	04 e3       	ldi	r16, 0x34	; 52
    29dc:	11 e0       	ldi	r17, 0x01	; 1
    29de:	2f 2d       	mov	r18, r15
    29e0:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    29e4:	65 e0       	ldi	r22, 0x05	; 5
    29e6:	8d 2f       	mov	r24, r29
    29e8:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table9) ;
    29ec:	b8 01       	movw	r22, r16
    29ee:	8f 2d       	mov	r24, r15
    29f0:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    29f4:	d8 16       	cp	r13, r24
    29f6:	30 f4       	brcc	.+12     	; 0x2a04 <Tactics+0x1378>
				{
					max = checkers ;
					myLine = line ;
    29f8:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    29fc:	95 e0       	ldi	r25, 0x05	; 5
    29fe:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table9) ;
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
				checkers = scanCopyChessBoard(mine,table9) ;
				if (max < checkers)
				{
					max = checkers ;
    2a02:	d8 2e       	mov	r13, r24
		}
		
		/* Sixth valid move in this line */
		temp = buffer & 0b00100000 ;
		temp = (temp >> 5) ;
		if (temp == 1)
    2a04:	c5 ff       	sbrs	r28, 5
    2a06:	d6 c1       	rjmp	.+940    	; 0x2db4 <Tactics+0x1728>
		{
			column = 6 ;
			count++ ;
    2a08:	e3 94       	inc	r14
			switch(count)
    2a0a:	8e 2d       	mov	r24, r14
    2a0c:	90 e0       	ldi	r25, 0x00	; 0
    2a0e:	fc 01       	movw	r30, r24
    2a10:	31 97       	sbiw	r30, 0x01	; 1
    2a12:	ee 30       	cpi	r30, 0x0E	; 14
    2a14:	f1 05       	cpc	r31, r1
    2a16:	08 f0       	brcs	.+2      	; 0x2a1a <Tactics+0x138e>
    2a18:	b1 c1       	rjmp	.+866    	; 0x2d7c <Tactics+0x16f0>
    2a1a:	ee 57       	subi	r30, 0x7E	; 126
    2a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1e:	0c 94 78 21 	jmp	0x42f0	; 0x42f0 <__tablejump2__>
			{
				case 1:
				setChecker(line,column,mine,table1) ;
    2a22:	2c ed       	ldi	r18, 0xDC	; 220
    2a24:	30 e0       	ldi	r19, 0x00	; 0
    2a26:	4f 2d       	mov	r20, r15
    2a28:	66 e0       	ldi	r22, 0x06	; 6
    2a2a:	8d 2f       	mov	r24, r29
    2a2c:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table1) ;
    2a30:	0c ed       	ldi	r16, 0xDC	; 220
    2a32:	10 e0       	ldi	r17, 0x00	; 0
    2a34:	2f 2d       	mov	r18, r15
    2a36:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2a3a:	66 e0       	ldi	r22, 0x06	; 6
    2a3c:	8d 2f       	mov	r24, r29
    2a3e:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table1) ;
    2a42:	b8 01       	movw	r22, r16
    2a44:	8f 2d       	mov	r24, r15
    2a46:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    2a4a:	d8 16       	cp	r13, r24
    2a4c:	08 f0       	brcs	.+2      	; 0x2a50 <Tactics+0x13c4>
    2a4e:	e8 c6       	rjmp	.+3536   	; 0x3820 <Tactics+0x2194>
				{
					max = checkers ;
					myLine = line ;
    2a50:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    2a54:	96 e0       	ldi	r25, 0x06	; 6
    2a56:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table1) ;
				TurnOtherCheckers(line,column,enemy,mine,table1) ;
				checkers = scanCopyChessBoard(mine,table1) ;
				if (max < checkers)
				{
					max = checkers ;
    2a5a:	d8 2e       	mov	r13, r24
    2a5c:	e1 c6       	rjmp	.+3522   	; 0x3820 <Tactics+0x2194>
					myColumn = column ;
				}
				break;
				
				case 2:
				setChecker(line,column,mine,table2) ;
    2a5e:	2c e6       	ldi	r18, 0x6C	; 108
    2a60:	31 e0       	ldi	r19, 0x01	; 1
    2a62:	4f 2d       	mov	r20, r15
    2a64:	66 e0       	ldi	r22, 0x06	; 6
    2a66:	8d 2f       	mov	r24, r29
    2a68:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table2) ;
    2a6c:	0c e6       	ldi	r16, 0x6C	; 108
    2a6e:	11 e0       	ldi	r17, 0x01	; 1
    2a70:	2f 2d       	mov	r18, r15
    2a72:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2a76:	66 e0       	ldi	r22, 0x06	; 6
    2a78:	8d 2f       	mov	r24, r29
    2a7a:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table2) ;
    2a7e:	b8 01       	movw	r22, r16
    2a80:	8f 2d       	mov	r24, r15
    2a82:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    2a86:	d8 16       	cp	r13, r24
    2a88:	08 f0       	brcs	.+2      	; 0x2a8c <Tactics+0x1400>
    2a8a:	cd c6       	rjmp	.+3482   	; 0x3826 <Tactics+0x219a>
				{
					max = checkers ;
					myLine = line ;
    2a8c:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    2a90:	96 e0       	ldi	r25, 0x06	; 6
    2a92:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table2) ;
				TurnOtherCheckers(line,column,enemy,mine,table2) ;
				checkers = scanCopyChessBoard(mine,table2) ;
				if (max < checkers)
				{
					max = checkers ;
    2a96:	d8 2e       	mov	r13, r24
    2a98:	c6 c6       	rjmp	.+3468   	; 0x3826 <Tactics+0x219a>
					myColumn = column ;
				}
				break;
				
				case 3:
				setChecker(line,column,mine,table3) ;
    2a9a:	2c e6       	ldi	r18, 0x6C	; 108
    2a9c:	30 e0       	ldi	r19, 0x00	; 0
    2a9e:	4f 2d       	mov	r20, r15
    2aa0:	66 e0       	ldi	r22, 0x06	; 6
    2aa2:	8d 2f       	mov	r24, r29
    2aa4:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table3) ;
    2aa8:	0c e6       	ldi	r16, 0x6C	; 108
    2aaa:	10 e0       	ldi	r17, 0x00	; 0
    2aac:	2f 2d       	mov	r18, r15
    2aae:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2ab2:	66 e0       	ldi	r22, 0x06	; 6
    2ab4:	8d 2f       	mov	r24, r29
    2ab6:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table3) ;
    2aba:	b8 01       	movw	r22, r16
    2abc:	8f 2d       	mov	r24, r15
    2abe:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    2ac2:	d8 16       	cp	r13, r24
    2ac4:	08 f0       	brcs	.+2      	; 0x2ac8 <Tactics+0x143c>
    2ac6:	b2 c6       	rjmp	.+3428   	; 0x382c <Tactics+0x21a0>
				{
					max = checkers ;
					myLine = line ;
    2ac8:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    2acc:	96 e0       	ldi	r25, 0x06	; 6
    2ace:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table3) ;
				TurnOtherCheckers(line,column,enemy,mine,table3) ;
				checkers = scanCopyChessBoard(mine,table3) ;
				if (max < checkers)
				{
					max = checkers ;
    2ad2:	d8 2e       	mov	r13, r24
    2ad4:	ab c6       	rjmp	.+3414   	; 0x382c <Tactics+0x21a0>
					myColumn = column ;
				}
				break;
				
				case 4:
				setChecker(line,column,mine,table4) ;
    2ad6:	24 e4       	ldi	r18, 0x44	; 68
    2ad8:	31 e0       	ldi	r19, 0x01	; 1
    2ada:	4f 2d       	mov	r20, r15
    2adc:	66 e0       	ldi	r22, 0x06	; 6
    2ade:	8d 2f       	mov	r24, r29
    2ae0:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table4) ;
    2ae4:	04 e4       	ldi	r16, 0x44	; 68
    2ae6:	11 e0       	ldi	r17, 0x01	; 1
    2ae8:	2f 2d       	mov	r18, r15
    2aea:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2aee:	66 e0       	ldi	r22, 0x06	; 6
    2af0:	8d 2f       	mov	r24, r29
    2af2:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table4) ;
    2af6:	b8 01       	movw	r22, r16
    2af8:	8f 2d       	mov	r24, r15
    2afa:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    2afe:	d8 16       	cp	r13, r24
    2b00:	08 f0       	brcs	.+2      	; 0x2b04 <Tactics+0x1478>
    2b02:	97 c6       	rjmp	.+3374   	; 0x3832 <Tactics+0x21a6>
				{
					max = checkers ;
					myLine = line ;
    2b04:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    2b08:	96 e0       	ldi	r25, 0x06	; 6
    2b0a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table4) ;
				TurnOtherCheckers(line,column,enemy,mine,table4) ;
				checkers = scanCopyChessBoard(mine,table4) ;
				if (max < checkers)
				{
					max = checkers ;
    2b0e:	d8 2e       	mov	r13, r24
    2b10:	90 c6       	rjmp	.+3360   	; 0x3832 <Tactics+0x21a6>
					myColumn = column ;
				}
				break;
				
				case 5:
				setChecker(line,column,mine,table5) ;
    2b12:	24 e5       	ldi	r18, 0x54	; 84
    2b14:	31 e0       	ldi	r19, 0x01	; 1
    2b16:	4f 2d       	mov	r20, r15
    2b18:	66 e0       	ldi	r22, 0x06	; 6
    2b1a:	8d 2f       	mov	r24, r29
    2b1c:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table5) ;
    2b20:	04 e5       	ldi	r16, 0x54	; 84
    2b22:	11 e0       	ldi	r17, 0x01	; 1
    2b24:	2f 2d       	mov	r18, r15
    2b26:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2b2a:	66 e0       	ldi	r22, 0x06	; 6
    2b2c:	8d 2f       	mov	r24, r29
    2b2e:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table5) ;
    2b32:	b8 01       	movw	r22, r16
    2b34:	8f 2d       	mov	r24, r15
    2b36:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    2b3a:	d8 16       	cp	r13, r24
    2b3c:	08 f0       	brcs	.+2      	; 0x2b40 <Tactics+0x14b4>
    2b3e:	7c c6       	rjmp	.+3320   	; 0x3838 <Tactics+0x21ac>
				{
					max = checkers ;
					myLine = line ;
    2b40:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    2b44:	96 e0       	ldi	r25, 0x06	; 6
    2b46:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table5) ;
				TurnOtherCheckers(line,column,enemy,mine,table5) ;
				checkers = scanCopyChessBoard(mine,table5) ;
				if (max < checkers)
				{
					max = checkers ;
    2b4a:	d8 2e       	mov	r13, r24
    2b4c:	75 c6       	rjmp	.+3306   	; 0x3838 <Tactics+0x21ac>
					myColumn = column ;
				}
				break;
				
				case 6:
				setChecker(line,column,mine,table6) ;
    2b4e:	24 e8       	ldi	r18, 0x84	; 132
    2b50:	30 e0       	ldi	r19, 0x00	; 0
    2b52:	4f 2d       	mov	r20, r15
    2b54:	66 e0       	ldi	r22, 0x06	; 6
    2b56:	8d 2f       	mov	r24, r29
    2b58:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table6) ;
    2b5c:	04 e8       	ldi	r16, 0x84	; 132
    2b5e:	10 e0       	ldi	r17, 0x00	; 0
    2b60:	2f 2d       	mov	r18, r15
    2b62:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2b66:	66 e0       	ldi	r22, 0x06	; 6
    2b68:	8d 2f       	mov	r24, r29
    2b6a:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table6) ;
    2b6e:	b8 01       	movw	r22, r16
    2b70:	8f 2d       	mov	r24, r15
    2b72:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    2b76:	d8 16       	cp	r13, r24
    2b78:	08 f0       	brcs	.+2      	; 0x2b7c <Tactics+0x14f0>
    2b7a:	61 c6       	rjmp	.+3266   	; 0x383e <Tactics+0x21b2>
				{
					max = checkers ;
					myLine = line ;
    2b7c:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    2b80:	96 e0       	ldi	r25, 0x06	; 6
    2b82:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table6) ;
				TurnOtherCheckers(line,column,enemy,mine,table6) ;
				checkers = scanCopyChessBoard(mine,table6) ;
				if (max < checkers)
				{
					max = checkers ;
    2b86:	d8 2e       	mov	r13, r24
    2b88:	5a c6       	rjmp	.+3252   	; 0x383e <Tactics+0x21b2>
					myColumn = column ;
				}
				break;
				
				case 7:
				setChecker(line,column,mine,table7) ;
    2b8a:	2c ee       	ldi	r18, 0xEC	; 236
    2b8c:	30 e0       	ldi	r19, 0x00	; 0
    2b8e:	4f 2d       	mov	r20, r15
    2b90:	66 e0       	ldi	r22, 0x06	; 6
    2b92:	8d 2f       	mov	r24, r29
    2b94:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table7) ;
    2b98:	0c ee       	ldi	r16, 0xEC	; 236
    2b9a:	10 e0       	ldi	r17, 0x00	; 0
    2b9c:	2f 2d       	mov	r18, r15
    2b9e:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2ba2:	66 e0       	ldi	r22, 0x06	; 6
    2ba4:	8d 2f       	mov	r24, r29
    2ba6:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table7) ;
    2baa:	b8 01       	movw	r22, r16
    2bac:	8f 2d       	mov	r24, r15
    2bae:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    2bb2:	d8 16       	cp	r13, r24
    2bb4:	08 f0       	brcs	.+2      	; 0x2bb8 <Tactics+0x152c>
    2bb6:	46 c6       	rjmp	.+3212   	; 0x3844 <Tactics+0x21b8>
				{
					max = checkers ;
					myLine = line ;
    2bb8:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    2bbc:	96 e0       	ldi	r25, 0x06	; 6
    2bbe:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table7) ;
				TurnOtherCheckers(line,column,enemy,mine,table7) ;
				checkers = scanCopyChessBoard(mine,table7) ;
				if (max < checkers)
				{
					max = checkers ;
    2bc2:	d8 2e       	mov	r13, r24
    2bc4:	3f c6       	rjmp	.+3198   	; 0x3844 <Tactics+0x21b8>
					myColumn = column ;
				}
				break;
				
				case 8:
				setChecker(line,column,mine,table8) ;
    2bc6:	24 e9       	ldi	r18, 0x94	; 148
    2bc8:	30 e0       	ldi	r19, 0x00	; 0
    2bca:	4f 2d       	mov	r20, r15
    2bcc:	66 e0       	ldi	r22, 0x06	; 6
    2bce:	8d 2f       	mov	r24, r29
    2bd0:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table8) ;
    2bd4:	04 e9       	ldi	r16, 0x94	; 148
    2bd6:	10 e0       	ldi	r17, 0x00	; 0
    2bd8:	2f 2d       	mov	r18, r15
    2bda:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2bde:	66 e0       	ldi	r22, 0x06	; 6
    2be0:	8d 2f       	mov	r24, r29
    2be2:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table8) ;
    2be6:	b8 01       	movw	r22, r16
    2be8:	8f 2d       	mov	r24, r15
    2bea:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    2bee:	d8 16       	cp	r13, r24
    2bf0:	08 f0       	brcs	.+2      	; 0x2bf4 <Tactics+0x1568>
    2bf2:	2b c6       	rjmp	.+3158   	; 0x384a <Tactics+0x21be>
				{
					max = checkers ;
					myLine = line ;
    2bf4:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    2bf8:	96 e0       	ldi	r25, 0x06	; 6
    2bfa:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table8) ;
				TurnOtherCheckers(line,column,enemy,mine,table8) ;
				checkers = scanCopyChessBoard(mine,table8) ;
				if (max < checkers)
				{
					max = checkers ;
    2bfe:	d8 2e       	mov	r13, r24
    2c00:	24 c6       	rjmp	.+3144   	; 0x384a <Tactics+0x21be>
					myColumn = column ;
				}
				break;
				
				case 9:
				setChecker(line,column,mine,table9) ;
    2c02:	24 e3       	ldi	r18, 0x34	; 52
    2c04:	31 e0       	ldi	r19, 0x01	; 1
    2c06:	4f 2d       	mov	r20, r15
    2c08:	66 e0       	ldi	r22, 0x06	; 6
    2c0a:	8d 2f       	mov	r24, r29
    2c0c:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
    2c10:	04 e3       	ldi	r16, 0x34	; 52
    2c12:	11 e0       	ldi	r17, 0x01	; 1
    2c14:	2f 2d       	mov	r18, r15
    2c16:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2c1a:	66 e0       	ldi	r22, 0x06	; 6
    2c1c:	8d 2f       	mov	r24, r29
    2c1e:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table9) ;
    2c22:	b8 01       	movw	r22, r16
    2c24:	8f 2d       	mov	r24, r15
    2c26:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    2c2a:	d8 16       	cp	r13, r24
    2c2c:	08 f0       	brcs	.+2      	; 0x2c30 <Tactics+0x15a4>
    2c2e:	10 c6       	rjmp	.+3104   	; 0x3850 <Tactics+0x21c4>
				{
					max = checkers ;
					myLine = line ;
    2c30:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    2c34:	96 e0       	ldi	r25, 0x06	; 6
    2c36:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table9) ;
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
				checkers = scanCopyChessBoard(mine,table9) ;
				if (max < checkers)
				{
					max = checkers ;
    2c3a:	d8 2e       	mov	r13, r24
    2c3c:	09 c6       	rjmp	.+3090   	; 0x3850 <Tactics+0x21c4>
					myColumn = column ;
				}
				break;
				
				case 10:
				setChecker(line,column,mine,table10) ;
    2c3e:	2c e7       	ldi	r18, 0x7C	; 124
    2c40:	31 e0       	ldi	r19, 0x01	; 1
    2c42:	4f 2d       	mov	r20, r15
    2c44:	66 e0       	ldi	r22, 0x06	; 6
    2c46:	8d 2f       	mov	r24, r29
    2c48:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table10) ;
    2c4c:	0c e7       	ldi	r16, 0x7C	; 124
    2c4e:	11 e0       	ldi	r17, 0x01	; 1
    2c50:	2f 2d       	mov	r18, r15
    2c52:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2c56:	66 e0       	ldi	r22, 0x06	; 6
    2c58:	8d 2f       	mov	r24, r29
    2c5a:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table10) ;
    2c5e:	b8 01       	movw	r22, r16
    2c60:	8f 2d       	mov	r24, r15
    2c62:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    2c66:	d8 16       	cp	r13, r24
    2c68:	08 f0       	brcs	.+2      	; 0x2c6c <Tactics+0x15e0>
    2c6a:	cb c5       	rjmp	.+2966   	; 0x3802 <Tactics+0x2176>
				{
					max = checkers ;
					myLine = line ;
    2c6c:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    2c70:	96 e0       	ldi	r25, 0x06	; 6
    2c72:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table10) ;
				TurnOtherCheckers(line,column,enemy,mine,table10) ;
				checkers = scanCopyChessBoard(mine,table10) ;
				if (max < checkers)
				{
					max = checkers ;
    2c76:	d8 2e       	mov	r13, r24
    2c78:	c4 c5       	rjmp	.+2952   	; 0x3802 <Tactics+0x2176>
					myColumn = column ;
				}
				break;
				
				case 11:
				setChecker(line,column,mine,table11) ;
    2c7a:	24 e2       	ldi	r18, 0x24	; 36
    2c7c:	31 e0       	ldi	r19, 0x01	; 1
    2c7e:	4f 2d       	mov	r20, r15
    2c80:	66 e0       	ldi	r22, 0x06	; 6
    2c82:	8d 2f       	mov	r24, r29
    2c84:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table11) ;
    2c88:	04 e2       	ldi	r16, 0x24	; 36
    2c8a:	11 e0       	ldi	r17, 0x01	; 1
    2c8c:	2f 2d       	mov	r18, r15
    2c8e:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2c92:	66 e0       	ldi	r22, 0x06	; 6
    2c94:	8d 2f       	mov	r24, r29
    2c96:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table11) ;
    2c9a:	b8 01       	movw	r22, r16
    2c9c:	8f 2d       	mov	r24, r15
    2c9e:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    2ca2:	d8 16       	cp	r13, r24
    2ca4:	08 f0       	brcs	.+2      	; 0x2ca8 <Tactics+0x161c>
    2ca6:	b0 c5       	rjmp	.+2912   	; 0x3808 <Tactics+0x217c>
				{
					max = checkers ;
					myLine = line ;
    2ca8:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    2cac:	96 e0       	ldi	r25, 0x06	; 6
    2cae:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table11) ;
				TurnOtherCheckers(line,column,enemy,mine,table11) ;
				checkers = scanCopyChessBoard(mine,table11) ;
				if (max < checkers)
				{
					max = checkers ;
    2cb2:	d8 2e       	mov	r13, r24
    2cb4:	a9 c5       	rjmp	.+2898   	; 0x3808 <Tactics+0x217c>
					myColumn = column ;
				}
				break;
				
				case 12:
				setChecker(line,column,mine,table12) ;
    2cb6:	2c ea       	ldi	r18, 0xAC	; 172
    2cb8:	30 e0       	ldi	r19, 0x00	; 0
    2cba:	4f 2d       	mov	r20, r15
    2cbc:	66 e0       	ldi	r22, 0x06	; 6
    2cbe:	8d 2f       	mov	r24, r29
    2cc0:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table12) ;
    2cc4:	0c ea       	ldi	r16, 0xAC	; 172
    2cc6:	10 e0       	ldi	r17, 0x00	; 0
    2cc8:	2f 2d       	mov	r18, r15
    2cca:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2cce:	66 e0       	ldi	r22, 0x06	; 6
    2cd0:	8d 2f       	mov	r24, r29
    2cd2:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table12) ;
    2cd6:	b8 01       	movw	r22, r16
    2cd8:	8f 2d       	mov	r24, r15
    2cda:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    2cde:	d8 16       	cp	r13, r24
    2ce0:	08 f0       	brcs	.+2      	; 0x2ce4 <Tactics+0x1658>
    2ce2:	95 c5       	rjmp	.+2858   	; 0x380e <Tactics+0x2182>
				{
					max = checkers ;
					myLine = line ;
    2ce4:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    2ce8:	96 e0       	ldi	r25, 0x06	; 6
    2cea:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table12) ;
				TurnOtherCheckers(line,column,enemy,mine,table12) ;
				checkers = scanCopyChessBoard(mine,table12) ;
				if (max < checkers)
				{
					max = checkers ;
    2cee:	d8 2e       	mov	r13, r24
    2cf0:	8e c5       	rjmp	.+2844   	; 0x380e <Tactics+0x2182>
					myColumn = column ;
				}
				break;
				
				case 13:
				setChecker(line,column,mine,table13) ;
    2cf2:	2c ec       	ldi	r18, 0xCC	; 204
    2cf4:	30 e0       	ldi	r19, 0x00	; 0
    2cf6:	4f 2d       	mov	r20, r15
    2cf8:	66 e0       	ldi	r22, 0x06	; 6
    2cfa:	8d 2f       	mov	r24, r29
    2cfc:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table13) ;
    2d00:	0c ec       	ldi	r16, 0xCC	; 204
    2d02:	10 e0       	ldi	r17, 0x00	; 0
    2d04:	2f 2d       	mov	r18, r15
    2d06:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2d0a:	66 e0       	ldi	r22, 0x06	; 6
    2d0c:	8d 2f       	mov	r24, r29
    2d0e:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table13) ;
    2d12:	b8 01       	movw	r22, r16
    2d14:	8f 2d       	mov	r24, r15
    2d16:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    2d1a:	d8 16       	cp	r13, r24
    2d1c:	08 f0       	brcs	.+2      	; 0x2d20 <Tactics+0x1694>
    2d1e:	7a c5       	rjmp	.+2804   	; 0x3814 <Tactics+0x2188>
				{
					max = checkers ;
					myLine = line ;
    2d20:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    2d24:	96 e0       	ldi	r25, 0x06	; 6
    2d26:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table13) ;
				TurnOtherCheckers(line,column,enemy,mine,table13) ;
				checkers = scanCopyChessBoard(mine,table13) ;
				if (max < checkers)
				{
					max = checkers ;
    2d2a:	d8 2e       	mov	r13, r24
    2d2c:	73 c5       	rjmp	.+2790   	; 0x3814 <Tactics+0x2188>
					myColumn = column ;
				}
				break;
				
				case 14:
				setChecker(line,column,mine,table14) ;
    2d2e:	24 e1       	ldi	r18, 0x14	; 20
    2d30:	31 e0       	ldi	r19, 0x01	; 1
    2d32:	4f 2d       	mov	r20, r15
    2d34:	66 e0       	ldi	r22, 0x06	; 6
    2d36:	8d 2f       	mov	r24, r29
    2d38:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table14) ;
    2d3c:	04 e1       	ldi	r16, 0x14	; 20
    2d3e:	11 e0       	ldi	r17, 0x01	; 1
    2d40:	2f 2d       	mov	r18, r15
    2d42:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2d46:	66 e0       	ldi	r22, 0x06	; 6
    2d48:	8d 2f       	mov	r24, r29
    2d4a:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table14) ;
    2d4e:	b8 01       	movw	r22, r16
    2d50:	8f 2d       	mov	r24, r15
    2d52:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    2d56:	d8 16       	cp	r13, r24
    2d58:	08 f0       	brcs	.+2      	; 0x2d5c <Tactics+0x16d0>
    2d5a:	5f c5       	rjmp	.+2750   	; 0x381a <Tactics+0x218e>
				{
					max = checkers ;
					myLine = line ;
    2d5c:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    2d60:	96 e0       	ldi	r25, 0x06	; 6
    2d62:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table14) ;
				TurnOtherCheckers(line,column,enemy,mine,table14) ;
				checkers = scanCopyChessBoard(mine,table14) ;
				if (max < checkers)
				{
					max = checkers ;
    2d66:	d8 2e       	mov	r13, r24
    2d68:	58 c5       	rjmp	.+2736   	; 0x381a <Tactics+0x218e>
		temp = buffer & 0b00100000 ;
		temp = (temp >> 5) ;
		if (temp == 1)
		{
			column = 6 ;
			count++ ;
    2d6a:	0f 2e       	mov	r0, r31
    2d6c:	ff e0       	ldi	r31, 0x0F	; 15
    2d6e:	ef 2e       	mov	r14, r31
    2d70:	f0 2d       	mov	r31, r0
    2d72:	04 c0       	rjmp	.+8      	; 0x2d7c <Tactics+0x16f0>
    2d74:	0f 2e       	mov	r0, r31
    2d76:	ff e0       	ldi	r31, 0x0F	; 15
    2d78:	ef 2e       	mov	r14, r31
    2d7a:	f0 2d       	mov	r31, r0
				}
				break;
				
			
				default:
				setChecker(line,column,mine,table9) ;
    2d7c:	24 e3       	ldi	r18, 0x34	; 52
    2d7e:	31 e0       	ldi	r19, 0x01	; 1
    2d80:	4f 2d       	mov	r20, r15
    2d82:	66 e0       	ldi	r22, 0x06	; 6
    2d84:	8d 2f       	mov	r24, r29
    2d86:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
    2d8a:	04 e3       	ldi	r16, 0x34	; 52
    2d8c:	11 e0       	ldi	r17, 0x01	; 1
    2d8e:	2f 2d       	mov	r18, r15
    2d90:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2d94:	66 e0       	ldi	r22, 0x06	; 6
    2d96:	8d 2f       	mov	r24, r29
    2d98:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table9) ;
    2d9c:	b8 01       	movw	r22, r16
    2d9e:	8f 2d       	mov	r24, r15
    2da0:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    2da4:	d8 16       	cp	r13, r24
    2da6:	30 f4       	brcc	.+12     	; 0x2db4 <Tactics+0x1728>
				{
					max = checkers ;
					myLine = line ;
    2da8:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    2dac:	96 e0       	ldi	r25, 0x06	; 6
    2dae:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table9) ;
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
				checkers = scanCopyChessBoard(mine,table9) ;
				if (max < checkers)
				{
					max = checkers ;
    2db2:	d8 2e       	mov	r13, r24
		}
		
		/* Seventh valid move in this line */
		temp = buffer & 0b01000000 ;
		temp = (temp >> 6) ;
		if (temp == 1)
    2db4:	c6 ff       	sbrs	r28, 6
    2db6:	d6 c1       	rjmp	.+940    	; 0x3164 <Tactics+0x1ad8>
		{
			column = 7 ;
			count++ ;
    2db8:	e3 94       	inc	r14
			switch(count)
    2dba:	8e 2d       	mov	r24, r14
    2dbc:	90 e0       	ldi	r25, 0x00	; 0
    2dbe:	fc 01       	movw	r30, r24
    2dc0:	31 97       	sbiw	r30, 0x01	; 1
    2dc2:	ee 30       	cpi	r30, 0x0E	; 14
    2dc4:	f1 05       	cpc	r31, r1
    2dc6:	08 f0       	brcs	.+2      	; 0x2dca <Tactics+0x173e>
    2dc8:	b1 c1       	rjmp	.+866    	; 0x312c <Tactics+0x1aa0>
    2dca:	e0 57       	subi	r30, 0x70	; 112
    2dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dce:	0c 94 78 21 	jmp	0x42f0	; 0x42f0 <__tablejump2__>
			{
				case 1:
				setChecker(line,column,mine,table1) ;
    2dd2:	2c ed       	ldi	r18, 0xDC	; 220
    2dd4:	30 e0       	ldi	r19, 0x00	; 0
    2dd6:	4f 2d       	mov	r20, r15
    2dd8:	67 e0       	ldi	r22, 0x07	; 7
    2dda:	8d 2f       	mov	r24, r29
    2ddc:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table1) ;
    2de0:	0c ed       	ldi	r16, 0xDC	; 220
    2de2:	10 e0       	ldi	r17, 0x00	; 0
    2de4:	2f 2d       	mov	r18, r15
    2de6:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2dea:	67 e0       	ldi	r22, 0x07	; 7
    2dec:	8d 2f       	mov	r24, r29
    2dee:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table1) ;
    2df2:	b8 01       	movw	r22, r16
    2df4:	8f 2d       	mov	r24, r15
    2df6:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    2dfa:	d8 16       	cp	r13, r24
    2dfc:	08 f0       	brcs	.+2      	; 0x2e00 <Tactics+0x1774>
    2dfe:	53 c5       	rjmp	.+2726   	; 0x38a6 <Tactics+0x221a>
				{
					max = checkers ;
					myLine = line ;
    2e00:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    2e04:	97 e0       	ldi	r25, 0x07	; 7
    2e06:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table1) ;
				TurnOtherCheckers(line,column,enemy,mine,table1) ;
				checkers = scanCopyChessBoard(mine,table1) ;
				if (max < checkers)
				{
					max = checkers ;
    2e0a:	d8 2e       	mov	r13, r24
    2e0c:	4c c5       	rjmp	.+2712   	; 0x38a6 <Tactics+0x221a>
					myColumn = column ;
				}
				break;
				
				case 2:
				setChecker(line,column,mine,table2) ;
    2e0e:	2c e6       	ldi	r18, 0x6C	; 108
    2e10:	31 e0       	ldi	r19, 0x01	; 1
    2e12:	4f 2d       	mov	r20, r15
    2e14:	67 e0       	ldi	r22, 0x07	; 7
    2e16:	8d 2f       	mov	r24, r29
    2e18:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table2) ;
    2e1c:	0c e6       	ldi	r16, 0x6C	; 108
    2e1e:	11 e0       	ldi	r17, 0x01	; 1
    2e20:	2f 2d       	mov	r18, r15
    2e22:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2e26:	67 e0       	ldi	r22, 0x07	; 7
    2e28:	8d 2f       	mov	r24, r29
    2e2a:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table2) ;
    2e2e:	b8 01       	movw	r22, r16
    2e30:	8f 2d       	mov	r24, r15
    2e32:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    2e36:	d8 16       	cp	r13, r24
    2e38:	08 f0       	brcs	.+2      	; 0x2e3c <Tactics+0x17b0>
    2e3a:	39 c5       	rjmp	.+2674   	; 0x38ae <Tactics+0x2222>
				{
					max = checkers ;
					myLine = line ;
    2e3c:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    2e40:	97 e0       	ldi	r25, 0x07	; 7
    2e42:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table2) ;
				TurnOtherCheckers(line,column,enemy,mine,table2) ;
				checkers = scanCopyChessBoard(mine,table2) ;
				if (max < checkers)
				{
					max = checkers ;
    2e46:	d8 2e       	mov	r13, r24
    2e48:	32 c5       	rjmp	.+2660   	; 0x38ae <Tactics+0x2222>
					myColumn = column ;
				}
				break;
				
				case 3:
				setChecker(line,column,mine,table3) ;
    2e4a:	2c e6       	ldi	r18, 0x6C	; 108
    2e4c:	30 e0       	ldi	r19, 0x00	; 0
    2e4e:	4f 2d       	mov	r20, r15
    2e50:	67 e0       	ldi	r22, 0x07	; 7
    2e52:	8d 2f       	mov	r24, r29
    2e54:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table3) ;
    2e58:	0c e6       	ldi	r16, 0x6C	; 108
    2e5a:	10 e0       	ldi	r17, 0x00	; 0
    2e5c:	2f 2d       	mov	r18, r15
    2e5e:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2e62:	67 e0       	ldi	r22, 0x07	; 7
    2e64:	8d 2f       	mov	r24, r29
    2e66:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table3) ;
    2e6a:	b8 01       	movw	r22, r16
    2e6c:	8f 2d       	mov	r24, r15
    2e6e:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    2e72:	d8 16       	cp	r13, r24
    2e74:	08 f0       	brcs	.+2      	; 0x2e78 <Tactics+0x17ec>
    2e76:	22 c5       	rjmp	.+2628   	; 0x38bc <Tactics+0x2230>
				{
					max = checkers ;
					myLine = line ;
    2e78:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    2e7c:	97 e0       	ldi	r25, 0x07	; 7
    2e7e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table3) ;
				TurnOtherCheckers(line,column,enemy,mine,table3) ;
				checkers = scanCopyChessBoard(mine,table3) ;
				if (max < checkers)
				{
					max = checkers ;
    2e82:	d8 2e       	mov	r13, r24
    2e84:	1b c5       	rjmp	.+2614   	; 0x38bc <Tactics+0x2230>
					myColumn = column ;
				}
				break;
				
				case 4:
				setChecker(line,column,mine,table4) ;
    2e86:	24 e4       	ldi	r18, 0x44	; 68
    2e88:	31 e0       	ldi	r19, 0x01	; 1
    2e8a:	4f 2d       	mov	r20, r15
    2e8c:	67 e0       	ldi	r22, 0x07	; 7
    2e8e:	8d 2f       	mov	r24, r29
    2e90:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table4) ;
    2e94:	04 e4       	ldi	r16, 0x44	; 68
    2e96:	11 e0       	ldi	r17, 0x01	; 1
    2e98:	2f 2d       	mov	r18, r15
    2e9a:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2e9e:	67 e0       	ldi	r22, 0x07	; 7
    2ea0:	8d 2f       	mov	r24, r29
    2ea2:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table4) ;
    2ea6:	b8 01       	movw	r22, r16
    2ea8:	8f 2d       	mov	r24, r15
    2eaa:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    2eae:	d8 16       	cp	r13, r24
    2eb0:	08 f0       	brcs	.+2      	; 0x2eb4 <Tactics+0x1828>
    2eb2:	0c c5       	rjmp	.+2584   	; 0x38cc <Tactics+0x2240>
				{
					max = checkers ;
					myLine = line ;
    2eb4:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    2eb8:	97 e0       	ldi	r25, 0x07	; 7
    2eba:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table4) ;
				TurnOtherCheckers(line,column,enemy,mine,table4) ;
				checkers = scanCopyChessBoard(mine,table4) ;
				if (max < checkers)
				{
					max = checkers ;
    2ebe:	d8 2e       	mov	r13, r24
    2ec0:	05 c5       	rjmp	.+2570   	; 0x38cc <Tactics+0x2240>
					myColumn = column ;
				}
				break;
				
				case 5:
				setChecker(line,column,mine,table5) ;
    2ec2:	24 e5       	ldi	r18, 0x54	; 84
    2ec4:	31 e0       	ldi	r19, 0x01	; 1
    2ec6:	4f 2d       	mov	r20, r15
    2ec8:	67 e0       	ldi	r22, 0x07	; 7
    2eca:	8d 2f       	mov	r24, r29
    2ecc:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table5) ;
    2ed0:	04 e5       	ldi	r16, 0x54	; 84
    2ed2:	11 e0       	ldi	r17, 0x01	; 1
    2ed4:	2f 2d       	mov	r18, r15
    2ed6:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2eda:	67 e0       	ldi	r22, 0x07	; 7
    2edc:	8d 2f       	mov	r24, r29
    2ede:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table5) ;
    2ee2:	b8 01       	movw	r22, r16
    2ee4:	8f 2d       	mov	r24, r15
    2ee6:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    2eea:	d8 16       	cp	r13, r24
    2eec:	08 f0       	brcs	.+2      	; 0x2ef0 <Tactics+0x1864>
    2eee:	f5 c4       	rjmp	.+2538   	; 0x38da <Tactics+0x224e>
				{
					max = checkers ;
					myLine = line ;
    2ef0:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    2ef4:	97 e0       	ldi	r25, 0x07	; 7
    2ef6:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table5) ;
				TurnOtherCheckers(line,column,enemy,mine,table5) ;
				checkers = scanCopyChessBoard(mine,table5) ;
				if (max < checkers)
				{
					max = checkers ;
    2efa:	d8 2e       	mov	r13, r24
    2efc:	ee c4       	rjmp	.+2524   	; 0x38da <Tactics+0x224e>
					myColumn = column ;
				}
				break;
				
				case 6:
				setChecker(line,column,mine,table6) ;
    2efe:	24 e8       	ldi	r18, 0x84	; 132
    2f00:	30 e0       	ldi	r19, 0x00	; 0
    2f02:	4f 2d       	mov	r20, r15
    2f04:	67 e0       	ldi	r22, 0x07	; 7
    2f06:	8d 2f       	mov	r24, r29
    2f08:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table6) ;
    2f0c:	04 e8       	ldi	r16, 0x84	; 132
    2f0e:	10 e0       	ldi	r17, 0x00	; 0
    2f10:	2f 2d       	mov	r18, r15
    2f12:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2f16:	67 e0       	ldi	r22, 0x07	; 7
    2f18:	8d 2f       	mov	r24, r29
    2f1a:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table6) ;
    2f1e:	b8 01       	movw	r22, r16
    2f20:	8f 2d       	mov	r24, r15
    2f22:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    2f26:	d8 16       	cp	r13, r24
    2f28:	08 f0       	brcs	.+2      	; 0x2f2c <Tactics+0x18a0>
    2f2a:	df c4       	rjmp	.+2494   	; 0x38ea <Tactics+0x225e>
				{
					max = checkers ;
					myLine = line ;
    2f2c:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    2f30:	97 e0       	ldi	r25, 0x07	; 7
    2f32:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table6) ;
				TurnOtherCheckers(line,column,enemy,mine,table6) ;
				checkers = scanCopyChessBoard(mine,table6) ;
				if (max < checkers)
				{
					max = checkers ;
    2f36:	d8 2e       	mov	r13, r24
    2f38:	d8 c4       	rjmp	.+2480   	; 0x38ea <Tactics+0x225e>
					myColumn = column ;
				}
				break;
				
				case 7:
				setChecker(line,column,mine,table7) ;
    2f3a:	2c ee       	ldi	r18, 0xEC	; 236
    2f3c:	30 e0       	ldi	r19, 0x00	; 0
    2f3e:	4f 2d       	mov	r20, r15
    2f40:	67 e0       	ldi	r22, 0x07	; 7
    2f42:	8d 2f       	mov	r24, r29
    2f44:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table7) ;
    2f48:	0c ee       	ldi	r16, 0xEC	; 236
    2f4a:	10 e0       	ldi	r17, 0x00	; 0
    2f4c:	2f 2d       	mov	r18, r15
    2f4e:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2f52:	67 e0       	ldi	r22, 0x07	; 7
    2f54:	8d 2f       	mov	r24, r29
    2f56:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table7) ;
    2f5a:	b8 01       	movw	r22, r16
    2f5c:	8f 2d       	mov	r24, r15
    2f5e:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    2f62:	d8 16       	cp	r13, r24
    2f64:	08 f0       	brcs	.+2      	; 0x2f68 <Tactics+0x18dc>
    2f66:	c9 c4       	rjmp	.+2450   	; 0x38fa <Tactics+0x226e>
				{
					max = checkers ;
					myLine = line ;
    2f68:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    2f6c:	97 e0       	ldi	r25, 0x07	; 7
    2f6e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table7) ;
				TurnOtherCheckers(line,column,enemy,mine,table7) ;
				checkers = scanCopyChessBoard(mine,table7) ;
				if (max < checkers)
				{
					max = checkers ;
    2f72:	d8 2e       	mov	r13, r24
    2f74:	c2 c4       	rjmp	.+2436   	; 0x38fa <Tactics+0x226e>
					myColumn = column ;
				}
				break;
				
				case 8:
				setChecker(line,column,mine,table8) ;
    2f76:	24 e9       	ldi	r18, 0x94	; 148
    2f78:	30 e0       	ldi	r19, 0x00	; 0
    2f7a:	4f 2d       	mov	r20, r15
    2f7c:	67 e0       	ldi	r22, 0x07	; 7
    2f7e:	8d 2f       	mov	r24, r29
    2f80:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table8) ;
    2f84:	04 e9       	ldi	r16, 0x94	; 148
    2f86:	10 e0       	ldi	r17, 0x00	; 0
    2f88:	2f 2d       	mov	r18, r15
    2f8a:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2f8e:	67 e0       	ldi	r22, 0x07	; 7
    2f90:	8d 2f       	mov	r24, r29
    2f92:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table8) ;
    2f96:	b8 01       	movw	r22, r16
    2f98:	8f 2d       	mov	r24, r15
    2f9a:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    2f9e:	d8 16       	cp	r13, r24
    2fa0:	08 f0       	brcs	.+2      	; 0x2fa4 <Tactics+0x1918>
    2fa2:	b3 c4       	rjmp	.+2406   	; 0x390a <Tactics+0x227e>
				{
					max = checkers ;
					myLine = line ;
    2fa4:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    2fa8:	97 e0       	ldi	r25, 0x07	; 7
    2faa:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table8) ;
				TurnOtherCheckers(line,column,enemy,mine,table8) ;
				checkers = scanCopyChessBoard(mine,table8) ;
				if (max < checkers)
				{
					max = checkers ;
    2fae:	d8 2e       	mov	r13, r24
    2fb0:	ac c4       	rjmp	.+2392   	; 0x390a <Tactics+0x227e>
					myColumn = column ;
				}
				break;
				
				case 9:
				setChecker(line,column,mine,table9) ;
    2fb2:	24 e3       	ldi	r18, 0x34	; 52
    2fb4:	31 e0       	ldi	r19, 0x01	; 1
    2fb6:	4f 2d       	mov	r20, r15
    2fb8:	67 e0       	ldi	r22, 0x07	; 7
    2fba:	8d 2f       	mov	r24, r29
    2fbc:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
    2fc0:	04 e3       	ldi	r16, 0x34	; 52
    2fc2:	11 e0       	ldi	r17, 0x01	; 1
    2fc4:	2f 2d       	mov	r18, r15
    2fc6:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2fca:	67 e0       	ldi	r22, 0x07	; 7
    2fcc:	8d 2f       	mov	r24, r29
    2fce:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table9) ;
    2fd2:	b8 01       	movw	r22, r16
    2fd4:	8f 2d       	mov	r24, r15
    2fd6:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    2fda:	d8 16       	cp	r13, r24
    2fdc:	08 f0       	brcs	.+2      	; 0x2fe0 <Tactics+0x1954>
    2fde:	9c c4       	rjmp	.+2360   	; 0x3918 <Tactics+0x228c>
				{
					max = checkers ;
					myLine = line ;
    2fe0:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    2fe4:	97 e0       	ldi	r25, 0x07	; 7
    2fe6:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table9) ;
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
				checkers = scanCopyChessBoard(mine,table9) ;
				if (max < checkers)
				{
					max = checkers ;
    2fea:	d8 2e       	mov	r13, r24
    2fec:	95 c4       	rjmp	.+2346   	; 0x3918 <Tactics+0x228c>
					myColumn = column ;
				}
				break;
				
				case 10:
				setChecker(line,column,mine,table10) ;
    2fee:	2c e7       	ldi	r18, 0x7C	; 124
    2ff0:	31 e0       	ldi	r19, 0x01	; 1
    2ff2:	4f 2d       	mov	r20, r15
    2ff4:	67 e0       	ldi	r22, 0x07	; 7
    2ff6:	8d 2f       	mov	r24, r29
    2ff8:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table10) ;
    2ffc:	0c e7       	ldi	r16, 0x7C	; 124
    2ffe:	11 e0       	ldi	r17, 0x01	; 1
    3000:	2f 2d       	mov	r18, r15
    3002:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    3006:	67 e0       	ldi	r22, 0x07	; 7
    3008:	8d 2f       	mov	r24, r29
    300a:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table10) ;
    300e:	b8 01       	movw	r22, r16
    3010:	8f 2d       	mov	r24, r15
    3012:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    3016:	d8 16       	cp	r13, r24
    3018:	08 f0       	brcs	.+2      	; 0x301c <Tactics+0x1990>
    301a:	1d c4       	rjmp	.+2106   	; 0x3856 <Tactics+0x21ca>
				{
					max = checkers ;
					myLine = line ;
    301c:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    3020:	97 e0       	ldi	r25, 0x07	; 7
    3022:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table10) ;
				TurnOtherCheckers(line,column,enemy,mine,table10) ;
				checkers = scanCopyChessBoard(mine,table10) ;
				if (max < checkers)
				{
					max = checkers ;
    3026:	d8 2e       	mov	r13, r24
    3028:	16 c4       	rjmp	.+2092   	; 0x3856 <Tactics+0x21ca>
					myColumn = column ;
				}
				break;
				
				case 11:
				setChecker(line,column,mine,table11) ;
    302a:	24 e2       	ldi	r18, 0x24	; 36
    302c:	31 e0       	ldi	r19, 0x01	; 1
    302e:	4f 2d       	mov	r20, r15
    3030:	67 e0       	ldi	r22, 0x07	; 7
    3032:	8d 2f       	mov	r24, r29
    3034:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table11) ;
    3038:	04 e2       	ldi	r16, 0x24	; 36
    303a:	11 e0       	ldi	r17, 0x01	; 1
    303c:	2f 2d       	mov	r18, r15
    303e:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    3042:	67 e0       	ldi	r22, 0x07	; 7
    3044:	8d 2f       	mov	r24, r29
    3046:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table11) ;
    304a:	b8 01       	movw	r22, r16
    304c:	8f 2d       	mov	r24, r15
    304e:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    3052:	d8 16       	cp	r13, r24
    3054:	08 f0       	brcs	.+2      	; 0x3058 <Tactics+0x19cc>
    3056:	07 c4       	rjmp	.+2062   	; 0x3866 <Tactics+0x21da>
				{
					max = checkers ;
					myLine = line ;
    3058:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    305c:	97 e0       	ldi	r25, 0x07	; 7
    305e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table11) ;
				TurnOtherCheckers(line,column,enemy,mine,table11) ;
				checkers = scanCopyChessBoard(mine,table11) ;
				if (max < checkers)
				{
					max = checkers ;
    3062:	d8 2e       	mov	r13, r24
    3064:	00 c4       	rjmp	.+2048   	; 0x3866 <Tactics+0x21da>
					myColumn = column ;
				}
				break;
				
				case 12:
				setChecker(line,column,mine,table12) ;
    3066:	2c ea       	ldi	r18, 0xAC	; 172
    3068:	30 e0       	ldi	r19, 0x00	; 0
    306a:	4f 2d       	mov	r20, r15
    306c:	67 e0       	ldi	r22, 0x07	; 7
    306e:	8d 2f       	mov	r24, r29
    3070:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table12) ;
    3074:	0c ea       	ldi	r16, 0xAC	; 172
    3076:	10 e0       	ldi	r17, 0x00	; 0
    3078:	2f 2d       	mov	r18, r15
    307a:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    307e:	67 e0       	ldi	r22, 0x07	; 7
    3080:	8d 2f       	mov	r24, r29
    3082:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table12) ;
    3086:	b8 01       	movw	r22, r16
    3088:	8f 2d       	mov	r24, r15
    308a:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    308e:	d8 16       	cp	r13, r24
    3090:	08 f0       	brcs	.+2      	; 0x3094 <Tactics+0x1a08>
    3092:	f1 c3       	rjmp	.+2018   	; 0x3876 <Tactics+0x21ea>
				{
					max = checkers ;
					myLine = line ;
    3094:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    3098:	97 e0       	ldi	r25, 0x07	; 7
    309a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table12) ;
				TurnOtherCheckers(line,column,enemy,mine,table12) ;
				checkers = scanCopyChessBoard(mine,table12) ;
				if (max < checkers)
				{
					max = checkers ;
    309e:	d8 2e       	mov	r13, r24
    30a0:	ea c3       	rjmp	.+2004   	; 0x3876 <Tactics+0x21ea>
					myColumn = column ;
				}
				break;
				
				case 13:
				setChecker(line,column,mine,table13) ;
    30a2:	2c ec       	ldi	r18, 0xCC	; 204
    30a4:	30 e0       	ldi	r19, 0x00	; 0
    30a6:	4f 2d       	mov	r20, r15
    30a8:	67 e0       	ldi	r22, 0x07	; 7
    30aa:	8d 2f       	mov	r24, r29
    30ac:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table13) ;
    30b0:	0c ec       	ldi	r16, 0xCC	; 204
    30b2:	10 e0       	ldi	r17, 0x00	; 0
    30b4:	2f 2d       	mov	r18, r15
    30b6:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    30ba:	67 e0       	ldi	r22, 0x07	; 7
    30bc:	8d 2f       	mov	r24, r29
    30be:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table13) ;
    30c2:	b8 01       	movw	r22, r16
    30c4:	8f 2d       	mov	r24, r15
    30c6:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    30ca:	d8 16       	cp	r13, r24
    30cc:	08 f0       	brcs	.+2      	; 0x30d0 <Tactics+0x1a44>
    30ce:	db c3       	rjmp	.+1974   	; 0x3886 <Tactics+0x21fa>
				{
					max = checkers ;
					myLine = line ;
    30d0:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    30d4:	97 e0       	ldi	r25, 0x07	; 7
    30d6:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table13) ;
				TurnOtherCheckers(line,column,enemy,mine,table13) ;
				checkers = scanCopyChessBoard(mine,table13) ;
				if (max < checkers)
				{
					max = checkers ;
    30da:	d8 2e       	mov	r13, r24
    30dc:	d4 c3       	rjmp	.+1960   	; 0x3886 <Tactics+0x21fa>
					myColumn = column ;
				}
				break;
				
				case 14:
				setChecker(line,column,mine,table14) ;
    30de:	24 e1       	ldi	r18, 0x14	; 20
    30e0:	31 e0       	ldi	r19, 0x01	; 1
    30e2:	4f 2d       	mov	r20, r15
    30e4:	67 e0       	ldi	r22, 0x07	; 7
    30e6:	8d 2f       	mov	r24, r29
    30e8:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table14) ;
    30ec:	04 e1       	ldi	r16, 0x14	; 20
    30ee:	11 e0       	ldi	r17, 0x01	; 1
    30f0:	2f 2d       	mov	r18, r15
    30f2:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    30f6:	67 e0       	ldi	r22, 0x07	; 7
    30f8:	8d 2f       	mov	r24, r29
    30fa:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table14) ;
    30fe:	b8 01       	movw	r22, r16
    3100:	8f 2d       	mov	r24, r15
    3102:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    3106:	d8 16       	cp	r13, r24
    3108:	08 f0       	brcs	.+2      	; 0x310c <Tactics+0x1a80>
    310a:	c5 c3       	rjmp	.+1930   	; 0x3896 <Tactics+0x220a>
				{
					max = checkers ;
					myLine = line ;
    310c:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    3110:	97 e0       	ldi	r25, 0x07	; 7
    3112:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table14) ;
				TurnOtherCheckers(line,column,enemy,mine,table14) ;
				checkers = scanCopyChessBoard(mine,table14) ;
				if (max < checkers)
				{
					max = checkers ;
    3116:	d8 2e       	mov	r13, r24
    3118:	be c3       	rjmp	.+1916   	; 0x3896 <Tactics+0x220a>
		temp = buffer & 0b01000000 ;
		temp = (temp >> 6) ;
		if (temp == 1)
		{
			column = 7 ;
			count++ ;
    311a:	0f 2e       	mov	r0, r31
    311c:	ff e0       	ldi	r31, 0x0F	; 15
    311e:	ef 2e       	mov	r14, r31
    3120:	f0 2d       	mov	r31, r0
    3122:	04 c0       	rjmp	.+8      	; 0x312c <Tactics+0x1aa0>
    3124:	0f 2e       	mov	r0, r31
    3126:	ff e0       	ldi	r31, 0x0F	; 15
    3128:	ef 2e       	mov	r14, r31
    312a:	f0 2d       	mov	r31, r0
				}
				break;
				
				
				default:
				setChecker(line,column,mine,table9) ;
    312c:	24 e3       	ldi	r18, 0x34	; 52
    312e:	31 e0       	ldi	r19, 0x01	; 1
    3130:	4f 2d       	mov	r20, r15
    3132:	67 e0       	ldi	r22, 0x07	; 7
    3134:	8d 2f       	mov	r24, r29
    3136:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
    313a:	04 e3       	ldi	r16, 0x34	; 52
    313c:	11 e0       	ldi	r17, 0x01	; 1
    313e:	2f 2d       	mov	r18, r15
    3140:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    3144:	67 e0       	ldi	r22, 0x07	; 7
    3146:	8d 2f       	mov	r24, r29
    3148:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table9) ;
    314c:	b8 01       	movw	r22, r16
    314e:	8f 2d       	mov	r24, r15
    3150:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    3154:	d8 16       	cp	r13, r24
    3156:	30 f4       	brcc	.+12     	; 0x3164 <Tactics+0x1ad8>
				{
					max = checkers ;
					myLine = line ;
    3158:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    315c:	97 e0       	ldi	r25, 0x07	; 7
    315e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table9) ;
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
				checkers = scanCopyChessBoard(mine,table9) ;
				if (max < checkers)
				{
					max = checkers ;
    3162:	d8 2e       	mov	r13, r24
		}
		
		/* Eighth valid move in this line */
		temp = buffer & 0b10000000 ;
		temp = (temp >> 7) ;
		if (temp == 1)
    3164:	cc 23       	and	r28, r28
    3166:	0c f0       	brlt	.+2      	; 0x316a <Tactics+0x1ade>
    3168:	46 c2       	rjmp	.+1164   	; 0x35f6 <Tactics+0x1f6a>
		{
			column = 8 ;
			count++ ;
    316a:	e3 94       	inc	r14
			switch(count)
    316c:	8e 2d       	mov	r24, r14
    316e:	90 e0       	ldi	r25, 0x00	; 0
    3170:	fc 01       	movw	r30, r24
    3172:	31 97       	sbiw	r30, 0x01	; 1
    3174:	ee 30       	cpi	r30, 0x0E	; 14
    3176:	f1 05       	cpc	r31, r1
    3178:	08 f0       	brcs	.+2      	; 0x317c <Tactics+0x1af0>
    317a:	e2 c1       	rjmp	.+964    	; 0x3540 <Tactics+0x1eb4>
    317c:	e2 56       	subi	r30, 0x62	; 98
    317e:	ff 4f       	sbci	r31, 0xFF	; 255
    3180:	0c 94 78 21 	jmp	0x42f0	; 0x42f0 <__tablejump2__>
			{
				case 1:
				setChecker(line,column,mine,table1) ;
    3184:	2c ed       	ldi	r18, 0xDC	; 220
    3186:	30 e0       	ldi	r19, 0x00	; 0
    3188:	4f 2d       	mov	r20, r15
    318a:	68 e0       	ldi	r22, 0x08	; 8
    318c:	8d 2f       	mov	r24, r29
    318e:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table1) ;
    3192:	0c ed       	ldi	r16, 0xDC	; 220
    3194:	10 e0       	ldi	r17, 0x00	; 0
    3196:	2f 2d       	mov	r18, r15
    3198:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    319c:	68 e0       	ldi	r22, 0x08	; 8
    319e:	8d 2f       	mov	r24, r29
    31a0:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table1) ;
    31a4:	b8 01       	movw	r22, r16
    31a6:	8f 2d       	mov	r24, r15
    31a8:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    31ac:	d8 16       	cp	r13, r24
    31ae:	08 f0       	brcs	.+2      	; 0x31b2 <Tactics+0x1b26>
    31b0:	22 c2       	rjmp	.+1092   	; 0x35f6 <Tactics+0x1f6a>
				{
					max = checkers ;
					myLine = line ;
    31b2:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    31b6:	98 e0       	ldi	r25, 0x08	; 8
    31b8:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table1) ;
				TurnOtherCheckers(line,column,enemy,mine,table1) ;
				checkers = scanCopyChessBoard(mine,table1) ;
				if (max < checkers)
				{
					max = checkers ;
    31bc:	d8 2e       	mov	r13, r24
    31be:	1b c2       	rjmp	.+1078   	; 0x35f6 <Tactics+0x1f6a>
					myColumn = column ;
				}
				break;
				
				case 2:
				setChecker(line,column,mine,table2) ;
    31c0:	2c e6       	ldi	r18, 0x6C	; 108
    31c2:	31 e0       	ldi	r19, 0x01	; 1
    31c4:	4f 2d       	mov	r20, r15
    31c6:	68 e0       	ldi	r22, 0x08	; 8
    31c8:	8d 2f       	mov	r24, r29
    31ca:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table2) ;
    31ce:	0c e6       	ldi	r16, 0x6C	; 108
    31d0:	11 e0       	ldi	r17, 0x01	; 1
    31d2:	2f 2d       	mov	r18, r15
    31d4:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    31d8:	68 e0       	ldi	r22, 0x08	; 8
    31da:	8d 2f       	mov	r24, r29
    31dc:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table2) ;
    31e0:	b8 01       	movw	r22, r16
    31e2:	8f 2d       	mov	r24, r15
    31e4:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    31e8:	d8 16       	cp	r13, r24
    31ea:	08 f0       	brcs	.+2      	; 0x31ee <Tactics+0x1b62>
    31ec:	c7 c1       	rjmp	.+910    	; 0x357c <Tactics+0x1ef0>
				{
					max = checkers ;
					myLine = line ;
    31ee:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    31f2:	98 e0       	ldi	r25, 0x08	; 8
    31f4:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table2) ;
				TurnOtherCheckers(line,column,enemy,mine,table2) ;
				checkers = scanCopyChessBoard(mine,table2) ;
				if (max < checkers)
				{
					max = checkers ;
    31f8:	d8 2e       	mov	r13, r24
		temp = buffer & 0b10000000 ;
		temp = (temp >> 7) ;
		if (temp == 1)
		{
			column = 8 ;
			count++ ;
    31fa:	68 94       	set
    31fc:	ee 24       	eor	r14, r14
    31fe:	e1 f8       	bld	r14, 1
    3200:	fa c1       	rjmp	.+1012   	; 0x35f6 <Tactics+0x1f6a>
					myColumn = column ;
				}
				break;
				
				case 3:
				setChecker(line,column,mine,table3) ;
    3202:	2c e6       	ldi	r18, 0x6C	; 108
    3204:	30 e0       	ldi	r19, 0x00	; 0
    3206:	4f 2d       	mov	r20, r15
    3208:	68 e0       	ldi	r22, 0x08	; 8
    320a:	8d 2f       	mov	r24, r29
    320c:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table3) ;
    3210:	0c e6       	ldi	r16, 0x6C	; 108
    3212:	10 e0       	ldi	r17, 0x00	; 0
    3214:	2f 2d       	mov	r18, r15
    3216:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    321a:	68 e0       	ldi	r22, 0x08	; 8
    321c:	8d 2f       	mov	r24, r29
    321e:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table3) ;
    3222:	b8 01       	movw	r22, r16
    3224:	8f 2d       	mov	r24, r15
    3226:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    322a:	d8 16       	cp	r13, r24
    322c:	08 f0       	brcs	.+2      	; 0x3230 <Tactics+0x1ba4>
    322e:	aa c1       	rjmp	.+852    	; 0x3584 <Tactics+0x1ef8>
				{
					max = checkers ;
					myLine = line ;
    3230:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    3234:	98 e0       	ldi	r25, 0x08	; 8
    3236:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table3) ;
				TurnOtherCheckers(line,column,enemy,mine,table3) ;
				checkers = scanCopyChessBoard(mine,table3) ;
				if (max < checkers)
				{
					max = checkers ;
    323a:	d8 2e       	mov	r13, r24
		temp = buffer & 0b10000000 ;
		temp = (temp >> 7) ;
		if (temp == 1)
		{
			column = 8 ;
			count++ ;
    323c:	0f 2e       	mov	r0, r31
    323e:	f3 e0       	ldi	r31, 0x03	; 3
    3240:	ef 2e       	mov	r14, r31
    3242:	f0 2d       	mov	r31, r0
    3244:	d8 c1       	rjmp	.+944    	; 0x35f6 <Tactics+0x1f6a>
					myColumn = column ;
				}
				break;
				
				case 4:
				setChecker(line,column,mine,table4) ;
    3246:	24 e4       	ldi	r18, 0x44	; 68
    3248:	31 e0       	ldi	r19, 0x01	; 1
    324a:	4f 2d       	mov	r20, r15
    324c:	68 e0       	ldi	r22, 0x08	; 8
    324e:	8d 2f       	mov	r24, r29
    3250:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table4) ;
    3254:	04 e4       	ldi	r16, 0x44	; 68
    3256:	11 e0       	ldi	r17, 0x01	; 1
    3258:	2f 2d       	mov	r18, r15
    325a:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    325e:	68 e0       	ldi	r22, 0x08	; 8
    3260:	8d 2f       	mov	r24, r29
    3262:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table4) ;
    3266:	b8 01       	movw	r22, r16
    3268:	8f 2d       	mov	r24, r15
    326a:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    326e:	d8 16       	cp	r13, r24
    3270:	08 f0       	brcs	.+2      	; 0x3274 <Tactics+0x1be8>
    3272:	8d c1       	rjmp	.+794    	; 0x358e <Tactics+0x1f02>
				{
					max = checkers ;
					myLine = line ;
    3274:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    3278:	98 e0       	ldi	r25, 0x08	; 8
    327a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table4) ;
				TurnOtherCheckers(line,column,enemy,mine,table4) ;
				checkers = scanCopyChessBoard(mine,table4) ;
				if (max < checkers)
				{
					max = checkers ;
    327e:	d8 2e       	mov	r13, r24
		temp = buffer & 0b10000000 ;
		temp = (temp >> 7) ;
		if (temp == 1)
		{
			column = 8 ;
			count++ ;
    3280:	68 94       	set
    3282:	ee 24       	eor	r14, r14
    3284:	e2 f8       	bld	r14, 2
    3286:	b7 c1       	rjmp	.+878    	; 0x35f6 <Tactics+0x1f6a>
					myColumn = column ;
				}
				break;
				
				case 5:
				setChecker(line,column,mine,table5) ;
    3288:	24 e5       	ldi	r18, 0x54	; 84
    328a:	31 e0       	ldi	r19, 0x01	; 1
    328c:	4f 2d       	mov	r20, r15
    328e:	68 e0       	ldi	r22, 0x08	; 8
    3290:	8d 2f       	mov	r24, r29
    3292:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table5) ;
    3296:	04 e5       	ldi	r16, 0x54	; 84
    3298:	11 e0       	ldi	r17, 0x01	; 1
    329a:	2f 2d       	mov	r18, r15
    329c:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    32a0:	68 e0       	ldi	r22, 0x08	; 8
    32a2:	8d 2f       	mov	r24, r29
    32a4:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table5) ;
    32a8:	b8 01       	movw	r22, r16
    32aa:	8f 2d       	mov	r24, r15
    32ac:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    32b0:	d8 16       	cp	r13, r24
    32b2:	08 f0       	brcs	.+2      	; 0x32b6 <Tactics+0x1c2a>
    32b4:	70 c1       	rjmp	.+736    	; 0x3596 <Tactics+0x1f0a>
				{
					max = checkers ;
					myLine = line ;
    32b6:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    32ba:	98 e0       	ldi	r25, 0x08	; 8
    32bc:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table5) ;
				TurnOtherCheckers(line,column,enemy,mine,table5) ;
				checkers = scanCopyChessBoard(mine,table5) ;
				if (max < checkers)
				{
					max = checkers ;
    32c0:	d8 2e       	mov	r13, r24
		temp = buffer & 0b10000000 ;
		temp = (temp >> 7) ;
		if (temp == 1)
		{
			column = 8 ;
			count++ ;
    32c2:	0f 2e       	mov	r0, r31
    32c4:	f5 e0       	ldi	r31, 0x05	; 5
    32c6:	ef 2e       	mov	r14, r31
    32c8:	f0 2d       	mov	r31, r0
    32ca:	95 c1       	rjmp	.+810    	; 0x35f6 <Tactics+0x1f6a>
					myColumn = column ;
				}
				break;
				
				case 6:
				setChecker(line,column,mine,table6) ;
    32cc:	24 e8       	ldi	r18, 0x84	; 132
    32ce:	30 e0       	ldi	r19, 0x00	; 0
    32d0:	4f 2d       	mov	r20, r15
    32d2:	68 e0       	ldi	r22, 0x08	; 8
    32d4:	8d 2f       	mov	r24, r29
    32d6:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table6) ;
    32da:	04 e8       	ldi	r16, 0x84	; 132
    32dc:	10 e0       	ldi	r17, 0x00	; 0
    32de:	2f 2d       	mov	r18, r15
    32e0:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    32e4:	68 e0       	ldi	r22, 0x08	; 8
    32e6:	8d 2f       	mov	r24, r29
    32e8:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table6) ;
    32ec:	b8 01       	movw	r22, r16
    32ee:	8f 2d       	mov	r24, r15
    32f0:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    32f4:	d8 16       	cp	r13, r24
    32f6:	08 f0       	brcs	.+2      	; 0x32fa <Tactics+0x1c6e>
    32f8:	53 c1       	rjmp	.+678    	; 0x35a0 <Tactics+0x1f14>
				{
					max = checkers ;
					myLine = line ;
    32fa:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    32fe:	98 e0       	ldi	r25, 0x08	; 8
    3300:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table6) ;
				TurnOtherCheckers(line,column,enemy,mine,table6) ;
				checkers = scanCopyChessBoard(mine,table6) ;
				if (max < checkers)
				{
					max = checkers ;
    3304:	d8 2e       	mov	r13, r24
		temp = buffer & 0b10000000 ;
		temp = (temp >> 7) ;
		if (temp == 1)
		{
			column = 8 ;
			count++ ;
    3306:	0f 2e       	mov	r0, r31
    3308:	f6 e0       	ldi	r31, 0x06	; 6
    330a:	ef 2e       	mov	r14, r31
    330c:	f0 2d       	mov	r31, r0
    330e:	73 c1       	rjmp	.+742    	; 0x35f6 <Tactics+0x1f6a>
					myColumn = column ;
				}
				break;
				
				case 7:
				setChecker(line,column,mine,table7) ;
    3310:	2c ee       	ldi	r18, 0xEC	; 236
    3312:	30 e0       	ldi	r19, 0x00	; 0
    3314:	4f 2d       	mov	r20, r15
    3316:	68 e0       	ldi	r22, 0x08	; 8
    3318:	8d 2f       	mov	r24, r29
    331a:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table7) ;
    331e:	0c ee       	ldi	r16, 0xEC	; 236
    3320:	10 e0       	ldi	r17, 0x00	; 0
    3322:	2f 2d       	mov	r18, r15
    3324:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    3328:	68 e0       	ldi	r22, 0x08	; 8
    332a:	8d 2f       	mov	r24, r29
    332c:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table7) ;
    3330:	b8 01       	movw	r22, r16
    3332:	8f 2d       	mov	r24, r15
    3334:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    3338:	d8 16       	cp	r13, r24
    333a:	08 f0       	brcs	.+2      	; 0x333e <Tactics+0x1cb2>
    333c:	36 c1       	rjmp	.+620    	; 0x35aa <Tactics+0x1f1e>
				{
					max = checkers ;
					myLine = line ;
    333e:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    3342:	98 e0       	ldi	r25, 0x08	; 8
    3344:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table7) ;
				TurnOtherCheckers(line,column,enemy,mine,table7) ;
				checkers = scanCopyChessBoard(mine,table7) ;
				if (max < checkers)
				{
					max = checkers ;
    3348:	d8 2e       	mov	r13, r24
		temp = buffer & 0b10000000 ;
		temp = (temp >> 7) ;
		if (temp == 1)
		{
			column = 8 ;
			count++ ;
    334a:	0f 2e       	mov	r0, r31
    334c:	f7 e0       	ldi	r31, 0x07	; 7
    334e:	ef 2e       	mov	r14, r31
    3350:	f0 2d       	mov	r31, r0
    3352:	51 c1       	rjmp	.+674    	; 0x35f6 <Tactics+0x1f6a>
					myColumn = column ;
				}
				break;
				
				case 8:
				setChecker(line,column,mine,table8) ;
    3354:	24 e9       	ldi	r18, 0x94	; 148
    3356:	30 e0       	ldi	r19, 0x00	; 0
    3358:	4f 2d       	mov	r20, r15
    335a:	68 e0       	ldi	r22, 0x08	; 8
    335c:	8d 2f       	mov	r24, r29
    335e:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table8) ;
    3362:	04 e9       	ldi	r16, 0x94	; 148
    3364:	10 e0       	ldi	r17, 0x00	; 0
    3366:	2f 2d       	mov	r18, r15
    3368:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    336c:	68 e0       	ldi	r22, 0x08	; 8
    336e:	8d 2f       	mov	r24, r29
    3370:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table8) ;
    3374:	b8 01       	movw	r22, r16
    3376:	8f 2d       	mov	r24, r15
    3378:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    337c:	d8 16       	cp	r13, r24
    337e:	08 f0       	brcs	.+2      	; 0x3382 <Tactics+0x1cf6>
    3380:	19 c1       	rjmp	.+562    	; 0x35b4 <Tactics+0x1f28>
				{
					max = checkers ;
					myLine = line ;
    3382:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    3386:	98 e0       	ldi	r25, 0x08	; 8
    3388:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table8) ;
				TurnOtherCheckers(line,column,enemy,mine,table8) ;
				checkers = scanCopyChessBoard(mine,table8) ;
				if (max < checkers)
				{
					max = checkers ;
    338c:	d8 2e       	mov	r13, r24
		temp = buffer & 0b10000000 ;
		temp = (temp >> 7) ;
		if (temp == 1)
		{
			column = 8 ;
			count++ ;
    338e:	68 94       	set
    3390:	ee 24       	eor	r14, r14
    3392:	e3 f8       	bld	r14, 3
    3394:	30 c1       	rjmp	.+608    	; 0x35f6 <Tactics+0x1f6a>
					myColumn = column ;
				}
				break;
				
				case 9:
				setChecker(line,column,mine,table9) ;
    3396:	24 e3       	ldi	r18, 0x34	; 52
    3398:	31 e0       	ldi	r19, 0x01	; 1
    339a:	4f 2d       	mov	r20, r15
    339c:	68 e0       	ldi	r22, 0x08	; 8
    339e:	8d 2f       	mov	r24, r29
    33a0:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
    33a4:	04 e3       	ldi	r16, 0x34	; 52
    33a6:	11 e0       	ldi	r17, 0x01	; 1
    33a8:	2f 2d       	mov	r18, r15
    33aa:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    33ae:	68 e0       	ldi	r22, 0x08	; 8
    33b0:	8d 2f       	mov	r24, r29
    33b2:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table9) ;
    33b6:	b8 01       	movw	r22, r16
    33b8:	8f 2d       	mov	r24, r15
    33ba:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    33be:	d8 16       	cp	r13, r24
    33c0:	08 f0       	brcs	.+2      	; 0x33c4 <Tactics+0x1d38>
    33c2:	fc c0       	rjmp	.+504    	; 0x35bc <Tactics+0x1f30>
				{
					max = checkers ;
					myLine = line ;
    33c4:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    33c8:	98 e0       	ldi	r25, 0x08	; 8
    33ca:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table9) ;
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
				checkers = scanCopyChessBoard(mine,table9) ;
				if (max < checkers)
				{
					max = checkers ;
    33ce:	d8 2e       	mov	r13, r24
		temp = buffer & 0b10000000 ;
		temp = (temp >> 7) ;
		if (temp == 1)
		{
			column = 8 ;
			count++ ;
    33d0:	0f 2e       	mov	r0, r31
    33d2:	f9 e0       	ldi	r31, 0x09	; 9
    33d4:	ef 2e       	mov	r14, r31
    33d6:	f0 2d       	mov	r31, r0
    33d8:	0e c1       	rjmp	.+540    	; 0x35f6 <Tactics+0x1f6a>
					myColumn = column ;
				}
				break;
				
				case 10:
				setChecker(line,column,mine,table10) ;
    33da:	2c e7       	ldi	r18, 0x7C	; 124
    33dc:	31 e0       	ldi	r19, 0x01	; 1
    33de:	4f 2d       	mov	r20, r15
    33e0:	68 e0       	ldi	r22, 0x08	; 8
    33e2:	8d 2f       	mov	r24, r29
    33e4:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table10) ;
    33e8:	0c e7       	ldi	r16, 0x7C	; 124
    33ea:	11 e0       	ldi	r17, 0x01	; 1
    33ec:	2f 2d       	mov	r18, r15
    33ee:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    33f2:	68 e0       	ldi	r22, 0x08	; 8
    33f4:	8d 2f       	mov	r24, r29
    33f6:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table10) ;
    33fa:	b8 01       	movw	r22, r16
    33fc:	8f 2d       	mov	r24, r15
    33fe:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    3402:	d8 16       	cp	r13, r24
    3404:	08 f0       	brcs	.+2      	; 0x3408 <Tactics+0x1d7c>
    3406:	df c0       	rjmp	.+446    	; 0x35c6 <Tactics+0x1f3a>
				{
					max = checkers ;
					myLine = line ;
    3408:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    340c:	98 e0       	ldi	r25, 0x08	; 8
    340e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table10) ;
				TurnOtherCheckers(line,column,enemy,mine,table10) ;
				checkers = scanCopyChessBoard(mine,table10) ;
				if (max < checkers)
				{
					max = checkers ;
    3412:	d8 2e       	mov	r13, r24
		temp = buffer & 0b10000000 ;
		temp = (temp >> 7) ;
		if (temp == 1)
		{
			column = 8 ;
			count++ ;
    3414:	0f 2e       	mov	r0, r31
    3416:	fa e0       	ldi	r31, 0x0A	; 10
    3418:	ef 2e       	mov	r14, r31
    341a:	f0 2d       	mov	r31, r0
    341c:	ec c0       	rjmp	.+472    	; 0x35f6 <Tactics+0x1f6a>
					myColumn = column ;
				}
				break;
				
				case 11:
				setChecker(line,column,mine,table11) ;
    341e:	24 e2       	ldi	r18, 0x24	; 36
    3420:	31 e0       	ldi	r19, 0x01	; 1
    3422:	4f 2d       	mov	r20, r15
    3424:	68 e0       	ldi	r22, 0x08	; 8
    3426:	8d 2f       	mov	r24, r29
    3428:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table11) ;
    342c:	04 e2       	ldi	r16, 0x24	; 36
    342e:	11 e0       	ldi	r17, 0x01	; 1
    3430:	2f 2d       	mov	r18, r15
    3432:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    3436:	68 e0       	ldi	r22, 0x08	; 8
    3438:	8d 2f       	mov	r24, r29
    343a:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table11) ;
    343e:	b8 01       	movw	r22, r16
    3440:	8f 2d       	mov	r24, r15
    3442:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    3446:	d8 16       	cp	r13, r24
    3448:	08 f0       	brcs	.+2      	; 0x344c <Tactics+0x1dc0>
    344a:	c2 c0       	rjmp	.+388    	; 0x35d0 <Tactics+0x1f44>
				{
					max = checkers ;
					myLine = line ;
    344c:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    3450:	98 e0       	ldi	r25, 0x08	; 8
    3452:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table11) ;
				TurnOtherCheckers(line,column,enemy,mine,table11) ;
				checkers = scanCopyChessBoard(mine,table11) ;
				if (max < checkers)
				{
					max = checkers ;
    3456:	d8 2e       	mov	r13, r24
		temp = buffer & 0b10000000 ;
		temp = (temp >> 7) ;
		if (temp == 1)
		{
			column = 8 ;
			count++ ;
    3458:	0f 2e       	mov	r0, r31
    345a:	fb e0       	ldi	r31, 0x0B	; 11
    345c:	ef 2e       	mov	r14, r31
    345e:	f0 2d       	mov	r31, r0
    3460:	ca c0       	rjmp	.+404    	; 0x35f6 <Tactics+0x1f6a>
					myColumn = column ;
				}
				break;
				
				case 12:
				setChecker(line,column,mine,table12) ;
    3462:	2c ea       	ldi	r18, 0xAC	; 172
    3464:	30 e0       	ldi	r19, 0x00	; 0
    3466:	4f 2d       	mov	r20, r15
    3468:	68 e0       	ldi	r22, 0x08	; 8
    346a:	8d 2f       	mov	r24, r29
    346c:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table12) ;
    3470:	0c ea       	ldi	r16, 0xAC	; 172
    3472:	10 e0       	ldi	r17, 0x00	; 0
    3474:	2f 2d       	mov	r18, r15
    3476:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    347a:	68 e0       	ldi	r22, 0x08	; 8
    347c:	8d 2f       	mov	r24, r29
    347e:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table12) ;
    3482:	b8 01       	movw	r22, r16
    3484:	8f 2d       	mov	r24, r15
    3486:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    348a:	d8 16       	cp	r13, r24
    348c:	08 f0       	brcs	.+2      	; 0x3490 <Tactics+0x1e04>
    348e:	a5 c0       	rjmp	.+330    	; 0x35da <Tactics+0x1f4e>
				{
					max = checkers ;
					myLine = line ;
    3490:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    3494:	98 e0       	ldi	r25, 0x08	; 8
    3496:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table12) ;
				TurnOtherCheckers(line,column,enemy,mine,table12) ;
				checkers = scanCopyChessBoard(mine,table12) ;
				if (max < checkers)
				{
					max = checkers ;
    349a:	d8 2e       	mov	r13, r24
		temp = buffer & 0b10000000 ;
		temp = (temp >> 7) ;
		if (temp == 1)
		{
			column = 8 ;
			count++ ;
    349c:	0f 2e       	mov	r0, r31
    349e:	fc e0       	ldi	r31, 0x0C	; 12
    34a0:	ef 2e       	mov	r14, r31
    34a2:	f0 2d       	mov	r31, r0
    34a4:	a8 c0       	rjmp	.+336    	; 0x35f6 <Tactics+0x1f6a>
					myColumn = column ;
				}
				break;
				
				case 13:
				setChecker(line,column,mine,table13) ;
    34a6:	2c ec       	ldi	r18, 0xCC	; 204
    34a8:	30 e0       	ldi	r19, 0x00	; 0
    34aa:	4f 2d       	mov	r20, r15
    34ac:	68 e0       	ldi	r22, 0x08	; 8
    34ae:	8d 2f       	mov	r24, r29
    34b0:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table13) ;
    34b4:	0c ec       	ldi	r16, 0xCC	; 204
    34b6:	10 e0       	ldi	r17, 0x00	; 0
    34b8:	2f 2d       	mov	r18, r15
    34ba:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    34be:	68 e0       	ldi	r22, 0x08	; 8
    34c0:	8d 2f       	mov	r24, r29
    34c2:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table13) ;
    34c6:	b8 01       	movw	r22, r16
    34c8:	8f 2d       	mov	r24, r15
    34ca:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    34ce:	d8 16       	cp	r13, r24
    34d0:	08 f0       	brcs	.+2      	; 0x34d4 <Tactics+0x1e48>
    34d2:	88 c0       	rjmp	.+272    	; 0x35e4 <Tactics+0x1f58>
				{
					max = checkers ;
					myLine = line ;
    34d4:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    34d8:	98 e0       	ldi	r25, 0x08	; 8
    34da:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table13) ;
				TurnOtherCheckers(line,column,enemy,mine,table13) ;
				checkers = scanCopyChessBoard(mine,table13) ;
				if (max < checkers)
				{
					max = checkers ;
    34de:	d8 2e       	mov	r13, r24
		temp = buffer & 0b10000000 ;
		temp = (temp >> 7) ;
		if (temp == 1)
		{
			column = 8 ;
			count++ ;
    34e0:	0f 2e       	mov	r0, r31
    34e2:	fd e0       	ldi	r31, 0x0D	; 13
    34e4:	ef 2e       	mov	r14, r31
    34e6:	f0 2d       	mov	r31, r0
    34e8:	86 c0       	rjmp	.+268    	; 0x35f6 <Tactics+0x1f6a>
					myColumn = column ;
				}
				break;
				
				case 14:
				setChecker(line,column,mine,table14) ;
    34ea:	24 e1       	ldi	r18, 0x14	; 20
    34ec:	31 e0       	ldi	r19, 0x01	; 1
    34ee:	4f 2d       	mov	r20, r15
    34f0:	68 e0       	ldi	r22, 0x08	; 8
    34f2:	8d 2f       	mov	r24, r29
    34f4:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table14) ;
    34f8:	04 e1       	ldi	r16, 0x14	; 20
    34fa:	11 e0       	ldi	r17, 0x01	; 1
    34fc:	2f 2d       	mov	r18, r15
    34fe:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    3502:	68 e0       	ldi	r22, 0x08	; 8
    3504:	8d 2f       	mov	r24, r29
    3506:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table14) ;
    350a:	b8 01       	movw	r22, r16
    350c:	8f 2d       	mov	r24, r15
    350e:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    3512:	d8 16       	cp	r13, r24
    3514:	08 f0       	brcs	.+2      	; 0x3518 <Tactics+0x1e8c>
    3516:	6b c0       	rjmp	.+214    	; 0x35ee <Tactics+0x1f62>
				{
					max = checkers ;
					myLine = line ;
    3518:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    351c:	98 e0       	ldi	r25, 0x08	; 8
    351e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table14) ;
				TurnOtherCheckers(line,column,enemy,mine,table14) ;
				checkers = scanCopyChessBoard(mine,table14) ;
				if (max < checkers)
				{
					max = checkers ;
    3522:	d8 2e       	mov	r13, r24
		temp = buffer & 0b10000000 ;
		temp = (temp >> 7) ;
		if (temp == 1)
		{
			column = 8 ;
			count++ ;
    3524:	0f 2e       	mov	r0, r31
    3526:	fe e0       	ldi	r31, 0x0E	; 14
    3528:	ef 2e       	mov	r14, r31
    352a:	f0 2d       	mov	r31, r0
    352c:	64 c0       	rjmp	.+200    	; 0x35f6 <Tactics+0x1f6a>
    352e:	0f 2e       	mov	r0, r31
    3530:	ff e0       	ldi	r31, 0x0F	; 15
    3532:	ef 2e       	mov	r14, r31
    3534:	f0 2d       	mov	r31, r0
    3536:	04 c0       	rjmp	.+8      	; 0x3540 <Tactics+0x1eb4>
    3538:	0f 2e       	mov	r0, r31
    353a:	ff e0       	ldi	r31, 0x0F	; 15
    353c:	ef 2e       	mov	r14, r31
    353e:	f0 2d       	mov	r31, r0
				}
				break;
				
				
				default:
				setChecker(line,column,mine,table9) ;
    3540:	24 e3       	ldi	r18, 0x34	; 52
    3542:	31 e0       	ldi	r19, 0x01	; 1
    3544:	4f 2d       	mov	r20, r15
    3546:	68 e0       	ldi	r22, 0x08	; 8
    3548:	8d 2f       	mov	r24, r29
    354a:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
    354e:	04 e3       	ldi	r16, 0x34	; 52
    3550:	11 e0       	ldi	r17, 0x01	; 1
    3552:	2f 2d       	mov	r18, r15
    3554:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    3558:	68 e0       	ldi	r22, 0x08	; 8
    355a:	8d 2f       	mov	r24, r29
    355c:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table9) ;
    3560:	b8 01       	movw	r22, r16
    3562:	8f 2d       	mov	r24, r15
    3564:	0e 94 0f 0b 	call	0x161e	; 0x161e <scanCopyChessBoard>
				if (max < checkers)
    3568:	d8 16       	cp	r13, r24
    356a:	08 f0       	brcs	.+2      	; 0x356e <Tactics+0x1ee2>
    356c:	44 c0       	rjmp	.+136    	; 0x35f6 <Tactics+0x1f6a>
				{
					max = checkers ;
					myLine = line ;
    356e:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <myLine>
					myColumn = column ;
    3572:	98 e0       	ldi	r25, 0x08	; 8
    3574:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table9) ;
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
				checkers = scanCopyChessBoard(mine,table9) ;
				if (max < checkers)
				{
					max = checkers ;
    3578:	d8 2e       	mov	r13, r24
    357a:	3d c0       	rjmp	.+122    	; 0x35f6 <Tactics+0x1f6a>
		temp = buffer & 0b10000000 ;
		temp = (temp >> 7) ;
		if (temp == 1)
		{
			column = 8 ;
			count++ ;
    357c:	68 94       	set
    357e:	ee 24       	eor	r14, r14
    3580:	e1 f8       	bld	r14, 1
    3582:	39 c0       	rjmp	.+114    	; 0x35f6 <Tactics+0x1f6a>
    3584:	0f 2e       	mov	r0, r31
    3586:	f3 e0       	ldi	r31, 0x03	; 3
    3588:	ef 2e       	mov	r14, r31
    358a:	f0 2d       	mov	r31, r0
    358c:	34 c0       	rjmp	.+104    	; 0x35f6 <Tactics+0x1f6a>
    358e:	68 94       	set
    3590:	ee 24       	eor	r14, r14
    3592:	e2 f8       	bld	r14, 2
    3594:	30 c0       	rjmp	.+96     	; 0x35f6 <Tactics+0x1f6a>
    3596:	0f 2e       	mov	r0, r31
    3598:	f5 e0       	ldi	r31, 0x05	; 5
    359a:	ef 2e       	mov	r14, r31
    359c:	f0 2d       	mov	r31, r0
    359e:	2b c0       	rjmp	.+86     	; 0x35f6 <Tactics+0x1f6a>
    35a0:	0f 2e       	mov	r0, r31
    35a2:	f6 e0       	ldi	r31, 0x06	; 6
    35a4:	ef 2e       	mov	r14, r31
    35a6:	f0 2d       	mov	r31, r0
    35a8:	26 c0       	rjmp	.+76     	; 0x35f6 <Tactics+0x1f6a>
    35aa:	0f 2e       	mov	r0, r31
    35ac:	f7 e0       	ldi	r31, 0x07	; 7
    35ae:	ef 2e       	mov	r14, r31
    35b0:	f0 2d       	mov	r31, r0
    35b2:	21 c0       	rjmp	.+66     	; 0x35f6 <Tactics+0x1f6a>
    35b4:	68 94       	set
    35b6:	ee 24       	eor	r14, r14
    35b8:	e3 f8       	bld	r14, 3
    35ba:	1d c0       	rjmp	.+58     	; 0x35f6 <Tactics+0x1f6a>
    35bc:	0f 2e       	mov	r0, r31
    35be:	f9 e0       	ldi	r31, 0x09	; 9
    35c0:	ef 2e       	mov	r14, r31
    35c2:	f0 2d       	mov	r31, r0
    35c4:	18 c0       	rjmp	.+48     	; 0x35f6 <Tactics+0x1f6a>
    35c6:	0f 2e       	mov	r0, r31
    35c8:	fa e0       	ldi	r31, 0x0A	; 10
    35ca:	ef 2e       	mov	r14, r31
    35cc:	f0 2d       	mov	r31, r0
    35ce:	13 c0       	rjmp	.+38     	; 0x35f6 <Tactics+0x1f6a>
    35d0:	0f 2e       	mov	r0, r31
    35d2:	fb e0       	ldi	r31, 0x0B	; 11
    35d4:	ef 2e       	mov	r14, r31
    35d6:	f0 2d       	mov	r31, r0
    35d8:	0e c0       	rjmp	.+28     	; 0x35f6 <Tactics+0x1f6a>
    35da:	0f 2e       	mov	r0, r31
    35dc:	fc e0       	ldi	r31, 0x0C	; 12
    35de:	ef 2e       	mov	r14, r31
    35e0:	f0 2d       	mov	r31, r0
    35e2:	09 c0       	rjmp	.+18     	; 0x35f6 <Tactics+0x1f6a>
    35e4:	0f 2e       	mov	r0, r31
    35e6:	fd e0       	ldi	r31, 0x0D	; 13
    35e8:	ef 2e       	mov	r14, r31
    35ea:	f0 2d       	mov	r31, r0
    35ec:	04 c0       	rjmp	.+8      	; 0x35f6 <Tactics+0x1f6a>
    35ee:	0f 2e       	mov	r0, r31
    35f0:	fe e0       	ldi	r31, 0x0E	; 14
    35f2:	ef 2e       	mov	r14, r31
    35f4:	f0 2d       	mov	r31, r0
    35f6:	df 5f       	subi	r29, 0xFF	; 255
	uint8_t count = 0 ;
	uint8_t max = 0 ;
	uint8_t checkers = 0 ;
	char line = (char) 0 ;
	uint8_t column = 0 ;
	for (uint8_t index = 0; index < SIZE/2; index++)
    35f8:	d9 34       	cpi	r29, 0x49	; 73
    35fa:	11 f0       	breq	.+4      	; 0x3600 <Tactics+0x1f74>
    35fc:	0c 94 59 0b 	jmp	0x16b2	; 0x16b2 <Tactics+0x26>
    3600:	23 c4       	rjmp	.+2118   	; 0x3e48 <Tactics+0x27bc>
		}
		
		/* Second valid in this line */
		temp = buffer & 0b00000010 ;
		temp = (temp >> 1) ;
		if (temp == 1)
    3602:	c1 ff       	sbrs	r28, 1
    3604:	97 c1       	rjmp	.+814    	; 0x3934 <Tactics+0x22a8>
    3606:	0c 94 f6 0e 	jmp	0x1dec	; 0x1dec <Tactics+0x760>
    360a:	c1 ff       	sbrs	r28, 1
    360c:	99 c1       	rjmp	.+818    	; 0x3940 <Tactics+0x22b4>
    360e:	0c 94 16 0f 	jmp	0x1e2c	; 0x1e2c <Tactics+0x7a0>
    3612:	c1 ff       	sbrs	r28, 1
    3614:	9b c1       	rjmp	.+822    	; 0x394c <Tactics+0x22c0>
    3616:	0c 94 76 0d 	jmp	0x1aec	; 0x1aec <Tactics+0x460>
    361a:	c1 ff       	sbrs	r28, 1
    361c:	9d c1       	rjmp	.+826    	; 0x3958 <Tactics+0x22cc>
    361e:	0c 94 96 0d 	jmp	0x1b2c	; 0x1b2c <Tactics+0x4a0>
    3622:	c1 ff       	sbrs	r28, 1
    3624:	9f c1       	rjmp	.+830    	; 0x3964 <Tactics+0x22d8>
    3626:	0c 94 b6 0d 	jmp	0x1b6c	; 0x1b6c <Tactics+0x4e0>
    362a:	c1 ff       	sbrs	r28, 1
    362c:	a1 c1       	rjmp	.+834    	; 0x3970 <Tactics+0x22e4>
    362e:	0c 94 d6 0d 	jmp	0x1bac	; 0x1bac <Tactics+0x520>
    3632:	c1 ff       	sbrs	r28, 1
    3634:	a3 c1       	rjmp	.+838    	; 0x397c <Tactics+0x22f0>
    3636:	0c 94 f6 0d 	jmp	0x1bec	; 0x1bec <Tactics+0x560>
    363a:	c1 ff       	sbrs	r28, 1
    363c:	a5 c1       	rjmp	.+842    	; 0x3988 <Tactics+0x22fc>
    363e:	0c 94 16 0e 	jmp	0x1c2c	; 0x1c2c <Tactics+0x5a0>
    3642:	c1 ff       	sbrs	r28, 1
    3644:	a7 c1       	rjmp	.+846    	; 0x3994 <Tactics+0x2308>
    3646:	0c 94 36 0e 	jmp	0x1c6c	; 0x1c6c <Tactics+0x5e0>
    364a:	c1 ff       	sbrs	r28, 1
    364c:	a9 c1       	rjmp	.+850    	; 0x39a0 <Tactics+0x2314>
    364e:	0c 94 56 0e 	jmp	0x1cac	; 0x1cac <Tactics+0x620>
    3652:	c1 ff       	sbrs	r28, 1
    3654:	ab c1       	rjmp	.+854    	; 0x39ac <Tactics+0x2320>
    3656:	0c 94 76 0e 	jmp	0x1cec	; 0x1cec <Tactics+0x660>
    365a:	c1 ff       	sbrs	r28, 1
    365c:	ad c1       	rjmp	.+858    	; 0x39b8 <Tactics+0x232c>
    365e:	0c 94 96 0e 	jmp	0x1d2c	; 0x1d2c <Tactics+0x6a0>
    3662:	c1 ff       	sbrs	r28, 1
    3664:	af c1       	rjmp	.+862    	; 0x39c4 <Tactics+0x2338>
    3666:	0c 94 b6 0e 	jmp	0x1d6c	; 0x1d6c <Tactics+0x6e0>
    366a:	c1 ff       	sbrs	r28, 1
    366c:	5d c1       	rjmp	.+698    	; 0x3928 <Tactics+0x229c>
    366e:	0c 94 d6 0e 	jmp	0x1dac	; 0x1dac <Tactics+0x720>
			
		}
		/* Third valid move in this line */
		temp = buffer & 0b00000100 ;
		temp = (temp >> 2) ;
		if (temp == 1)
    3672:	c2 ff       	sbrs	r28, 2
    3674:	ad c1       	rjmp	.+858    	; 0x39d0 <Tactics+0x2344>
    3676:	0c 94 c5 10 	jmp	0x218a	; 0x218a <Tactics+0xafe>
    367a:	c2 ff       	sbrs	r28, 2
    367c:	b3 c1       	rjmp	.+870    	; 0x39e4 <Tactics+0x2358>
    367e:	0c 94 e5 10 	jmp	0x21ca	; 0x21ca <Tactics+0xb3e>
    3682:	c2 ff       	sbrs	r28, 2
    3684:	b9 c1       	rjmp	.+882    	; 0x39f8 <Tactics+0x236c>
    3686:	0c 94 05 11 	jmp	0x220a	; 0x220a <Tactics+0xb7e>
    368a:	c2 ff       	sbrs	r28, 2
    368c:	bf c1       	rjmp	.+894    	; 0x3a0c <Tactics+0x2380>
    368e:	0c 94 65 0f 	jmp	0x1eca	; 0x1eca <Tactics+0x83e>
    3692:	c2 ff       	sbrs	r28, 2
    3694:	c1 c1       	rjmp	.+898    	; 0x3a18 <Tactics+0x238c>
    3696:	0c 94 85 0f 	jmp	0x1f0a	; 0x1f0a <Tactics+0x87e>
    369a:	c2 ff       	sbrs	r28, 2
    369c:	c6 c1       	rjmp	.+908    	; 0x3a2a <Tactics+0x239e>
    369e:	0c 94 a5 0f 	jmp	0x1f4a	; 0x1f4a <Tactics+0x8be>
    36a2:	c2 ff       	sbrs	r28, 2
    36a4:	cc c1       	rjmp	.+920    	; 0x3a3e <Tactics+0x23b2>
    36a6:	0c 94 c5 0f 	jmp	0x1f8a	; 0x1f8a <Tactics+0x8fe>
    36aa:	c2 ff       	sbrs	r28, 2
    36ac:	d1 c1       	rjmp	.+930    	; 0x3a50 <Tactics+0x23c4>
    36ae:	0c 94 e5 0f 	jmp	0x1fca	; 0x1fca <Tactics+0x93e>
    36b2:	c2 ff       	sbrs	r28, 2
    36b4:	d7 c1       	rjmp	.+942    	; 0x3a64 <Tactics+0x23d8>
    36b6:	0c 94 05 10 	jmp	0x200a	; 0x200a <Tactics+0x97e>
    36ba:	c2 ff       	sbrs	r28, 2
    36bc:	dd c1       	rjmp	.+954    	; 0x3a78 <Tactics+0x23ec>
    36be:	0c 94 25 10 	jmp	0x204a	; 0x204a <Tactics+0x9be>
    36c2:	c2 ff       	sbrs	r28, 2
    36c4:	e3 c1       	rjmp	.+966    	; 0x3a8c <Tactics+0x2400>
    36c6:	0c 94 45 10 	jmp	0x208a	; 0x208a <Tactics+0x9fe>
    36ca:	c2 ff       	sbrs	r28, 2
    36cc:	e8 c1       	rjmp	.+976    	; 0x3a9e <Tactics+0x2412>
    36ce:	0c 94 65 10 	jmp	0x20ca	; 0x20ca <Tactics+0xa3e>
    36d2:	c2 ff       	sbrs	r28, 2
    36d4:	ee c1       	rjmp	.+988    	; 0x3ab2 <Tactics+0x2426>
    36d6:	0c 94 85 10 	jmp	0x210a	; 0x210a <Tactics+0xa7e>
    36da:	c2 ff       	sbrs	r28, 2
    36dc:	f4 c1       	rjmp	.+1000   	; 0x3ac6 <Tactics+0x243a>
    36de:	0c 94 a5 10 	jmp	0x214a	; 0x214a <Tactics+0xabe>
		}
		
		/* Fourth valid move in this line */
		temp = buffer & 0b00001000 ;
		temp = (temp >> 3) ;
		if (temp == 1)
    36e2:	c3 ff       	sbrs	r28, 3
    36e4:	04 c2       	rjmp	.+1032   	; 0x3aee <Tactics+0x2462>
    36e6:	0c 94 b9 12 	jmp	0x2572	; 0x2572 <Tactics+0xee6>
    36ea:	c3 ff       	sbrs	r28, 3
    36ec:	0a c2       	rjmp	.+1044   	; 0x3b02 <Tactics+0x2476>
    36ee:	0c 94 d9 12 	jmp	0x25b2	; 0x25b2 <Tactics+0xf26>
    36f2:	c3 ff       	sbrs	r28, 3
    36f4:	10 c2       	rjmp	.+1056   	; 0x3b16 <Tactics+0x248a>
    36f6:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <Tactics+0xf66>
    36fa:	c3 ff       	sbrs	r28, 3
    36fc:	16 c2       	rjmp	.+1068   	; 0x3b2a <Tactics+0x249e>
    36fe:	0c 94 59 11 	jmp	0x22b2	; 0x22b2 <Tactics+0xc26>
    3702:	c3 ff       	sbrs	r28, 3
    3704:	18 c2       	rjmp	.+1072   	; 0x3b36 <Tactics+0x24aa>
    3706:	0c 94 79 11 	jmp	0x22f2	; 0x22f2 <Tactics+0xc66>
    370a:	c3 ff       	sbrs	r28, 3
    370c:	1d c2       	rjmp	.+1082   	; 0x3b48 <Tactics+0x24bc>
    370e:	0c 94 99 11 	jmp	0x2332	; 0x2332 <Tactics+0xca6>
    3712:	c3 ff       	sbrs	r28, 3
    3714:	23 c2       	rjmp	.+1094   	; 0x3b5c <Tactics+0x24d0>
    3716:	0c 94 b9 11 	jmp	0x2372	; 0x2372 <Tactics+0xce6>
    371a:	c3 ff       	sbrs	r28, 3
    371c:	28 c2       	rjmp	.+1104   	; 0x3b6e <Tactics+0x24e2>
    371e:	0c 94 d9 11 	jmp	0x23b2	; 0x23b2 <Tactics+0xd26>
    3722:	c3 ff       	sbrs	r28, 3
    3724:	2e c2       	rjmp	.+1116   	; 0x3b82 <Tactics+0x24f6>
    3726:	0c 94 f9 11 	jmp	0x23f2	; 0x23f2 <Tactics+0xd66>
    372a:	c3 ff       	sbrs	r28, 3
    372c:	34 c2       	rjmp	.+1128   	; 0x3b96 <Tactics+0x250a>
    372e:	0c 94 19 12 	jmp	0x2432	; 0x2432 <Tactics+0xda6>
    3732:	c3 ff       	sbrs	r28, 3
    3734:	3a c2       	rjmp	.+1140   	; 0x3baa <Tactics+0x251e>
    3736:	0c 94 39 12 	jmp	0x2472	; 0x2472 <Tactics+0xde6>
    373a:	c3 ff       	sbrs	r28, 3
    373c:	3f c2       	rjmp	.+1150   	; 0x3bbc <Tactics+0x2530>
    373e:	0c 94 59 12 	jmp	0x24b2	; 0x24b2 <Tactics+0xe26>
    3742:	c3 ff       	sbrs	r28, 3
    3744:	45 c2       	rjmp	.+1162   	; 0x3bd0 <Tactics+0x2544>
    3746:	0c 94 79 12 	jmp	0x24f2	; 0x24f2 <Tactics+0xe66>
    374a:	c3 ff       	sbrs	r28, 3
    374c:	c6 c1       	rjmp	.+908    	; 0x3ada <Tactics+0x244e>
    374e:	0c 94 99 12 	jmp	0x2532	; 0x2532 <Tactics+0xea6>
		}
		
		/* Fifth valid move in this line */
		temp = buffer & 0b00010000 ;
		temp = (temp >> 4) ;
		if (temp == 1)
    3752:	c4 ff       	sbrs	r28, 4
    3754:	47 c2       	rjmp	.+1166   	; 0x3be4 <Tactics+0x2558>
    3756:	d7 c8       	rjmp	.-3666   	; 0x2906 <Tactics+0x127a>
    3758:	c4 ff       	sbrs	r28, 4
    375a:	4b c2       	rjmp	.+1174   	; 0x3bf2 <Tactics+0x2566>
    375c:	f2 c8       	rjmp	.-3612   	; 0x2942 <Tactics+0x12b6>
    375e:	c4 ff       	sbrs	r28, 4
    3760:	4f c2       	rjmp	.+1182   	; 0x3c00 <Tactics+0x2574>
    3762:	0d c9       	rjmp	.-3558   	; 0x297e <Tactics+0x12f2>
    3764:	c4 ff       	sbrs	r28, 4
    3766:	53 c2       	rjmp	.+1190   	; 0x3c0e <Tactics+0x2582>
    3768:	28 c9       	rjmp	.-3504   	; 0x29ba <Tactics+0x132e>
    376a:	c4 ff       	sbrs	r28, 4
    376c:	57 c2       	rjmp	.+1198   	; 0x3c1c <Tactics+0x2590>
    376e:	0c 94 4d 13 	jmp	0x269a	; 0x269a <Tactics+0x100e>
    3772:	c4 ff       	sbrs	r28, 4
    3774:	57 c2       	rjmp	.+1198   	; 0x3c24 <Tactics+0x2598>
    3776:	0c 94 6d 13 	jmp	0x26da	; 0x26da <Tactics+0x104e>
    377a:	c4 ff       	sbrs	r28, 4
    377c:	5b c2       	rjmp	.+1206   	; 0x3c34 <Tactics+0x25a8>
    377e:	0c 94 8d 13 	jmp	0x271a	; 0x271a <Tactics+0x108e>
    3782:	c4 ff       	sbrs	r28, 4
    3784:	60 c2       	rjmp	.+1216   	; 0x3c46 <Tactics+0x25ba>
    3786:	0c 94 ad 13 	jmp	0x275a	; 0x275a <Tactics+0x10ce>
    378a:	c4 ff       	sbrs	r28, 4
    378c:	64 c2       	rjmp	.+1224   	; 0x3c56 <Tactics+0x25ca>
    378e:	05 c8       	rjmp	.-4086   	; 0x279a <Tactics+0x110e>
    3790:	c4 ff       	sbrs	r28, 4
    3792:	6a c2       	rjmp	.+1236   	; 0x3c68 <Tactics+0x25dc>
    3794:	22 c8       	rjmp	.-4028   	; 0x27da <Tactics+0x114e>
    3796:	c4 ff       	sbrs	r28, 4
    3798:	70 c2       	rjmp	.+1248   	; 0x3c7a <Tactics+0x25ee>
    379a:	3d c8       	rjmp	.-3974   	; 0x2816 <Tactics+0x118a>
    379c:	c4 ff       	sbrs	r28, 4
    379e:	76 c2       	rjmp	.+1260   	; 0x3c8c <Tactics+0x2600>
    37a0:	58 c8       	rjmp	.-3920   	; 0x2852 <Tactics+0x11c6>
    37a2:	c4 ff       	sbrs	r28, 4
    37a4:	7b c2       	rjmp	.+1270   	; 0x3c9c <Tactics+0x2610>
    37a6:	73 c8       	rjmp	.-3866   	; 0x288e <Tactics+0x1202>
    37a8:	c4 ff       	sbrs	r28, 4
    37aa:	81 c2       	rjmp	.+1282   	; 0x3cae <Tactics+0x2622>
    37ac:	8e c8       	rjmp	.-3812   	; 0x28ca <Tactics+0x123e>
		}
		
		/* Sixth valid move in this line */
		temp = buffer & 0b00100000 ;
		temp = (temp >> 5) ;
		if (temp == 1)
    37ae:	c5 ff       	sbrs	r28, 5
    37b0:	8e c2       	rjmp	.+1308   	; 0x3cce <Tactics+0x2642>
    37b2:	81 ca       	rjmp	.-2814   	; 0x2cb6 <Tactics+0x162a>
    37b4:	c5 ff       	sbrs	r28, 5
    37b6:	92 c2       	rjmp	.+1316   	; 0x3cdc <Tactics+0x2650>
    37b8:	9c ca       	rjmp	.-2760   	; 0x2cf2 <Tactics+0x1666>
    37ba:	c5 ff       	sbrs	r28, 5
    37bc:	96 c2       	rjmp	.+1324   	; 0x3cea <Tactics+0x265e>
    37be:	b7 ca       	rjmp	.-2706   	; 0x2d2e <Tactics+0x16a2>
    37c0:	c5 ff       	sbrs	r28, 5
    37c2:	9a c2       	rjmp	.+1332   	; 0x3cf8 <Tactics+0x266c>
    37c4:	d2 ca       	rjmp	.-2652   	; 0x2d6a <Tactics+0x16de>
    37c6:	c5 ff       	sbrs	r28, 5
    37c8:	9e c2       	rjmp	.+1340   	; 0x3d06 <Tactics+0x267a>
    37ca:	49 c9       	rjmp	.-3438   	; 0x2a5e <Tactics+0x13d2>
    37cc:	c5 ff       	sbrs	r28, 5
    37ce:	9e c2       	rjmp	.+1340   	; 0x3d0c <Tactics+0x2680>
    37d0:	64 c9       	rjmp	.-3384   	; 0x2a9a <Tactics+0x140e>
    37d2:	c5 ff       	sbrs	r28, 5
    37d4:	a1 c2       	rjmp	.+1346   	; 0x3d18 <Tactics+0x268c>
    37d6:	7f c9       	rjmp	.-3330   	; 0x2ad6 <Tactics+0x144a>
    37d8:	c5 ff       	sbrs	r28, 5
    37da:	a5 c2       	rjmp	.+1354   	; 0x3d26 <Tactics+0x269a>
    37dc:	9a c9       	rjmp	.-3276   	; 0x2b12 <Tactics+0x1486>
    37de:	c5 ff       	sbrs	r28, 5
    37e0:	a8 c2       	rjmp	.+1360   	; 0x3d32 <Tactics+0x26a6>
    37e2:	b5 c9       	rjmp	.-3222   	; 0x2b4e <Tactics+0x14c2>
    37e4:	c5 ff       	sbrs	r28, 5
    37e6:	ac c2       	rjmp	.+1368   	; 0x3d40 <Tactics+0x26b4>
    37e8:	d0 c9       	rjmp	.-3168   	; 0x2b8a <Tactics+0x14fe>
    37ea:	c5 ff       	sbrs	r28, 5
    37ec:	b0 c2       	rjmp	.+1376   	; 0x3d4e <Tactics+0x26c2>
    37ee:	eb c9       	rjmp	.-3114   	; 0x2bc6 <Tactics+0x153a>
    37f0:	c5 ff       	sbrs	r28, 5
    37f2:	b4 c2       	rjmp	.+1384   	; 0x3d5c <Tactics+0x26d0>
    37f4:	06 ca       	rjmp	.-3060   	; 0x2c02 <Tactics+0x1576>
    37f6:	c5 ff       	sbrs	r28, 5
    37f8:	b7 c2       	rjmp	.+1390   	; 0x3d68 <Tactics+0x26dc>
    37fa:	21 ca       	rjmp	.-3006   	; 0x2c3e <Tactics+0x15b2>
    37fc:	c5 ff       	sbrs	r28, 5
    37fe:	60 c2       	rjmp	.+1216   	; 0x3cc0 <Tactics+0x2634>
    3800:	3c ca       	rjmp	.-2952   	; 0x2c7a <Tactics+0x15ee>
		}
		
		/* Seventh valid move in this line */
		temp = buffer & 0b01000000 ;
		temp = (temp >> 6) ;
		if (temp == 1)
    3802:	c6 ff       	sbrs	r28, 6
    3804:	b8 c2       	rjmp	.+1392   	; 0x3d76 <Tactics+0x26ea>
    3806:	11 cc       	rjmp	.-2014   	; 0x302a <Tactics+0x199e>
    3808:	c6 ff       	sbrs	r28, 6
    380a:	bd c2       	rjmp	.+1402   	; 0x3d86 <Tactics+0x26fa>
    380c:	2c cc       	rjmp	.-1960   	; 0x3066 <Tactics+0x19da>
    380e:	c6 ff       	sbrs	r28, 6
    3810:	c2 c2       	rjmp	.+1412   	; 0x3d96 <Tactics+0x270a>
    3812:	47 cc       	rjmp	.-1906   	; 0x30a2 <Tactics+0x1a16>
    3814:	c6 ff       	sbrs	r28, 6
    3816:	c7 c2       	rjmp	.+1422   	; 0x3da6 <Tactics+0x271a>
    3818:	62 cc       	rjmp	.-1852   	; 0x30de <Tactics+0x1a52>
    381a:	c6 ff       	sbrs	r28, 6
    381c:	cc c2       	rjmp	.+1432   	; 0x3db6 <Tactics+0x272a>
    381e:	7d cc       	rjmp	.-1798   	; 0x311a <Tactics+0x1a8e>
    3820:	c6 ff       	sbrs	r28, 6
    3822:	d1 c2       	rjmp	.+1442   	; 0x3dc6 <Tactics+0x273a>
    3824:	f4 ca       	rjmp	.-2584   	; 0x2e0e <Tactics+0x1782>
    3826:	c6 ff       	sbrs	r28, 6
    3828:	d2 c2       	rjmp	.+1444   	; 0x3dce <Tactics+0x2742>
    382a:	0f cb       	rjmp	.-2530   	; 0x2e4a <Tactics+0x17be>
    382c:	c6 ff       	sbrs	r28, 6
    382e:	d6 c2       	rjmp	.+1452   	; 0x3ddc <Tactics+0x2750>
    3830:	2a cb       	rjmp	.-2476   	; 0x2e86 <Tactics+0x17fa>
    3832:	c6 ff       	sbrs	r28, 6
    3834:	db c2       	rjmp	.+1462   	; 0x3dec <Tactics+0x2760>
    3836:	45 cb       	rjmp	.-2422   	; 0x2ec2 <Tactics+0x1836>
    3838:	c6 ff       	sbrs	r28, 6
    383a:	df c2       	rjmp	.+1470   	; 0x3dfa <Tactics+0x276e>
    383c:	60 cb       	rjmp	.-2368   	; 0x2efe <Tactics+0x1872>
    383e:	c6 ff       	sbrs	r28, 6
    3840:	e4 c2       	rjmp	.+1480   	; 0x3e0a <Tactics+0x277e>
    3842:	7b cb       	rjmp	.-2314   	; 0x2f3a <Tactics+0x18ae>
    3844:	c6 ff       	sbrs	r28, 6
    3846:	e9 c2       	rjmp	.+1490   	; 0x3e1a <Tactics+0x278e>
    3848:	96 cb       	rjmp	.-2260   	; 0x2f76 <Tactics+0x18ea>
    384a:	c6 ff       	sbrs	r28, 6
    384c:	ee c2       	rjmp	.+1500   	; 0x3e2a <Tactics+0x279e>
    384e:	b1 cb       	rjmp	.-2206   	; 0x2fb2 <Tactics+0x1926>
    3850:	c6 ff       	sbrs	r28, 6
    3852:	f2 c2       	rjmp	.+1508   	; 0x3e38 <Tactics+0x27ac>
    3854:	cc cb       	rjmp	.-2152   	; 0x2fee <Tactics+0x1962>
		}
		
		/* Eighth valid move in this line */
		temp = buffer & 0b10000000 ;
		temp = (temp >> 7) ;
		if (temp == 1)
    3856:	cc 23       	and	r28, r28
    3858:	0c f4       	brge	.+2      	; 0x385c <Tactics+0x21d0>
    385a:	e1 cd       	rjmp	.-1086   	; 0x341e <Tactics+0x1d92>
    385c:	0f 2e       	mov	r0, r31
    385e:	fa e0       	ldi	r31, 0x0A	; 10
    3860:	ef 2e       	mov	r14, r31
    3862:	f0 2d       	mov	r31, r0
    3864:	c8 ce       	rjmp	.-624    	; 0x35f6 <Tactics+0x1f6a>
    3866:	cc 23       	and	r28, r28
    3868:	0c f4       	brge	.+2      	; 0x386c <Tactics+0x21e0>
    386a:	fb cd       	rjmp	.-1034   	; 0x3462 <Tactics+0x1dd6>
    386c:	0f 2e       	mov	r0, r31
    386e:	fb e0       	ldi	r31, 0x0B	; 11
    3870:	ef 2e       	mov	r14, r31
    3872:	f0 2d       	mov	r31, r0
    3874:	c0 ce       	rjmp	.-640    	; 0x35f6 <Tactics+0x1f6a>
    3876:	cc 23       	and	r28, r28
    3878:	0c f4       	brge	.+2      	; 0x387c <Tactics+0x21f0>
    387a:	15 ce       	rjmp	.-982    	; 0x34a6 <Tactics+0x1e1a>
    387c:	0f 2e       	mov	r0, r31
    387e:	fc e0       	ldi	r31, 0x0C	; 12
    3880:	ef 2e       	mov	r14, r31
    3882:	f0 2d       	mov	r31, r0
    3884:	b8 ce       	rjmp	.-656    	; 0x35f6 <Tactics+0x1f6a>
    3886:	cc 23       	and	r28, r28
    3888:	0c f4       	brge	.+2      	; 0x388c <Tactics+0x2200>
    388a:	2f ce       	rjmp	.-930    	; 0x34ea <Tactics+0x1e5e>
    388c:	0f 2e       	mov	r0, r31
    388e:	fd e0       	ldi	r31, 0x0D	; 13
    3890:	ef 2e       	mov	r14, r31
    3892:	f0 2d       	mov	r31, r0
    3894:	b0 ce       	rjmp	.-672    	; 0x35f6 <Tactics+0x1f6a>
    3896:	cc 23       	and	r28, r28
    3898:	0c f4       	brge	.+2      	; 0x389c <Tactics+0x2210>
    389a:	49 ce       	rjmp	.-878    	; 0x352e <Tactics+0x1ea2>
    389c:	0f 2e       	mov	r0, r31
    389e:	fe e0       	ldi	r31, 0x0E	; 14
    38a0:	ef 2e       	mov	r14, r31
    38a2:	f0 2d       	mov	r31, r0
    38a4:	a8 ce       	rjmp	.-688    	; 0x35f6 <Tactics+0x1f6a>
    38a6:	cc 23       	and	r28, r28
    38a8:	0c f0       	brlt	.+2      	; 0x38ac <Tactics+0x2220>
    38aa:	a5 ce       	rjmp	.-694    	; 0x35f6 <Tactics+0x1f6a>
    38ac:	89 cc       	rjmp	.-1774   	; 0x31c0 <Tactics+0x1b34>
    38ae:	cc 23       	and	r28, r28
    38b0:	0c f4       	brge	.+2      	; 0x38b4 <Tactics+0x2228>
    38b2:	a7 cc       	rjmp	.-1714   	; 0x3202 <Tactics+0x1b76>
    38b4:	68 94       	set
    38b6:	ee 24       	eor	r14, r14
    38b8:	e1 f8       	bld	r14, 1
    38ba:	9d ce       	rjmp	.-710    	; 0x35f6 <Tactics+0x1f6a>
    38bc:	cc 23       	and	r28, r28
    38be:	0c f4       	brge	.+2      	; 0x38c2 <Tactics+0x2236>
    38c0:	c2 cc       	rjmp	.-1660   	; 0x3246 <Tactics+0x1bba>
    38c2:	0f 2e       	mov	r0, r31
    38c4:	f3 e0       	ldi	r31, 0x03	; 3
    38c6:	ef 2e       	mov	r14, r31
    38c8:	f0 2d       	mov	r31, r0
    38ca:	95 ce       	rjmp	.-726    	; 0x35f6 <Tactics+0x1f6a>
    38cc:	cc 23       	and	r28, r28
    38ce:	0c f4       	brge	.+2      	; 0x38d2 <Tactics+0x2246>
    38d0:	db cc       	rjmp	.-1610   	; 0x3288 <Tactics+0x1bfc>
    38d2:	68 94       	set
    38d4:	ee 24       	eor	r14, r14
    38d6:	e2 f8       	bld	r14, 2
    38d8:	8e ce       	rjmp	.-740    	; 0x35f6 <Tactics+0x1f6a>
    38da:	cc 23       	and	r28, r28
    38dc:	0c f4       	brge	.+2      	; 0x38e0 <Tactics+0x2254>
    38de:	f6 cc       	rjmp	.-1556   	; 0x32cc <Tactics+0x1c40>
    38e0:	0f 2e       	mov	r0, r31
    38e2:	f5 e0       	ldi	r31, 0x05	; 5
    38e4:	ef 2e       	mov	r14, r31
    38e6:	f0 2d       	mov	r31, r0
    38e8:	86 ce       	rjmp	.-756    	; 0x35f6 <Tactics+0x1f6a>
    38ea:	cc 23       	and	r28, r28
    38ec:	0c f4       	brge	.+2      	; 0x38f0 <Tactics+0x2264>
    38ee:	10 cd       	rjmp	.-1504   	; 0x3310 <Tactics+0x1c84>
    38f0:	0f 2e       	mov	r0, r31
    38f2:	f6 e0       	ldi	r31, 0x06	; 6
    38f4:	ef 2e       	mov	r14, r31
    38f6:	f0 2d       	mov	r31, r0
    38f8:	7e ce       	rjmp	.-772    	; 0x35f6 <Tactics+0x1f6a>
    38fa:	cc 23       	and	r28, r28
    38fc:	0c f4       	brge	.+2      	; 0x3900 <Tactics+0x2274>
    38fe:	2a cd       	rjmp	.-1452   	; 0x3354 <Tactics+0x1cc8>
    3900:	0f 2e       	mov	r0, r31
    3902:	f7 e0       	ldi	r31, 0x07	; 7
    3904:	ef 2e       	mov	r14, r31
    3906:	f0 2d       	mov	r31, r0
    3908:	76 ce       	rjmp	.-788    	; 0x35f6 <Tactics+0x1f6a>
    390a:	cc 23       	and	r28, r28
    390c:	0c f4       	brge	.+2      	; 0x3910 <Tactics+0x2284>
    390e:	43 cd       	rjmp	.-1402   	; 0x3396 <Tactics+0x1d0a>
    3910:	68 94       	set
    3912:	ee 24       	eor	r14, r14
    3914:	e3 f8       	bld	r14, 3
    3916:	6f ce       	rjmp	.-802    	; 0x35f6 <Tactics+0x1f6a>
    3918:	cc 23       	and	r28, r28
    391a:	0c f4       	brge	.+2      	; 0x391e <Tactics+0x2292>
    391c:	5e cd       	rjmp	.-1348   	; 0x33da <Tactics+0x1d4e>
    391e:	0f 2e       	mov	r0, r31
    3920:	f9 e0       	ldi	r31, 0x09	; 9
    3922:	ef 2e       	mov	r14, r31
    3924:	f0 2d       	mov	r31, r0
    3926:	67 ce       	rjmp	.-818    	; 0x35f6 <Tactics+0x1f6a>
			
		}
		/* Third valid move in this line */
		temp = buffer & 0b00000100 ;
		temp = (temp >> 2) ;
		if (temp == 1)
    3928:	c2 fd       	sbrc	r28, 2
    392a:	02 c0       	rjmp	.+4      	; 0x3930 <Tactics+0x22a4>
    392c:	0c 94 2a 11 	jmp	0x2254	; 0x2254 <Tactics+0xbc8>
    3930:	0c 94 c5 10 	jmp	0x218a	; 0x218a <Tactics+0xafe>
    3934:	c2 fd       	sbrc	r28, 2
    3936:	02 c0       	rjmp	.+4      	; 0x393c <Tactics+0x22b0>
    3938:	0c 94 2a 11 	jmp	0x2254	; 0x2254 <Tactics+0xbc8>
    393c:	0c 94 e5 10 	jmp	0x21ca	; 0x21ca <Tactics+0xb3e>
    3940:	c2 fd       	sbrc	r28, 2
    3942:	02 c0       	rjmp	.+4      	; 0x3948 <Tactics+0x22bc>
    3944:	0c 94 2a 11 	jmp	0x2254	; 0x2254 <Tactics+0xbc8>
    3948:	0c 94 0a 11 	jmp	0x2214	; 0x2214 <Tactics+0xb88>
    394c:	c2 fd       	sbrc	r28, 2
    394e:	02 c0       	rjmp	.+4      	; 0x3954 <Tactics+0x22c8>
    3950:	0c 94 2a 11 	jmp	0x2254	; 0x2254 <Tactics+0xbc8>
    3954:	0c 94 65 0f 	jmp	0x1eca	; 0x1eca <Tactics+0x83e>
    3958:	c2 fd       	sbrc	r28, 2
    395a:	02 c0       	rjmp	.+4      	; 0x3960 <Tactics+0x22d4>
    395c:	0c 94 2a 11 	jmp	0x2254	; 0x2254 <Tactics+0xbc8>
    3960:	0c 94 85 0f 	jmp	0x1f0a	; 0x1f0a <Tactics+0x87e>
    3964:	c2 fd       	sbrc	r28, 2
    3966:	02 c0       	rjmp	.+4      	; 0x396c <Tactics+0x22e0>
    3968:	0c 94 2a 11 	jmp	0x2254	; 0x2254 <Tactics+0xbc8>
    396c:	0c 94 a5 0f 	jmp	0x1f4a	; 0x1f4a <Tactics+0x8be>
    3970:	c2 fd       	sbrc	r28, 2
    3972:	02 c0       	rjmp	.+4      	; 0x3978 <Tactics+0x22ec>
    3974:	0c 94 2a 11 	jmp	0x2254	; 0x2254 <Tactics+0xbc8>
    3978:	0c 94 c5 0f 	jmp	0x1f8a	; 0x1f8a <Tactics+0x8fe>
    397c:	c2 fd       	sbrc	r28, 2
    397e:	02 c0       	rjmp	.+4      	; 0x3984 <Tactics+0x22f8>
    3980:	0c 94 2a 11 	jmp	0x2254	; 0x2254 <Tactics+0xbc8>
    3984:	0c 94 e5 0f 	jmp	0x1fca	; 0x1fca <Tactics+0x93e>
    3988:	c2 fd       	sbrc	r28, 2
    398a:	02 c0       	rjmp	.+4      	; 0x3990 <Tactics+0x2304>
    398c:	0c 94 2a 11 	jmp	0x2254	; 0x2254 <Tactics+0xbc8>
    3990:	0c 94 05 10 	jmp	0x200a	; 0x200a <Tactics+0x97e>
    3994:	c2 fd       	sbrc	r28, 2
    3996:	02 c0       	rjmp	.+4      	; 0x399c <Tactics+0x2310>
    3998:	0c 94 2a 11 	jmp	0x2254	; 0x2254 <Tactics+0xbc8>
    399c:	0c 94 25 10 	jmp	0x204a	; 0x204a <Tactics+0x9be>
    39a0:	c2 fd       	sbrc	r28, 2
    39a2:	02 c0       	rjmp	.+4      	; 0x39a8 <Tactics+0x231c>
    39a4:	0c 94 2a 11 	jmp	0x2254	; 0x2254 <Tactics+0xbc8>
    39a8:	0c 94 45 10 	jmp	0x208a	; 0x208a <Tactics+0x9fe>
    39ac:	c2 fd       	sbrc	r28, 2
    39ae:	02 c0       	rjmp	.+4      	; 0x39b4 <Tactics+0x2328>
    39b0:	0c 94 2a 11 	jmp	0x2254	; 0x2254 <Tactics+0xbc8>
    39b4:	0c 94 65 10 	jmp	0x20ca	; 0x20ca <Tactics+0xa3e>
    39b8:	c2 fd       	sbrc	r28, 2
    39ba:	02 c0       	rjmp	.+4      	; 0x39c0 <Tactics+0x2334>
    39bc:	0c 94 2a 11 	jmp	0x2254	; 0x2254 <Tactics+0xbc8>
    39c0:	0c 94 85 10 	jmp	0x210a	; 0x210a <Tactics+0xa7e>
    39c4:	c2 fd       	sbrc	r28, 2
    39c6:	02 c0       	rjmp	.+4      	; 0x39cc <Tactics+0x2340>
    39c8:	0c 94 2a 11 	jmp	0x2254	; 0x2254 <Tactics+0xbc8>
    39cc:	0c 94 a5 10 	jmp	0x214a	; 0x214a <Tactics+0xabe>
		}
		
		/* Fourth valid move in this line */
		temp = buffer & 0b00001000 ;
		temp = (temp >> 3) ;
		if (temp == 1)
    39d0:	c3 ff       	sbrs	r28, 3
    39d2:	02 c0       	rjmp	.+4      	; 0x39d8 <Tactics+0x234c>
    39d4:	0c 94 b9 12 	jmp	0x2572	; 0x2572 <Tactics+0xee6>
    39d8:	0f 2e       	mov	r0, r31
    39da:	fc e0       	ldi	r31, 0x0C	; 12
    39dc:	ef 2e       	mov	r14, r31
    39de:	f0 2d       	mov	r31, r0
    39e0:	0c 94 1e 13 	jmp	0x263c	; 0x263c <Tactics+0xfb0>
    39e4:	c3 ff       	sbrs	r28, 3
    39e6:	02 c0       	rjmp	.+4      	; 0x39ec <Tactics+0x2360>
    39e8:	0c 94 d9 12 	jmp	0x25b2	; 0x25b2 <Tactics+0xf26>
    39ec:	0f 2e       	mov	r0, r31
    39ee:	fd e0       	ldi	r31, 0x0D	; 13
    39f0:	ef 2e       	mov	r14, r31
    39f2:	f0 2d       	mov	r31, r0
    39f4:	0c 94 1e 13 	jmp	0x263c	; 0x263c <Tactics+0xfb0>
    39f8:	c3 ff       	sbrs	r28, 3
    39fa:	02 c0       	rjmp	.+4      	; 0x3a00 <Tactics+0x2374>
    39fc:	0c 94 fe 12 	jmp	0x25fc	; 0x25fc <Tactics+0xf70>
    3a00:	0f 2e       	mov	r0, r31
    3a02:	fe e0       	ldi	r31, 0x0E	; 14
    3a04:	ef 2e       	mov	r14, r31
    3a06:	f0 2d       	mov	r31, r0
    3a08:	0c 94 1e 13 	jmp	0x263c	; 0x263c <Tactics+0xfb0>
    3a0c:	c3 fd       	sbrc	r28, 3
    3a0e:	02 c0       	rjmp	.+4      	; 0x3a14 <Tactics+0x2388>
    3a10:	0c 94 1e 13 	jmp	0x263c	; 0x263c <Tactics+0xfb0>
    3a14:	0c 94 59 11 	jmp	0x22b2	; 0x22b2 <Tactics+0xc26>
    3a18:	c3 ff       	sbrs	r28, 3
    3a1a:	02 c0       	rjmp	.+4      	; 0x3a20 <Tactics+0x2394>
    3a1c:	0c 94 79 11 	jmp	0x22f2	; 0x22f2 <Tactics+0xc66>
    3a20:	68 94       	set
    3a22:	ee 24       	eor	r14, r14
    3a24:	e1 f8       	bld	r14, 1
    3a26:	0c 94 1e 13 	jmp	0x263c	; 0x263c <Tactics+0xfb0>
    3a2a:	c3 ff       	sbrs	r28, 3
    3a2c:	02 c0       	rjmp	.+4      	; 0x3a32 <Tactics+0x23a6>
    3a2e:	0c 94 99 11 	jmp	0x2332	; 0x2332 <Tactics+0xca6>
    3a32:	0f 2e       	mov	r0, r31
    3a34:	f3 e0       	ldi	r31, 0x03	; 3
    3a36:	ef 2e       	mov	r14, r31
    3a38:	f0 2d       	mov	r31, r0
    3a3a:	0c 94 1e 13 	jmp	0x263c	; 0x263c <Tactics+0xfb0>
    3a3e:	c3 ff       	sbrs	r28, 3
    3a40:	02 c0       	rjmp	.+4      	; 0x3a46 <Tactics+0x23ba>
    3a42:	0c 94 b9 11 	jmp	0x2372	; 0x2372 <Tactics+0xce6>
    3a46:	68 94       	set
    3a48:	ee 24       	eor	r14, r14
    3a4a:	e2 f8       	bld	r14, 2
    3a4c:	0c 94 1e 13 	jmp	0x263c	; 0x263c <Tactics+0xfb0>
    3a50:	c3 ff       	sbrs	r28, 3
    3a52:	02 c0       	rjmp	.+4      	; 0x3a58 <Tactics+0x23cc>
    3a54:	0c 94 d9 11 	jmp	0x23b2	; 0x23b2 <Tactics+0xd26>
    3a58:	0f 2e       	mov	r0, r31
    3a5a:	f5 e0       	ldi	r31, 0x05	; 5
    3a5c:	ef 2e       	mov	r14, r31
    3a5e:	f0 2d       	mov	r31, r0
    3a60:	0c 94 1e 13 	jmp	0x263c	; 0x263c <Tactics+0xfb0>
    3a64:	c3 ff       	sbrs	r28, 3
    3a66:	02 c0       	rjmp	.+4      	; 0x3a6c <Tactics+0x23e0>
    3a68:	0c 94 f9 11 	jmp	0x23f2	; 0x23f2 <Tactics+0xd66>
    3a6c:	0f 2e       	mov	r0, r31
    3a6e:	f6 e0       	ldi	r31, 0x06	; 6
    3a70:	ef 2e       	mov	r14, r31
    3a72:	f0 2d       	mov	r31, r0
    3a74:	0c 94 1e 13 	jmp	0x263c	; 0x263c <Tactics+0xfb0>
    3a78:	c3 ff       	sbrs	r28, 3
    3a7a:	02 c0       	rjmp	.+4      	; 0x3a80 <Tactics+0x23f4>
    3a7c:	0c 94 19 12 	jmp	0x2432	; 0x2432 <Tactics+0xda6>
    3a80:	0f 2e       	mov	r0, r31
    3a82:	f7 e0       	ldi	r31, 0x07	; 7
    3a84:	ef 2e       	mov	r14, r31
    3a86:	f0 2d       	mov	r31, r0
    3a88:	0c 94 1e 13 	jmp	0x263c	; 0x263c <Tactics+0xfb0>
    3a8c:	c3 ff       	sbrs	r28, 3
    3a8e:	02 c0       	rjmp	.+4      	; 0x3a94 <Tactics+0x2408>
    3a90:	0c 94 39 12 	jmp	0x2472	; 0x2472 <Tactics+0xde6>
    3a94:	68 94       	set
    3a96:	ee 24       	eor	r14, r14
    3a98:	e3 f8       	bld	r14, 3
    3a9a:	0c 94 1e 13 	jmp	0x263c	; 0x263c <Tactics+0xfb0>
    3a9e:	c3 ff       	sbrs	r28, 3
    3aa0:	02 c0       	rjmp	.+4      	; 0x3aa6 <Tactics+0x241a>
    3aa2:	0c 94 59 12 	jmp	0x24b2	; 0x24b2 <Tactics+0xe26>
    3aa6:	0f 2e       	mov	r0, r31
    3aa8:	f9 e0       	ldi	r31, 0x09	; 9
    3aaa:	ef 2e       	mov	r14, r31
    3aac:	f0 2d       	mov	r31, r0
    3aae:	0c 94 1e 13 	jmp	0x263c	; 0x263c <Tactics+0xfb0>
    3ab2:	c3 ff       	sbrs	r28, 3
    3ab4:	02 c0       	rjmp	.+4      	; 0x3aba <Tactics+0x242e>
    3ab6:	0c 94 79 12 	jmp	0x24f2	; 0x24f2 <Tactics+0xe66>
    3aba:	0f 2e       	mov	r0, r31
    3abc:	fa e0       	ldi	r31, 0x0A	; 10
    3abe:	ef 2e       	mov	r14, r31
    3ac0:	f0 2d       	mov	r31, r0
    3ac2:	0c 94 1e 13 	jmp	0x263c	; 0x263c <Tactics+0xfb0>
    3ac6:	c3 ff       	sbrs	r28, 3
    3ac8:	02 c0       	rjmp	.+4      	; 0x3ace <Tactics+0x2442>
    3aca:	0c 94 99 12 	jmp	0x2532	; 0x2532 <Tactics+0xea6>
    3ace:	0f 2e       	mov	r0, r31
    3ad0:	fb e0       	ldi	r31, 0x0B	; 11
    3ad2:	ef 2e       	mov	r14, r31
    3ad4:	f0 2d       	mov	r31, r0
    3ad6:	0c 94 1e 13 	jmp	0x263c	; 0x263c <Tactics+0xfb0>
		}
		
		/* Fifth valid move in this line */
		temp = buffer & 0b00010000 ;
		temp = (temp >> 4) ;
		if (temp == 1)
    3ada:	c4 ff       	sbrs	r28, 4
    3adc:	02 c0       	rjmp	.+4      	; 0x3ae2 <Tactics+0x2456>
    3ade:	0c 94 83 14 	jmp	0x2906	; 0x2906 <Tactics+0x127a>
    3ae2:	0f 2e       	mov	r0, r31
    3ae4:	fb e0       	ldi	r31, 0x0B	; 11
    3ae6:	ef 2e       	mov	r14, r31
    3ae8:	f0 2d       	mov	r31, r0
    3aea:	0c 94 02 15 	jmp	0x2a04	; 0x2a04 <Tactics+0x1378>
    3aee:	c4 ff       	sbrs	r28, 4
    3af0:	02 c0       	rjmp	.+4      	; 0x3af6 <Tactics+0x246a>
    3af2:	0c 94 a1 14 	jmp	0x2942	; 0x2942 <Tactics+0x12b6>
    3af6:	0f 2e       	mov	r0, r31
    3af8:	fc e0       	ldi	r31, 0x0C	; 12
    3afa:	ef 2e       	mov	r14, r31
    3afc:	f0 2d       	mov	r31, r0
    3afe:	0c 94 02 15 	jmp	0x2a04	; 0x2a04 <Tactics+0x1378>
    3b02:	c4 ff       	sbrs	r28, 4
    3b04:	02 c0       	rjmp	.+4      	; 0x3b0a <Tactics+0x247e>
    3b06:	0c 94 bf 14 	jmp	0x297e	; 0x297e <Tactics+0x12f2>
    3b0a:	0f 2e       	mov	r0, r31
    3b0c:	fd e0       	ldi	r31, 0x0D	; 13
    3b0e:	ef 2e       	mov	r14, r31
    3b10:	f0 2d       	mov	r31, r0
    3b12:	0c 94 02 15 	jmp	0x2a04	; 0x2a04 <Tactics+0x1378>
    3b16:	c4 ff       	sbrs	r28, 4
    3b18:	02 c0       	rjmp	.+4      	; 0x3b1e <Tactics+0x2492>
    3b1a:	0c 94 e2 14 	jmp	0x29c4	; 0x29c4 <Tactics+0x1338>
    3b1e:	0f 2e       	mov	r0, r31
    3b20:	fe e0       	ldi	r31, 0x0E	; 14
    3b22:	ef 2e       	mov	r14, r31
    3b24:	f0 2d       	mov	r31, r0
    3b26:	0c 94 02 15 	jmp	0x2a04	; 0x2a04 <Tactics+0x1378>
    3b2a:	c4 fd       	sbrc	r28, 4
    3b2c:	02 c0       	rjmp	.+4      	; 0x3b32 <Tactics+0x24a6>
    3b2e:	0c 94 02 15 	jmp	0x2a04	; 0x2a04 <Tactics+0x1378>
    3b32:	0c 94 4d 13 	jmp	0x269a	; 0x269a <Tactics+0x100e>
    3b36:	c4 ff       	sbrs	r28, 4
    3b38:	02 c0       	rjmp	.+4      	; 0x3b3e <Tactics+0x24b2>
    3b3a:	0c 94 6d 13 	jmp	0x26da	; 0x26da <Tactics+0x104e>
    3b3e:	68 94       	set
    3b40:	ee 24       	eor	r14, r14
    3b42:	e1 f8       	bld	r14, 1
    3b44:	0c 94 02 15 	jmp	0x2a04	; 0x2a04 <Tactics+0x1378>
    3b48:	c4 ff       	sbrs	r28, 4
    3b4a:	02 c0       	rjmp	.+4      	; 0x3b50 <Tactics+0x24c4>
    3b4c:	0c 94 8d 13 	jmp	0x271a	; 0x271a <Tactics+0x108e>
    3b50:	0f 2e       	mov	r0, r31
    3b52:	f3 e0       	ldi	r31, 0x03	; 3
    3b54:	ef 2e       	mov	r14, r31
    3b56:	f0 2d       	mov	r31, r0
    3b58:	0c 94 02 15 	jmp	0x2a04	; 0x2a04 <Tactics+0x1378>
    3b5c:	c4 ff       	sbrs	r28, 4
    3b5e:	02 c0       	rjmp	.+4      	; 0x3b64 <Tactics+0x24d8>
    3b60:	0c 94 ad 13 	jmp	0x275a	; 0x275a <Tactics+0x10ce>
    3b64:	68 94       	set
    3b66:	ee 24       	eor	r14, r14
    3b68:	e2 f8       	bld	r14, 2
    3b6a:	0c 94 02 15 	jmp	0x2a04	; 0x2a04 <Tactics+0x1378>
    3b6e:	c4 ff       	sbrs	r28, 4
    3b70:	02 c0       	rjmp	.+4      	; 0x3b76 <Tactics+0x24ea>
    3b72:	0c 94 cd 13 	jmp	0x279a	; 0x279a <Tactics+0x110e>
    3b76:	0f 2e       	mov	r0, r31
    3b78:	f5 e0       	ldi	r31, 0x05	; 5
    3b7a:	ef 2e       	mov	r14, r31
    3b7c:	f0 2d       	mov	r31, r0
    3b7e:	0c 94 02 15 	jmp	0x2a04	; 0x2a04 <Tactics+0x1378>
    3b82:	c4 ff       	sbrs	r28, 4
    3b84:	02 c0       	rjmp	.+4      	; 0x3b8a <Tactics+0x24fe>
    3b86:	0c 94 ed 13 	jmp	0x27da	; 0x27da <Tactics+0x114e>
    3b8a:	0f 2e       	mov	r0, r31
    3b8c:	f6 e0       	ldi	r31, 0x06	; 6
    3b8e:	ef 2e       	mov	r14, r31
    3b90:	f0 2d       	mov	r31, r0
    3b92:	0c 94 02 15 	jmp	0x2a04	; 0x2a04 <Tactics+0x1378>
    3b96:	c4 ff       	sbrs	r28, 4
    3b98:	02 c0       	rjmp	.+4      	; 0x3b9e <Tactics+0x2512>
    3b9a:	0c 94 0b 14 	jmp	0x2816	; 0x2816 <Tactics+0x118a>
    3b9e:	0f 2e       	mov	r0, r31
    3ba0:	f7 e0       	ldi	r31, 0x07	; 7
    3ba2:	ef 2e       	mov	r14, r31
    3ba4:	f0 2d       	mov	r31, r0
    3ba6:	0c 94 02 15 	jmp	0x2a04	; 0x2a04 <Tactics+0x1378>
    3baa:	c4 ff       	sbrs	r28, 4
    3bac:	02 c0       	rjmp	.+4      	; 0x3bb2 <Tactics+0x2526>
    3bae:	0c 94 29 14 	jmp	0x2852	; 0x2852 <Tactics+0x11c6>
    3bb2:	68 94       	set
    3bb4:	ee 24       	eor	r14, r14
    3bb6:	e3 f8       	bld	r14, 3
    3bb8:	0c 94 02 15 	jmp	0x2a04	; 0x2a04 <Tactics+0x1378>
    3bbc:	c4 ff       	sbrs	r28, 4
    3bbe:	02 c0       	rjmp	.+4      	; 0x3bc4 <Tactics+0x2538>
    3bc0:	0c 94 47 14 	jmp	0x288e	; 0x288e <Tactics+0x1202>
    3bc4:	0f 2e       	mov	r0, r31
    3bc6:	f9 e0       	ldi	r31, 0x09	; 9
    3bc8:	ef 2e       	mov	r14, r31
    3bca:	f0 2d       	mov	r31, r0
    3bcc:	0c 94 02 15 	jmp	0x2a04	; 0x2a04 <Tactics+0x1378>
    3bd0:	c4 ff       	sbrs	r28, 4
    3bd2:	02 c0       	rjmp	.+4      	; 0x3bd8 <Tactics+0x254c>
    3bd4:	0c 94 65 14 	jmp	0x28ca	; 0x28ca <Tactics+0x123e>
    3bd8:	0f 2e       	mov	r0, r31
    3bda:	fa e0       	ldi	r31, 0x0A	; 10
    3bdc:	ef 2e       	mov	r14, r31
    3bde:	f0 2d       	mov	r31, r0
    3be0:	0c 94 02 15 	jmp	0x2a04	; 0x2a04 <Tactics+0x1378>
		}
		
		/* Sixth valid move in this line */
		temp = buffer & 0b00100000 ;
		temp = (temp >> 5) ;
		if (temp == 1)
    3be4:	c5 fd       	sbrc	r28, 5
    3be6:	67 c8       	rjmp	.-3890   	; 0x2cb6 <Tactics+0x162a>
    3be8:	0f 2e       	mov	r0, r31
    3bea:	fb e0       	ldi	r31, 0x0B	; 11
    3bec:	ef 2e       	mov	r14, r31
    3bee:	f0 2d       	mov	r31, r0
    3bf0:	e1 c8       	rjmp	.-3646   	; 0x2db4 <Tactics+0x1728>
    3bf2:	c5 fd       	sbrc	r28, 5
    3bf4:	7e c8       	rjmp	.-3844   	; 0x2cf2 <Tactics+0x1666>
    3bf6:	0f 2e       	mov	r0, r31
    3bf8:	fc e0       	ldi	r31, 0x0C	; 12
    3bfa:	ef 2e       	mov	r14, r31
    3bfc:	f0 2d       	mov	r31, r0
    3bfe:	da c8       	rjmp	.-3660   	; 0x2db4 <Tactics+0x1728>
    3c00:	c5 fd       	sbrc	r28, 5
    3c02:	95 c8       	rjmp	.-3798   	; 0x2d2e <Tactics+0x16a2>
    3c04:	0f 2e       	mov	r0, r31
    3c06:	fd e0       	ldi	r31, 0x0D	; 13
    3c08:	ef 2e       	mov	r14, r31
    3c0a:	f0 2d       	mov	r31, r0
    3c0c:	d3 c8       	rjmp	.-3674   	; 0x2db4 <Tactics+0x1728>
    3c0e:	c5 fd       	sbrc	r28, 5
    3c10:	b1 c8       	rjmp	.-3742   	; 0x2d74 <Tactics+0x16e8>
    3c12:	0f 2e       	mov	r0, r31
    3c14:	fe e0       	ldi	r31, 0x0E	; 14
    3c16:	ef 2e       	mov	r14, r31
    3c18:	f0 2d       	mov	r31, r0
    3c1a:	cc c8       	rjmp	.-3688   	; 0x2db4 <Tactics+0x1728>
    3c1c:	c5 ff       	sbrs	r28, 5
    3c1e:	ca c8       	rjmp	.-3692   	; 0x2db4 <Tactics+0x1728>
    3c20:	0c 94 2f 15 	jmp	0x2a5e	; 0x2a5e <Tactics+0x13d2>
    3c24:	c5 ff       	sbrs	r28, 5
    3c26:	02 c0       	rjmp	.+4      	; 0x3c2c <Tactics+0x25a0>
    3c28:	0c 94 4d 15 	jmp	0x2a9a	; 0x2a9a <Tactics+0x140e>
    3c2c:	68 94       	set
    3c2e:	ee 24       	eor	r14, r14
    3c30:	e1 f8       	bld	r14, 1
    3c32:	c0 c8       	rjmp	.-3712   	; 0x2db4 <Tactics+0x1728>
    3c34:	c5 ff       	sbrs	r28, 5
    3c36:	02 c0       	rjmp	.+4      	; 0x3c3c <Tactics+0x25b0>
    3c38:	0c 94 6b 15 	jmp	0x2ad6	; 0x2ad6 <Tactics+0x144a>
    3c3c:	0f 2e       	mov	r0, r31
    3c3e:	f3 e0       	ldi	r31, 0x03	; 3
    3c40:	ef 2e       	mov	r14, r31
    3c42:	f0 2d       	mov	r31, r0
    3c44:	b7 c8       	rjmp	.-3730   	; 0x2db4 <Tactics+0x1728>
    3c46:	c5 ff       	sbrs	r28, 5
    3c48:	02 c0       	rjmp	.+4      	; 0x3c4e <Tactics+0x25c2>
    3c4a:	0c 94 89 15 	jmp	0x2b12	; 0x2b12 <Tactics+0x1486>
    3c4e:	68 94       	set
    3c50:	ee 24       	eor	r14, r14
    3c52:	e2 f8       	bld	r14, 2
    3c54:	af c8       	rjmp	.-3746   	; 0x2db4 <Tactics+0x1728>
    3c56:	c5 ff       	sbrs	r28, 5
    3c58:	02 c0       	rjmp	.+4      	; 0x3c5e <Tactics+0x25d2>
    3c5a:	0c 94 a7 15 	jmp	0x2b4e	; 0x2b4e <Tactics+0x14c2>
    3c5e:	0f 2e       	mov	r0, r31
    3c60:	f5 e0       	ldi	r31, 0x05	; 5
    3c62:	ef 2e       	mov	r14, r31
    3c64:	f0 2d       	mov	r31, r0
    3c66:	a6 c8       	rjmp	.-3764   	; 0x2db4 <Tactics+0x1728>
    3c68:	c5 ff       	sbrs	r28, 5
    3c6a:	02 c0       	rjmp	.+4      	; 0x3c70 <Tactics+0x25e4>
    3c6c:	0c 94 c5 15 	jmp	0x2b8a	; 0x2b8a <Tactics+0x14fe>
    3c70:	0f 2e       	mov	r0, r31
    3c72:	f6 e0       	ldi	r31, 0x06	; 6
    3c74:	ef 2e       	mov	r14, r31
    3c76:	f0 2d       	mov	r31, r0
    3c78:	9d c8       	rjmp	.-3782   	; 0x2db4 <Tactics+0x1728>
    3c7a:	c5 ff       	sbrs	r28, 5
    3c7c:	02 c0       	rjmp	.+4      	; 0x3c82 <Tactics+0x25f6>
    3c7e:	0c 94 e3 15 	jmp	0x2bc6	; 0x2bc6 <Tactics+0x153a>
    3c82:	0f 2e       	mov	r0, r31
    3c84:	f7 e0       	ldi	r31, 0x07	; 7
    3c86:	ef 2e       	mov	r14, r31
    3c88:	f0 2d       	mov	r31, r0
    3c8a:	94 c8       	rjmp	.-3800   	; 0x2db4 <Tactics+0x1728>
    3c8c:	c5 ff       	sbrs	r28, 5
    3c8e:	02 c0       	rjmp	.+4      	; 0x3c94 <Tactics+0x2608>
    3c90:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <Tactics+0x1576>
    3c94:	68 94       	set
    3c96:	ee 24       	eor	r14, r14
    3c98:	e3 f8       	bld	r14, 3
    3c9a:	8c c8       	rjmp	.-3816   	; 0x2db4 <Tactics+0x1728>
    3c9c:	c5 ff       	sbrs	r28, 5
    3c9e:	02 c0       	rjmp	.+4      	; 0x3ca4 <Tactics+0x2618>
    3ca0:	0c 94 1f 16 	jmp	0x2c3e	; 0x2c3e <Tactics+0x15b2>
    3ca4:	0f 2e       	mov	r0, r31
    3ca6:	f9 e0       	ldi	r31, 0x09	; 9
    3ca8:	ef 2e       	mov	r14, r31
    3caa:	f0 2d       	mov	r31, r0
    3cac:	83 c8       	rjmp	.-3834   	; 0x2db4 <Tactics+0x1728>
    3cae:	c5 ff       	sbrs	r28, 5
    3cb0:	02 c0       	rjmp	.+4      	; 0x3cb6 <Tactics+0x262a>
    3cb2:	0c 94 3d 16 	jmp	0x2c7a	; 0x2c7a <Tactics+0x15ee>
    3cb6:	0f 2e       	mov	r0, r31
    3cb8:	fa e0       	ldi	r31, 0x0A	; 10
    3cba:	ef 2e       	mov	r14, r31
    3cbc:	f0 2d       	mov	r31, r0
    3cbe:	7a c8       	rjmp	.-3852   	; 0x2db4 <Tactics+0x1728>
		}
		
		/* Seventh valid move in this line */
		temp = buffer & 0b01000000 ;
		temp = (temp >> 6) ;
		if (temp == 1)
    3cc0:	c6 fd       	sbrc	r28, 6
    3cc2:	b3 c9       	rjmp	.-3226   	; 0x302a <Tactics+0x199e>
    3cc4:	0f 2e       	mov	r0, r31
    3cc6:	fa e0       	ldi	r31, 0x0A	; 10
    3cc8:	ef 2e       	mov	r14, r31
    3cca:	f0 2d       	mov	r31, r0
    3ccc:	4b ca       	rjmp	.-2922   	; 0x3164 <Tactics+0x1ad8>
    3cce:	c6 fd       	sbrc	r28, 6
    3cd0:	ca c9       	rjmp	.-3180   	; 0x3066 <Tactics+0x19da>
    3cd2:	0f 2e       	mov	r0, r31
    3cd4:	fb e0       	ldi	r31, 0x0B	; 11
    3cd6:	ef 2e       	mov	r14, r31
    3cd8:	f0 2d       	mov	r31, r0
    3cda:	44 ca       	rjmp	.-2936   	; 0x3164 <Tactics+0x1ad8>
    3cdc:	c6 fd       	sbrc	r28, 6
    3cde:	e1 c9       	rjmp	.-3134   	; 0x30a2 <Tactics+0x1a16>
    3ce0:	0f 2e       	mov	r0, r31
    3ce2:	fc e0       	ldi	r31, 0x0C	; 12
    3ce4:	ef 2e       	mov	r14, r31
    3ce6:	f0 2d       	mov	r31, r0
    3ce8:	3d ca       	rjmp	.-2950   	; 0x3164 <Tactics+0x1ad8>
    3cea:	c6 fd       	sbrc	r28, 6
    3cec:	f8 c9       	rjmp	.-3088   	; 0x30de <Tactics+0x1a52>
    3cee:	0f 2e       	mov	r0, r31
    3cf0:	fd e0       	ldi	r31, 0x0D	; 13
    3cf2:	ef 2e       	mov	r14, r31
    3cf4:	f0 2d       	mov	r31, r0
    3cf6:	36 ca       	rjmp	.-2964   	; 0x3164 <Tactics+0x1ad8>
    3cf8:	c6 fd       	sbrc	r28, 6
    3cfa:	14 ca       	rjmp	.-3032   	; 0x3124 <Tactics+0x1a98>
    3cfc:	0f 2e       	mov	r0, r31
    3cfe:	fe e0       	ldi	r31, 0x0E	; 14
    3d00:	ef 2e       	mov	r14, r31
    3d02:	f0 2d       	mov	r31, r0
    3d04:	2f ca       	rjmp	.-2978   	; 0x3164 <Tactics+0x1ad8>
    3d06:	c6 ff       	sbrs	r28, 6
    3d08:	2d ca       	rjmp	.-2982   	; 0x3164 <Tactics+0x1ad8>
    3d0a:	81 c8       	rjmp	.-3838   	; 0x2e0e <Tactics+0x1782>
    3d0c:	c6 fd       	sbrc	r28, 6
    3d0e:	9d c8       	rjmp	.-3782   	; 0x2e4a <Tactics+0x17be>
    3d10:	68 94       	set
    3d12:	ee 24       	eor	r14, r14
    3d14:	e1 f8       	bld	r14, 1
    3d16:	26 ca       	rjmp	.-2996   	; 0x3164 <Tactics+0x1ad8>
    3d18:	c6 fd       	sbrc	r28, 6
    3d1a:	b5 c8       	rjmp	.-3734   	; 0x2e86 <Tactics+0x17fa>
    3d1c:	0f 2e       	mov	r0, r31
    3d1e:	f3 e0       	ldi	r31, 0x03	; 3
    3d20:	ef 2e       	mov	r14, r31
    3d22:	f0 2d       	mov	r31, r0
    3d24:	1f ca       	rjmp	.-3010   	; 0x3164 <Tactics+0x1ad8>
    3d26:	c6 fd       	sbrc	r28, 6
    3d28:	cc c8       	rjmp	.-3688   	; 0x2ec2 <Tactics+0x1836>
    3d2a:	68 94       	set
    3d2c:	ee 24       	eor	r14, r14
    3d2e:	e2 f8       	bld	r14, 2
    3d30:	19 ca       	rjmp	.-3022   	; 0x3164 <Tactics+0x1ad8>
    3d32:	c6 fd       	sbrc	r28, 6
    3d34:	e4 c8       	rjmp	.-3640   	; 0x2efe <Tactics+0x1872>
    3d36:	0f 2e       	mov	r0, r31
    3d38:	f5 e0       	ldi	r31, 0x05	; 5
    3d3a:	ef 2e       	mov	r14, r31
    3d3c:	f0 2d       	mov	r31, r0
    3d3e:	12 ca       	rjmp	.-3036   	; 0x3164 <Tactics+0x1ad8>
    3d40:	c6 fd       	sbrc	r28, 6
    3d42:	fb c8       	rjmp	.-3594   	; 0x2f3a <Tactics+0x18ae>
    3d44:	0f 2e       	mov	r0, r31
    3d46:	f6 e0       	ldi	r31, 0x06	; 6
    3d48:	ef 2e       	mov	r14, r31
    3d4a:	f0 2d       	mov	r31, r0
    3d4c:	0b ca       	rjmp	.-3050   	; 0x3164 <Tactics+0x1ad8>
    3d4e:	c6 fd       	sbrc	r28, 6
    3d50:	12 c9       	rjmp	.-3548   	; 0x2f76 <Tactics+0x18ea>
    3d52:	0f 2e       	mov	r0, r31
    3d54:	f7 e0       	ldi	r31, 0x07	; 7
    3d56:	ef 2e       	mov	r14, r31
    3d58:	f0 2d       	mov	r31, r0
    3d5a:	04 ca       	rjmp	.-3064   	; 0x3164 <Tactics+0x1ad8>
    3d5c:	c6 fd       	sbrc	r28, 6
    3d5e:	29 c9       	rjmp	.-3502   	; 0x2fb2 <Tactics+0x1926>
    3d60:	68 94       	set
    3d62:	ee 24       	eor	r14, r14
    3d64:	e3 f8       	bld	r14, 3
    3d66:	fe c9       	rjmp	.-3076   	; 0x3164 <Tactics+0x1ad8>
    3d68:	c6 fd       	sbrc	r28, 6
    3d6a:	41 c9       	rjmp	.-3454   	; 0x2fee <Tactics+0x1962>
    3d6c:	0f 2e       	mov	r0, r31
    3d6e:	f9 e0       	ldi	r31, 0x09	; 9
    3d70:	ef 2e       	mov	r14, r31
    3d72:	f0 2d       	mov	r31, r0
    3d74:	f7 c9       	rjmp	.-3090   	; 0x3164 <Tactics+0x1ad8>
		}
		
		/* Eighth valid move in this line */
		temp = buffer & 0b10000000 ;
		temp = (temp >> 7) ;
		if (temp == 1)
    3d76:	cc 23       	and	r28, r28
    3d78:	0c f4       	brge	.+2      	; 0x3d7c <Tactics+0x26f0>
    3d7a:	51 cb       	rjmp	.-2398   	; 0x341e <Tactics+0x1d92>
    3d7c:	0f 2e       	mov	r0, r31
    3d7e:	fa e0       	ldi	r31, 0x0A	; 10
    3d80:	ef 2e       	mov	r14, r31
    3d82:	f0 2d       	mov	r31, r0
    3d84:	38 cc       	rjmp	.-1936   	; 0x35f6 <Tactics+0x1f6a>
    3d86:	cc 23       	and	r28, r28
    3d88:	0c f4       	brge	.+2      	; 0x3d8c <Tactics+0x2700>
    3d8a:	6b cb       	rjmp	.-2346   	; 0x3462 <Tactics+0x1dd6>
    3d8c:	0f 2e       	mov	r0, r31
    3d8e:	fb e0       	ldi	r31, 0x0B	; 11
    3d90:	ef 2e       	mov	r14, r31
    3d92:	f0 2d       	mov	r31, r0
    3d94:	30 cc       	rjmp	.-1952   	; 0x35f6 <Tactics+0x1f6a>
    3d96:	cc 23       	and	r28, r28
    3d98:	0c f4       	brge	.+2      	; 0x3d9c <Tactics+0x2710>
    3d9a:	85 cb       	rjmp	.-2294   	; 0x34a6 <Tactics+0x1e1a>
    3d9c:	0f 2e       	mov	r0, r31
    3d9e:	fc e0       	ldi	r31, 0x0C	; 12
    3da0:	ef 2e       	mov	r14, r31
    3da2:	f0 2d       	mov	r31, r0
    3da4:	28 cc       	rjmp	.-1968   	; 0x35f6 <Tactics+0x1f6a>
    3da6:	cc 23       	and	r28, r28
    3da8:	0c f4       	brge	.+2      	; 0x3dac <Tactics+0x2720>
    3daa:	9f cb       	rjmp	.-2242   	; 0x34ea <Tactics+0x1e5e>
    3dac:	0f 2e       	mov	r0, r31
    3dae:	fd e0       	ldi	r31, 0x0D	; 13
    3db0:	ef 2e       	mov	r14, r31
    3db2:	f0 2d       	mov	r31, r0
    3db4:	20 cc       	rjmp	.-1984   	; 0x35f6 <Tactics+0x1f6a>
    3db6:	cc 23       	and	r28, r28
    3db8:	0c f4       	brge	.+2      	; 0x3dbc <Tactics+0x2730>
    3dba:	be cb       	rjmp	.-2180   	; 0x3538 <Tactics+0x1eac>
    3dbc:	0f 2e       	mov	r0, r31
    3dbe:	fe e0       	ldi	r31, 0x0E	; 14
    3dc0:	ef 2e       	mov	r14, r31
    3dc2:	f0 2d       	mov	r31, r0
    3dc4:	18 cc       	rjmp	.-2000   	; 0x35f6 <Tactics+0x1f6a>
    3dc6:	cc 23       	and	r28, r28
    3dc8:	0c f0       	brlt	.+2      	; 0x3dcc <Tactics+0x2740>
    3dca:	15 cc       	rjmp	.-2006   	; 0x35f6 <Tactics+0x1f6a>
    3dcc:	f9 c9       	rjmp	.-3086   	; 0x31c0 <Tactics+0x1b34>
    3dce:	cc 23       	and	r28, r28
    3dd0:	0c f4       	brge	.+2      	; 0x3dd4 <Tactics+0x2748>
    3dd2:	17 ca       	rjmp	.-3026   	; 0x3202 <Tactics+0x1b76>
    3dd4:	68 94       	set
    3dd6:	ee 24       	eor	r14, r14
    3dd8:	e1 f8       	bld	r14, 1
    3dda:	0d cc       	rjmp	.-2022   	; 0x35f6 <Tactics+0x1f6a>
    3ddc:	cc 23       	and	r28, r28
    3dde:	0c f4       	brge	.+2      	; 0x3de2 <Tactics+0x2756>
    3de0:	32 ca       	rjmp	.-2972   	; 0x3246 <Tactics+0x1bba>
    3de2:	0f 2e       	mov	r0, r31
    3de4:	f3 e0       	ldi	r31, 0x03	; 3
    3de6:	ef 2e       	mov	r14, r31
    3de8:	f0 2d       	mov	r31, r0
    3dea:	05 cc       	rjmp	.-2038   	; 0x35f6 <Tactics+0x1f6a>
    3dec:	cc 23       	and	r28, r28
    3dee:	0c f4       	brge	.+2      	; 0x3df2 <Tactics+0x2766>
    3df0:	4b ca       	rjmp	.-2922   	; 0x3288 <Tactics+0x1bfc>
    3df2:	68 94       	set
    3df4:	ee 24       	eor	r14, r14
    3df6:	e2 f8       	bld	r14, 2
    3df8:	fe cb       	rjmp	.-2052   	; 0x35f6 <Tactics+0x1f6a>
    3dfa:	cc 23       	and	r28, r28
    3dfc:	0c f4       	brge	.+2      	; 0x3e00 <Tactics+0x2774>
    3dfe:	66 ca       	rjmp	.-2868   	; 0x32cc <Tactics+0x1c40>
    3e00:	0f 2e       	mov	r0, r31
    3e02:	f5 e0       	ldi	r31, 0x05	; 5
    3e04:	ef 2e       	mov	r14, r31
    3e06:	f0 2d       	mov	r31, r0
    3e08:	f6 cb       	rjmp	.-2068   	; 0x35f6 <Tactics+0x1f6a>
    3e0a:	cc 23       	and	r28, r28
    3e0c:	0c f4       	brge	.+2      	; 0x3e10 <Tactics+0x2784>
    3e0e:	80 ca       	rjmp	.-2816   	; 0x3310 <Tactics+0x1c84>
    3e10:	0f 2e       	mov	r0, r31
    3e12:	f6 e0       	ldi	r31, 0x06	; 6
    3e14:	ef 2e       	mov	r14, r31
    3e16:	f0 2d       	mov	r31, r0
    3e18:	ee cb       	rjmp	.-2084   	; 0x35f6 <Tactics+0x1f6a>
    3e1a:	cc 23       	and	r28, r28
    3e1c:	0c f4       	brge	.+2      	; 0x3e20 <Tactics+0x2794>
    3e1e:	9a ca       	rjmp	.-2764   	; 0x3354 <Tactics+0x1cc8>
    3e20:	0f 2e       	mov	r0, r31
    3e22:	f7 e0       	ldi	r31, 0x07	; 7
    3e24:	ef 2e       	mov	r14, r31
    3e26:	f0 2d       	mov	r31, r0
    3e28:	e6 cb       	rjmp	.-2100   	; 0x35f6 <Tactics+0x1f6a>
    3e2a:	cc 23       	and	r28, r28
    3e2c:	0c f4       	brge	.+2      	; 0x3e30 <Tactics+0x27a4>
    3e2e:	b3 ca       	rjmp	.-2714   	; 0x3396 <Tactics+0x1d0a>
    3e30:	68 94       	set
    3e32:	ee 24       	eor	r14, r14
    3e34:	e3 f8       	bld	r14, 3
    3e36:	df cb       	rjmp	.-2114   	; 0x35f6 <Tactics+0x1f6a>
    3e38:	cc 23       	and	r28, r28
    3e3a:	0c f4       	brge	.+2      	; 0x3e3e <Tactics+0x27b2>
    3e3c:	ce ca       	rjmp	.-2660   	; 0x33da <Tactics+0x1d4e>
    3e3e:	0f 2e       	mov	r0, r31
    3e40:	f9 e0       	ldi	r31, 0x09	; 9
    3e42:	ef 2e       	mov	r14, r31
    3e44:	f0 2d       	mov	r31, r0
    3e46:	d7 cb       	rjmp	.-2130   	; 0x35f6 <Tactics+0x1f6a>
				break;
			}
			
		}
	}
    3e48:	df 91       	pop	r29
    3e4a:	cf 91       	pop	r28
    3e4c:	1f 91       	pop	r17
    3e4e:	0f 91       	pop	r16
    3e50:	ff 90       	pop	r15
    3e52:	ef 90       	pop	r14
    3e54:	df 90       	pop	r13
    3e56:	bf 90       	pop	r11
    3e58:	af 90       	pop	r10
    3e5a:	08 95       	ret

00003e5c <examineInstr>:
	}
	return c ;
}

void examineInstr(char c[])
{
    3e5c:	ef 92       	push	r14
    3e5e:	ff 92       	push	r15
    3e60:	0f 93       	push	r16
    3e62:	1f 93       	push	r17
    3e64:	cf 93       	push	r28
    3e66:	df 93       	push	r29
    3e68:	ec 01       	movw	r28, r24
	if (strlen(c) == 2 && c[0] == 'A' && c[1] == 'T')
    3e6a:	fc 01       	movw	r30, r24
    3e6c:	01 90       	ld	r0, Z+
    3e6e:	00 20       	and	r0, r0
    3e70:	e9 f7       	brne	.-6      	; 0x3e6c <examineInstr+0x10>
    3e72:	31 97       	sbiw	r30, 0x01	; 1
    3e74:	e8 1b       	sub	r30, r24
    3e76:	f9 0b       	sbc	r31, r25
    3e78:	e2 30       	cpi	r30, 0x02	; 2
    3e7a:	f1 05       	cpc	r31, r1
    3e7c:	91 f4       	brne	.+36     	; 0x3ea2 <examineInstr+0x46>
    3e7e:	88 81       	ld	r24, Y
    3e80:	81 34       	cpi	r24, 0x41	; 65
    3e82:	09 f0       	breq	.+2      	; 0x3e86 <examineInstr+0x2a>
    3e84:	5e c0       	rjmp	.+188    	; 0x3f42 <examineInstr+0xe6>
    3e86:	89 81       	ldd	r24, Y+1	; 0x01
    3e88:	84 35       	cpi	r24, 0x54	; 84
    3e8a:	09 f0       	breq	.+2      	; 0x3e8e <examineInstr+0x32>
    3e8c:	f0 c1       	rjmp	.+992    	; 0x426e <examineInstr+0x412>
	{
		/* Simple answer ok */
		/*writeString("OK\r") ; */
		writeByte('O') ;
    3e8e:	8f e4       	ldi	r24, 0x4F	; 79
    3e90:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
		writeByte('K') ;
    3e94:	8b e4       	ldi	r24, 0x4B	; 75
    3e96:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
		writeByte('\r') ;
    3e9a:	8d e0       	ldi	r24, 0x0D	; 13
    3e9c:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
    3ea0:	f0 c1       	rjmp	.+992    	; 0x4282 <examineInstr+0x426>
		/* Begin timer */
		//TCCR1B |= (1 << CS12) ;
		
	}
	else if (strlen(c) == 3 && c[0] == 'R' && c[1] == 'S' && c[2] == 'T')
    3ea2:	e3 30       	cpi	r30, 0x03	; 3
    3ea4:	f1 05       	cpc	r31, r1
    3ea6:	b1 f4       	brne	.+44     	; 0x3ed4 <examineInstr+0x78>
    3ea8:	88 81       	ld	r24, Y
    3eaa:	82 35       	cpi	r24, 0x52	; 82
    3eac:	09 f0       	breq	.+2      	; 0x3eb0 <examineInstr+0x54>
    3eae:	d5 c1       	rjmp	.+938    	; 0x425a <examineInstr+0x3fe>
    3eb0:	89 81       	ldd	r24, Y+1	; 0x01
    3eb2:	83 35       	cpi	r24, 0x53	; 83
    3eb4:	09 f0       	breq	.+2      	; 0x3eb8 <examineInstr+0x5c>
    3eb6:	d1 c1       	rjmp	.+930    	; 0x425a <examineInstr+0x3fe>
    3eb8:	8a 81       	ldd	r24, Y+2	; 0x02
    3eba:	84 35       	cpi	r24, 0x54	; 84
    3ebc:	09 f0       	breq	.+2      	; 0x3ec0 <examineInstr+0x64>
    3ebe:	cd c1       	rjmp	.+922    	; 0x425a <examineInstr+0x3fe>
	{
		/* Reset (warm start) */
		/* writeString("OK\r") ; */
		writeByte('O') ;
    3ec0:	8f e4       	ldi	r24, 0x4F	; 79
    3ec2:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
		writeByte('K') ;
    3ec6:	8b e4       	ldi	r24, 0x4B	; 75
    3ec8:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
		writeByte('\r') ;
    3ecc:	8d e0       	ldi	r24, 0x0D	; 13
    3ece:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
    3ed2:	d7 c1       	rjmp	.+942    	; 0x4282 <examineInstr+0x426>
		/*Begin timer */
		//TCCR1B |= (1 << CS12) ;
	}
	else if (strlen(c) == 4 && c[0] == 'S' && c[1] == 'P' && c[2] == ' ' && (c[3] == 'B' || c[3] == 'W'))
    3ed4:	e4 30       	cpi	r30, 0x04	; 4
    3ed6:	f1 05       	cpc	r31, r1
    3ed8:	09 f0       	breq	.+2      	; 0x3edc <examineInstr+0x80>
    3eda:	da c0       	rjmp	.+436    	; 0x4090 <examineInstr+0x234>
    3edc:	88 81       	ld	r24, Y
    3ede:	83 35       	cpi	r24, 0x53	; 83
    3ee0:	09 f0       	breq	.+2      	; 0x3ee4 <examineInstr+0x88>
    3ee2:	bb c1       	rjmp	.+886    	; 0x425a <examineInstr+0x3fe>
    3ee4:	89 81       	ldd	r24, Y+1	; 0x01
    3ee6:	80 35       	cpi	r24, 0x50	; 80
    3ee8:	09 f0       	breq	.+2      	; 0x3eec <examineInstr+0x90>
    3eea:	c3 c1       	rjmp	.+902    	; 0x4272 <examineInstr+0x416>
    3eec:	8a 81       	ldd	r24, Y+2	; 0x02
    3eee:	80 32       	cpi	r24, 0x20	; 32
    3ef0:	09 f0       	breq	.+2      	; 0x3ef4 <examineInstr+0x98>
    3ef2:	bf c1       	rjmp	.+894    	; 0x4272 <examineInstr+0x416>
    3ef4:	8b 81       	ldd	r24, Y+3	; 0x03
    3ef6:	82 34       	cpi	r24, 0x42	; 66
    3ef8:	21 f0       	breq	.+8      	; 0x3f02 <examineInstr+0xa6>
    3efa:	87 35       	cpi	r24, 0x57	; 87
    3efc:	09 f0       	breq	.+2      	; 0x3f00 <examineInstr+0xa4>
    3efe:	b9 c1       	rjmp	.+882    	; 0x4272 <examineInstr+0x416>
    3f00:	10 c0       	rjmp	.+32     	; 0x3f22 <examineInstr+0xc6>
	{
		/* Set players to black or white */
		if (c[3] == 'B')
		{
			/* Set player to black */
			enemy = 'B';
    3f02:	82 e4       	ldi	r24, 0x42	; 66
    3f04:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <enemy>
			mine = 'W' ;
    3f08:	87 e5       	ldi	r24, 0x57	; 87
    3f0a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <mine>
			/*writeString("\r") ; */
			writeByte('O') ;
    3f0e:	8f e4       	ldi	r24, 0x4F	; 79
    3f10:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
			writeByte('K') ;
    3f14:	8b e4       	ldi	r24, 0x4B	; 75
    3f16:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
			writeByte('\r') ;
    3f1a:	8d e0       	ldi	r24, 0x0D	; 13
    3f1c:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
    3f20:	b0 c1       	rjmp	.+864    	; 0x4282 <examineInstr+0x426>
			//TCCR1B |= (1 << CS12) ;
		}
		else
		{
			/* Set player to white */
			enemy = 'W';
    3f22:	87 e5       	ldi	r24, 0x57	; 87
    3f24:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <enemy>
			mine = 'B';
    3f28:	82 e4       	ldi	r24, 0x42	; 66
    3f2a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <mine>
			/*writeString("\r") ; */
			writeByte('O') ;
    3f2e:	8f e4       	ldi	r24, 0x4F	; 79
    3f30:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
			writeByte('K') ;
    3f34:	8b e4       	ldi	r24, 0x4B	; 75
    3f36:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
			writeByte('\r') ;
    3f3a:	8d e0       	ldi	r24, 0x0D	; 13
    3f3c:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
    3f40:	a0 c1       	rjmp	.+832    	; 0x4282 <examineInstr+0x426>
			/* Begin timer */
			//TCCR1B |= (1 << CS12) ;
		}
	}
	else if (strlen(c) == 2 && c[0] == 'N' && c[1] == 'G')
    3f42:	88 81       	ld	r24, Y
    3f44:	8e 34       	cpi	r24, 0x4E	; 78
    3f46:	a1 f4       	brne	.+40     	; 0x3f70 <examineInstr+0x114>
    3f48:	89 81       	ldd	r24, Y+1	; 0x01
    3f4a:	87 34       	cpi	r24, 0x47	; 71
    3f4c:	09 f0       	breq	.+2      	; 0x3f50 <examineInstr+0xf4>
    3f4e:	65 c0       	rjmp	.+202    	; 0x401a <examineInstr+0x1be>
	{
		/* New game */
		tableInit();
    3f50:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <tableInit>
		scanChessboard(mine) ;
    3f54:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <mine>
    3f58:	0e 94 92 06 	call	0xd24	; 0xd24 <scanChessboard>
		/*writeString("OK\r") ; */
		writeByte('O') ;
    3f5c:	8f e4       	ldi	r24, 0x4F	; 79
    3f5e:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
		writeByte('K') ;
    3f62:	8b e4       	ldi	r24, 0x4B	; 75
    3f64:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
		writeByte('\r') ;
    3f68:	8d e0       	ldi	r24, 0x0D	; 13
    3f6a:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
    3f6e:	89 c1       	rjmp	.+786    	; 0x4282 <examineInstr+0x426>
		/* Begin timer */
		//TCCR1B |= (1 << CS12) ;
		
	}
	else if (strlen(c) == 2 && c[0] == 'E' && c[1] == 'G')
    3f70:	85 34       	cpi	r24, 0x45	; 69
    3f72:	09 f0       	breq	.+2      	; 0x3f76 <examineInstr+0x11a>
    3f74:	52 c0       	rjmp	.+164    	; 0x401a <examineInstr+0x1be>
    3f76:	89 81       	ldd	r24, Y+1	; 0x01
    3f78:	87 34       	cpi	r24, 0x47	; 71
    3f7a:	09 f0       	breq	.+2      	; 0x3f7e <examineInstr+0x122>
    3f7c:	e9 c0       	rjmp	.+466    	; 0x4150 <examineInstr+0x2f4>
	{
		/* End game */
		/* Disable timer */
		TCCR1B &= 0b11111011 ;
    3f7e:	8e b5       	in	r24, 0x2e	; 46
    3f80:	8b 7f       	andi	r24, 0xFB	; 251
    3f82:	8e bd       	out	0x2e, r24	; 46
		TCNT1 = 0 ;
    3f84:	1d bc       	out	0x2d, r1	; 45
    3f86:	1c bc       	out	0x2c, r1	; 44
		if (seconds > timelimit)									/* if the opponents exceeds the allowable timelimit then send illegal time */
    3f88:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <__data_end>
    3f8c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <timelimit>
    3f90:	89 17       	cp	r24, r25
    3f92:	10 f4       	brcc	.+4      	; 0x3f98 <examineInstr+0x13c>
		{
			IllegalTime() ;
    3f94:	0e 94 fd 01 	call	0x3fa	; 0x3fa <IllegalTime>
		}
		seconds = 0 ;
    3f98:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <__data_end>
		
		if (countMineValidmoves() == 0 && countEnemyValidmoves() == 0)
    3f9c:	0e 94 07 0a 	call	0x140e	; 0x140e <countMineValidmoves>
    3fa0:	81 11       	cpse	r24, r1
    3fa2:	0e c0       	rjmp	.+28     	; 0x3fc0 <examineInstr+0x164>
    3fa4:	0e 94 24 0a 	call	0x1448	; 0x1448 <countEnemyValidmoves>
    3fa8:	81 11       	cpse	r24, r1
    3faa:	0a c0       	rjmp	.+20     	; 0x3fc0 <examineInstr+0x164>
		{
			writeByte('O') ;
    3fac:	8f e4       	ldi	r24, 0x4F	; 79
    3fae:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
			writeByte('K') ;
    3fb2:	8b e4       	ldi	r24, 0x4B	; 75
    3fb4:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
			writeByte('\r') ;
    3fb8:	8d e0       	ldi	r24, 0x0D	; 13
    3fba:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
    3fbe:	09 c0       	rjmp	.+18     	; 0x3fd2 <examineInstr+0x176>
		}
		else
		{
			writeByte('P') ;
    3fc0:	80 e5       	ldi	r24, 0x50	; 80
    3fc2:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
			writeByte('L') ;
    3fc6:	8c e4       	ldi	r24, 0x4C	; 76
    3fc8:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
			writeByte('\r') ;
    3fcc:	8d e0       	ldi	r24, 0x0D	; 13
    3fce:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
		}
		/* Start again opponents time */
		TCCR1B |= (1 << CS12) ;
    3fd2:	8e b5       	in	r24, 0x2e	; 46
    3fd4:	84 60       	ori	r24, 0x04	; 4
    3fd6:	8e bd       	out	0x2e, r24	; 46
    3fd8:	54 c1       	rjmp	.+680    	; 0x4282 <examineInstr+0x426>
	}
	else if (strlen(c) == 4 && c[0] == 'S' && c[1] == 'T' && c[2] == ' ' && (asciiToInteger(c[3]) >= 1 && asciiToInteger(c[3]) <=9))
    3fda:	8a 81       	ldd	r24, Y+2	; 0x02
    3fdc:	80 32       	cpi	r24, 0x20	; 32
    3fde:	09 f0       	breq	.+2      	; 0x3fe2 <examineInstr+0x186>
    3fe0:	3c c1       	rjmp	.+632    	; 0x425a <examineInstr+0x3fe>
    3fe2:	8b 81       	ldd	r24, Y+3	; 0x03
    3fe4:	0e 94 5f 01 	call	0x2be	; 0x2be <asciiToInteger>
    3fe8:	81 50       	subi	r24, 0x01	; 1
    3fea:	89 30       	cpi	r24, 0x09	; 9
    3fec:	08 f0       	brcs	.+2      	; 0x3ff0 <examineInstr+0x194>
    3fee:	35 c1       	rjmp	.+618    	; 0x425a <examineInstr+0x3fe>
	{
		/* set time limit */
		TCCR1B &= 0b11111011 ;										/* Disable timer */
    3ff0:	8e b5       	in	r24, 0x2e	; 46
    3ff2:	8b 7f       	andi	r24, 0xFB	; 251
    3ff4:	8e bd       	out	0x2e, r24	; 46
		timelimit = asciiToInteger(c[3]) ;							/* Change timing limit */
    3ff6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ff8:	0e 94 5f 01 	call	0x2be	; 0x2be <asciiToInteger>
    3ffc:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <timelimit>
		writeByte('O') ;
    4000:	8f e4       	ldi	r24, 0x4F	; 79
    4002:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
		writeByte('K') ;
    4006:	8b e4       	ldi	r24, 0x4B	; 75
    4008:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
		writeByte('\r') ;
    400c:	8d e0       	ldi	r24, 0x0D	; 13
    400e:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
		TCCR1B |= (1 << CS12) ;										/* Renable timer */
    4012:	8e b5       	in	r24, 0x2e	; 46
    4014:	84 60       	ori	r24, 0x04	; 4
    4016:	8e bd       	out	0x2e, r24	; 46
    4018:	34 c1       	rjmp	.+616    	; 0x4282 <examineInstr+0x426>
		
	}
	else if (strlen(c) == 2 && c[0] == 'O' && c[1] == 'K')
    401a:	88 81       	ld	r24, Y
    401c:	8f 34       	cpi	r24, 0x4F	; 79
    401e:	09 f0       	breq	.+2      	; 0x4022 <examineInstr+0x1c6>
    4020:	97 c0       	rjmp	.+302    	; 0x4150 <examineInstr+0x2f4>
    4022:	89 81       	ldd	r24, Y+1	; 0x01
    4024:	8b 34       	cpi	r24, 0x4B	; 75
    4026:	09 f0       	breq	.+2      	; 0x402a <examineInstr+0x1ce>
    4028:	28 c1       	rjmp	.+592    	; 0x427a <examineInstr+0x41e>
		//if (seconds > timelimit)									/* if the opponents exceeds the allowable timelimit then send illegal time */
		//{
			//IllegalTime() ;
		//}
		//seconds = 0 ;
		if (countMineValidmoves() > 0)
    402a:	0e 94 07 0a 	call	0x140e	; 0x140e <countMineValidmoves>
    402e:	88 23       	and	r24, r24
    4030:	49 f1       	breq	.+82     	; 0x4084 <examineInstr+0x228>
		{
			/* firstValid(mine) ; */
			copyChessboard() ;
    4032:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <copyChessboard>
			Tactics(mine) ;
    4036:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <mine>
    403a:	0e 94 46 0b 	call	0x168c	; 0x168c <Tactics>
			setChecker(myLine,myColumn,mine,table) ;
    403e:	2c eb       	ldi	r18, 0xBC	; 188
    4040:	30 e0       	ldi	r19, 0x00	; 0
    4042:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <mine>
    4046:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__data_start>
    404a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <myLine>
    404e:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
			TurnOtherCheckers(myLine,myColumn,enemy,mine,table);
    4052:	0c eb       	ldi	r16, 0xBC	; 188
    4054:	10 e0       	ldi	r17, 0x00	; 0
    4056:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <mine>
    405a:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    405e:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__data_start>
    4062:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <myLine>
    4066:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
			clearValidMoves() ;
    406a:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <clearValidMoves>
			scanChessboard(mine) ;
    406e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <mine>
    4072:	0e 94 92 06 	call	0xd24	; 0xd24 <scanChessboard>
			MyMove(myLine,myColumn) ;
    4076:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__data_start>
    407a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <myLine>
    407e:	0e 94 ad 01 	call	0x35a	; 0x35a <MyMove>
    4082:	02 c0       	rjmp	.+4      	; 0x4088 <examineInstr+0x22c>
		}
		else
		{
			MyPass() ;
    4084:	0e 94 c8 01 	call	0x390	; 0x390 <MyPass>
		}
		/* I played my move. So the enemy stops counting my time and i started counting his time */
		TCCR1B |= (1 << CS12) ;
    4088:	8e b5       	in	r24, 0x2e	; 46
    408a:	84 60       	ori	r24, 0x04	; 4
    408c:	8e bd       	out	0x2e, r24	; 46
    408e:	f9 c0       	rjmp	.+498    	; 0x4282 <examineInstr+0x426>
		
	}
	else if (strlen(c) == 5 && c[0] == 'M' && c[1] == 'V' && c[2] == ' ' && (c[3] >= 'A' && c[3] <= 'H') && (c[4] >= '1' && c[4] <= '8'))
    4090:	35 97       	sbiw	r30, 0x05	; 5
    4092:	09 f0       	breq	.+2      	; 0x4096 <examineInstr+0x23a>
    4094:	e2 c0       	rjmp	.+452    	; 0x425a <examineInstr+0x3fe>
    4096:	88 81       	ld	r24, Y
    4098:	8d 34       	cpi	r24, 0x4D	; 77
    409a:	09 f0       	breq	.+2      	; 0x409e <examineInstr+0x242>
    409c:	de c0       	rjmp	.+444    	; 0x425a <examineInstr+0x3fe>
    409e:	89 81       	ldd	r24, Y+1	; 0x01
    40a0:	86 35       	cpi	r24, 0x56	; 86
    40a2:	09 f0       	breq	.+2      	; 0x40a6 <examineInstr+0x24a>
    40a4:	da c0       	rjmp	.+436    	; 0x425a <examineInstr+0x3fe>
    40a6:	8a 81       	ldd	r24, Y+2	; 0x02
    40a8:	80 32       	cpi	r24, 0x20	; 32
    40aa:	09 f0       	breq	.+2      	; 0x40ae <examineInstr+0x252>
    40ac:	d6 c0       	rjmp	.+428    	; 0x425a <examineInstr+0x3fe>
    40ae:	8b 81       	ldd	r24, Y+3	; 0x03
    40b0:	81 54       	subi	r24, 0x41	; 65
    40b2:	88 30       	cpi	r24, 0x08	; 8
    40b4:	08 f0       	brcs	.+2      	; 0x40b8 <examineInstr+0x25c>
    40b6:	d1 c0       	rjmp	.+418    	; 0x425a <examineInstr+0x3fe>
    40b8:	8c 81       	ldd	r24, Y+4	; 0x04
    40ba:	81 53       	subi	r24, 0x31	; 49
    40bc:	88 30       	cpi	r24, 0x08	; 8
    40be:	08 f0       	brcs	.+2      	; 0x40c2 <examineInstr+0x266>
    40c0:	cc c0       	rjmp	.+408    	; 0x425a <examineInstr+0x3fe>
	{
		/* Opponent move*/
		/* I am stopping counting his time. Disable timer by clearing prescaler */
		TCCR1B &= 0b11111011 ;
    40c2:	8e b5       	in	r24, 0x2e	; 46
    40c4:	8b 7f       	andi	r24, 0xFB	; 251
    40c6:	8e bd       	out	0x2e, r24	; 46
		/* Reset timer's value */
		TCNT1 = 0 ;
    40c8:	1d bc       	out	0x2d, r1	; 45
    40ca:	1c bc       	out	0x2c, r1	; 44
		/* Then I check if he exceeds the allowable timelimit */
		if (seconds > timelimit)
    40cc:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <__data_end>
    40d0:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <timelimit>
    40d4:	89 17       	cp	r24, r25
    40d6:	20 f4       	brcc	.+8      	; 0x40e0 <examineInstr+0x284>
		{
			PORTB &= 0b11111011 ;
    40d8:	c2 98       	cbi	0x18, 2	; 24
			IllegalTime() ;
    40da:	0e 94 fd 01 	call	0x3fa	; 0x3fa <IllegalTime>
    40de:	01 c0       	rjmp	.+2      	; 0x40e2 <examineInstr+0x286>
		}
		else
		{
			PORTB |= (1 << PB5) ;
    40e0:	c5 9a       	sbi	0x18, 5	; 24
		}
		/* reset opponents time - thinking */
		seconds = 0 ;
    40e2:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <__data_end>
		
		if (checkEnemyMove(c[3],asciiToInteger(c[4])) == 1)
    40e6:	8c 81       	ldd	r24, Y+4	; 0x04
    40e8:	0e 94 5f 01 	call	0x2be	; 0x2be <asciiToInteger>
    40ec:	08 2f       	mov	r16, r24
    40ee:	1b 81       	ldd	r17, Y+3	; 0x03
    40f0:	68 2f       	mov	r22, r24
    40f2:	81 2f       	mov	r24, r17
    40f4:	0e 94 60 02 	call	0x4c0	; 0x4c0 <checkEnemyMove>
    40f8:	81 30       	cpi	r24, 0x01	; 1
    40fa:	39 f5       	brne	.+78     	; 0x414a <examineInstr+0x2ee>
		{
			setChecker(c[3],asciiToInteger(c[4]),enemy,table);
    40fc:	2c eb       	ldi	r18, 0xBC	; 188
    40fe:	30 e0       	ldi	r19, 0x00	; 0
    4100:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    4104:	60 2f       	mov	r22, r16
    4106:	81 2f       	mov	r24, r17
    4108:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
			TurnOtherCheckers(c[3],asciiToInteger(c[4]),mine,enemy,table) ;
    410c:	e0 90 63 00 	lds	r14, 0x0063	; 0x800063 <enemy>
    4110:	f0 90 62 00 	lds	r15, 0x0062	; 0x800062 <mine>
    4114:	8c 81       	ldd	r24, Y+4	; 0x04
    4116:	0e 94 5f 01 	call	0x2be	; 0x2be <asciiToInteger>
    411a:	0c eb       	ldi	r16, 0xBC	; 188
    411c:	10 e0       	ldi	r17, 0x00	; 0
    411e:	2e 2d       	mov	r18, r14
    4120:	4f 2d       	mov	r20, r15
    4122:	68 2f       	mov	r22, r24
    4124:	8b 81       	ldd	r24, Y+3	; 0x03
    4126:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
			clearValidMoves() ;
    412a:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <clearValidMoves>
			scanChessboard(mine) ;
    412e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <mine>
    4132:	0e 94 92 06 	call	0xd24	; 0xd24 <scanChessboard>
			
			writeByte('O') ;
    4136:	8f e4       	ldi	r24, 0x4F	; 79
    4138:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
			writeByte('K') ;
    413c:	8b e4       	ldi	r24, 0x4B	; 75
    413e:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
			writeByte('\r') ;
    4142:	8d e0       	ldi	r24, 0x0D	; 13
    4144:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
    4148:	9c c0       	rjmp	.+312    	; 0x4282 <examineInstr+0x426>
		}else
		{
			IllegalMove();
    414a:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <IllegalMove>
    414e:	99 c0       	rjmp	.+306    	; 0x4282 <examineInstr+0x426>
		}

	}
	else if (strlen(c) == 2 && c[0] == 'P' && c[1] == 'S')
    4150:	88 81       	ld	r24, Y
    4152:	80 35       	cpi	r24, 0x50	; 80
    4154:	09 f0       	breq	.+2      	; 0x4158 <examineInstr+0x2fc>
    4156:	72 c0       	rjmp	.+228    	; 0x423c <examineInstr+0x3e0>
    4158:	89 81       	ldd	r24, Y+1	; 0x01
    415a:	83 35       	cpi	r24, 0x53	; 83
    415c:	09 f0       	breq	.+2      	; 0x4160 <examineInstr+0x304>
    415e:	6a c0       	rjmp	.+212    	; 0x4234 <examineInstr+0x3d8>
	{
		/* Pass PC doesn't have any move ΞΌC will play again */
		/*writeString("OK\r") ; */
		TCCR1B &= 0b11111011 ;
    4160:	8e b5       	in	r24, 0x2e	; 46
    4162:	8b 7f       	andi	r24, 0xFB	; 251
    4164:	8e bd       	out	0x2e, r24	; 46
		/* Reset timer's value */
		TCNT1 = 0 ;
    4166:	1d bc       	out	0x2d, r1	; 45
    4168:	1c bc       	out	0x2c, r1	; 44
		/* Then I check if he exceeds the allowable timelimit */
		if (seconds > timelimit)
    416a:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <__data_end>
    416e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <timelimit>
    4172:	89 17       	cp	r24, r25
    4174:	20 f4       	brcc	.+8      	; 0x417e <examineInstr+0x322>
		{
			PORTB &= 0b11111011 ;
    4176:	c2 98       	cbi	0x18, 2	; 24
			IllegalTime() ;
    4178:	0e 94 fd 01 	call	0x3fa	; 0x3fa <IllegalTime>
    417c:	01 c0       	rjmp	.+2      	; 0x4180 <examineInstr+0x324>
		}
		else
		{
			PORTB |= (1 << PB5) ;
    417e:	c5 9a       	sbi	0x18, 5	; 24
		}
		/* reset opponents time - thinking */
		seconds = 0 ;
    4180:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <__data_end>
		
		
		writeByte('O') ;
    4184:	8f e4       	ldi	r24, 0x4F	; 79
    4186:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
		writeByte('K') ;
    418a:	8b e4       	ldi	r24, 0x4B	; 75
    418c:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
		writeByte('\r') ;
    4190:	8d e0       	ldi	r24, 0x0D	; 13
    4192:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
		
		if (countEnemyValidmoves() == 0)
    4196:	0e 94 24 0a 	call	0x1448	; 0x1448 <countEnemyValidmoves>
    419a:	81 11       	cpse	r24, r1
    419c:	48 c0       	rjmp	.+144    	; 0x422e <examineInstr+0x3d2>
		{
			if (countMineValidmoves() == 0)
    419e:	0e 94 07 0a 	call	0x140e	; 0x140e <countMineValidmoves>
    41a2:	81 11       	cpse	r24, r1
    41a4:	12 c0       	rjmp	.+36     	; 0x41ca <examineInstr+0x36e>
			{
				writeByte('E') ;
    41a6:	85 e4       	ldi	r24, 0x45	; 69
    41a8:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
				writeByte('G') ;
    41ac:	87 e4       	ldi	r24, 0x47	; 71
    41ae:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
				writeByte('\r') ;
    41b2:	8d e0       	ldi	r24, 0x0D	; 13
    41b4:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
				
				/* Check who won the game */
				checkWin(mine,blackCount,whiteCount) ;
    41b8:	40 91 6a 00 	lds	r20, 0x006A	; 0x80006a <whiteCount>
    41bc:	60 91 6b 00 	lds	r22, 0x006B	; 0x80006b <blackCount>
    41c0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <mine>
    41c4:	0e 94 41 0a 	call	0x1482	; 0x1482 <checkWin>
    41c8:	5c c0       	rjmp	.+184    	; 0x4282 <examineInstr+0x426>
			}
			else
			{
				clearValidMoves() ;
    41ca:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <clearValidMoves>
				scanChessboard(mine) ;
    41ce:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <mine>
    41d2:	0e 94 92 06 	call	0xd24	; 0xd24 <scanChessboard>
				copyChessboard() ;
    41d6:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <copyChessboard>
				Tactics(mine) ;
    41da:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <mine>
    41de:	0e 94 46 0b 	call	0x168c	; 0x168c <Tactics>
				setChecker(myLine,myColumn,mine,table) ;
    41e2:	2c eb       	ldi	r18, 0xBC	; 188
    41e4:	30 e0       	ldi	r19, 0x00	; 0
    41e6:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <mine>
    41ea:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__data_start>
    41ee:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <myLine>
    41f2:	0e 94 07 02 	call	0x40e	; 0x40e <setChecker>
				TurnOtherCheckers(myLine,myColumn,enemy,mine,table) ;
    41f6:	0c eb       	ldi	r16, 0xBC	; 188
    41f8:	10 e0       	ldi	r17, 0x00	; 0
    41fa:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <mine>
    41fe:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    4202:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__data_start>
    4206:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <myLine>
    420a:	0e 94 76 07 	call	0xeec	; 0xeec <TurnOtherCheckers>
				clearValidMoves() ;
    420e:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <clearValidMoves>
				scanChessboard(mine) ;
    4212:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <mine>
    4216:	0e 94 92 06 	call	0xd24	; 0xd24 <scanChessboard>
				MyMove(myLine,myColumn) ;
    421a:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__data_start>
    421e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <myLine>
    4222:	0e 94 ad 01 	call	0x35a	; 0x35a <MyMove>
				/* I played my move. So the enemy stops counting my time and i started counting his time */
				TCCR1B |= (1 << CS12) ;
    4226:	8e b5       	in	r24, 0x2e	; 46
    4228:	84 60       	ori	r24, 0x04	; 4
    422a:	8e bd       	out	0x2e, r24	; 46
    422c:	2a c0       	rjmp	.+84     	; 0x4282 <examineInstr+0x426>
			
		}
		else
		{
			/* Enemy is trolling. He has available moves but he plays Pass */
			IllegalMove() ;
    422e:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <IllegalMove>
    4232:	27 c0       	rjmp	.+78     	; 0x4282 <examineInstr+0x426>
		}
		
		
	}
	else if (strlen(c) == 2 && c[0] == 'P' && c[1] == 'L')
    4234:	89 81       	ldd	r24, Y+1	; 0x01
    4236:	8c 34       	cpi	r24, 0x4C	; 76
    4238:	81 f4       	brne	.+32     	; 0x425a <examineInstr+0x3fe>
    423a:	23 c0       	rjmp	.+70     	; 0x4282 <examineInstr+0x426>
	{
		/* Reject */
	}
	else if (strlen(c) == 2 && c[0] == 'W' && c[1] == 'N')
    423c:	87 35       	cpi	r24, 0x57	; 87
    423e:	69 f4       	brne	.+26     	; 0x425a <examineInstr+0x3fe>
    4240:	89 81       	ldd	r24, Y+1	; 0x01
    4242:	8e 34       	cpi	r24, 0x4E	; 78
    4244:	51 f4       	brne	.+20     	; 0x425a <examineInstr+0x3fe>
	{
		/* You win */
		/*writeString("OK\r") ; */
		writeByte('O') ;
    4246:	8f e4       	ldi	r24, 0x4F	; 79
    4248:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
		writeByte('K') ;
    424c:	8b e4       	ldi	r24, 0x4B	; 75
    424e:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
		writeByte('\r') ;
    4252:	8d e0       	ldi	r24, 0x0D	; 13
    4254:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
    4258:	14 c0       	rjmp	.+40     	; 0x4282 <examineInstr+0x426>
	}
	else
	{
		writeByte('P') ;
    425a:	80 e5       	ldi	r24, 0x50	; 80
    425c:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
		writeByte('L') ;
    4260:	8c e4       	ldi	r24, 0x4C	; 76
    4262:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
		writeByte('\r') ;
    4266:	8d e0       	ldi	r24, 0x0D	; 13
    4268:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
	}
}
    426c:	0a c0       	rjmp	.+20     	; 0x4282 <examineInstr+0x426>
			writeByte('\r') ;
			/* Begin timer */
			//TCCR1B |= (1 << CS12) ;
		}
	}
	else if (strlen(c) == 2 && c[0] == 'N' && c[1] == 'G')
    426e:	88 81       	ld	r24, Y
    4270:	7f ce       	rjmp	.-770    	; 0x3f70 <examineInstr+0x114>
			writeByte('\r') ;
		}
		/* Start again opponents time */
		TCCR1B |= (1 << CS12) ;
	}
	else if (strlen(c) == 4 && c[0] == 'S' && c[1] == 'T' && c[2] == ' ' && (asciiToInteger(c[3]) >= 1 && asciiToInteger(c[3]) <=9))
    4272:	89 81       	ldd	r24, Y+1	; 0x01
    4274:	84 35       	cpi	r24, 0x54	; 84
    4276:	89 f7       	brne	.-30     	; 0x425a <examineInstr+0x3fe>
    4278:	b0 ce       	rjmp	.-672    	; 0x3fda <examineInstr+0x17e>
		{
			IllegalMove();
		}

	}
	else if (strlen(c) == 2 && c[0] == 'P' && c[1] == 'S')
    427a:	88 81       	ld	r24, Y
			IllegalMove() ;
		}
		
		
	}
	else if (strlen(c) == 2 && c[0] == 'P' && c[1] == 'L')
    427c:	80 35       	cpi	r24, 0x50	; 80
    427e:	f1 f6       	brne	.-68     	; 0x423c <examineInstr+0x3e0>
    4280:	d9 cf       	rjmp	.-78     	; 0x4234 <examineInstr+0x3d8>
	{
		writeByte('P') ;
		writeByte('L') ;
		writeByte('\r') ;
	}
}
    4282:	df 91       	pop	r29
    4284:	cf 91       	pop	r28
    4286:	1f 91       	pop	r17
    4288:	0f 91       	pop	r16
    428a:	ff 90       	pop	r15
    428c:	ef 90       	pop	r14
    428e:	08 95       	ret

00004290 <__vector_11>:
		}
	}
}

ISR(USART_RXC_vect)
{
    4290:	1f 92       	push	r1
    4292:	0f 92       	push	r0
    4294:	0f b6       	in	r0, 0x3f	; 63
    4296:	0f 92       	push	r0
    4298:	11 24       	eor	r1, r1
    429a:	2f 93       	push	r18
    429c:	3f 93       	push	r19
    429e:	4f 93       	push	r20
    42a0:	5f 93       	push	r21
    42a2:	6f 93       	push	r22
    42a4:	7f 93       	push	r23
    42a6:	8f 93       	push	r24
    42a8:	9f 93       	push	r25
    42aa:	af 93       	push	r26
    42ac:	bf 93       	push	r27
    42ae:	ef 93       	push	r30
    42b0:	ff 93       	push	r31
	char c = UDR ;
    42b2:	8c b1       	in	r24, 0x0c	; 12
	if ( c != '\r')
    42b4:	8d 30       	cpi	r24, 0x0D	; 13
    42b6:	19 f0       	breq	.+6      	; 0x42be <__vector_11+0x2e>
	{
		readByte(c) ;
    42b8:	0e 94 35 01 	call	0x26a	; 0x26a <readByte>
    42bc:	08 c0       	rjmp	.+16     	; 0x42ce <__vector_11+0x3e>
	}
	else
	{
		/* Call Examine function */
		updateRxBuffer(RX_buffer) ;
    42be:	84 e6       	ldi	r24, 0x64	; 100
    42c0:	91 e0       	ldi	r25, 0x01	; 1
    42c2:	0e 94 7d 01 	call	0x2fa	; 0x2fa <updateRxBuffer>
		examineInstr(RX_buffer) ;
    42c6:	84 e6       	ldi	r24, 0x64	; 100
    42c8:	91 e0       	ldi	r25, 0x01	; 1
    42ca:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <examineInstr>
	}
}
    42ce:	ff 91       	pop	r31
    42d0:	ef 91       	pop	r30
    42d2:	bf 91       	pop	r27
    42d4:	af 91       	pop	r26
    42d6:	9f 91       	pop	r25
    42d8:	8f 91       	pop	r24
    42da:	7f 91       	pop	r23
    42dc:	6f 91       	pop	r22
    42de:	5f 91       	pop	r21
    42e0:	4f 91       	pop	r20
    42e2:	3f 91       	pop	r19
    42e4:	2f 91       	pop	r18
    42e6:	0f 90       	pop	r0
    42e8:	0f be       	out	0x3f, r0	; 63
    42ea:	0f 90       	pop	r0
    42ec:	1f 90       	pop	r1
    42ee:	18 95       	reti

000042f0 <__tablejump2__>:
    42f0:	ee 0f       	add	r30, r30
    42f2:	ff 1f       	adc	r31, r31
    42f4:	05 90       	lpm	r0, Z+
    42f6:	f4 91       	lpm	r31, Z
    42f8:	e0 2d       	mov	r30, r0
    42fa:	09 94       	ijmp

000042fc <_exit>:
    42fc:	f8 94       	cli

000042fe <__stop_program>:
    42fe:	ff cf       	rjmp	.-2      	; 0x42fe <__stop_program>
