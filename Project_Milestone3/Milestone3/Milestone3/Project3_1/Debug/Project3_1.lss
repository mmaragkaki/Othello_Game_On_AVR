
Project3_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003600  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00003600  00003694  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000145  00800066  00800066  0000369a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000369a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000036cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00003708  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006021  00000000  00000000  00003848  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000073e  00000000  00000000  00009869  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003145  00000000  00000000  00009fa7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003bc  00000000  00000000  0000d0ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000062d  00000000  00000000  0000d4a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000377d  00000000  00000000  0000dad5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f0  00000000  00000000  00011252  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ac 00 	jmp	0x158	; 0x158 <__ctors_end>
       4:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
       8:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
       c:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      10:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      14:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      18:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__vector_6>
      1c:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      20:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      24:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      28:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      2c:	0c 94 c8 1a 	jmp	0x3590	; 0x3590 <__vector_11>
      30:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      34:	0c 94 cb 00 	jmp	0x196	; 0x196 <__vector_13>
      38:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      3c:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      40:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      44:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      48:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      4c:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      50:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      54:	68 01       	movw	r12, r16
      56:	7a 01       	movw	r14, r20
      58:	6a 01       	movw	r12, r20
      5a:	6c 01       	movw	r12, r24
      5c:	6e 01       	movw	r12, r28
      5e:	70 01       	movw	r14, r0
      60:	72 01       	movw	r14, r4
      62:	74 01       	movw	r14, r8
      64:	76 01       	movw	r14, r12
      66:	94 01       	movw	r18, r8
      68:	a6 01       	movw	r20, r12
      6a:	96 01       	movw	r18, r12
      6c:	98 01       	movw	r18, r16
      6e:	9a 01       	movw	r18, r20
      70:	9c 01       	movw	r18, r24
      72:	9e 01       	movw	r18, r28
      74:	a0 01       	movw	r20, r0
      76:	a2 01       	movw	r20, r4
      78:	1b 0a       	sbc	r1, r27
      7a:	39 0a       	sbc	r3, r25
      7c:	57 0a       	sbc	r5, r23
      7e:	75 0a       	sbc	r7, r21
      80:	93 0a       	sbc	r9, r19
      82:	b1 0a       	sbc	r11, r17
      84:	cf 0a       	sbc	r12, r31
      86:	ed 0a       	sbc	r14, r29
      88:	0b 0b       	sbc	r16, r27
      8a:	29 0b       	sbc	r18, r25
      8c:	47 0b       	sbc	r20, r23
      8e:	65 0b       	sbc	r22, r21
      90:	83 0b       	sbc	r24, r19
      92:	a1 0b       	sbc	r26, r17
      94:	e9 0b       	sbc	r30, r25
      96:	07 0c       	add	r0, r7
      98:	25 0c       	add	r2, r5
      9a:	43 0c       	add	r4, r3
      9c:	61 0c       	add	r6, r1
      9e:	7f 0c       	add	r7, r15
      a0:	9d 0c       	add	r9, r13
      a2:	bb 0c       	add	r11, r11
      a4:	d9 0c       	add	r13, r9
      a6:	f7 0c       	add	r15, r7
      a8:	15 0d       	add	r17, r5
      aa:	33 0d       	add	r19, r3
      ac:	51 0d       	add	r21, r1
      ae:	6f 0d       	add	r22, r15
      b0:	b7 0d       	add	r27, r7
      b2:	d5 0d       	add	r29, r5
      b4:	f3 0d       	add	r31, r3
      b6:	11 0e       	add	r1, r17
      b8:	2f 0e       	add	r2, r31
      ba:	4d 0e       	add	r4, r29
      bc:	6b 0e       	add	r6, r27
      be:	89 0e       	add	r8, r25
      c0:	a7 0e       	add	r10, r23
      c2:	c5 0e       	add	r12, r21
      c4:	e3 0e       	add	r14, r19
      c6:	01 0f       	add	r16, r17
      c8:	1f 0f       	add	r17, r31
      ca:	3d 0f       	add	r19, r29
      cc:	85 0f       	add	r24, r21
      ce:	a3 0f       	add	r26, r19
      d0:	c1 0f       	add	r28, r17
      d2:	df 0f       	add	r29, r31
      d4:	fd 0f       	add	r31, r29
      d6:	1b 10       	cpse	r1, r11
      d8:	39 10       	cpse	r3, r9
      da:	57 10       	cpse	r5, r7
      dc:	75 10       	cpse	r7, r5
      de:	93 10       	cpse	r9, r3
      e0:	b1 10       	cpse	r11, r1
      e2:	cf 10       	cpse	r12, r15
      e4:	ed 10       	cpse	r14, r13
      e6:	0b 11       	cpse	r16, r11
      e8:	51 11       	cpse	r21, r1
      ea:	6f 11       	cpse	r22, r15
      ec:	8d 11       	cpse	r24, r13
      ee:	ab 11       	cpse	r26, r11
      f0:	c9 11       	cpse	r28, r9
      f2:	e7 11       	cpse	r30, r7
      f4:	05 12       	cpse	r0, r21
      f6:	23 12       	cpse	r2, r19
      f8:	41 12       	cpse	r4, r17
      fa:	5f 12       	cpse	r5, r31
      fc:	7d 12       	cpse	r7, r29
      fe:	9b 12       	cpse	r9, r27
     100:	b9 12       	cpse	r11, r25
     102:	d7 12       	cpse	r13, r23
     104:	1f 13       	cpse	r17, r31
     106:	3d 13       	cpse	r19, r29
     108:	5b 13       	cpse	r21, r27
     10a:	79 13       	cpse	r23, r25
     10c:	97 13       	cpse	r25, r23
     10e:	b5 13       	cpse	r27, r21
     110:	d3 13       	cpse	r29, r19
     112:	f1 13       	cpse	r31, r17
     114:	0f 14       	cp	r0, r15
     116:	2d 14       	cp	r2, r13
     118:	4b 14       	cp	r4, r11
     11a:	69 14       	cp	r6, r9
     11c:	87 14       	cp	r8, r7
     11e:	a5 14       	cp	r10, r5
     120:	ed 14       	cp	r14, r13
     122:	0b 15       	cp	r16, r11
     124:	29 15       	cp	r18, r9
     126:	47 15       	cp	r20, r7
     128:	65 15       	cp	r22, r5
     12a:	83 15       	cp	r24, r3
     12c:	a1 15       	cp	r26, r1
     12e:	bf 15       	cp	r27, r15
     130:	dd 15       	cp	r29, r13
     132:	fb 15       	cp	r31, r11
     134:	19 16       	cp	r1, r25
     136:	37 16       	cp	r3, r23
     138:	55 16       	cp	r5, r21
     13a:	73 16       	cp	r7, r19
     13c:	bc 16       	cp	r11, r28
     13e:	da 16       	cp	r13, r26
     140:	f8 16       	cp	r15, r24
     142:	16 17       	cp	r17, r22
     144:	34 17       	cp	r19, r20
     146:	52 17       	cp	r21, r18
     148:	70 17       	cp	r23, r16
     14a:	8e 17       	cp	r24, r30
     14c:	ac 17       	cp	r26, r28
     14e:	ca 17       	cp	r28, r26
     150:	e8 17       	cp	r30, r24
     152:	06 18       	sub	r0, r6
     154:	24 18       	sub	r2, r4
     156:	42 18       	sub	r4, r2

00000158 <__ctors_end>:
     158:	11 24       	eor	r1, r1
     15a:	1f be       	out	0x3f, r1	; 63
     15c:	cf e5       	ldi	r28, 0x5F	; 95
     15e:	d4 e0       	ldi	r29, 0x04	; 4
     160:	de bf       	out	0x3e, r29	; 62
     162:	cd bf       	out	0x3d, r28	; 61

00000164 <__do_copy_data>:
     164:	10 e0       	ldi	r17, 0x00	; 0
     166:	a0 e6       	ldi	r26, 0x60	; 96
     168:	b0 e0       	ldi	r27, 0x00	; 0
     16a:	e0 e0       	ldi	r30, 0x00	; 0
     16c:	f6 e3       	ldi	r31, 0x36	; 54
     16e:	02 c0       	rjmp	.+4      	; 0x174 <__do_copy_data+0x10>
     170:	05 90       	lpm	r0, Z+
     172:	0d 92       	st	X+, r0
     174:	a6 36       	cpi	r26, 0x66	; 102
     176:	b1 07       	cpc	r27, r17
     178:	d9 f7       	brne	.-10     	; 0x170 <__do_copy_data+0xc>

0000017a <__do_clear_bss>:
     17a:	21 e0       	ldi	r18, 0x01	; 1
     17c:	a6 e6       	ldi	r26, 0x66	; 102
     17e:	b0 e0       	ldi	r27, 0x00	; 0
     180:	01 c0       	rjmp	.+2      	; 0x184 <.do_clear_bss_start>

00000182 <.do_clear_bss_loop>:
     182:	1d 92       	st	X+, r1

00000184 <.do_clear_bss_start>:
     184:	ab 3a       	cpi	r26, 0xAB	; 171
     186:	b2 07       	cpc	r27, r18
     188:	e1 f7       	brne	.-8      	; 0x182 <.do_clear_bss_loop>
     18a:	0e 94 4e 01 	call	0x29c	; 0x29c <main>
     18e:	0c 94 fe 1a 	jmp	0x35fc	; 0x35fc <_exit>

00000192 <__bad_interrupt>:
     192:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000196 <__vector_13>:
void quit(void)
{
	/* Surrender */
	writeByte('Q') ;
	writeByte('T') ;
	writeByte('\r') ; 
     196:	1f 92       	push	r1
     198:	0f 92       	push	r0
     19a:	0f b6       	in	r0, 0x3f	; 63
     19c:	0f 92       	push	r0
     19e:	11 24       	eor	r1, r1
     1a0:	8f 93       	push	r24
     1a2:	9f 93       	push	r25
     1a4:	ef 93       	push	r30
     1a6:	ff 93       	push	r31
     1a8:	5d 9b       	sbis	0x0b, 5	; 11
     1aa:	1a c0       	rjmp	.+52     	; 0x1e0 <__vector_13+0x4a>
     1ac:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <TxreadPos>
     1b0:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <TxwritePos>
     1b4:	e8 17       	cp	r30, r24
     1b6:	50 f4       	brcc	.+20     	; 0x1cc <__vector_13+0x36>
     1b8:	f0 e0       	ldi	r31, 0x00	; 0
     1ba:	e5 5e       	subi	r30, 0xE5	; 229
     1bc:	fe 4f       	sbci	r31, 0xFE	; 254
     1be:	80 81       	ld	r24, Z
     1c0:	8c b9       	out	0x0c, r24	; 12
     1c2:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <TxreadPos>
     1c6:	8f 5f       	subi	r24, 0xFF	; 255
     1c8:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <TxreadPos>
     1cc:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <TxreadPos>
     1d0:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <TxwritePos>
     1d4:	98 13       	cpse	r25, r24
     1d6:	04 c0       	rjmp	.+8      	; 0x1e0 <__vector_13+0x4a>
     1d8:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <TxreadPos>
     1dc:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <TxwritePos>
     1e0:	ff 91       	pop	r31
     1e2:	ef 91       	pop	r30
     1e4:	9f 91       	pop	r25
     1e6:	8f 91       	pop	r24
     1e8:	0f 90       	pop	r0
     1ea:	0f be       	out	0x3f, r0	; 63
     1ec:	0f 90       	pop	r0
     1ee:	1f 90       	pop	r1
     1f0:	18 95       	reti

000001f2 <__vector_6>:
     1f2:	1f 92       	push	r1
     1f4:	0f 92       	push	r0
     1f6:	0f b6       	in	r0, 0x3f	; 63
     1f8:	0f 92       	push	r0
     1fa:	11 24       	eor	r1, r1
     1fc:	8f 93       	push	r24
     1fe:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
     202:	8f 5f       	subi	r24, 0xFF	; 255
     204:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_end>
     208:	8f 91       	pop	r24
     20a:	0f 90       	pop	r0
     20c:	0f be       	out	0x3f, r0	; 63
     20e:	0f 90       	pop	r0
     210:	1f 90       	pop	r1
     212:	18 95       	reti

00000214 <init_Tx>:
     214:	90 bd       	out	0x20, r25	; 32
     216:	89 b9       	out	0x09, r24	; 9
     218:	80 e2       	ldi	r24, 0x20	; 32
     21a:	8b b9       	out	0x0b, r24	; 11
     21c:	88 e4       	ldi	r24, 0x48	; 72
     21e:	8a b9       	out	0x0a, r24	; 10
     220:	86 e8       	ldi	r24, 0x86	; 134
     222:	80 bd       	out	0x20, r24	; 32
     224:	08 95       	ret

00000226 <init_Rx>:
     226:	8a b1       	in	r24, 0x0a	; 10
     228:	80 69       	ori	r24, 0x90	; 144
     22a:	8a b9       	out	0x0a, r24	; 10
     22c:	08 95       	ret

0000022e <writeByte>:
     22e:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <TxwritePos>
     232:	e9 2f       	mov	r30, r25
     234:	f0 e0       	ldi	r31, 0x00	; 0
     236:	e5 5e       	subi	r30, 0xE5	; 229
     238:	fe 4f       	sbci	r31, 0xFE	; 254
     23a:	80 83       	st	Z, r24
     23c:	9f 5f       	subi	r25, 0xFF	; 255
     23e:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <TxwritePos>
     242:	90 31       	cpi	r25, 0x10	; 16
     244:	11 f4       	brne	.+4      	; 0x24a <writeByte+0x1c>
     246:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <TxwritePos>
     24a:	5d 9b       	sbis	0x0b, 5	; 11
     24c:	0c c0       	rjmp	.+24     	; 0x266 <writeByte+0x38>
     24e:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <TxreadPos>
     252:	f0 e0       	ldi	r31, 0x00	; 0
     254:	e5 5e       	subi	r30, 0xE5	; 229
     256:	fe 4f       	sbci	r31, 0xFE	; 254
     258:	80 81       	ld	r24, Z
     25a:	8c b9       	out	0x0c, r24	; 12
     25c:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <TxreadPos>
     260:	8f 5f       	subi	r24, 0xFF	; 255
     262:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <TxreadPos>
     266:	08 95       	ret

00000268 <readByte>:
     268:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <RxwritePos>
     26c:	91 31       	cpi	r25, 0x11	; 17
     26e:	40 f4       	brcc	.+16     	; 0x280 <readByte+0x18>
     270:	e9 2f       	mov	r30, r25
     272:	f0 e0       	ldi	r31, 0x00	; 0
     274:	e5 58       	subi	r30, 0x85	; 133
     276:	fe 4f       	sbci	r31, 0xFE	; 254
     278:	80 83       	st	Z, r24
     27a:	9f 5f       	subi	r25, 0xFF	; 255
     27c:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <RxwritePos>
     280:	08 95       	ret

00000282 <timerInit>:
     282:	1d bc       	out	0x2d, r1	; 45
     284:	1c bc       	out	0x2c, r1	; 44
     286:	8e b5       	in	r24, 0x2e	; 46
     288:	88 60       	ori	r24, 0x08	; 8
     28a:	8e bd       	out	0x2e, r24	; 46
     28c:	86 e9       	ldi	r24, 0x96	; 150
     28e:	98 e9       	ldi	r25, 0x98	; 152
     290:	9b bd       	out	0x2b, r25	; 43
     292:	8a bd       	out	0x2a, r24	; 42
     294:	89 b7       	in	r24, 0x39	; 57
     296:	80 61       	ori	r24, 0x10	; 16
     298:	89 bf       	out	0x39, r24	; 57
     29a:	08 95       	ret

0000029c <main>:
     29c:	80 e4       	ldi	r24, 0x40	; 64
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	0e 94 0a 01 	call	0x214	; 0x214 <init_Tx>
     2a4:	0e 94 13 01 	call	0x226	; 0x226 <init_Rx>
     2a8:	87 b3       	in	r24, 0x17	; 23
     2aa:	8f 62       	ori	r24, 0x2F	; 47
     2ac:	87 bb       	out	0x17, r24	; 23
     2ae:	88 b3       	in	r24, 0x18	; 24
     2b0:	8f 62       	ori	r24, 0x2F	; 47
     2b2:	88 bb       	out	0x18, r24	; 24
     2b4:	0e 94 41 01 	call	0x282	; 0x282 <timerInit>
     2b8:	78 94       	sei
     2ba:	ff cf       	rjmp	.-2      	; 0x2ba <main+0x1e>

000002bc <asciiToInteger>:
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	fc 01       	movw	r30, r24
     2c0:	f0 97       	sbiw	r30, 0x30	; 48
     2c2:	e9 30       	cpi	r30, 0x09	; 9
     2c4:	f1 05       	cpc	r31, r1
     2c6:	a0 f4       	brcc	.+40     	; 0x2f0 <asciiToInteger+0x34>
     2c8:	e6 5d       	subi	r30, 0xD6	; 214
     2ca:	ff 4f       	sbci	r31, 0xFF	; 255
     2cc:	0c 94 f8 1a 	jmp	0x35f0	; 0x35f0 <__tablejump2__>
     2d0:	80 e0       	ldi	r24, 0x00	; 0
     2d2:	08 95       	ret
     2d4:	82 e0       	ldi	r24, 0x02	; 2
     2d6:	08 95       	ret
     2d8:	83 e0       	ldi	r24, 0x03	; 3
     2da:	08 95       	ret
     2dc:	84 e0       	ldi	r24, 0x04	; 4
     2de:	08 95       	ret
     2e0:	85 e0       	ldi	r24, 0x05	; 5
     2e2:	08 95       	ret
     2e4:	86 e0       	ldi	r24, 0x06	; 6
     2e6:	08 95       	ret
     2e8:	87 e0       	ldi	r24, 0x07	; 7
     2ea:	08 95       	ret
     2ec:	88 e0       	ldi	r24, 0x08	; 8
     2ee:	08 95       	ret
     2f0:	89 e0       	ldi	r24, 0x09	; 9
     2f2:	08 95       	ret
     2f4:	81 e0       	ldi	r24, 0x01	; 1
     2f6:	08 95       	ret

000002f8 <updateRxBuffer>:
     2f8:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <RxwritePos>
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	05 c0       	rjmp	.+10     	; 0x30a <updateRxBuffer+0x12>
     300:	fc 01       	movw	r30, r24
     302:	e5 58       	subi	r30, 0x85	; 133
     304:	fe 4f       	sbci	r31, 0xFE	; 254
     306:	10 82       	st	Z, r1
     308:	01 96       	adiw	r24, 0x01	; 1
     30a:	80 31       	cpi	r24, 0x10	; 16
     30c:	91 05       	cpc	r25, r1
     30e:	c4 f3       	brlt	.-16     	; 0x300 <updateRxBuffer+0x8>
     310:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <RxwritePos>
     314:	08 95       	ret

00000316 <intToAscii>:
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	89 30       	cpi	r24, 0x09	; 9
     31a:	91 05       	cpc	r25, r1
     31c:	a8 f4       	brcc	.+42     	; 0x348 <intToAscii+0x32>
     31e:	fc 01       	movw	r30, r24
     320:	ed 5c       	subi	r30, 0xCD	; 205
     322:	ff 4f       	sbci	r31, 0xFF	; 255
     324:	0c 94 f8 1a 	jmp	0x35f0	; 0x35f0 <__tablejump2__>
     328:	80 e3       	ldi	r24, 0x30	; 48
     32a:	08 95       	ret
     32c:	82 e3       	ldi	r24, 0x32	; 50
     32e:	08 95       	ret
     330:	83 e3       	ldi	r24, 0x33	; 51
     332:	08 95       	ret
     334:	84 e3       	ldi	r24, 0x34	; 52
     336:	08 95       	ret
     338:	85 e3       	ldi	r24, 0x35	; 53
     33a:	08 95       	ret
     33c:	86 e3       	ldi	r24, 0x36	; 54
     33e:	08 95       	ret
     340:	87 e3       	ldi	r24, 0x37	; 55
     342:	08 95       	ret
     344:	88 e3       	ldi	r24, 0x38	; 56
     346:	08 95       	ret
     348:	89 e3       	ldi	r24, 0x39	; 57
     34a:	08 95       	ret
     34c:	81 e3       	ldi	r24, 0x31	; 49
     34e:	08 95       	ret

00000350 <MyMove>:
     350:	cf 93       	push	r28
     352:	df 93       	push	r29
     354:	d8 2f       	mov	r29, r24
     356:	c6 2f       	mov	r28, r22
     358:	8d e4       	ldi	r24, 0x4D	; 77
     35a:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
     35e:	8d e4       	ldi	r24, 0x4D	; 77
     360:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
     364:	80 e2       	ldi	r24, 0x20	; 32
     366:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
     36a:	8d 2f       	mov	r24, r29
     36c:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
     370:	8c 2f       	mov	r24, r28
     372:	0e 94 8b 01 	call	0x316	; 0x316 <intToAscii>
     376:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
     37a:	8d e0       	ldi	r24, 0x0D	; 13
     37c:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
     380:	df 91       	pop	r29
     382:	cf 91       	pop	r28
     384:	08 95       	ret

00000386 <MyPass>:
     386:	8d e4       	ldi	r24, 0x4D	; 77
     388:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
     38c:	80 e5       	ldi	r24, 0x50	; 80
     38e:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
     392:	8d e0       	ldi	r24, 0x0D	; 13
     394:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
     398:	08 95       	ret

0000039a <Win>:
     39a:	88 b3       	in	r24, 0x18	; 24
     39c:	8d 7f       	andi	r24, 0xFD	; 253
     39e:	88 bb       	out	0x18, r24	; 24
     3a0:	87 e5       	ldi	r24, 0x57	; 87
     3a2:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
     3a6:	8e e4       	ldi	r24, 0x4E	; 78
     3a8:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
     3ac:	8d e0       	ldi	r24, 0x0D	; 13
     3ae:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
     3b2:	08 95       	ret

000003b4 <Lose>:
     3b4:	88 b3       	in	r24, 0x18	; 24
     3b6:	8b 7f       	andi	r24, 0xFB	; 251
     3b8:	88 bb       	out	0x18, r24	; 24
     3ba:	8c e4       	ldi	r24, 0x4C	; 76
     3bc:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
     3c0:	83 e5       	ldi	r24, 0x53	; 83
     3c2:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
     3c6:	8d e0       	ldi	r24, 0x0D	; 13
     3c8:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
     3cc:	08 95       	ret

000003ce <Tie>:
     3ce:	88 b3       	in	r24, 0x18	; 24
     3d0:	87 7f       	andi	r24, 0xF7	; 247
     3d2:	88 bb       	out	0x18, r24	; 24
     3d4:	84 e5       	ldi	r24, 0x54	; 84
     3d6:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
     3da:	85 e4       	ldi	r24, 0x45	; 69
     3dc:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
     3e0:	8d e0       	ldi	r24, 0x0D	; 13
     3e2:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
     3e6:	08 95       	ret

000003e8 <IllegalMove>:
     3e8:	89 e4       	ldi	r24, 0x49	; 73
     3ea:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
     3ee:	8c e4       	ldi	r24, 0x4C	; 76
     3f0:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
     3f4:	8d e0       	ldi	r24, 0x0D	; 13
     3f6:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
     3fa:	08 95       	ret

000003fc <IllegalTime>:
     3fc:	89 e4       	ldi	r24, 0x49	; 73
     3fe:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
     402:	84 e5       	ldi	r24, 0x54	; 84
     404:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
     408:	8d e0       	ldi	r24, 0x0D	; 13
     40a:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
     40e:	08 95       	ret

00000410 <setChecker>:
	setChecker('E',4,'B',table) ;
	setChecker('E',5,'W',table) ;
}

void setChecker(char c,uint8_t column,char player,uint8_t chessboard[])
{
     410:	f9 01       	movw	r30, r18
	uint8_t index = ((c - 65) << 1) ;										/* initial index calculation for byte - array */
     412:	81 54       	subi	r24, 0x41	; 65
     414:	88 0f       	add	r24, r24
	uint8_t bit = column - 1 ;												/* initial bit that we must enable - disable chess-table cell */
     416:	3f ef       	ldi	r19, 0xFF	; 255
     418:	36 0f       	add	r19, r22
	uint8_t buffer = 0 ;													/* buffer to read the specific byte from memory */
	uint8_t temp = 0 ;
	if (column > 4)
     41a:	65 30       	cpi	r22, 0x05	; 5
     41c:	18 f0       	brcs	.+6      	; 0x424 <setChecker+0x14>
	{
		index++ ;
     41e:	8f 5f       	subi	r24, 0xFF	; 255
		bit = bit - 4 ;														/* if column > 4 jump to the next memory position */
     420:	3b ef       	ldi	r19, 0xFB	; 251
     422:	36 0f       	add	r19, r22
	}
	buffer = chessboard[index] ;
     424:	e8 0f       	add	r30, r24
     426:	f1 1d       	adc	r31, r1
     428:	a0 81       	ld	r26, Z
	switch(player)
     42a:	42 34       	cpi	r20, 0x42	; 66
     42c:	b1 f4       	brne	.+44     	; 0x45a <setChecker+0x4a>
	{
		case 'B':														   /* case black: enable cell and valid bit */
		buffer |= (1 << bit) | (1 << (4 + bit)) ;
     42e:	63 2f       	mov	r22, r19
     430:	70 e0       	ldi	r23, 0x00	; 0
     432:	41 e0       	ldi	r20, 0x01	; 1
     434:	50 e0       	ldi	r21, 0x00	; 0
     436:	ca 01       	movw	r24, r20
     438:	02 c0       	rjmp	.+4      	; 0x43e <setChecker+0x2e>
     43a:	88 0f       	add	r24, r24
     43c:	99 1f       	adc	r25, r25
     43e:	3a 95       	dec	r19
     440:	e2 f7       	brpl	.-8      	; 0x43a <setChecker+0x2a>
     442:	9b 01       	movw	r18, r22
     444:	2c 5f       	subi	r18, 0xFC	; 252
     446:	3f 4f       	sbci	r19, 0xFF	; 255
     448:	02 c0       	rjmp	.+4      	; 0x44e <setChecker+0x3e>
     44a:	44 0f       	add	r20, r20
     44c:	55 1f       	adc	r21, r21
     44e:	2a 95       	dec	r18
     450:	e2 f7       	brpl	.-8      	; 0x44a <setChecker+0x3a>
     452:	48 2b       	or	r20, r24
     454:	84 2f       	mov	r24, r20
     456:	8a 2b       	or	r24, r26
		break;
     458:	17 c0       	rjmp	.+46     	; 0x488 <__stack+0x29>
		default:														  /* case white: reset cell and enable valid bit */
		temp |= (1 << bit) ;
     45a:	63 2f       	mov	r22, r19
     45c:	70 e0       	ldi	r23, 0x00	; 0
     45e:	81 e0       	ldi	r24, 0x01	; 1
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	ac 01       	movw	r20, r24
     464:	02 c0       	rjmp	.+4      	; 0x46a <__stack+0xb>
     466:	44 0f       	add	r20, r20
     468:	55 1f       	adc	r21, r21
     46a:	3a 95       	dec	r19
     46c:	e2 f7       	brpl	.-8      	; 0x466 <__stack+0x7>
     46e:	9a 01       	movw	r18, r20
		temp = ~ temp ;
     470:	20 95       	com	r18
		buffer = buffer & temp ;
     472:	4a 2f       	mov	r20, r26
     474:	42 23       	and	r20, r18
		buffer |= (1 << (4 + bit)) ;
     476:	9b 01       	movw	r18, r22
     478:	2c 5f       	subi	r18, 0xFC	; 252
     47a:	3f 4f       	sbci	r19, 0xFF	; 255
     47c:	02 c0       	rjmp	.+4      	; 0x482 <__stack+0x23>
     47e:	88 0f       	add	r24, r24
     480:	99 1f       	adc	r25, r25
     482:	2a 95       	dec	r18
     484:	e2 f7       	brpl	.-8      	; 0x47e <__stack+0x1f>
     486:	84 2b       	or	r24, r20
		break;
	}
	chessboard[index] = buffer ;
     488:	80 83       	st	Z, r24
     48a:	08 95       	ret

0000048c <readCell>:
	}
}

char readCell(char c,uint8_t column,uint8_t chessboard[])
{
	uint8_t index = ((c - 65) << 1) ;								/* find appropriate index from ascii code */
     48c:	81 54       	subi	r24, 0x41	; 65
     48e:	88 0f       	add	r24, r24
	uint8_t bit = column - 1 ;										/* find initial bit position from the column */
     490:	7f ef       	ldi	r23, 0xFF	; 255
     492:	76 0f       	add	r23, r22
	uint8_t buffer = 0 ;
	char retC = 'E' ;
	if (column > 4)													/* if column > jump to the next position for the half byte */
     494:	65 30       	cpi	r22, 0x05	; 5
     496:	18 f0       	brcs	.+6      	; 0x49e <readCell+0x12>
	{
		index++ ;
     498:	8f 5f       	subi	r24, 0xFF	; 255
		bit = bit - 4 ;
     49a:	7b ef       	ldi	r23, 0xFB	; 251
     49c:	76 0f       	add	r23, r22
	}
	buffer = chessboard[index] ;											/* read data from memory cell and store into buffer */
     49e:	fa 01       	movw	r30, r20
     4a0:	e8 0f       	add	r30, r24
     4a2:	f1 1d       	adc	r31, r1
     4a4:	80 81       	ld	r24, Z
	if (!(buffer & (1 << (4+bit))))									/* if the enable bit of this bit position is zero then this is empty position */
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	27 2f       	mov	r18, r23
     4aa:	30 e0       	ldi	r19, 0x00	; 0
     4ac:	2c 5f       	subi	r18, 0xFC	; 252
     4ae:	3f 4f       	sbci	r19, 0xFF	; 255
     4b0:	ac 01       	movw	r20, r24
     4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <readCell+0x2c>
     4b4:	55 95       	asr	r21
     4b6:	47 95       	ror	r20
     4b8:	2a 95       	dec	r18
     4ba:	e2 f7       	brpl	.-8      	; 0x4b4 <readCell+0x28>
     4bc:	40 ff       	sbrs	r20, 0
     4be:	09 c0       	rjmp	.+18     	; 0x4d2 <readCell+0x46>
	{
		retC = 'E' ;
	}
	else if (buffer & (1 << bit))								   /* if enable-bit is 1 and the bit-pos is 1 then this is black */
     4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <readCell+0x3a>
     4c2:	95 95       	asr	r25
     4c4:	87 95       	ror	r24
     4c6:	7a 95       	dec	r23
     4c8:	e2 f7       	brpl	.-8      	; 0x4c2 <readCell+0x36>
     4ca:	80 ff       	sbrs	r24, 0
     4cc:	04 c0       	rjmp	.+8      	; 0x4d6 <readCell+0x4a>
	{
		retC = 'B' ;
     4ce:	82 e4       	ldi	r24, 0x42	; 66
     4d0:	08 95       	ret
		bit = bit - 4 ;
	}
	buffer = chessboard[index] ;											/* read data from memory cell and store into buffer */
	if (!(buffer & (1 << (4+bit))))									/* if the enable bit of this bit position is zero then this is empty position */
	{
		retC = 'E' ;
     4d2:	85 e4       	ldi	r24, 0x45	; 69
     4d4:	08 95       	ret
	{
		retC = 'B' ;
	}
	else                                                           /* if only the enable-bit is asserted then this is white */
	{
		retC = 'W' ;
     4d6:	87 e5       	ldi	r24, 0x57	; 87
	}
	return retC ;
}
     4d8:	08 95       	ret

000004da <checkEnemyMove>:
}


uint8_t checkEnemyMove(char c, uint8_t column)
{
	uint8_t index = c - 65 ;
     4da:	81 54       	subi	r24, 0x41	; 65
	uint8_t bit = column - 1 ;
     4dc:	61 50       	subi	r22, 0x01	; 1
	uint8_t buffer = enemyValidtable[index] ;
     4de:	e8 2f       	mov	r30, r24
     4e0:	f0 e0       	ldi	r31, 0x00	; 0
     4e2:	e4 58       	subi	r30, 0x84	; 132
     4e4:	ff 4f       	sbci	r31, 0xFF	; 255
     4e6:	80 81       	ld	r24, Z
	buffer = (buffer >> bit);
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <checkEnemyMove+0x16>
     4ec:	95 95       	asr	r25
     4ee:	87 95       	ror	r24
     4f0:	6a 95       	dec	r22
     4f2:	e2 f7       	brpl	.-8      	; 0x4ec <checkEnemyMove+0x12>
	buffer &= 0b00000001 ;
	if (buffer == 1)
     4f4:	80 ff       	sbrs	r24, 0
     4f6:	02 c0       	rjmp	.+4      	; 0x4fc <checkEnemyMove+0x22>
	{
		return 1;
     4f8:	81 e0       	ldi	r24, 0x01	; 1
     4fa:	08 95       	ret
	}else
	{
		return 0;
     4fc:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     4fe:	08 95       	ret

00000500 <insertMineValid>:

void insertMineValid(char c,uint8_t column)					/* This stores a mine valid move into the validtable */
{
	uint8_t index = c - 65 ;
     500:	81 54       	subi	r24, 0x41	; 65
	uint8_t bit = column - 1 ;
     502:	61 50       	subi	r22, 0x01	; 1
	uint8_t buffer = mineValidtable[index] ;
     504:	e8 2f       	mov	r30, r24
     506:	f0 e0       	ldi	r31, 0x00	; 0
     508:	ec 55       	subi	r30, 0x5C	; 92
     50a:	ff 4f       	sbci	r31, 0xFF	; 255
     50c:	20 81       	ld	r18, Z
	buffer |= (1 << bit) ;
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	02 c0       	rjmp	.+4      	; 0x518 <insertMineValid+0x18>
     514:	88 0f       	add	r24, r24
     516:	99 1f       	adc	r25, r25
     518:	6a 95       	dec	r22
     51a:	e2 f7       	brpl	.-8      	; 0x514 <insertMineValid+0x14>
     51c:	82 2b       	or	r24, r18
	mineValidtable[index] = buffer ;
     51e:	80 83       	st	Z, r24
     520:	08 95       	ret

00000522 <insertEnemyValid>:
}

void insertEnemyValid(char c,uint8_t column)					/* This stores a mine valid move into the validtable */
{
	uint8_t index = c - 65 ;
     522:	81 54       	subi	r24, 0x41	; 65
	uint8_t bit = column - 1 ;
     524:	61 50       	subi	r22, 0x01	; 1
	uint8_t buffer = enemyValidtable[index] ;
     526:	e8 2f       	mov	r30, r24
     528:	f0 e0       	ldi	r31, 0x00	; 0
     52a:	e4 58       	subi	r30, 0x84	; 132
     52c:	ff 4f       	sbci	r31, 0xFF	; 255
     52e:	20 81       	ld	r18, Z
	buffer |= (1 << bit) ;
     530:	81 e0       	ldi	r24, 0x01	; 1
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	02 c0       	rjmp	.+4      	; 0x53a <insertEnemyValid+0x18>
     536:	88 0f       	add	r24, r24
     538:	99 1f       	adc	r25, r25
     53a:	6a 95       	dec	r22
     53c:	e2 f7       	brpl	.-8      	; 0x536 <insertEnemyValid+0x14>
     53e:	82 2b       	or	r24, r18
	enemyValidtable[index] = buffer ;
     540:	80 83       	st	Z, r24
     542:	08 95       	ret

00000544 <checkAvailable>:
	}
	return retC ;
}

void checkAvailable(char c,uint8_t j,char player,char mine)
{
     544:	9f 92       	push	r9
     546:	af 92       	push	r10
     548:	bf 92       	push	r11
     54a:	cf 92       	push	r12
     54c:	df 92       	push	r13
     54e:	ef 92       	push	r14
     550:	ff 92       	push	r15
     552:	0f 93       	push	r16
     554:	1f 93       	push	r17
     556:	cf 93       	push	r28
     558:	df 93       	push	r29
     55a:	c8 2f       	mov	r28, r24
     55c:	d6 2f       	mov	r29, r22
     55e:	e4 2e       	mov	r14, r20
     560:	d2 2e       	mov	r13, r18
	uint8_t found = 0 ;
	uint8_t i = j ;
	uint8_t coltemp = j ;
	switch (player)
     562:	82 e4       	ldi	r24, 0x42	; 66
     564:	48 13       	cpse	r20, r24
     566:	ba c1       	rjmp	.+884    	; 0x8dc <checkAvailable+0x398>
	{
		case 'B':
		/* check right of the enemy - checker for other my own checkers */
		i++ ;
     568:	01 e0       	ldi	r16, 0x01	; 1
     56a:	06 0f       	add	r16, r22
     56c:	10 2f       	mov	r17, r16
	return retC ;
}

void checkAvailable(char c,uint8_t j,char player,char mine)
{
	uint8_t found = 0 ;
     56e:	f1 2c       	mov	r15, r1
	switch (player)
	{
		case 'B':
		/* check right of the enemy - checker for other my own checkers */
		i++ ;
		while (i <= 8 && found == 0 && readCell(c,i,table) != 'E')
     570:	05 c0       	rjmp	.+10     	; 0x57c <checkAvailable+0x38>
		{
			
			if (readCell(c,i,table) == 'B')
     572:	82 34       	cpi	r24, 0x42	; 66
     574:	11 f4       	brne	.+4      	; 0x57a <checkAvailable+0x36>
			{
				found = 1 ;
     576:	ff 24       	eor	r15, r15
     578:	f3 94       	inc	r15
			}
			i++ ;
     57a:	1f 5f       	subi	r17, 0xFF	; 255
	switch (player)
	{
		case 'B':
		/* check right of the enemy - checker for other my own checkers */
		i++ ;
		while (i <= 8 && found == 0 && readCell(c,i,table) != 'E')
     57c:	19 30       	cpi	r17, 0x09	; 9
     57e:	50 f4       	brcc	.+20     	; 0x594 <checkAvailable+0x50>
     580:	f1 10       	cpse	r15, r1
     582:	08 c0       	rjmp	.+16     	; 0x594 <checkAvailable+0x50>
     584:	4c eb       	ldi	r20, 0xBC	; 188
     586:	50 e0       	ldi	r21, 0x00	; 0
     588:	61 2f       	mov	r22, r17
     58a:	8c 2f       	mov	r24, r28
     58c:	0e 94 46 02 	call	0x48c	; 0x48c <readCell>
     590:	85 34       	cpi	r24, 0x45	; 69
     592:	79 f7       	brne	.-34     	; 0x572 <checkAvailable+0x2e>
			{
				found = 1 ;
			}
			i++ ;
		}
		if (found == 1 && j-1 > 0)
     594:	81 e0       	ldi	r24, 0x01	; 1
     596:	f8 12       	cpse	r15, r24
     598:	1b c0       	rjmp	.+54     	; 0x5d0 <checkAvailable+0x8c>
     59a:	8d 2f       	mov	r24, r29
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	01 97       	sbiw	r24, 0x01	; 1
     5a0:	18 16       	cp	r1, r24
     5a2:	19 06       	cpc	r1, r25
     5a4:	ac f4       	brge	.+42     	; 0x5d0 <checkAvailable+0x8c>
		{
			if (readCell(c,j-1,table) == 'E')
     5a6:	1f ef       	ldi	r17, 0xFF	; 255
     5a8:	1d 0f       	add	r17, r29
     5aa:	4c eb       	ldi	r20, 0xBC	; 188
     5ac:	50 e0       	ldi	r21, 0x00	; 0
     5ae:	61 2f       	mov	r22, r17
     5b0:	8c 2f       	mov	r24, r28
     5b2:	0e 94 46 02 	call	0x48c	; 0x48c <readCell>
     5b6:	85 34       	cpi	r24, 0x45	; 69
     5b8:	59 f4       	brne	.+22     	; 0x5d0 <checkAvailable+0x8c>
			{
				/* Available move c, j-1 */						/* The valid move is one left */
				if (mine == player)								/* If the colour is mine */
     5ba:	ed 10       	cpse	r14, r13
     5bc:	05 c0       	rjmp	.+10     	; 0x5c8 <checkAvailable+0x84>
				{												/* then save this available move as mine */
					insertMineValid(c,j-1) ;
     5be:	61 2f       	mov	r22, r17
     5c0:	8c 2f       	mov	r24, r28
     5c2:	0e 94 80 02 	call	0x500	; 0x500 <insertMineValid>
     5c6:	04 c0       	rjmp	.+8      	; 0x5d0 <checkAvailable+0x8c>
				}
				else                                           /* else save this move as enemy available move */
				{
					insertEnemyValid(c,j-1) ;
     5c8:	61 2f       	mov	r22, r17
     5ca:	8c 2f       	mov	r24, r28
     5cc:	0e 94 91 02 	call	0x522	; 0x522 <insertEnemyValid>
			}
		}
		
		found = 0 ;												/* check left of the enemy - checker for other my own checkers */
		i = j ;
		i-- ;
     5d0:	bb 24       	eor	r11, r11
     5d2:	ba 94       	dec	r11
     5d4:	bd 0e       	add	r11, r29
     5d6:	1b 2d       	mov	r17, r11
				}
				
			}
		}
		
		found = 0 ;												/* check left of the enemy - checker for other my own checkers */
     5d8:	f1 2c       	mov	r15, r1
		i = j ;
		i-- ;
		while (i > 1 && found == 0 && readCell(c,i,table) != 'E')
     5da:	05 c0       	rjmp	.+10     	; 0x5e6 <checkAvailable+0xa2>
		{
			
			if (readCell(c,i,table) == 'B')
     5dc:	82 34       	cpi	r24, 0x42	; 66
     5de:	11 f4       	brne	.+4      	; 0x5e4 <checkAvailable+0xa0>
			{
				found = 1 ;
     5e0:	ff 24       	eor	r15, r15
     5e2:	f3 94       	inc	r15
			}
			i-- ;
     5e4:	11 50       	subi	r17, 0x01	; 1
		}
		
		found = 0 ;												/* check left of the enemy - checker for other my own checkers */
		i = j ;
		i-- ;
		while (i > 1 && found == 0 && readCell(c,i,table) != 'E')
     5e6:	12 30       	cpi	r17, 0x02	; 2
     5e8:	50 f0       	brcs	.+20     	; 0x5fe <checkAvailable+0xba>
     5ea:	f1 10       	cpse	r15, r1
     5ec:	08 c0       	rjmp	.+16     	; 0x5fe <checkAvailable+0xba>
     5ee:	4c eb       	ldi	r20, 0xBC	; 188
     5f0:	50 e0       	ldi	r21, 0x00	; 0
     5f2:	61 2f       	mov	r22, r17
     5f4:	8c 2f       	mov	r24, r28
     5f6:	0e 94 46 02 	call	0x48c	; 0x48c <readCell>
     5fa:	85 34       	cpi	r24, 0x45	; 69
     5fc:	79 f7       	brne	.-34     	; 0x5dc <checkAvailable+0x98>
				found = 1 ;
			}
			i-- ;
			
		}
		if (found == 1 && j+1 < 9)
     5fe:	81 e0       	ldi	r24, 0x01	; 1
     600:	f8 12       	cpse	r15, r24
     602:	18 c0       	rjmp	.+48     	; 0x634 <checkAvailable+0xf0>
     604:	8d 2f       	mov	r24, r29
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	01 96       	adiw	r24, 0x01	; 1
     60a:	09 97       	sbiw	r24, 0x09	; 9
     60c:	9c f4       	brge	.+38     	; 0x634 <checkAvailable+0xf0>
		{
			if (readCell(c,j+1,table) == 'E')
     60e:	4c eb       	ldi	r20, 0xBC	; 188
     610:	50 e0       	ldi	r21, 0x00	; 0
     612:	60 2f       	mov	r22, r16
     614:	8c 2f       	mov	r24, r28
     616:	0e 94 46 02 	call	0x48c	; 0x48c <readCell>
     61a:	85 34       	cpi	r24, 0x45	; 69
     61c:	59 f4       	brne	.+22     	; 0x634 <checkAvailable+0xf0>
			{
				/* Available move c, j+1 */							/* The valid move is one right */
				if (mine == player)									/* If the colour is mine */
     61e:	ed 10       	cpse	r14, r13
     620:	05 c0       	rjmp	.+10     	; 0x62c <checkAvailable+0xe8>
				{                                                   /* then save this move as mine available */
					insertMineValid(c,j+1) ;
     622:	60 2f       	mov	r22, r16
     624:	8c 2f       	mov	r24, r28
     626:	0e 94 80 02 	call	0x500	; 0x500 <insertMineValid>
     62a:	04 c0       	rjmp	.+8      	; 0x634 <checkAvailable+0xf0>
				}
				else                                               /* else save it as opponents available move */
				{
					insertEnemyValid(c,j+1) ;
     62c:	60 2f       	mov	r22, r16
     62e:	8c 2f       	mov	r24, r28
     630:	0e 94 91 02 	call	0x522	; 0x522 <insertEnemyValid>
			}
		}
		
		found = 0 ;											 /* check up of the enemy - checker for other my own checkers */
		i = c ;
		i-- ;
     634:	aa 24       	eor	r10, r10
     636:	aa 94       	dec	r10
     638:	ac 0e       	add	r10, r28
     63a:	1a 2d       	mov	r17, r10
					insertEnemyValid(c,j+1) ;
				}
			}
		}
		
		found = 0 ;											 /* check up of the enemy - checker for other my own checkers */
     63c:	f1 2c       	mov	r15, r1
		i = c ;
		i-- ;
		while (i > '@' && found == 0 && readCell(i,j,table) != 'E')
     63e:	05 c0       	rjmp	.+10     	; 0x64a <checkAvailable+0x106>
		{
			
			if (readCell(i,j,table) == 'B')
     640:	82 34       	cpi	r24, 0x42	; 66
     642:	11 f4       	brne	.+4      	; 0x648 <checkAvailable+0x104>
			{
				found = 1 ;
     644:	ff 24       	eor	r15, r15
     646:	f3 94       	inc	r15
			}
			i-- ;
     648:	11 50       	subi	r17, 0x01	; 1
		}
		
		found = 0 ;											 /* check up of the enemy - checker for other my own checkers */
		i = c ;
		i-- ;
		while (i > '@' && found == 0 && readCell(i,j,table) != 'E')
     64a:	11 34       	cpi	r17, 0x41	; 65
     64c:	50 f0       	brcs	.+20     	; 0x662 <checkAvailable+0x11e>
     64e:	f1 10       	cpse	r15, r1
     650:	08 c0       	rjmp	.+16     	; 0x662 <checkAvailable+0x11e>
     652:	4c eb       	ldi	r20, 0xBC	; 188
     654:	50 e0       	ldi	r21, 0x00	; 0
     656:	6d 2f       	mov	r22, r29
     658:	81 2f       	mov	r24, r17
     65a:	0e 94 46 02 	call	0x48c	; 0x48c <readCell>
     65e:	85 34       	cpi	r24, 0x45	; 69
     660:	79 f7       	brne	.-34     	; 0x640 <checkAvailable+0xfc>
			{
				found = 1 ;
			}
			i-- ;
		}
		if (found == 1 && c+1 < 'I')
     662:	81 e0       	ldi	r24, 0x01	; 1
     664:	f8 12       	cpse	r15, r24
     666:	1b c0       	rjmp	.+54     	; 0x69e <checkAvailable+0x15a>
     668:	8c 2f       	mov	r24, r28
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	01 96       	adiw	r24, 0x01	; 1
     66e:	89 34       	cpi	r24, 0x49	; 73
     670:	91 05       	cpc	r25, r1
     672:	ac f4       	brge	.+42     	; 0x69e <checkAvailable+0x15a>
		{
			if (readCell(c+1,j,table) == 'E')
     674:	11 e0       	ldi	r17, 0x01	; 1
     676:	1c 0f       	add	r17, r28
     678:	4c eb       	ldi	r20, 0xBC	; 188
     67a:	50 e0       	ldi	r21, 0x00	; 0
     67c:	6d 2f       	mov	r22, r29
     67e:	81 2f       	mov	r24, r17
     680:	0e 94 46 02 	call	0x48c	; 0x48c <readCell>
     684:	85 34       	cpi	r24, 0x45	; 69
     686:	59 f4       	brne	.+22     	; 0x69e <checkAvailable+0x15a>
			{
				/* Valid pos c+1, j */
				if (mine == player)
     688:	ed 10       	cpse	r14, r13
     68a:	05 c0       	rjmp	.+10     	; 0x696 <checkAvailable+0x152>
				{
					insertMineValid(c+1,j) ;
     68c:	6d 2f       	mov	r22, r29
     68e:	81 2f       	mov	r24, r17
     690:	0e 94 80 02 	call	0x500	; 0x500 <insertMineValid>
     694:	04 c0       	rjmp	.+8      	; 0x69e <checkAvailable+0x15a>
				}
				else
				{
					insertEnemyValid(c+1,j) ;
     696:	6d 2f       	mov	r22, r29
     698:	81 2f       	mov	r24, r17
     69a:	0e 94 91 02 	call	0x522	; 0x522 <insertEnemyValid>
			}
		}
		
		found = 0 ;										   /* check down of the enemy - checker for other my own checkers */
		i = c ;
		i++ ;
     69e:	11 e0       	ldi	r17, 0x01	; 1
     6a0:	1c 0f       	add	r17, r28
     6a2:	f1 2e       	mov	r15, r17
					insertEnemyValid(c+1,j) ;
				}
			}
		}
		
		found = 0 ;										   /* check down of the enemy - checker for other my own checkers */
     6a4:	c1 2c       	mov	r12, r1
		i = c ;
		i++ ;
		while (i < 'I' && found == 0 && readCell(i,j,table) != 'E')
     6a6:	05 c0       	rjmp	.+10     	; 0x6b2 <checkAvailable+0x16e>
		{
			if (readCell(i,j,table) == 'B')
     6a8:	82 34       	cpi	r24, 0x42	; 66
     6aa:	11 f4       	brne	.+4      	; 0x6b0 <checkAvailable+0x16c>
			{
				found = 1 ;
     6ac:	cc 24       	eor	r12, r12
     6ae:	c3 94       	inc	r12
			}
			i++ ;
     6b0:	f3 94       	inc	r15
		}
		
		found = 0 ;										   /* check down of the enemy - checker for other my own checkers */
		i = c ;
		i++ ;
		while (i < 'I' && found == 0 && readCell(i,j,table) != 'E')
     6b2:	88 e4       	ldi	r24, 0x48	; 72
     6b4:	8f 15       	cp	r24, r15
     6b6:	50 f0       	brcs	.+20     	; 0x6cc <checkAvailable+0x188>
     6b8:	c1 10       	cpse	r12, r1
     6ba:	08 c0       	rjmp	.+16     	; 0x6cc <checkAvailable+0x188>
     6bc:	4c eb       	ldi	r20, 0xBC	; 188
     6be:	50 e0       	ldi	r21, 0x00	; 0
     6c0:	6d 2f       	mov	r22, r29
     6c2:	8f 2d       	mov	r24, r15
     6c4:	0e 94 46 02 	call	0x48c	; 0x48c <readCell>
     6c8:	85 34       	cpi	r24, 0x45	; 69
     6ca:	71 f7       	brne	.-36     	; 0x6a8 <checkAvailable+0x164>
			{
				found = 1 ;
			}
			i++ ;
		}
		if (found == 1 && c - 1 > '@')
     6cc:	81 e0       	ldi	r24, 0x01	; 1
     6ce:	c8 12       	cpse	r12, r24
     6d0:	19 c0       	rjmp	.+50     	; 0x704 <checkAvailable+0x1c0>
     6d2:	8c 2f       	mov	r24, r28
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	01 97       	sbiw	r24, 0x01	; 1
     6d8:	81 34       	cpi	r24, 0x41	; 65
     6da:	91 05       	cpc	r25, r1
     6dc:	9c f0       	brlt	.+38     	; 0x704 <checkAvailable+0x1c0>
		{
			if (readCell(c-1,j,table) == 'E')
     6de:	4c eb       	ldi	r20, 0xBC	; 188
     6e0:	50 e0       	ldi	r21, 0x00	; 0
     6e2:	6d 2f       	mov	r22, r29
     6e4:	8a 2d       	mov	r24, r10
     6e6:	0e 94 46 02 	call	0x48c	; 0x48c <readCell>
     6ea:	85 34       	cpi	r24, 0x45	; 69
     6ec:	59 f4       	brne	.+22     	; 0x704 <checkAvailable+0x1c0>
			{
				/* Valid pos c-1,j */
				if (mine == player)
     6ee:	ed 10       	cpse	r14, r13
     6f0:	05 c0       	rjmp	.+10     	; 0x6fc <checkAvailable+0x1b8>
				{
					insertMineValid(c-1,j) ;
     6f2:	6d 2f       	mov	r22, r29
     6f4:	8a 2d       	mov	r24, r10
     6f6:	0e 94 80 02 	call	0x500	; 0x500 <insertMineValid>
     6fa:	04 c0       	rjmp	.+8      	; 0x704 <checkAvailable+0x1c0>
				}
				else
				{
					insertEnemyValid(c-1,j) ;
     6fc:	6d 2f       	mov	r22, r29
     6fe:	8a 2d       	mov	r24, r10
     700:	0e 94 91 02 	call	0x522	; 0x522 <insertEnemyValid>
		}
		/* check main diagon up */
		found = 0 ;
		i = c ;
		i-- ;
		coltemp++ ;
     704:	c0 2e       	mov	r12, r16
			}
		}
		/* check main diagon up */
		found = 0 ;
		i = c ;
		i-- ;
     706:	fa 2c       	mov	r15, r10
					insertEnemyValid(c-1,j) ;
				}
			}
		}
		/* check main diagon up */
		found = 0 ;
     708:	91 2c       	mov	r9, r1
		i = c ;
		i-- ;
		coltemp++ ;
		while (i > '@' && coltemp < 9 && (readCell(i,coltemp,table) != 'E') && found == 0)
     70a:	06 c0       	rjmp	.+12     	; 0x718 <checkAvailable+0x1d4>
		{
			if (readCell(i,coltemp,table) == 'B')
     70c:	82 34       	cpi	r24, 0x42	; 66
     70e:	11 f4       	brne	.+4      	; 0x714 <checkAvailable+0x1d0>
			{
				found = 1 ;
     710:	99 24       	eor	r9, r9
     712:	93 94       	inc	r9
			}
			i-- ;
     714:	fa 94       	dec	r15
			coltemp++ ;
     716:	c3 94       	inc	r12
		/* check main diagon up */
		found = 0 ;
		i = c ;
		i-- ;
		coltemp++ ;
		while (i > '@' && coltemp < 9 && (readCell(i,coltemp,table) != 'E') && found == 0)
     718:	80 e4       	ldi	r24, 0x40	; 64
     71a:	8f 15       	cp	r24, r15
     71c:	68 f4       	brcc	.+26     	; 0x738 <checkAvailable+0x1f4>
     71e:	88 e0       	ldi	r24, 0x08	; 8
     720:	8c 15       	cp	r24, r12
     722:	50 f0       	brcs	.+20     	; 0x738 <checkAvailable+0x1f4>
     724:	4c eb       	ldi	r20, 0xBC	; 188
     726:	50 e0       	ldi	r21, 0x00	; 0
     728:	6c 2d       	mov	r22, r12
     72a:	8f 2d       	mov	r24, r15
     72c:	0e 94 46 02 	call	0x48c	; 0x48c <readCell>
     730:	85 34       	cpi	r24, 0x45	; 69
     732:	11 f0       	breq	.+4      	; 0x738 <checkAvailable+0x1f4>
     734:	99 20       	and	r9, r9
     736:	51 f3       	breq	.-44     	; 0x70c <checkAvailable+0x1c8>
				found = 1 ;
			}
			i-- ;
			coltemp++ ;
		}
		if (found == 1 && (c+1 < 'I') && (j-1 > 0))
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	98 12       	cpse	r9, r24
     73c:	1f c0       	rjmp	.+62     	; 0x77c <checkAvailable+0x238>
     73e:	8c 2f       	mov	r24, r28
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	01 96       	adiw	r24, 0x01	; 1
     744:	89 34       	cpi	r24, 0x49	; 73
     746:	91 05       	cpc	r25, r1
     748:	cc f4       	brge	.+50     	; 0x77c <checkAvailable+0x238>
     74a:	8d 2f       	mov	r24, r29
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	01 97       	sbiw	r24, 0x01	; 1
     750:	18 16       	cp	r1, r24
     752:	19 06       	cpc	r1, r25
     754:	9c f4       	brge	.+38     	; 0x77c <checkAvailable+0x238>
		{
			if (readCell(c+1,j-1,table) == 'E')
     756:	4c eb       	ldi	r20, 0xBC	; 188
     758:	50 e0       	ldi	r21, 0x00	; 0
     75a:	6b 2d       	mov	r22, r11
     75c:	81 2f       	mov	r24, r17
     75e:	0e 94 46 02 	call	0x48c	; 0x48c <readCell>
     762:	85 34       	cpi	r24, 0x45	; 69
     764:	59 f4       	brne	.+22     	; 0x77c <checkAvailable+0x238>
			{
				/* Valid pos c+1,j-1 */
				if (mine == player)
     766:	ed 10       	cpse	r14, r13
     768:	05 c0       	rjmp	.+10     	; 0x774 <checkAvailable+0x230>
				{
					insertMineValid(c+1,j-1) ;
     76a:	6b 2d       	mov	r22, r11
     76c:	81 2f       	mov	r24, r17
     76e:	0e 94 80 02 	call	0x500	; 0x500 <insertMineValid>
     772:	04 c0       	rjmp	.+8      	; 0x77c <checkAvailable+0x238>
				}
				else
				{
					insertEnemyValid(c+1,j-1) ;
     774:	6b 2d       	mov	r22, r11
     776:	81 2f       	mov	r24, r17
     778:	0e 94 91 02 	call	0x522	; 0x522 <insertEnemyValid>
		/* Check main diagon down */
		found = 0 ;
		i = c ;
		coltemp = j ;
		i++ ;
		coltemp-- ;
     77c:	cb 2c       	mov	r12, r11
		
		/* Check main diagon down */
		found = 0 ;
		i = c ;
		coltemp = j ;
		i++ ;
     77e:	f1 2e       	mov	r15, r17
				}
			}
		}
		
		/* Check main diagon down */
		found = 0 ;
     780:	91 2c       	mov	r9, r1
		i = c ;
		coltemp = j ;
		i++ ;
		coltemp-- ;
		while((i < 'I') && (coltemp > 0) && (found == 0) && (readCell(i,coltemp,table) != 'E'))
     782:	06 c0       	rjmp	.+12     	; 0x790 <checkAvailable+0x24c>
		{
			if (readCell(i,coltemp,table) == 'B')
     784:	82 34       	cpi	r24, 0x42	; 66
     786:	11 f4       	brne	.+4      	; 0x78c <checkAvailable+0x248>
			{
				found = 1 ;
     788:	99 24       	eor	r9, r9
     78a:	93 94       	inc	r9
			}
			i++ ;
     78c:	f3 94       	inc	r15
			coltemp-- ;
     78e:	ca 94       	dec	r12
		found = 0 ;
		i = c ;
		coltemp = j ;
		i++ ;
		coltemp-- ;
		while((i < 'I') && (coltemp > 0) && (found == 0) && (readCell(i,coltemp,table) != 'E'))
     790:	88 e4       	ldi	r24, 0x48	; 72
     792:	8f 15       	cp	r24, r15
     794:	60 f0       	brcs	.+24     	; 0x7ae <checkAvailable+0x26a>
     796:	cc 20       	and	r12, r12
     798:	51 f0       	breq	.+20     	; 0x7ae <checkAvailable+0x26a>
     79a:	91 10       	cpse	r9, r1
     79c:	08 c0       	rjmp	.+16     	; 0x7ae <checkAvailable+0x26a>
     79e:	4c eb       	ldi	r20, 0xBC	; 188
     7a0:	50 e0       	ldi	r21, 0x00	; 0
     7a2:	6c 2d       	mov	r22, r12
     7a4:	8f 2d       	mov	r24, r15
     7a6:	0e 94 46 02 	call	0x48c	; 0x48c <readCell>
     7aa:	85 34       	cpi	r24, 0x45	; 69
     7ac:	59 f7       	brne	.-42     	; 0x784 <checkAvailable+0x240>
				found = 1 ;
			}
			i++ ;
			coltemp-- ;
		}
		if (found == 1 && (c-1 > '@') && (j+1 < 9))
     7ae:	81 e0       	ldi	r24, 0x01	; 1
     7b0:	98 12       	cpse	r9, r24
     7b2:	1e c0       	rjmp	.+60     	; 0x7f0 <checkAvailable+0x2ac>
     7b4:	8c 2f       	mov	r24, r28
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	01 97       	sbiw	r24, 0x01	; 1
     7ba:	81 34       	cpi	r24, 0x41	; 65
     7bc:	91 05       	cpc	r25, r1
     7be:	c4 f0       	brlt	.+48     	; 0x7f0 <checkAvailable+0x2ac>
     7c0:	8d 2f       	mov	r24, r29
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	01 96       	adiw	r24, 0x01	; 1
     7c6:	09 97       	sbiw	r24, 0x09	; 9
     7c8:	9c f4       	brge	.+38     	; 0x7f0 <checkAvailable+0x2ac>
		{
			if (readCell(c-1,j+1,table) == 'E')
     7ca:	4c eb       	ldi	r20, 0xBC	; 188
     7cc:	50 e0       	ldi	r21, 0x00	; 0
     7ce:	60 2f       	mov	r22, r16
     7d0:	8a 2d       	mov	r24, r10
     7d2:	0e 94 46 02 	call	0x48c	; 0x48c <readCell>
     7d6:	85 34       	cpi	r24, 0x45	; 69
     7d8:	59 f4       	brne	.+22     	; 0x7f0 <checkAvailable+0x2ac>
			{
				/* Valid pos c-1, j+1 */
				if (player == mine)
     7da:	ed 10       	cpse	r14, r13
     7dc:	05 c0       	rjmp	.+10     	; 0x7e8 <checkAvailable+0x2a4>
				{
					insertMineValid(c-1,j+1) ;
     7de:	60 2f       	mov	r22, r16
     7e0:	8a 2d       	mov	r24, r10
     7e2:	0e 94 80 02 	call	0x500	; 0x500 <insertMineValid>
     7e6:	04 c0       	rjmp	.+8      	; 0x7f0 <checkAvailable+0x2ac>
				}
				else
				{
					insertEnemyValid(c-1,j+1) ;
     7e8:	60 2f       	mov	r22, r16
     7ea:	8a 2d       	mov	r24, r10
     7ec:	0e 94 91 02 	call	0x522	; 0x522 <insertEnemyValid>
		/* Check secondary diagonal up */
		found = 0 ;
		i = c ;
		coltemp = j ;
		i-- ;
		coltemp-- ;
     7f0:	cb 2c       	mov	r12, r11
		
		/* Check secondary diagonal up */
		found = 0 ;
		i = c ;
		coltemp = j ;
		i-- ;
     7f2:	fa 2c       	mov	r15, r10
				}
			}
		}
		
		/* Check secondary diagonal up */
		found = 0 ;
     7f4:	91 2c       	mov	r9, r1
		i = c ;
		coltemp = j ;
		i-- ;
		coltemp-- ;
		while((i > '@') && (coltemp > 0) && (readCell(i,coltemp,table) != 'E') && (found == 0))
     7f6:	06 c0       	rjmp	.+12     	; 0x804 <checkAvailable+0x2c0>
		{
			if (readCell(i,coltemp,table) == 'B')
     7f8:	82 34       	cpi	r24, 0x42	; 66
     7fa:	11 f4       	brne	.+4      	; 0x800 <checkAvailable+0x2bc>
			{
				found = 1 ;
     7fc:	99 24       	eor	r9, r9
     7fe:	93 94       	inc	r9
			}
			i-- ;
     800:	fa 94       	dec	r15
			coltemp-- ;
     802:	ca 94       	dec	r12
		found = 0 ;
		i = c ;
		coltemp = j ;
		i-- ;
		coltemp-- ;
		while((i > '@') && (coltemp > 0) && (readCell(i,coltemp,table) != 'E') && (found == 0))
     804:	80 e4       	ldi	r24, 0x40	; 64
     806:	8f 15       	cp	r24, r15
     808:	60 f4       	brcc	.+24     	; 0x822 <checkAvailable+0x2de>
     80a:	cc 20       	and	r12, r12
     80c:	51 f0       	breq	.+20     	; 0x822 <checkAvailable+0x2de>
     80e:	4c eb       	ldi	r20, 0xBC	; 188
     810:	50 e0       	ldi	r21, 0x00	; 0
     812:	6c 2d       	mov	r22, r12
     814:	8f 2d       	mov	r24, r15
     816:	0e 94 46 02 	call	0x48c	; 0x48c <readCell>
     81a:	85 34       	cpi	r24, 0x45	; 69
     81c:	11 f0       	breq	.+4      	; 0x822 <checkAvailable+0x2de>
     81e:	99 20       	and	r9, r9
     820:	59 f3       	breq	.-42     	; 0x7f8 <checkAvailable+0x2b4>
				found = 1 ;
			}
			i-- ;
			coltemp-- ;
		}
		if (found == 1 && (c+1 < 'I') && (j+1 < 9))
     822:	81 e0       	ldi	r24, 0x01	; 1
     824:	98 12       	cpse	r9, r24
     826:	1e c0       	rjmp	.+60     	; 0x864 <checkAvailable+0x320>
     828:	8c 2f       	mov	r24, r28
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	01 96       	adiw	r24, 0x01	; 1
     82e:	89 34       	cpi	r24, 0x49	; 73
     830:	91 05       	cpc	r25, r1
     832:	c4 f4       	brge	.+48     	; 0x864 <checkAvailable+0x320>
     834:	8d 2f       	mov	r24, r29
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	01 96       	adiw	r24, 0x01	; 1
     83a:	09 97       	sbiw	r24, 0x09	; 9
     83c:	9c f4       	brge	.+38     	; 0x864 <checkAvailable+0x320>
		{
			if (readCell(c+1,j+1,table) == 'E')
     83e:	4c eb       	ldi	r20, 0xBC	; 188
     840:	50 e0       	ldi	r21, 0x00	; 0
     842:	60 2f       	mov	r22, r16
     844:	81 2f       	mov	r24, r17
     846:	0e 94 46 02 	call	0x48c	; 0x48c <readCell>
     84a:	85 34       	cpi	r24, 0x45	; 69
     84c:	59 f4       	brne	.+22     	; 0x864 <checkAvailable+0x320>
			{
				/* Valid move c+1,j+1 */
				if (player == mine)
     84e:	ed 10       	cpse	r14, r13
     850:	05 c0       	rjmp	.+10     	; 0x85c <checkAvailable+0x318>
				{
					insertMineValid(c+1,j+1) ;
     852:	60 2f       	mov	r22, r16
     854:	81 2f       	mov	r24, r17
     856:	0e 94 80 02 	call	0x500	; 0x500 <insertMineValid>
     85a:	04 c0       	rjmp	.+8      	; 0x864 <checkAvailable+0x320>
				}
				else
				{
					insertEnemyValid(c+1,j+1) ;
     85c:	60 2f       	mov	r22, r16
     85e:	81 2f       	mov	r24, r17
     860:	0e 94 91 02 	call	0x522	; 0x522 <insertEnemyValid>
				}
			}
		}
		
		/* Check secondary diagonal down */
		found = 0 ;
     864:	f1 2c       	mov	r15, r1
		i = c ;
		coltemp = j ;
		i++ ;
		coltemp++ ;
		while ((i < 'I') && (coltemp < 9) && (readCell(i,coltemp,table) != 'E') && (found == 0))
     866:	06 c0       	rjmp	.+12     	; 0x874 <checkAvailable+0x330>
		{
			if (readCell(i,coltemp,table) == 'B')
     868:	82 34       	cpi	r24, 0x42	; 66
     86a:	11 f4       	brne	.+4      	; 0x870 <checkAvailable+0x32c>
			{
				found = 1 ;
     86c:	ff 24       	eor	r15, r15
     86e:	f3 94       	inc	r15
			}
			i++ ;
     870:	1f 5f       	subi	r17, 0xFF	; 255
			coltemp++ ;
     872:	0f 5f       	subi	r16, 0xFF	; 255
		found = 0 ;
		i = c ;
		coltemp = j ;
		i++ ;
		coltemp++ ;
		while ((i < 'I') && (coltemp < 9) && (readCell(i,coltemp,table) != 'E') && (found == 0))
     874:	19 34       	cpi	r17, 0x49	; 73
     876:	60 f4       	brcc	.+24     	; 0x890 <checkAvailable+0x34c>
     878:	09 30       	cpi	r16, 0x09	; 9
     87a:	50 f4       	brcc	.+20     	; 0x890 <checkAvailable+0x34c>
     87c:	4c eb       	ldi	r20, 0xBC	; 188
     87e:	50 e0       	ldi	r21, 0x00	; 0
     880:	60 2f       	mov	r22, r16
     882:	81 2f       	mov	r24, r17
     884:	0e 94 46 02 	call	0x48c	; 0x48c <readCell>
     888:	85 34       	cpi	r24, 0x45	; 69
     88a:	11 f0       	breq	.+4      	; 0x890 <checkAvailable+0x34c>
     88c:	ff 20       	and	r15, r15
     88e:	61 f3       	breq	.-40     	; 0x868 <checkAvailable+0x324>
				found = 1 ;
			}
			i++ ;
			coltemp++ ;
		}
		if ((found == 1) && (c-1 > '@') && (j-1 > 0))
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	f8 12       	cpse	r15, r24
     894:	d9 c1       	rjmp	.+946    	; 0xc48 <checkAvailable+0x704>
     896:	8c 2f       	mov	r24, r28
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	81 34       	cpi	r24, 0x41	; 65
     89e:	91 05       	cpc	r25, r1
     8a0:	0c f4       	brge	.+2      	; 0x8a4 <checkAvailable+0x360>
     8a2:	d2 c1       	rjmp	.+932    	; 0xc48 <checkAvailable+0x704>
     8a4:	8d 2f       	mov	r24, r29
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	01 97       	sbiw	r24, 0x01	; 1
     8aa:	18 16       	cp	r1, r24
     8ac:	19 06       	cpc	r1, r25
     8ae:	0c f0       	brlt	.+2      	; 0x8b2 <checkAvailable+0x36e>
     8b0:	cb c1       	rjmp	.+918    	; 0xc48 <checkAvailable+0x704>
		{
			if (readCell(c-1,j-1,table) == 'E')
     8b2:	4c eb       	ldi	r20, 0xBC	; 188
     8b4:	50 e0       	ldi	r21, 0x00	; 0
     8b6:	6b 2d       	mov	r22, r11
     8b8:	8a 2d       	mov	r24, r10
     8ba:	0e 94 46 02 	call	0x48c	; 0x48c <readCell>
     8be:	85 34       	cpi	r24, 0x45	; 69
     8c0:	09 f0       	breq	.+2      	; 0x8c4 <checkAvailable+0x380>
     8c2:	c2 c1       	rjmp	.+900    	; 0xc48 <checkAvailable+0x704>
			{
				/* Valid pos c-1,j-1 */
				if (player == mine)
     8c4:	ed 10       	cpse	r14, r13
     8c6:	05 c0       	rjmp	.+10     	; 0x8d2 <checkAvailable+0x38e>
				{
					insertMineValid(c-1,j-1) ;
     8c8:	6b 2d       	mov	r22, r11
     8ca:	8a 2d       	mov	r24, r10
     8cc:	0e 94 80 02 	call	0x500	; 0x500 <insertMineValid>
     8d0:	bb c1       	rjmp	.+886    	; 0xc48 <checkAvailable+0x704>
				}
				else
				{
					insertEnemyValid(c-1,j-1) ;
     8d2:	6b 2d       	mov	r22, r11
     8d4:	8a 2d       	mov	r24, r10
     8d6:	0e 94 91 02 	call	0x522	; 0x522 <insertEnemyValid>
     8da:	b6 c1       	rjmp	.+876    	; 0xc48 <checkAvailable+0x704>
		
		break;
		/* check available moves for white player */
		default:
		/* check right of the enemy - checker for other my own checkers */
		i++ ;
     8dc:	01 e0       	ldi	r16, 0x01	; 1
     8de:	06 0f       	add	r16, r22
     8e0:	10 2f       	mov	r17, r16
	return retC ;
}

void checkAvailable(char c,uint8_t j,char player,char mine)
{
	uint8_t found = 0 ;
     8e2:	f1 2c       	mov	r15, r1
		break;
		/* check available moves for white player */
		default:
		/* check right of the enemy - checker for other my own checkers */
		i++ ;
		while (i <= 8 && found == 0 && readCell(c,i,table) != 'E')
     8e4:	05 c0       	rjmp	.+10     	; 0x8f0 <checkAvailable+0x3ac>
		{
			
			if (readCell(c,i,table) == 'W')
     8e6:	87 35       	cpi	r24, 0x57	; 87
     8e8:	11 f4       	brne	.+4      	; 0x8ee <checkAvailable+0x3aa>
			{
				found = 1 ;
     8ea:	ff 24       	eor	r15, r15
     8ec:	f3 94       	inc	r15
			}
			i++ ;
     8ee:	1f 5f       	subi	r17, 0xFF	; 255
		break;
		/* check available moves for white player */
		default:
		/* check right of the enemy - checker for other my own checkers */
		i++ ;
		while (i <= 8 && found == 0 && readCell(c,i,table) != 'E')
     8f0:	19 30       	cpi	r17, 0x09	; 9
     8f2:	50 f4       	brcc	.+20     	; 0x908 <checkAvailable+0x3c4>
     8f4:	f1 10       	cpse	r15, r1
     8f6:	08 c0       	rjmp	.+16     	; 0x908 <checkAvailable+0x3c4>
     8f8:	4c eb       	ldi	r20, 0xBC	; 188
     8fa:	50 e0       	ldi	r21, 0x00	; 0
     8fc:	61 2f       	mov	r22, r17
     8fe:	8c 2f       	mov	r24, r28
     900:	0e 94 46 02 	call	0x48c	; 0x48c <readCell>
     904:	85 34       	cpi	r24, 0x45	; 69
     906:	79 f7       	brne	.-34     	; 0x8e6 <checkAvailable+0x3a2>
			{
				found = 1 ;
			}
			i++ ;
		}
		if (found == 1 && j-1 > 0)
     908:	81 e0       	ldi	r24, 0x01	; 1
     90a:	f8 12       	cpse	r15, r24
     90c:	1b c0       	rjmp	.+54     	; 0x944 <checkAvailable+0x400>
     90e:	8d 2f       	mov	r24, r29
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	01 97       	sbiw	r24, 0x01	; 1
     914:	18 16       	cp	r1, r24
     916:	19 06       	cpc	r1, r25
     918:	ac f4       	brge	.+42     	; 0x944 <checkAvailable+0x400>
		{
			if (readCell(c,j-1,table) == 'E')
     91a:	1f ef       	ldi	r17, 0xFF	; 255
     91c:	1d 0f       	add	r17, r29
     91e:	4c eb       	ldi	r20, 0xBC	; 188
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	61 2f       	mov	r22, r17
     924:	8c 2f       	mov	r24, r28
     926:	0e 94 46 02 	call	0x48c	; 0x48c <readCell>
     92a:	85 34       	cpi	r24, 0x45	; 69
     92c:	59 f4       	brne	.+22     	; 0x944 <checkAvailable+0x400>
			{
				/* Available move c, j-1 */						/* The valid move is one left */
				if (mine == player)
     92e:	ed 10       	cpse	r14, r13
     930:	05 c0       	rjmp	.+10     	; 0x93c <checkAvailable+0x3f8>
				{
					insertMineValid(c,j-1) ;
     932:	61 2f       	mov	r22, r17
     934:	8c 2f       	mov	r24, r28
     936:	0e 94 80 02 	call	0x500	; 0x500 <insertMineValid>
     93a:	04 c0       	rjmp	.+8      	; 0x944 <checkAvailable+0x400>
				}
				else
				{
					insertEnemyValid(c,j-1) ;
     93c:	61 2f       	mov	r22, r17
     93e:	8c 2f       	mov	r24, r28
     940:	0e 94 91 02 	call	0x522	; 0x522 <insertEnemyValid>
			}
		}
		
		found = 0 ;												/* check left of the enemy - checker for other my own checkers */
		i = j ;
		i-- ;
     944:	bb 24       	eor	r11, r11
     946:	ba 94       	dec	r11
     948:	bd 0e       	add	r11, r29
     94a:	1b 2d       	mov	r17, r11
					insertEnemyValid(c,j-1) ;
				}
			}
		}
		
		found = 0 ;												/* check left of the enemy - checker for other my own checkers */
     94c:	f1 2c       	mov	r15, r1
		i = j ;
		i-- ;
		while (i > 1 && found == 0 && readCell(c,i,table) != 'E')
     94e:	05 c0       	rjmp	.+10     	; 0x95a <checkAvailable+0x416>
		{
			
			if (readCell(c,i,table) == 'W')
     950:	87 35       	cpi	r24, 0x57	; 87
     952:	11 f4       	brne	.+4      	; 0x958 <checkAvailable+0x414>
			{
				found = 1 ;
     954:	ff 24       	eor	r15, r15
     956:	f3 94       	inc	r15
			}
			i-- ;
     958:	11 50       	subi	r17, 0x01	; 1
		}
		
		found = 0 ;												/* check left of the enemy - checker for other my own checkers */
		i = j ;
		i-- ;
		while (i > 1 && found == 0 && readCell(c,i,table) != 'E')
     95a:	12 30       	cpi	r17, 0x02	; 2
     95c:	50 f0       	brcs	.+20     	; 0x972 <checkAvailable+0x42e>
     95e:	f1 10       	cpse	r15, r1
     960:	08 c0       	rjmp	.+16     	; 0x972 <checkAvailable+0x42e>
     962:	4c eb       	ldi	r20, 0xBC	; 188
     964:	50 e0       	ldi	r21, 0x00	; 0
     966:	61 2f       	mov	r22, r17
     968:	8c 2f       	mov	r24, r28
     96a:	0e 94 46 02 	call	0x48c	; 0x48c <readCell>
     96e:	85 34       	cpi	r24, 0x45	; 69
     970:	79 f7       	brne	.-34     	; 0x950 <checkAvailable+0x40c>
				found = 1 ;
			}
			i-- ;
			
		}
		if (found == 1 && j+1 < 9)
     972:	81 e0       	ldi	r24, 0x01	; 1
     974:	f8 12       	cpse	r15, r24
     976:	18 c0       	rjmp	.+48     	; 0x9a8 <checkAvailable+0x464>
     978:	8d 2f       	mov	r24, r29
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	09 97       	sbiw	r24, 0x09	; 9
     980:	9c f4       	brge	.+38     	; 0x9a8 <checkAvailable+0x464>
		{
			if (readCell(c,j+1,table) == 'E')
     982:	4c eb       	ldi	r20, 0xBC	; 188
     984:	50 e0       	ldi	r21, 0x00	; 0
     986:	60 2f       	mov	r22, r16
     988:	8c 2f       	mov	r24, r28
     98a:	0e 94 46 02 	call	0x48c	; 0x48c <readCell>
     98e:	85 34       	cpi	r24, 0x45	; 69
     990:	59 f4       	brne	.+22     	; 0x9a8 <checkAvailable+0x464>
			{
				/* Available move c, j+1 */					/* The valid move is one right */
				if (mine == player)
     992:	ed 10       	cpse	r14, r13
     994:	05 c0       	rjmp	.+10     	; 0x9a0 <checkAvailable+0x45c>
				{
					insertMineValid(c,j+1) ;
     996:	60 2f       	mov	r22, r16
     998:	8c 2f       	mov	r24, r28
     99a:	0e 94 80 02 	call	0x500	; 0x500 <insertMineValid>
     99e:	04 c0       	rjmp	.+8      	; 0x9a8 <checkAvailable+0x464>
				}
				else
				{
					insertEnemyValid(c,j+1) ;
     9a0:	60 2f       	mov	r22, r16
     9a2:	8c 2f       	mov	r24, r28
     9a4:	0e 94 91 02 	call	0x522	; 0x522 <insertEnemyValid>
			}
		}
		
		found = 0 ;											 /* check up of the enemy - checker for other my own checkers */
		i = c ;
		i-- ;
     9a8:	cc 24       	eor	r12, r12
     9aa:	ca 94       	dec	r12
     9ac:	cc 0e       	add	r12, r28
     9ae:	1c 2d       	mov	r17, r12
					insertEnemyValid(c,j+1) ;
				}
			}
		}
		
		found = 0 ;											 /* check up of the enemy - checker for other my own checkers */
     9b0:	f1 2c       	mov	r15, r1
		i = c ;
		i-- ;
		while (i > '@' && found == 0 && readCell(i,j,table) != 'E')
     9b2:	05 c0       	rjmp	.+10     	; 0x9be <checkAvailable+0x47a>
		{
			
			if (readCell(i,j,table) == 'W')
     9b4:	87 35       	cpi	r24, 0x57	; 87
     9b6:	11 f4       	brne	.+4      	; 0x9bc <checkAvailable+0x478>
			{
				found = 1 ;
     9b8:	ff 24       	eor	r15, r15
     9ba:	f3 94       	inc	r15
			}
			i-- ;
     9bc:	11 50       	subi	r17, 0x01	; 1
		}
		
		found = 0 ;											 /* check up of the enemy - checker for other my own checkers */
		i = c ;
		i-- ;
		while (i > '@' && found == 0 && readCell(i,j,table) != 'E')
     9be:	11 34       	cpi	r17, 0x41	; 65
     9c0:	50 f0       	brcs	.+20     	; 0x9d6 <checkAvailable+0x492>
     9c2:	f1 10       	cpse	r15, r1
     9c4:	08 c0       	rjmp	.+16     	; 0x9d6 <checkAvailable+0x492>
     9c6:	4c eb       	ldi	r20, 0xBC	; 188
     9c8:	50 e0       	ldi	r21, 0x00	; 0
     9ca:	6d 2f       	mov	r22, r29
     9cc:	81 2f       	mov	r24, r17
     9ce:	0e 94 46 02 	call	0x48c	; 0x48c <readCell>
     9d2:	85 34       	cpi	r24, 0x45	; 69
     9d4:	79 f7       	brne	.-34     	; 0x9b4 <checkAvailable+0x470>
			{
				found = 1 ;
			}
			i-- ;
		}
		if (found == 1 && c+1 < 'I')
     9d6:	81 e0       	ldi	r24, 0x01	; 1
     9d8:	f8 12       	cpse	r15, r24
     9da:	1b c0       	rjmp	.+54     	; 0xa12 <checkAvailable+0x4ce>
     9dc:	8c 2f       	mov	r24, r28
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	01 96       	adiw	r24, 0x01	; 1
     9e2:	89 34       	cpi	r24, 0x49	; 73
     9e4:	91 05       	cpc	r25, r1
     9e6:	ac f4       	brge	.+42     	; 0xa12 <checkAvailable+0x4ce>
		{
			if (readCell(c+1,j,table) == 'E')
     9e8:	11 e0       	ldi	r17, 0x01	; 1
     9ea:	1c 0f       	add	r17, r28
     9ec:	4c eb       	ldi	r20, 0xBC	; 188
     9ee:	50 e0       	ldi	r21, 0x00	; 0
     9f0:	6d 2f       	mov	r22, r29
     9f2:	81 2f       	mov	r24, r17
     9f4:	0e 94 46 02 	call	0x48c	; 0x48c <readCell>
     9f8:	85 34       	cpi	r24, 0x45	; 69
     9fa:	59 f4       	brne	.+22     	; 0xa12 <checkAvailable+0x4ce>
			{
				/* Valid pos c+1, j */
				if (mine == player)
     9fc:	ed 10       	cpse	r14, r13
     9fe:	05 c0       	rjmp	.+10     	; 0xa0a <checkAvailable+0x4c6>
				{
					insertMineValid(c+1,j) ;
     a00:	6d 2f       	mov	r22, r29
     a02:	81 2f       	mov	r24, r17
     a04:	0e 94 80 02 	call	0x500	; 0x500 <insertMineValid>
     a08:	04 c0       	rjmp	.+8      	; 0xa12 <checkAvailable+0x4ce>
				}
				else
				{
					insertEnemyValid(c+1,j) ;
     a0a:	6d 2f       	mov	r22, r29
     a0c:	81 2f       	mov	r24, r17
     a0e:	0e 94 91 02 	call	0x522	; 0x522 <insertEnemyValid>
			}
		}
		
		found = 0 ;										   /* check down of the enemy - checker for other my own checkers */
		i = c ;
		i++ ;
     a12:	11 e0       	ldi	r17, 0x01	; 1
     a14:	1c 0f       	add	r17, r28
     a16:	f1 2e       	mov	r15, r17
					insertEnemyValid(c+1,j) ;
				}
			}
		}
		
		found = 0 ;										   /* check down of the enemy - checker for other my own checkers */
     a18:	a1 2c       	mov	r10, r1
		i = c ;
		i++ ;
		while (i < 'I' && found == 0 && readCell(i,j,table) != 'E')
     a1a:	05 c0       	rjmp	.+10     	; 0xa26 <checkAvailable+0x4e2>
		{
			if (readCell(i,j,table) == 'W')
     a1c:	87 35       	cpi	r24, 0x57	; 87
     a1e:	11 f4       	brne	.+4      	; 0xa24 <checkAvailable+0x4e0>
			{
				found = 1 ;
     a20:	aa 24       	eor	r10, r10
     a22:	a3 94       	inc	r10
			}
			i++ ;
     a24:	f3 94       	inc	r15
		}
		
		found = 0 ;										   /* check down of the enemy - checker for other my own checkers */
		i = c ;
		i++ ;
		while (i < 'I' && found == 0 && readCell(i,j,table) != 'E')
     a26:	88 e4       	ldi	r24, 0x48	; 72
     a28:	8f 15       	cp	r24, r15
     a2a:	50 f0       	brcs	.+20     	; 0xa40 <checkAvailable+0x4fc>
     a2c:	a1 10       	cpse	r10, r1
     a2e:	08 c0       	rjmp	.+16     	; 0xa40 <checkAvailable+0x4fc>
     a30:	4c eb       	ldi	r20, 0xBC	; 188
     a32:	50 e0       	ldi	r21, 0x00	; 0
     a34:	6d 2f       	mov	r22, r29
     a36:	8f 2d       	mov	r24, r15
     a38:	0e 94 46 02 	call	0x48c	; 0x48c <readCell>
     a3c:	85 34       	cpi	r24, 0x45	; 69
     a3e:	71 f7       	brne	.-36     	; 0xa1c <checkAvailable+0x4d8>
			{
				found = 1 ;
			}
			i++ ;
		}
		if (found == 1 && c - 1 > '@')
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	a8 12       	cpse	r10, r24
     a44:	19 c0       	rjmp	.+50     	; 0xa78 <checkAvailable+0x534>
     a46:	8c 2f       	mov	r24, r28
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	01 97       	sbiw	r24, 0x01	; 1
     a4c:	81 34       	cpi	r24, 0x41	; 65
     a4e:	91 05       	cpc	r25, r1
     a50:	9c f0       	brlt	.+38     	; 0xa78 <checkAvailable+0x534>
		{
			if (readCell(c-1,j,table) == 'E')
     a52:	4c eb       	ldi	r20, 0xBC	; 188
     a54:	50 e0       	ldi	r21, 0x00	; 0
     a56:	6d 2f       	mov	r22, r29
     a58:	8c 2d       	mov	r24, r12
     a5a:	0e 94 46 02 	call	0x48c	; 0x48c <readCell>
     a5e:	85 34       	cpi	r24, 0x45	; 69
     a60:	59 f4       	brne	.+22     	; 0xa78 <checkAvailable+0x534>
			{
				/* Valid pos c-1,j */
				if (mine == player)
     a62:	ed 10       	cpse	r14, r13
     a64:	05 c0       	rjmp	.+10     	; 0xa70 <checkAvailable+0x52c>
				{
					insertMineValid(c-1,j) ;
     a66:	6d 2f       	mov	r22, r29
     a68:	8c 2d       	mov	r24, r12
     a6a:	0e 94 80 02 	call	0x500	; 0x500 <insertMineValid>
     a6e:	04 c0       	rjmp	.+8      	; 0xa78 <checkAvailable+0x534>
				}
				else
				{
					insertEnemyValid(c-1,j) ;
     a70:	6d 2f       	mov	r22, r29
     a72:	8c 2d       	mov	r24, r12
     a74:	0e 94 91 02 	call	0x522	; 0x522 <insertEnemyValid>
		
		/* check main diagonal up */
		found = 0 ;
		i = c ;
		i-- ;
		coltemp++ ;
     a78:	a0 2e       	mov	r10, r16
		}
		
		/* check main diagonal up */
		found = 0 ;
		i = c ;
		i-- ;
     a7a:	fc 2c       	mov	r15, r12
				}
			}
		}
		
		/* check main diagonal up */
		found = 0 ;
     a7c:	91 2c       	mov	r9, r1
		i = c ;
		i-- ;
		coltemp++ ;
		while (i > '@' && coltemp < 9 && (readCell(i,coltemp,table) != 'E') && found == 0)
     a7e:	06 c0       	rjmp	.+12     	; 0xa8c <checkAvailable+0x548>
		{
			if (readCell(i,coltemp,table) == 'W')
     a80:	87 35       	cpi	r24, 0x57	; 87
     a82:	11 f4       	brne	.+4      	; 0xa88 <checkAvailable+0x544>
			{
				found = 1 ;
     a84:	99 24       	eor	r9, r9
     a86:	93 94       	inc	r9
			}
			i-- ;
     a88:	fa 94       	dec	r15
			coltemp++ ;
     a8a:	a3 94       	inc	r10
		/* check main diagonal up */
		found = 0 ;
		i = c ;
		i-- ;
		coltemp++ ;
		while (i > '@' && coltemp < 9 && (readCell(i,coltemp,table) != 'E') && found == 0)
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	8f 15       	cp	r24, r15
     a90:	68 f4       	brcc	.+26     	; 0xaac <checkAvailable+0x568>
     a92:	88 e0       	ldi	r24, 0x08	; 8
     a94:	8a 15       	cp	r24, r10
     a96:	50 f0       	brcs	.+20     	; 0xaac <checkAvailable+0x568>
     a98:	4c eb       	ldi	r20, 0xBC	; 188
     a9a:	50 e0       	ldi	r21, 0x00	; 0
     a9c:	6a 2d       	mov	r22, r10
     a9e:	8f 2d       	mov	r24, r15
     aa0:	0e 94 46 02 	call	0x48c	; 0x48c <readCell>
     aa4:	85 34       	cpi	r24, 0x45	; 69
     aa6:	11 f0       	breq	.+4      	; 0xaac <checkAvailable+0x568>
     aa8:	99 20       	and	r9, r9
     aaa:	51 f3       	breq	.-44     	; 0xa80 <checkAvailable+0x53c>
				found = 1 ;
			}
			i-- ;
			coltemp++ ;
		}
		if (found == 1 && (c+1 < 'I') && (j-1 > 0))
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	98 12       	cpse	r9, r24
     ab0:	1f c0       	rjmp	.+62     	; 0xaf0 <checkAvailable+0x5ac>
     ab2:	8c 2f       	mov	r24, r28
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	01 96       	adiw	r24, 0x01	; 1
     ab8:	89 34       	cpi	r24, 0x49	; 73
     aba:	91 05       	cpc	r25, r1
     abc:	cc f4       	brge	.+50     	; 0xaf0 <checkAvailable+0x5ac>
     abe:	8d 2f       	mov	r24, r29
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	01 97       	sbiw	r24, 0x01	; 1
     ac4:	18 16       	cp	r1, r24
     ac6:	19 06       	cpc	r1, r25
     ac8:	9c f4       	brge	.+38     	; 0xaf0 <checkAvailable+0x5ac>
		{
			if (readCell(c+1,j-1,table) == 'E')
     aca:	4c eb       	ldi	r20, 0xBC	; 188
     acc:	50 e0       	ldi	r21, 0x00	; 0
     ace:	6b 2d       	mov	r22, r11
     ad0:	81 2f       	mov	r24, r17
     ad2:	0e 94 46 02 	call	0x48c	; 0x48c <readCell>
     ad6:	85 34       	cpi	r24, 0x45	; 69
     ad8:	59 f4       	brne	.+22     	; 0xaf0 <checkAvailable+0x5ac>
			{
				/* Valid pos c+1,j-1 */
				if (mine == player)
     ada:	ed 10       	cpse	r14, r13
     adc:	05 c0       	rjmp	.+10     	; 0xae8 <checkAvailable+0x5a4>
				{
					insertMineValid(c+1,j-1) ;
     ade:	6b 2d       	mov	r22, r11
     ae0:	81 2f       	mov	r24, r17
     ae2:	0e 94 80 02 	call	0x500	; 0x500 <insertMineValid>
     ae6:	04 c0       	rjmp	.+8      	; 0xaf0 <checkAvailable+0x5ac>
				}
				else
				{
					insertEnemyValid(c+1,j-1) ;
     ae8:	6b 2d       	mov	r22, r11
     aea:	81 2f       	mov	r24, r17
     aec:	0e 94 91 02 	call	0x522	; 0x522 <insertEnemyValid>
		/* Check main diagonal down */
		found = 0 ;
		i = c ;
		coltemp = j ;
		i++ ;
		coltemp-- ;
     af0:	ab 2c       	mov	r10, r11
		
		/* Check main diagonal down */
		found = 0 ;
		i = c ;
		coltemp = j ;
		i++ ;
     af2:	f1 2e       	mov	r15, r17
				}
			}
		}
		
		/* Check main diagonal down */
		found = 0 ;
     af4:	91 2c       	mov	r9, r1
		i = c ;
		coltemp = j ;
		i++ ;
		coltemp-- ;
		while((i < 'I') && (coltemp > 0) && (found == 0) && (readCell(i,coltemp,table) != 'E'))
     af6:	06 c0       	rjmp	.+12     	; 0xb04 <checkAvailable+0x5c0>
		{
			if (readCell(i,coltemp,table) == 'W')
     af8:	87 35       	cpi	r24, 0x57	; 87
     afa:	11 f4       	brne	.+4      	; 0xb00 <checkAvailable+0x5bc>
			{
				found = 1 ;
     afc:	99 24       	eor	r9, r9
     afe:	93 94       	inc	r9
			}
			i++ ;
     b00:	f3 94       	inc	r15
			coltemp-- ;
     b02:	aa 94       	dec	r10
		found = 0 ;
		i = c ;
		coltemp = j ;
		i++ ;
		coltemp-- ;
		while((i < 'I') && (coltemp > 0) && (found == 0) && (readCell(i,coltemp,table) != 'E'))
     b04:	88 e4       	ldi	r24, 0x48	; 72
     b06:	8f 15       	cp	r24, r15
     b08:	60 f0       	brcs	.+24     	; 0xb22 <checkAvailable+0x5de>
     b0a:	aa 20       	and	r10, r10
     b0c:	51 f0       	breq	.+20     	; 0xb22 <checkAvailable+0x5de>
     b0e:	91 10       	cpse	r9, r1
     b10:	08 c0       	rjmp	.+16     	; 0xb22 <checkAvailable+0x5de>
     b12:	4c eb       	ldi	r20, 0xBC	; 188
     b14:	50 e0       	ldi	r21, 0x00	; 0
     b16:	6a 2d       	mov	r22, r10
     b18:	8f 2d       	mov	r24, r15
     b1a:	0e 94 46 02 	call	0x48c	; 0x48c <readCell>
     b1e:	85 34       	cpi	r24, 0x45	; 69
     b20:	59 f7       	brne	.-42     	; 0xaf8 <checkAvailable+0x5b4>
				found = 1 ;
			}
			i++ ;
			coltemp-- ;
		}
		if (found == 1 && (c-1 > '@') && (j+1 < 9))
     b22:	81 e0       	ldi	r24, 0x01	; 1
     b24:	98 12       	cpse	r9, r24
     b26:	1e c0       	rjmp	.+60     	; 0xb64 <checkAvailable+0x620>
     b28:	8c 2f       	mov	r24, r28
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	01 97       	sbiw	r24, 0x01	; 1
     b2e:	81 34       	cpi	r24, 0x41	; 65
     b30:	91 05       	cpc	r25, r1
     b32:	c4 f0       	brlt	.+48     	; 0xb64 <checkAvailable+0x620>
     b34:	8d 2f       	mov	r24, r29
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	01 96       	adiw	r24, 0x01	; 1
     b3a:	09 97       	sbiw	r24, 0x09	; 9
     b3c:	9c f4       	brge	.+38     	; 0xb64 <checkAvailable+0x620>
		{
			if (readCell(c-1,j+1,table) == 'E')
     b3e:	4c eb       	ldi	r20, 0xBC	; 188
     b40:	50 e0       	ldi	r21, 0x00	; 0
     b42:	60 2f       	mov	r22, r16
     b44:	8c 2d       	mov	r24, r12
     b46:	0e 94 46 02 	call	0x48c	; 0x48c <readCell>
     b4a:	85 34       	cpi	r24, 0x45	; 69
     b4c:	59 f4       	brne	.+22     	; 0xb64 <checkAvailable+0x620>
			{
				/* Valid pos c-1, j+1 */
				if (player == mine)
     b4e:	ed 10       	cpse	r14, r13
     b50:	05 c0       	rjmp	.+10     	; 0xb5c <checkAvailable+0x618>
				{
					insertMineValid(c-1,j+1) ;
     b52:	60 2f       	mov	r22, r16
     b54:	8c 2d       	mov	r24, r12
     b56:	0e 94 80 02 	call	0x500	; 0x500 <insertMineValid>
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <checkAvailable+0x620>
				}
				else
				{
					insertEnemyValid(c-1,j+1) ;
     b5c:	60 2f       	mov	r22, r16
     b5e:	8c 2d       	mov	r24, r12
     b60:	0e 94 91 02 	call	0x522	; 0x522 <insertEnemyValid>
		/* Check secondary diagonal up */
		found = 0 ;
		i = c ;
		coltemp = j ;
		i-- ;
		coltemp-- ;
     b64:	ab 2c       	mov	r10, r11
		
		/* Check secondary diagonal up */
		found = 0 ;
		i = c ;
		coltemp = j ;
		i-- ;
     b66:	fc 2c       	mov	r15, r12
				}
			}
		}
		
		/* Check secondary diagonal up */
		found = 0 ;
     b68:	91 2c       	mov	r9, r1
		i = c ;
		coltemp = j ;
		i-- ;
		coltemp-- ;
		while((i > '@') && (coltemp > 0) && (readCell(i,coltemp,table) != 'E') && (found == 0))
     b6a:	06 c0       	rjmp	.+12     	; 0xb78 <checkAvailable+0x634>
		{
			if (readCell(i,coltemp,table) == 'W')
     b6c:	87 35       	cpi	r24, 0x57	; 87
     b6e:	11 f4       	brne	.+4      	; 0xb74 <checkAvailable+0x630>
			{
				found = 1 ;
     b70:	99 24       	eor	r9, r9
     b72:	93 94       	inc	r9
			}
			i-- ;
     b74:	fa 94       	dec	r15
			coltemp-- ;
     b76:	aa 94       	dec	r10
		found = 0 ;
		i = c ;
		coltemp = j ;
		i-- ;
		coltemp-- ;
		while((i > '@') && (coltemp > 0) && (readCell(i,coltemp,table) != 'E') && (found == 0))
     b78:	80 e4       	ldi	r24, 0x40	; 64
     b7a:	8f 15       	cp	r24, r15
     b7c:	60 f4       	brcc	.+24     	; 0xb96 <checkAvailable+0x652>
     b7e:	aa 20       	and	r10, r10
     b80:	51 f0       	breq	.+20     	; 0xb96 <checkAvailable+0x652>
     b82:	4c eb       	ldi	r20, 0xBC	; 188
     b84:	50 e0       	ldi	r21, 0x00	; 0
     b86:	6a 2d       	mov	r22, r10
     b88:	8f 2d       	mov	r24, r15
     b8a:	0e 94 46 02 	call	0x48c	; 0x48c <readCell>
     b8e:	85 34       	cpi	r24, 0x45	; 69
     b90:	11 f0       	breq	.+4      	; 0xb96 <checkAvailable+0x652>
     b92:	99 20       	and	r9, r9
     b94:	59 f3       	breq	.-42     	; 0xb6c <checkAvailable+0x628>
				found = 1 ;
			}
			i-- ;
			coltemp-- ;
		}
		if (found == 1 && (c+1 < 'I') && (j+1 < 9))
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	98 12       	cpse	r9, r24
     b9a:	1e c0       	rjmp	.+60     	; 0xbd8 <checkAvailable+0x694>
     b9c:	8c 2f       	mov	r24, r28
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	01 96       	adiw	r24, 0x01	; 1
     ba2:	89 34       	cpi	r24, 0x49	; 73
     ba4:	91 05       	cpc	r25, r1
     ba6:	c4 f4       	brge	.+48     	; 0xbd8 <checkAvailable+0x694>
     ba8:	8d 2f       	mov	r24, r29
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	01 96       	adiw	r24, 0x01	; 1
     bae:	09 97       	sbiw	r24, 0x09	; 9
     bb0:	9c f4       	brge	.+38     	; 0xbd8 <checkAvailable+0x694>
		{
			if (readCell(c+1,j+1,table) == 'E')
     bb2:	4c eb       	ldi	r20, 0xBC	; 188
     bb4:	50 e0       	ldi	r21, 0x00	; 0
     bb6:	60 2f       	mov	r22, r16
     bb8:	81 2f       	mov	r24, r17
     bba:	0e 94 46 02 	call	0x48c	; 0x48c <readCell>
     bbe:	85 34       	cpi	r24, 0x45	; 69
     bc0:	59 f4       	brne	.+22     	; 0xbd8 <checkAvailable+0x694>
			{
				/* Valid move c+1,j+1 */
				if (player == mine)
     bc2:	ed 10       	cpse	r14, r13
     bc4:	05 c0       	rjmp	.+10     	; 0xbd0 <checkAvailable+0x68c>
				{
					insertMineValid(c+1,j+1) ;
     bc6:	60 2f       	mov	r22, r16
     bc8:	81 2f       	mov	r24, r17
     bca:	0e 94 80 02 	call	0x500	; 0x500 <insertMineValid>
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <checkAvailable+0x694>
				}
				else
				{
					insertEnemyValid(c+1,j+1) ;
     bd0:	60 2f       	mov	r22, r16
     bd2:	81 2f       	mov	r24, r17
     bd4:	0e 94 91 02 	call	0x522	; 0x522 <insertEnemyValid>
				}
			}
		}
		
		/* Check secondary diagonal down */
		found = 0 ;
     bd8:	f1 2c       	mov	r15, r1
		i = c ;
		coltemp = j ;
		i++ ;
		coltemp++ ;
		while ((i < 'I') && (coltemp < 9) && (readCell(i,coltemp,table) != 'E') && (found == 0))
     bda:	06 c0       	rjmp	.+12     	; 0xbe8 <checkAvailable+0x6a4>
		{
			if (readCell(i,coltemp,table) == 'W')
     bdc:	87 35       	cpi	r24, 0x57	; 87
     bde:	11 f4       	brne	.+4      	; 0xbe4 <checkAvailable+0x6a0>
			{
				found = 1 ;
     be0:	ff 24       	eor	r15, r15
     be2:	f3 94       	inc	r15
			}
			i++ ;
     be4:	1f 5f       	subi	r17, 0xFF	; 255
			coltemp++ ;
     be6:	0f 5f       	subi	r16, 0xFF	; 255
		found = 0 ;
		i = c ;
		coltemp = j ;
		i++ ;
		coltemp++ ;
		while ((i < 'I') && (coltemp < 9) && (readCell(i,coltemp,table) != 'E') && (found == 0))
     be8:	19 34       	cpi	r17, 0x49	; 73
     bea:	60 f4       	brcc	.+24     	; 0xc04 <checkAvailable+0x6c0>
     bec:	09 30       	cpi	r16, 0x09	; 9
     bee:	50 f4       	brcc	.+20     	; 0xc04 <checkAvailable+0x6c0>
     bf0:	4c eb       	ldi	r20, 0xBC	; 188
     bf2:	50 e0       	ldi	r21, 0x00	; 0
     bf4:	60 2f       	mov	r22, r16
     bf6:	81 2f       	mov	r24, r17
     bf8:	0e 94 46 02 	call	0x48c	; 0x48c <readCell>
     bfc:	85 34       	cpi	r24, 0x45	; 69
     bfe:	11 f0       	breq	.+4      	; 0xc04 <checkAvailable+0x6c0>
     c00:	ff 20       	and	r15, r15
     c02:	61 f3       	breq	.-40     	; 0xbdc <checkAvailable+0x698>
				found = 1 ;
			}
			i++ ;
			coltemp++ ;
		}
		if ((found == 1) && (c-1 > '@') && (j-1 > 0))
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	f8 12       	cpse	r15, r24
     c08:	1f c0       	rjmp	.+62     	; 0xc48 <checkAvailable+0x704>
     c0a:	8c 2f       	mov	r24, r28
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	01 97       	sbiw	r24, 0x01	; 1
     c10:	81 34       	cpi	r24, 0x41	; 65
     c12:	91 05       	cpc	r25, r1
     c14:	cc f0       	brlt	.+50     	; 0xc48 <checkAvailable+0x704>
     c16:	8d 2f       	mov	r24, r29
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	01 97       	sbiw	r24, 0x01	; 1
     c1c:	18 16       	cp	r1, r24
     c1e:	19 06       	cpc	r1, r25
     c20:	9c f4       	brge	.+38     	; 0xc48 <checkAvailable+0x704>
		{
			if (readCell(c-1,j-1,table) == 'E')
     c22:	4c eb       	ldi	r20, 0xBC	; 188
     c24:	50 e0       	ldi	r21, 0x00	; 0
     c26:	6b 2d       	mov	r22, r11
     c28:	8c 2d       	mov	r24, r12
     c2a:	0e 94 46 02 	call	0x48c	; 0x48c <readCell>
     c2e:	85 34       	cpi	r24, 0x45	; 69
     c30:	59 f4       	brne	.+22     	; 0xc48 <checkAvailable+0x704>
			{
				/* Valid pos c-1,j-1 */
				if (player == mine)
     c32:	ed 10       	cpse	r14, r13
     c34:	05 c0       	rjmp	.+10     	; 0xc40 <checkAvailable+0x6fc>
				{
					insertMineValid(c-1,j-1) ;
     c36:	6b 2d       	mov	r22, r11
     c38:	8c 2d       	mov	r24, r12
     c3a:	0e 94 80 02 	call	0x500	; 0x500 <insertMineValid>
     c3e:	04 c0       	rjmp	.+8      	; 0xc48 <checkAvailable+0x704>
				}
				else
				{
					insertEnemyValid(c-1,j-1) ;
     c40:	6b 2d       	mov	r22, r11
     c42:	8c 2d       	mov	r24, r12
     c44:	0e 94 91 02 	call	0x522	; 0x522 <insertEnemyValid>
		}
		
		break;
	}
	
}
     c48:	df 91       	pop	r29
     c4a:	cf 91       	pop	r28
     c4c:	1f 91       	pop	r17
     c4e:	0f 91       	pop	r16
     c50:	ff 90       	pop	r15
     c52:	ef 90       	pop	r14
     c54:	df 90       	pop	r13
     c56:	cf 90       	pop	r12
     c58:	bf 90       	pop	r11
     c5a:	af 90       	pop	r10
     c5c:	9f 90       	pop	r9
     c5e:	08 95       	ret

00000c60 <scanChessboard>:
	}
	chessboard[index] = buffer ;
}

void scanChessboard(char mine)								/* This function scans the whole chessboard for white checkers */
{
     c60:	ff 92       	push	r15
     c62:	0f 93       	push	r16
     c64:	1f 93       	push	r17
     c66:	cf 93       	push	r28
     c68:	df 93       	push	r29
     c6a:	08 2f       	mov	r16, r24
	char c = 0 ;											/* For every one white checker checks for my available moves */
	uint8_t j = 0 ;											/* and stores them in a parallel memory board the validtable */
	uint8_t buffer = 0 ;
	uint8_t temp = 0 ;
	for (uint8_t index = 0; index < SIZE ; index++)
     c6c:	c0 e0       	ldi	r28, 0x00	; 0
     c6e:	b0 c0       	rjmp	.+352    	; 0xdd0 <scanChessboard+0x170>
	{
		c = 65 + (index >> 1) ;								/* Convert the index into specific ascii that we want to scan */
     c70:	dc 2f       	mov	r29, r28
     c72:	d6 95       	lsr	r29
     c74:	df 5b       	subi	r29, 0xBF	; 191
		buffer = table[index] ;								/* Read the data-byte and store it into a buffer */
     c76:	ec 2f       	mov	r30, r28
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	e4 54       	subi	r30, 0x44	; 68
     c7c:	ff 4f       	sbci	r31, 0xFF	; 255
     c7e:	10 81       	ld	r17, Z
		temp = buffer & 0b00010000 ;						/* Find the column which depends on the enabled-bits */
		if (temp == 0b00010000)
     c80:	14 ff       	sbrs	r17, 4
     c82:	28 c0       	rjmp	.+80     	; 0xcd4 <scanChessboard+0x74>
		{
			j = 1 ;
			if (index % 2 == 1)								/* In the odd number indexes there are the second half-bytes */
     c84:	c0 fd       	sbrc	r28, 0
     c86:	03 c0       	rjmp	.+6      	; 0xc8e <scanChessboard+0x2e>
		c = 65 + (index >> 1) ;								/* Convert the index into specific ascii that we want to scan */
		buffer = table[index] ;								/* Read the data-byte and store it into a buffer */
		temp = buffer & 0b00010000 ;						/* Find the column which depends on the enabled-bits */
		if (temp == 0b00010000)
		{
			j = 1 ;
     c88:	ff 24       	eor	r15, r15
     c8a:	f3 94       	inc	r15
     c8c:	04 c0       	rjmp	.+8      	; 0xc96 <scanChessboard+0x36>
			if (index % 2 == 1)								/* In the odd number indexes there are the second half-bytes */
			{                                               /* Opposite, in the even number indexes there are the first half-bytes */
				j = j + 4 ;
     c8e:	0f 2e       	mov	r0, r31
     c90:	f5 e0       	ldi	r31, 0x05	; 5
     c92:	ff 2e       	mov	r15, r31
     c94:	f0 2d       	mov	r31, r0
			}
			/* scan for black player available moves */
			if (readCell(c,j,table) == 'W')
     c96:	4c eb       	ldi	r20, 0xBC	; 188
     c98:	50 e0       	ldi	r21, 0x00	; 0
     c9a:	6f 2d       	mov	r22, r15
     c9c:	8d 2f       	mov	r24, r29
     c9e:	0e 94 46 02 	call	0x48c	; 0x48c <readCell>
     ca2:	87 35       	cpi	r24, 0x57	; 87
     ca4:	61 f4       	brne	.+24     	; 0xcbe <scanChessboard+0x5e>
			{
				whiteCount++ ;
     ca6:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <whiteCount>
     caa:	8f 5f       	subi	r24, 0xFF	; 255
     cac:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <whiteCount>
				checkAvailable(c,j,'B',mine) ;
     cb0:	20 2f       	mov	r18, r16
     cb2:	42 e4       	ldi	r20, 0x42	; 66
     cb4:	6f 2d       	mov	r22, r15
     cb6:	8d 2f       	mov	r24, r29
     cb8:	0e 94 a2 02 	call	0x544	; 0x544 <checkAvailable>
     cbc:	0b c0       	rjmp	.+22     	; 0xcd4 <scanChessboard+0x74>
			}
			/* scan for white player available moves */
			else
			{
				blackCount++ ;
     cbe:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <blackCount>
     cc2:	8f 5f       	subi	r24, 0xFF	; 255
     cc4:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <blackCount>
				checkAvailable(c,j,'W',mine) ;
     cc8:	20 2f       	mov	r18, r16
     cca:	47 e5       	ldi	r20, 0x57	; 87
     ccc:	6f 2d       	mov	r22, r15
     cce:	8d 2f       	mov	r24, r29
     cd0:	0e 94 a2 02 	call	0x544	; 0x544 <checkAvailable>
			}
			
		}
		temp = buffer & 0b00100000 ;
		if (temp == 0b00100000)
     cd4:	15 ff       	sbrs	r17, 5
     cd6:	29 c0       	rjmp	.+82     	; 0xd2a <scanChessboard+0xca>
		{
			j = 2 ;
			if (index % 2 == 1)
     cd8:	c0 fd       	sbrc	r28, 0
     cda:	04 c0       	rjmp	.+8      	; 0xce4 <scanChessboard+0x84>
			
		}
		temp = buffer & 0b00100000 ;
		if (temp == 0b00100000)
		{
			j = 2 ;
     cdc:	68 94       	set
     cde:	ff 24       	eor	r15, r15
     ce0:	f1 f8       	bld	r15, 1
     ce2:	04 c0       	rjmp	.+8      	; 0xcec <scanChessboard+0x8c>
			if (index % 2 == 1)
			{
				j = j + 4 ;
     ce4:	0f 2e       	mov	r0, r31
     ce6:	f6 e0       	ldi	r31, 0x06	; 6
     ce8:	ff 2e       	mov	r15, r31
     cea:	f0 2d       	mov	r31, r0
			}
			/* scan for black player available moves */
			if (readCell(c,j,table) == 'W')
     cec:	4c eb       	ldi	r20, 0xBC	; 188
     cee:	50 e0       	ldi	r21, 0x00	; 0
     cf0:	6f 2d       	mov	r22, r15
     cf2:	8d 2f       	mov	r24, r29
     cf4:	0e 94 46 02 	call	0x48c	; 0x48c <readCell>
     cf8:	87 35       	cpi	r24, 0x57	; 87
     cfa:	61 f4       	brne	.+24     	; 0xd14 <scanChessboard+0xb4>
			{
				whiteCount++ ;
     cfc:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <whiteCount>
     d00:	8f 5f       	subi	r24, 0xFF	; 255
     d02:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <whiteCount>
				checkAvailable(c,j,'B',mine) ;
     d06:	20 2f       	mov	r18, r16
     d08:	42 e4       	ldi	r20, 0x42	; 66
     d0a:	6f 2d       	mov	r22, r15
     d0c:	8d 2f       	mov	r24, r29
     d0e:	0e 94 a2 02 	call	0x544	; 0x544 <checkAvailable>
     d12:	0b c0       	rjmp	.+22     	; 0xd2a <scanChessboard+0xca>
			}
			/* scan for white player available moves */
			else
			{
				blackCount++ ;
     d14:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <blackCount>
     d18:	8f 5f       	subi	r24, 0xFF	; 255
     d1a:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <blackCount>
				checkAvailable(c,j,'W',mine) ;
     d1e:	20 2f       	mov	r18, r16
     d20:	47 e5       	ldi	r20, 0x57	; 87
     d22:	6f 2d       	mov	r22, r15
     d24:	8d 2f       	mov	r24, r29
     d26:	0e 94 a2 02 	call	0x544	; 0x544 <checkAvailable>
			}
		}
		temp = buffer & 0b01000000 ;
		if (temp == 0b01000000)
     d2a:	16 ff       	sbrs	r17, 6
     d2c:	2a c0       	rjmp	.+84     	; 0xd82 <scanChessboard+0x122>
		{
			j = 3 ;
			if (index % 2 == 1)
     d2e:	c0 fd       	sbrc	r28, 0
     d30:	05 c0       	rjmp	.+10     	; 0xd3c <scanChessboard+0xdc>
			}
		}
		temp = buffer & 0b01000000 ;
		if (temp == 0b01000000)
		{
			j = 3 ;
     d32:	0f 2e       	mov	r0, r31
     d34:	f3 e0       	ldi	r31, 0x03	; 3
     d36:	ff 2e       	mov	r15, r31
     d38:	f0 2d       	mov	r31, r0
     d3a:	04 c0       	rjmp	.+8      	; 0xd44 <scanChessboard+0xe4>
			if (index % 2 == 1)
			{
				j = j + 4 ;
     d3c:	0f 2e       	mov	r0, r31
     d3e:	f7 e0       	ldi	r31, 0x07	; 7
     d40:	ff 2e       	mov	r15, r31
     d42:	f0 2d       	mov	r31, r0
			}
			/* scan for black player available moves */
			if (readCell(c,j,table) == 'W')
     d44:	4c eb       	ldi	r20, 0xBC	; 188
     d46:	50 e0       	ldi	r21, 0x00	; 0
     d48:	6f 2d       	mov	r22, r15
     d4a:	8d 2f       	mov	r24, r29
     d4c:	0e 94 46 02 	call	0x48c	; 0x48c <readCell>
     d50:	87 35       	cpi	r24, 0x57	; 87
     d52:	61 f4       	brne	.+24     	; 0xd6c <scanChessboard+0x10c>
			{
				whiteCount++ ;
     d54:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <whiteCount>
     d58:	8f 5f       	subi	r24, 0xFF	; 255
     d5a:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <whiteCount>
				checkAvailable(c,j,'B',mine) ;
     d5e:	20 2f       	mov	r18, r16
     d60:	42 e4       	ldi	r20, 0x42	; 66
     d62:	6f 2d       	mov	r22, r15
     d64:	8d 2f       	mov	r24, r29
     d66:	0e 94 a2 02 	call	0x544	; 0x544 <checkAvailable>
     d6a:	0b c0       	rjmp	.+22     	; 0xd82 <scanChessboard+0x122>
			}
			/* scan for white player available moves */
			else
			{
				blackCount++ ;
     d6c:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <blackCount>
     d70:	8f 5f       	subi	r24, 0xFF	; 255
     d72:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <blackCount>
				checkAvailable(c,j,'W',mine) ;
     d76:	20 2f       	mov	r18, r16
     d78:	47 e5       	ldi	r20, 0x57	; 87
     d7a:	6f 2d       	mov	r22, r15
     d7c:	8d 2f       	mov	r24, r29
     d7e:	0e 94 a2 02 	call	0x544	; 0x544 <checkAvailable>
			}
		}
		temp = buffer & 0b10000000 ;
		if (temp == 0b10000000)
     d82:	11 23       	and	r17, r17
     d84:	24 f5       	brge	.+72     	; 0xdce <scanChessboard+0x16e>
		{
			j = 4 ;
			if (index % 2 == 1)
     d86:	c0 fd       	sbrc	r28, 0
     d88:	02 c0       	rjmp	.+4      	; 0xd8e <scanChessboard+0x12e>
			}
		}
		temp = buffer & 0b10000000 ;
		if (temp == 0b10000000)
		{
			j = 4 ;
     d8a:	14 e0       	ldi	r17, 0x04	; 4
     d8c:	01 c0       	rjmp	.+2      	; 0xd90 <scanChessboard+0x130>
			if (index % 2 == 1)
			{
				j = j + 4 ;
     d8e:	18 e0       	ldi	r17, 0x08	; 8
			}
			/* scan for black player available moves */
			if (readCell(c,j,table) == 'W')
     d90:	4c eb       	ldi	r20, 0xBC	; 188
     d92:	50 e0       	ldi	r21, 0x00	; 0
     d94:	61 2f       	mov	r22, r17
     d96:	8d 2f       	mov	r24, r29
     d98:	0e 94 46 02 	call	0x48c	; 0x48c <readCell>
     d9c:	87 35       	cpi	r24, 0x57	; 87
     d9e:	61 f4       	brne	.+24     	; 0xdb8 <scanChessboard+0x158>
			{
				whiteCount++ ;
     da0:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <whiteCount>
     da4:	8f 5f       	subi	r24, 0xFF	; 255
     da6:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <whiteCount>
				checkAvailable(c,j,'B',mine) ;
     daa:	20 2f       	mov	r18, r16
     dac:	42 e4       	ldi	r20, 0x42	; 66
     dae:	61 2f       	mov	r22, r17
     db0:	8d 2f       	mov	r24, r29
     db2:	0e 94 a2 02 	call	0x544	; 0x544 <checkAvailable>
     db6:	0b c0       	rjmp	.+22     	; 0xdce <scanChessboard+0x16e>
			}
			/* scan for white player available moves */
			else
			{
				blackCount++ ;
     db8:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <blackCount>
     dbc:	8f 5f       	subi	r24, 0xFF	; 255
     dbe:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <blackCount>
				checkAvailable(c,j,'W',mine) ;
     dc2:	20 2f       	mov	r18, r16
     dc4:	47 e5       	ldi	r20, 0x57	; 87
     dc6:	61 2f       	mov	r22, r17
     dc8:	8d 2f       	mov	r24, r29
     dca:	0e 94 a2 02 	call	0x544	; 0x544 <checkAvailable>
{
	char c = 0 ;											/* For every one white checker checks for my available moves */
	uint8_t j = 0 ;											/* and stores them in a parallel memory board the validtable */
	uint8_t buffer = 0 ;
	uint8_t temp = 0 ;
	for (uint8_t index = 0; index < SIZE ; index++)
     dce:	cf 5f       	subi	r28, 0xFF	; 255
     dd0:	c0 31       	cpi	r28, 0x10	; 16
     dd2:	08 f4       	brcc	.+2      	; 0xdd6 <scanChessboard+0x176>
     dd4:	4d cf       	rjmp	.-358    	; 0xc70 <scanChessboard+0x10>
				checkAvailable(c,j,'W',mine) ;
			}
		}
		
	}
}
     dd6:	df 91       	pop	r29
     dd8:	cf 91       	pop	r28
     dda:	1f 91       	pop	r17
     ddc:	0f 91       	pop	r16
     dde:	ff 90       	pop	r15
     de0:	08 95       	ret

00000de2 <TurnOtherCheckers>:
	enemyValidtable[index] = buffer ;
}


void TurnOtherCheckers(char c,uint8_t column,char enemy,char player,uint8_t chessboard[])
{
     de2:	9f 92       	push	r9
     de4:	af 92       	push	r10
     de6:	bf 92       	push	r11
     de8:	cf 92       	push	r12
     dea:	df 92       	push	r13
     dec:	ef 92       	push	r14
     dee:	ff 92       	push	r15
     df0:	0f 93       	push	r16
     df2:	1f 93       	push	r17
     df4:	cf 93       	push	r28
     df6:	df 93       	push	r29
     df8:	d8 2e       	mov	r13, r24
     dfa:	f6 2e       	mov	r15, r22
     dfc:	c4 2f       	mov	r28, r20
     dfe:	e2 2e       	mov	r14, r18
	char row = c;
	uint8_t col = column;
	uint8_t found = 0;
	/*Check for players checkers from right*/
	col++;
     e00:	cc 24       	eor	r12, r12
     e02:	c3 94       	inc	r12
     e04:	c6 0e       	add	r12, r22
     e06:	dc 2d       	mov	r29, r12

void TurnOtherCheckers(char c,uint8_t column,char enemy,char player,uint8_t chessboard[])
{
	char row = c;
	uint8_t col = column;
	uint8_t found = 0;
     e08:	b1 2c       	mov	r11, r1
	/*Check for players checkers from right*/
	col++;
	while (col < 9 && readCell(row,col,chessboard) == enemy && found == 0)
     e0a:	10 c0       	rjmp	.+32     	; 0xe2c <TurnOtherCheckers+0x4a>
	{
		if (col+1 < 9)
     e0c:	8d 2f       	mov	r24, r29
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	01 96       	adiw	r24, 0x01	; 1
     e12:	09 97       	sbiw	r24, 0x09	; 9
     e14:	54 f4       	brge	.+20     	; 0xe2a <TurnOtherCheckers+0x48>
		{
			if(readCell(row,(col+1),chessboard) == player)
     e16:	a8 01       	movw	r20, r16
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	6d 0f       	add	r22, r29
     e1c:	8d 2d       	mov	r24, r13
     e1e:	0e 94 46 02 	call	0x48c	; 0x48c <readCell>
     e22:	8e 11       	cpse	r24, r14
     e24:	02 c0       	rjmp	.+4      	; 0xe2a <TurnOtherCheckers+0x48>
			{
				found = 1;
     e26:	bb 24       	eor	r11, r11
     e28:	b3 94       	inc	r11
			}
		}
		col++;
     e2a:	df 5f       	subi	r29, 0xFF	; 255
	char row = c;
	uint8_t col = column;
	uint8_t found = 0;
	/*Check for players checkers from right*/
	col++;
	while (col < 9 && readCell(row,col,chessboard) == enemy && found == 0)
     e2c:	d9 30       	cpi	r29, 0x09	; 9
     e2e:	48 f4       	brcc	.+18     	; 0xe42 <TurnOtherCheckers+0x60>
     e30:	a8 01       	movw	r20, r16
     e32:	6d 2f       	mov	r22, r29
     e34:	8d 2d       	mov	r24, r13
     e36:	0e 94 46 02 	call	0x48c	; 0x48c <readCell>
     e3a:	8c 13       	cpse	r24, r28
     e3c:	02 c0       	rjmp	.+4      	; 0xe42 <TurnOtherCheckers+0x60>
     e3e:	bb 20       	and	r11, r11
     e40:	29 f3       	breq	.-54     	; 0xe0c <TurnOtherCheckers+0x2a>
				found = 1;
			}
		}
		col++;
	}
	if(found == 1 && (col < 9))
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	b8 12       	cpse	r11, r24
     e46:	0e c0       	rjmp	.+28     	; 0xe64 <TurnOtherCheckers+0x82>
     e48:	d9 30       	cpi	r29, 0x09	; 9
     e4a:	48 f0       	brcs	.+18     	; 0xe5e <TurnOtherCheckers+0x7c>
     e4c:	0b c0       	rjmp	.+22     	; 0xe64 <TurnOtherCheckers+0x82>
	{
		for(uint8_t i = (column + 1); i < col; i++)
		{
			setChecker(c,i,player,chessboard);
     e4e:	98 01       	movw	r18, r16
     e50:	4e 2d       	mov	r20, r14
     e52:	6b 2d       	mov	r22, r11
     e54:	8d 2d       	mov	r24, r13
     e56:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
		}
		col++;
	}
	if(found == 1 && (col < 9))
	{
		for(uint8_t i = (column + 1); i < col; i++)
     e5a:	b3 94       	inc	r11
     e5c:	01 c0       	rjmp	.+2      	; 0xe60 <TurnOtherCheckers+0x7e>
     e5e:	bc 2c       	mov	r11, r12
     e60:	bd 16       	cp	r11, r29
     e62:	a8 f3       	brcs	.-22     	; 0xe4e <TurnOtherCheckers+0x6c>
		}
	}
	/*Check for players checkers from left*/
	found = 0 ;
	col = column;
	col--;
     e64:	bb 24       	eor	r11, r11
     e66:	ba 94       	dec	r11
     e68:	bf 0c       	add	r11, r15
     e6a:	db 2d       	mov	r29, r11
		{
			setChecker(c,i,player,chessboard);
		}
	}
	/*Check for players checkers from left*/
	found = 0 ;
     e6c:	a1 2c       	mov	r10, r1
	col = column;
	col--;
	while (col > 0 && readCell(row,col,chessboard) == enemy && found == 0)
     e6e:	11 c0       	rjmp	.+34     	; 0xe92 <TurnOtherCheckers+0xb0>
	{
		if (col-1 > 0)
     e70:	8d 2f       	mov	r24, r29
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	01 97       	sbiw	r24, 0x01	; 1
     e76:	18 16       	cp	r1, r24
     e78:	19 06       	cpc	r1, r25
     e7a:	54 f4       	brge	.+20     	; 0xe90 <TurnOtherCheckers+0xae>
		{
			if(readCell(row,(col-1),chessboard) == player)
     e7c:	a8 01       	movw	r20, r16
     e7e:	6f ef       	ldi	r22, 0xFF	; 255
     e80:	6d 0f       	add	r22, r29
     e82:	8d 2d       	mov	r24, r13
     e84:	0e 94 46 02 	call	0x48c	; 0x48c <readCell>
     e88:	e8 12       	cpse	r14, r24
     e8a:	02 c0       	rjmp	.+4      	; 0xe90 <TurnOtherCheckers+0xae>
			{
				found = 1;
     e8c:	aa 24       	eor	r10, r10
     e8e:	a3 94       	inc	r10
			}
		}
		col--;
     e90:	d1 50       	subi	r29, 0x01	; 1
	}
	/*Check for players checkers from left*/
	found = 0 ;
	col = column;
	col--;
	while (col > 0 && readCell(row,col,chessboard) == enemy && found == 0)
     e92:	dd 23       	and	r29, r29
     e94:	49 f0       	breq	.+18     	; 0xea8 <TurnOtherCheckers+0xc6>
     e96:	a8 01       	movw	r20, r16
     e98:	6d 2f       	mov	r22, r29
     e9a:	8d 2d       	mov	r24, r13
     e9c:	0e 94 46 02 	call	0x48c	; 0x48c <readCell>
     ea0:	c8 13       	cpse	r28, r24
     ea2:	02 c0       	rjmp	.+4      	; 0xea8 <TurnOtherCheckers+0xc6>
     ea4:	aa 20       	and	r10, r10
     ea6:	21 f3       	breq	.-56     	; 0xe70 <TurnOtherCheckers+0x8e>
				found = 1;
			}
		}
		col--;
	}
	if(found == 1 && (column - 1 > 0))
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	a8 12       	cpse	r10, r24
     eac:	12 c0       	rjmp	.+36     	; 0xed2 <TurnOtherCheckers+0xf0>
     eae:	8f 2d       	mov	r24, r15
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	01 97       	sbiw	r24, 0x01	; 1
     eb4:	18 16       	cp	r1, r24
     eb6:	19 06       	cpc	r1, r25
     eb8:	4c f0       	brlt	.+18     	; 0xecc <TurnOtherCheckers+0xea>
     eba:	0b c0       	rjmp	.+22     	; 0xed2 <TurnOtherCheckers+0xf0>
	{
		for(uint8_t i = (column -1); i > col; i--)
		{
			setChecker(c,i,player,chessboard);
     ebc:	98 01       	movw	r18, r16
     ebe:	4e 2d       	mov	r20, r14
     ec0:	6a 2d       	mov	r22, r10
     ec2:	8d 2d       	mov	r24, r13
     ec4:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
		}
		col--;
	}
	if(found == 1 && (column - 1 > 0))
	{
		for(uint8_t i = (column -1); i > col; i--)
     ec8:	aa 94       	dec	r10
     eca:	01 c0       	rjmp	.+2      	; 0xece <TurnOtherCheckers+0xec>
     ecc:	ab 2c       	mov	r10, r11
     ece:	da 15       	cp	r29, r10
     ed0:	a8 f3       	brcs	.-22     	; 0xebc <TurnOtherCheckers+0xda>
		}
	}
	/*Check for players checkers from up*/
	found = 0 ;
	col = column;
	row-- ;
     ed2:	aa 24       	eor	r10, r10
     ed4:	aa 94       	dec	r10
     ed6:	ad 0c       	add	r10, r13
     ed8:	da 2d       	mov	r29, r10
		{
			setChecker(c,i,player,chessboard);
		}
	}
	/*Check for players checkers from up*/
	found = 0 ;
     eda:	91 2c       	mov	r9, r1
	col = column;
	row-- ;
	while (row > '@' && readCell(row,col,chessboard) == enemy && found == 0)
     edc:	11 c0       	rjmp	.+34     	; 0xf00 <TurnOtherCheckers+0x11e>
	{
		if (row - 1 > '@')
     ede:	8d 2f       	mov	r24, r29
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	01 97       	sbiw	r24, 0x01	; 1
     ee4:	81 34       	cpi	r24, 0x41	; 65
     ee6:	91 05       	cpc	r25, r1
     ee8:	54 f0       	brlt	.+20     	; 0xefe <TurnOtherCheckers+0x11c>
		{
			if(readCell((row-1),col,chessboard) == player)
     eea:	a8 01       	movw	r20, r16
     eec:	6f 2d       	mov	r22, r15
     eee:	8f ef       	ldi	r24, 0xFF	; 255
     ef0:	8d 0f       	add	r24, r29
     ef2:	0e 94 46 02 	call	0x48c	; 0x48c <readCell>
     ef6:	e8 12       	cpse	r14, r24
     ef8:	02 c0       	rjmp	.+4      	; 0xefe <TurnOtherCheckers+0x11c>
			{
				found = 1;
     efa:	99 24       	eor	r9, r9
     efc:	93 94       	inc	r9
			}
		}
		row--;
     efe:	d1 50       	subi	r29, 0x01	; 1
	}
	/*Check for players checkers from up*/
	found = 0 ;
	col = column;
	row-- ;
	while (row > '@' && readCell(row,col,chessboard) == enemy && found == 0)
     f00:	d1 34       	cpi	r29, 0x41	; 65
     f02:	48 f0       	brcs	.+18     	; 0xf16 <TurnOtherCheckers+0x134>
     f04:	a8 01       	movw	r20, r16
     f06:	6f 2d       	mov	r22, r15
     f08:	8d 2f       	mov	r24, r29
     f0a:	0e 94 46 02 	call	0x48c	; 0x48c <readCell>
     f0e:	c8 13       	cpse	r28, r24
     f10:	02 c0       	rjmp	.+4      	; 0xf16 <TurnOtherCheckers+0x134>
     f12:	99 20       	and	r9, r9
     f14:	21 f3       	breq	.-56     	; 0xede <TurnOtherCheckers+0xfc>
				found = 1;
			}
		}
		row--;
	}
	if(found == 1 && (row > '@'))
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	98 12       	cpse	r9, r24
     f1a:	0e c0       	rjmp	.+28     	; 0xf38 <TurnOtherCheckers+0x156>
     f1c:	d1 34       	cpi	r29, 0x41	; 65
     f1e:	48 f4       	brcc	.+18     	; 0xf32 <TurnOtherCheckers+0x150>
     f20:	0b c0       	rjmp	.+22     	; 0xf38 <TurnOtherCheckers+0x156>
	{
		for(uint8_t i = (c -1); i > row; i--)
		{
			setChecker(i,col,player,chessboard);
     f22:	98 01       	movw	r18, r16
     f24:	4e 2d       	mov	r20, r14
     f26:	6f 2d       	mov	r22, r15
     f28:	89 2d       	mov	r24, r9
     f2a:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
		}
		row--;
	}
	if(found == 1 && (row > '@'))
	{
		for(uint8_t i = (c -1); i > row; i--)
     f2e:	9a 94       	dec	r9
     f30:	01 c0       	rjmp	.+2      	; 0xf34 <TurnOtherCheckers+0x152>
     f32:	9a 2c       	mov	r9, r10
     f34:	d9 15       	cp	r29, r9
     f36:	a8 f3       	brcs	.-22     	; 0xf22 <TurnOtherCheckers+0x140>
	}
	/*Check for players checkers from down*/
	found = 0 ;
	row = c;
	col = column;
	row++ ;
     f38:	d3 94       	inc	r13
     f3a:	dd 2d       	mov	r29, r13
		{
			setChecker(i,col,player,chessboard);
		}
	}
	/*Check for players checkers from down*/
	found = 0 ;
     f3c:	91 2c       	mov	r9, r1
	row = c;
	col = column;
	row++ ;
	while (row < 'I' && readCell(row,col,chessboard) == enemy && found == 0)
     f3e:	11 c0       	rjmp	.+34     	; 0xf62 <TurnOtherCheckers+0x180>
	{
		if (row + 1 < 'I')
     f40:	8d 2f       	mov	r24, r29
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	01 96       	adiw	r24, 0x01	; 1
     f46:	89 34       	cpi	r24, 0x49	; 73
     f48:	91 05       	cpc	r25, r1
     f4a:	54 f4       	brge	.+20     	; 0xf60 <TurnOtherCheckers+0x17e>
		{
			if(readCell((row+1),col,chessboard) == player)
     f4c:	a8 01       	movw	r20, r16
     f4e:	6f 2d       	mov	r22, r15
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	8d 0f       	add	r24, r29
     f54:	0e 94 46 02 	call	0x48c	; 0x48c <readCell>
     f58:	e8 12       	cpse	r14, r24
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <TurnOtherCheckers+0x17e>
			{
				found = 1;
     f5c:	99 24       	eor	r9, r9
     f5e:	93 94       	inc	r9
			}
		}
		row++;
     f60:	df 5f       	subi	r29, 0xFF	; 255
	/*Check for players checkers from down*/
	found = 0 ;
	row = c;
	col = column;
	row++ ;
	while (row < 'I' && readCell(row,col,chessboard) == enemy && found == 0)
     f62:	d9 34       	cpi	r29, 0x49	; 73
     f64:	48 f4       	brcc	.+18     	; 0xf78 <TurnOtherCheckers+0x196>
     f66:	a8 01       	movw	r20, r16
     f68:	6f 2d       	mov	r22, r15
     f6a:	8d 2f       	mov	r24, r29
     f6c:	0e 94 46 02 	call	0x48c	; 0x48c <readCell>
     f70:	c8 13       	cpse	r28, r24
     f72:	02 c0       	rjmp	.+4      	; 0xf78 <TurnOtherCheckers+0x196>
     f74:	99 20       	and	r9, r9
     f76:	21 f3       	breq	.-56     	; 0xf40 <TurnOtherCheckers+0x15e>
				found = 1;
			}
		}
		row++;
	}
	if(found == 1 && (row < 'I'))
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	98 12       	cpse	r9, r24
     f7c:	0e c0       	rjmp	.+28     	; 0xf9a <TurnOtherCheckers+0x1b8>
     f7e:	d9 34       	cpi	r29, 0x49	; 73
     f80:	48 f0       	brcs	.+18     	; 0xf94 <TurnOtherCheckers+0x1b2>
     f82:	0b c0       	rjmp	.+22     	; 0xf9a <TurnOtherCheckers+0x1b8>
	{
		for(uint8_t i = c+1; i < row; i++)
		{
			setChecker(i,col,player,chessboard);
     f84:	98 01       	movw	r18, r16
     f86:	4e 2d       	mov	r20, r14
     f88:	6f 2d       	mov	r22, r15
     f8a:	89 2d       	mov	r24, r9
     f8c:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
		}
		row++;
	}
	if(found == 1 && (row < 'I'))
	{
		for(uint8_t i = c+1; i < row; i++)
     f90:	93 94       	inc	r9
     f92:	01 c0       	rjmp	.+2      	; 0xf96 <TurnOtherCheckers+0x1b4>
     f94:	9d 2c       	mov	r9, r13
     f96:	9d 16       	cp	r9, r29
     f98:	a8 f3       	brcs	.-22     	; 0xf84 <TurnOtherCheckers+0x1a2>
	/*Check for players checkers from main diagon up*/
	found = 0 ;
	row = c;
	col = column;
	row--;
	col++;
     f9a:	fc 2c       	mov	r15, r12
	
	/*Check for players checkers from main diagon up*/
	found = 0 ;
	row = c;
	col = column;
	row--;
     f9c:	da 2d       	mov	r29, r10
			setChecker(i,col,player,chessboard);
		}
	}
	
	/*Check for players checkers from main diagon up*/
	found = 0 ;
     f9e:	91 2c       	mov	r9, r1
	row = c;
	col = column;
	row--;
	col++;
	while ((row > '@' && col < 9) && readCell(row,col,chessboard) == enemy && found != 1)
     fa0:	18 c0       	rjmp	.+48     	; 0xfd2 <TurnOtherCheckers+0x1f0>
	{
		if ((row - 1 > '@') && (col + 1 < 9))
     fa2:	8d 2f       	mov	r24, r29
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	01 97       	sbiw	r24, 0x01	; 1
     fa8:	81 34       	cpi	r24, 0x41	; 65
     faa:	91 05       	cpc	r25, r1
     fac:	84 f0       	brlt	.+32     	; 0xfce <TurnOtherCheckers+0x1ec>
     fae:	8f 2d       	mov	r24, r15
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	01 96       	adiw	r24, 0x01	; 1
     fb4:	09 97       	sbiw	r24, 0x09	; 9
     fb6:	5c f4       	brge	.+22     	; 0xfce <TurnOtherCheckers+0x1ec>
		{
			if(readCell((row-1),(col+1),chessboard) == player)
     fb8:	a8 01       	movw	r20, r16
     fba:	61 e0       	ldi	r22, 0x01	; 1
     fbc:	6f 0d       	add	r22, r15
     fbe:	8f ef       	ldi	r24, 0xFF	; 255
     fc0:	8d 0f       	add	r24, r29
     fc2:	0e 94 46 02 	call	0x48c	; 0x48c <readCell>
     fc6:	e8 12       	cpse	r14, r24
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <TurnOtherCheckers+0x1ec>
			{
				found = 1;
     fca:	99 24       	eor	r9, r9
     fcc:	93 94       	inc	r9
			}
		}
		row--;
     fce:	d1 50       	subi	r29, 0x01	; 1
		col++;
     fd0:	f3 94       	inc	r15
	found = 0 ;
	row = c;
	col = column;
	row--;
	col++;
	while ((row > '@' && col < 9) && readCell(row,col,chessboard) == enemy && found != 1)
     fd2:	d1 34       	cpi	r29, 0x41	; 65
     fd4:	68 f0       	brcs	.+26     	; 0xff0 <TurnOtherCheckers+0x20e>
     fd6:	88 e0       	ldi	r24, 0x08	; 8
     fd8:	8f 15       	cp	r24, r15
     fda:	50 f0       	brcs	.+20     	; 0xff0 <TurnOtherCheckers+0x20e>
     fdc:	a8 01       	movw	r20, r16
     fde:	6f 2d       	mov	r22, r15
     fe0:	8d 2f       	mov	r24, r29
     fe2:	0e 94 46 02 	call	0x48c	; 0x48c <readCell>
     fe6:	c8 13       	cpse	r28, r24
     fe8:	03 c0       	rjmp	.+6      	; 0xff0 <TurnOtherCheckers+0x20e>
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	98 12       	cpse	r9, r24
     fee:	d9 cf       	rjmp	.-78     	; 0xfa2 <TurnOtherCheckers+0x1c0>
		row--;
		col++;
	}
	col = column;
	col++ ;
	if(found == 1 && (row > '@') && (col < 9))
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	98 12       	cpse	r9, r24
     ff4:	13 c0       	rjmp	.+38     	; 0x101c <TurnOtherCheckers+0x23a>
     ff6:	d1 34       	cpi	r29, 0x41	; 65
     ff8:	88 f0       	brcs	.+34     	; 0x101c <TurnOtherCheckers+0x23a>
     ffa:	88 e0       	ldi	r24, 0x08	; 8
     ffc:	8c 15       	cp	r24, r12
     ffe:	50 f4       	brcc	.+20     	; 0x1014 <TurnOtherCheckers+0x232>
    1000:	0d c0       	rjmp	.+26     	; 0x101c <TurnOtherCheckers+0x23a>
	{
		for(uint8_t i = c - 1; i > row; i--)
		{
			setChecker(i,col,player,chessboard);
    1002:	98 01       	movw	r18, r16
    1004:	4e 2d       	mov	r20, r14
    1006:	69 2d       	mov	r22, r9
    1008:	8f 2d       	mov	r24, r15
    100a:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
			col++;
    100e:	93 94       	inc	r9
	}
	col = column;
	col++ ;
	if(found == 1 && (row > '@') && (col < 9))
	{
		for(uint8_t i = c - 1; i > row; i--)
    1010:	fa 94       	dec	r15
    1012:	02 c0       	rjmp	.+4      	; 0x1018 <TurnOtherCheckers+0x236>
    1014:	fa 2c       	mov	r15, r10
    1016:	9c 2c       	mov	r9, r12
    1018:	df 15       	cp	r29, r15
    101a:	98 f3       	brcs	.-26     	; 0x1002 <TurnOtherCheckers+0x220>
	/*Check for players checkers from main diagon down*/
	found = 0 ;
	row = c;
	col = column;
	row++;
	col--;
    101c:	fb 2c       	mov	r15, r11
	}
	/*Check for players checkers from main diagon down*/
	found = 0 ;
	row = c;
	col = column;
	row++;
    101e:	dd 2d       	mov	r29, r13
			setChecker(i,col,player,chessboard);
			col++;
		}
	}
	/*Check for players checkers from main diagon down*/
	found = 0 ;
    1020:	91 2c       	mov	r9, r1
	row = c;
	col = column;
	row++;
	col--;
	while ((row < 'I' && col > 0) && readCell(row,col,chessboard) == enemy && found != 1)
    1022:	19 c0       	rjmp	.+50     	; 0x1056 <TurnOtherCheckers+0x274>
	{
		if ((row + 1 < 'I') && (col - 1 > 0))
    1024:	8d 2f       	mov	r24, r29
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	01 96       	adiw	r24, 0x01	; 1
    102a:	89 34       	cpi	r24, 0x49	; 73
    102c:	91 05       	cpc	r25, r1
    102e:	8c f4       	brge	.+34     	; 0x1052 <TurnOtherCheckers+0x270>
    1030:	8f 2d       	mov	r24, r15
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	01 97       	sbiw	r24, 0x01	; 1
    1036:	18 16       	cp	r1, r24
    1038:	19 06       	cpc	r1, r25
    103a:	5c f4       	brge	.+22     	; 0x1052 <TurnOtherCheckers+0x270>
		{
			if(readCell((row+1),(col-1),chessboard) == player)
    103c:	a8 01       	movw	r20, r16
    103e:	6f ef       	ldi	r22, 0xFF	; 255
    1040:	6f 0d       	add	r22, r15
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	8d 0f       	add	r24, r29
    1046:	0e 94 46 02 	call	0x48c	; 0x48c <readCell>
    104a:	e8 12       	cpse	r14, r24
    104c:	02 c0       	rjmp	.+4      	; 0x1052 <TurnOtherCheckers+0x270>
			{
				found = 1;
    104e:	99 24       	eor	r9, r9
    1050:	93 94       	inc	r9
			}
		}
		row++;
    1052:	df 5f       	subi	r29, 0xFF	; 255
		col--;
    1054:	fa 94       	dec	r15
	found = 0 ;
	row = c;
	col = column;
	row++;
	col--;
	while ((row < 'I' && col > 0) && readCell(row,col,chessboard) == enemy && found != 1)
    1056:	d9 34       	cpi	r29, 0x49	; 73
    1058:	60 f4       	brcc	.+24     	; 0x1072 <TurnOtherCheckers+0x290>
    105a:	ff 20       	and	r15, r15
    105c:	51 f0       	breq	.+20     	; 0x1072 <TurnOtherCheckers+0x290>
    105e:	a8 01       	movw	r20, r16
    1060:	6f 2d       	mov	r22, r15
    1062:	8d 2f       	mov	r24, r29
    1064:	0e 94 46 02 	call	0x48c	; 0x48c <readCell>
    1068:	c8 13       	cpse	r28, r24
    106a:	03 c0       	rjmp	.+6      	; 0x1072 <TurnOtherCheckers+0x290>
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	98 12       	cpse	r9, r24
    1070:	d9 cf       	rjmp	.-78     	; 0x1024 <TurnOtherCheckers+0x242>
		row++;
		col--;
	}
	col = column;
	col-- ;
	if(found == 1 && (row < 'I') && (col > 0))
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	98 12       	cpse	r9, r24
    1076:	14 c0       	rjmp	.+40     	; 0x10a0 <TurnOtherCheckers+0x2be>
    1078:	d9 34       	cpi	r29, 0x49	; 73
    107a:	90 f4       	brcc	.+36     	; 0x10a0 <TurnOtherCheckers+0x2be>
    107c:	b1 10       	cpse	r11, r1
    107e:	0a c0       	rjmp	.+20     	; 0x1094 <TurnOtherCheckers+0x2b2>
    1080:	0f c0       	rjmp	.+30     	; 0x10a0 <TurnOtherCheckers+0x2be>
	{
		for(uint8_t i = c+1; ((i < row) && (col > 0));  i++)
		{
			setChecker(i,col,player,chessboard);
    1082:	98 01       	movw	r18, r16
    1084:	4e 2d       	mov	r20, r14
    1086:	69 2d       	mov	r22, r9
    1088:	8f 2d       	mov	r24, r15
    108a:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
			col--;
    108e:	9a 94       	dec	r9
	}
	col = column;
	col-- ;
	if(found == 1 && (row < 'I') && (col > 0))
	{
		for(uint8_t i = c+1; ((i < row) && (col > 0));  i++)
    1090:	f3 94       	inc	r15
    1092:	02 c0       	rjmp	.+4      	; 0x1098 <TurnOtherCheckers+0x2b6>
    1094:	fd 2c       	mov	r15, r13
    1096:	9b 2c       	mov	r9, r11
    1098:	fd 16       	cp	r15, r29
    109a:	10 f4       	brcc	.+4      	; 0x10a0 <TurnOtherCheckers+0x2be>
    109c:	91 10       	cpse	r9, r1
    109e:	f1 cf       	rjmp	.-30     	; 0x1082 <TurnOtherCheckers+0x2a0>
	/*Check for players checkers from secondary diagon up*/
	found = 0 ;
	row = c;
	col = column;
	row--;
	col--;
    10a0:	fb 2c       	mov	r15, r11
	}
	/*Check for players checkers from secondary diagon up*/
	found = 0 ;
	row = c;
	col = column;
	row--;
    10a2:	da 2d       	mov	r29, r10
			setChecker(i,col,player,chessboard);
			col--;
		}
	}
	/*Check for players checkers from secondary diagon up*/
	found = 0 ;
    10a4:	91 2c       	mov	r9, r1
	row = c;
	col = column;
	row--;
	col--;
	while ((row > '@' && col > 0) && readCell(row,col,chessboard) == enemy && found != 1)
    10a6:	19 c0       	rjmp	.+50     	; 0x10da <TurnOtherCheckers+0x2f8>
	{
		if ((row - 1 > '@') && (col - 1 > 0))
    10a8:	8d 2f       	mov	r24, r29
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	01 97       	sbiw	r24, 0x01	; 1
    10ae:	81 34       	cpi	r24, 0x41	; 65
    10b0:	91 05       	cpc	r25, r1
    10b2:	8c f0       	brlt	.+34     	; 0x10d6 <TurnOtherCheckers+0x2f4>
    10b4:	8f 2d       	mov	r24, r15
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	01 97       	sbiw	r24, 0x01	; 1
    10ba:	18 16       	cp	r1, r24
    10bc:	19 06       	cpc	r1, r25
    10be:	5c f4       	brge	.+22     	; 0x10d6 <TurnOtherCheckers+0x2f4>
		{
			if(readCell((row-1),(col-1),chessboard) == player)
    10c0:	a8 01       	movw	r20, r16
    10c2:	6f ef       	ldi	r22, 0xFF	; 255
    10c4:	6f 0d       	add	r22, r15
    10c6:	8f ef       	ldi	r24, 0xFF	; 255
    10c8:	8d 0f       	add	r24, r29
    10ca:	0e 94 46 02 	call	0x48c	; 0x48c <readCell>
    10ce:	e8 12       	cpse	r14, r24
    10d0:	02 c0       	rjmp	.+4      	; 0x10d6 <TurnOtherCheckers+0x2f4>
			{
				found = 1;
    10d2:	99 24       	eor	r9, r9
    10d4:	93 94       	inc	r9
			}
		}
		row--;
    10d6:	d1 50       	subi	r29, 0x01	; 1
		col--;
    10d8:	fa 94       	dec	r15
	found = 0 ;
	row = c;
	col = column;
	row--;
	col--;
	while ((row > '@' && col > 0) && readCell(row,col,chessboard) == enemy && found != 1)
    10da:	d1 34       	cpi	r29, 0x41	; 65
    10dc:	60 f0       	brcs	.+24     	; 0x10f6 <TurnOtherCheckers+0x314>
    10de:	ff 20       	and	r15, r15
    10e0:	51 f0       	breq	.+20     	; 0x10f6 <TurnOtherCheckers+0x314>
    10e2:	a8 01       	movw	r20, r16
    10e4:	6f 2d       	mov	r22, r15
    10e6:	8d 2f       	mov	r24, r29
    10e8:	0e 94 46 02 	call	0x48c	; 0x48c <readCell>
    10ec:	c8 13       	cpse	r28, r24
    10ee:	03 c0       	rjmp	.+6      	; 0x10f6 <TurnOtherCheckers+0x314>
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	98 12       	cpse	r9, r24
    10f4:	d9 cf       	rjmp	.-78     	; 0x10a8 <TurnOtherCheckers+0x2c6>
		row--;
		col--;
	}
	col = column;
	col-- ;
	if(found == 1 && (row > '@') && (col > 0))
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	98 12       	cpse	r9, r24
    10fa:	11 c0       	rjmp	.+34     	; 0x111e <TurnOtherCheckers+0x33c>
    10fc:	d1 34       	cpi	r29, 0x41	; 65
    10fe:	78 f0       	brcs	.+30     	; 0x111e <TurnOtherCheckers+0x33c>
    1100:	b1 10       	cpse	r11, r1
    1102:	09 c0       	rjmp	.+18     	; 0x1116 <TurnOtherCheckers+0x334>
    1104:	0c c0       	rjmp	.+24     	; 0x111e <TurnOtherCheckers+0x33c>
	{
		for(uint8_t i = c-1; ((i > row) && (col > 0)); i--)
		{
			setChecker(i,col,player,chessboard);
    1106:	98 01       	movw	r18, r16
    1108:	4e 2d       	mov	r20, r14
    110a:	6b 2d       	mov	r22, r11
    110c:	8a 2d       	mov	r24, r10
    110e:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
			col--;
    1112:	ba 94       	dec	r11
	}
	col = column;
	col-- ;
	if(found == 1 && (row > '@') && (col > 0))
	{
		for(uint8_t i = c-1; ((i > row) && (col > 0)); i--)
    1114:	aa 94       	dec	r10
    1116:	da 15       	cp	r29, r10
    1118:	10 f4       	brcc	.+4      	; 0x111e <TurnOtherCheckers+0x33c>
    111a:	b1 10       	cpse	r11, r1
    111c:	f4 cf       	rjmp	.-24     	; 0x1106 <TurnOtherCheckers+0x324>
	/*Check for players checkers from secondary diagon down*/
	found = 0 ;
	row = c;
	col = column;
	row++;
	col++;
    111e:	fc 2c       	mov	r15, r12
	}
	/*Check for players checkers from secondary diagon down*/
	found = 0 ;
	row = c;
	col = column;
	row++;
    1120:	dd 2d       	mov	r29, r13
			setChecker(i,col,player,chessboard);
			col--;
		}
	}
	/*Check for players checkers from secondary diagon down*/
	found = 0 ;
    1122:	b1 2c       	mov	r11, r1
	row = c;
	col = column;
	row++;
	col++;
	while ((row < 'I' && col < 9) && readCell(row,col,chessboard) == enemy && found != 1)
    1124:	18 c0       	rjmp	.+48     	; 0x1156 <TurnOtherCheckers+0x374>
	{
		if ((row+1 < 'I') && (col + 1 < 9))
    1126:	8d 2f       	mov	r24, r29
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	01 96       	adiw	r24, 0x01	; 1
    112c:	89 34       	cpi	r24, 0x49	; 73
    112e:	91 05       	cpc	r25, r1
    1130:	84 f4       	brge	.+32     	; 0x1152 <TurnOtherCheckers+0x370>
    1132:	8f 2d       	mov	r24, r15
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	01 96       	adiw	r24, 0x01	; 1
    1138:	09 97       	sbiw	r24, 0x09	; 9
    113a:	5c f4       	brge	.+22     	; 0x1152 <TurnOtherCheckers+0x370>
		{
			if(readCell((row+1),(col+1),chessboard) == player)
    113c:	a8 01       	movw	r20, r16
    113e:	61 e0       	ldi	r22, 0x01	; 1
    1140:	6f 0d       	add	r22, r15
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	8d 0f       	add	r24, r29
    1146:	0e 94 46 02 	call	0x48c	; 0x48c <readCell>
    114a:	e8 12       	cpse	r14, r24
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <TurnOtherCheckers+0x370>
			{
				found = 1;
    114e:	bb 24       	eor	r11, r11
    1150:	b3 94       	inc	r11
			}
		}
		row++;
    1152:	df 5f       	subi	r29, 0xFF	; 255
		col++;
    1154:	f3 94       	inc	r15
	found = 0 ;
	row = c;
	col = column;
	row++;
	col++;
	while ((row < 'I' && col < 9) && readCell(row,col,chessboard) == enemy && found != 1)
    1156:	d9 34       	cpi	r29, 0x49	; 73
    1158:	68 f4       	brcc	.+26     	; 0x1174 <TurnOtherCheckers+0x392>
    115a:	88 e0       	ldi	r24, 0x08	; 8
    115c:	8f 15       	cp	r24, r15
    115e:	50 f0       	brcs	.+20     	; 0x1174 <TurnOtherCheckers+0x392>
    1160:	a8 01       	movw	r20, r16
    1162:	6f 2d       	mov	r22, r15
    1164:	8d 2f       	mov	r24, r29
    1166:	0e 94 46 02 	call	0x48c	; 0x48c <readCell>
    116a:	c8 13       	cpse	r28, r24
    116c:	03 c0       	rjmp	.+6      	; 0x1174 <TurnOtherCheckers+0x392>
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	b8 12       	cpse	r11, r24
    1172:	d9 cf       	rjmp	.-78     	; 0x1126 <TurnOtherCheckers+0x344>
		row++;
		col++;
	}
	col = column;
	col++ ;
	if(found == 1 && (row < 'I') && (col < 9))
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	b8 12       	cpse	r11, r24
    1178:	13 c0       	rjmp	.+38     	; 0x11a0 <TurnOtherCheckers+0x3be>
    117a:	d9 34       	cpi	r29, 0x49	; 73
    117c:	88 f4       	brcc	.+34     	; 0x11a0 <TurnOtherCheckers+0x3be>
    117e:	88 e0       	ldi	r24, 0x08	; 8
    1180:	8c 15       	cp	r24, r12
    1182:	48 f4       	brcc	.+18     	; 0x1196 <TurnOtherCheckers+0x3b4>
    1184:	0d c0       	rjmp	.+26     	; 0x11a0 <TurnOtherCheckers+0x3be>
	{
		for(uint8_t i = c+1; ((i < row) && (col < 9)); i++)
		{
			setChecker(i,col,player,chessboard);
    1186:	98 01       	movw	r18, r16
    1188:	4e 2d       	mov	r20, r14
    118a:	6c 2d       	mov	r22, r12
    118c:	8d 2d       	mov	r24, r13
    118e:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
			col++;
    1192:	c3 94       	inc	r12
	}
	col = column;
	col++ ;
	if(found == 1 && (row < 'I') && (col < 9))
	{
		for(uint8_t i = c+1; ((i < row) && (col < 9)); i++)
    1194:	d3 94       	inc	r13
    1196:	dd 16       	cp	r13, r29
    1198:	18 f4       	brcc	.+6      	; 0x11a0 <TurnOtherCheckers+0x3be>
    119a:	88 e0       	ldi	r24, 0x08	; 8
    119c:	8c 15       	cp	r24, r12
    119e:	98 f7       	brcc	.-26     	; 0x1186 <TurnOtherCheckers+0x3a4>
		{
			setChecker(i,col,player,chessboard);
			col++;
		}
	}
}
    11a0:	df 91       	pop	r29
    11a2:	cf 91       	pop	r28
    11a4:	1f 91       	pop	r17
    11a6:	0f 91       	pop	r16
    11a8:	ff 90       	pop	r15
    11aa:	ef 90       	pop	r14
    11ac:	df 90       	pop	r13
    11ae:	cf 90       	pop	r12
    11b0:	bf 90       	pop	r11
    11b2:	af 90       	pop	r10
    11b4:	9f 90       	pop	r9
    11b6:	08 95       	ret

000011b8 <clearValidMoves>:

void clearValidMoves(void)
{
	blackCount = 0 ;
    11b8:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <blackCount>
	whiteCount = 0 ;
    11bc:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <whiteCount>
	for (uint8_t i = 0; i < SIZE / 2; i++)
    11c0:	20 e0       	ldi	r18, 0x00	; 0
    11c2:	0b c0       	rjmp	.+22     	; 0x11da <clearValidMoves+0x22>
	{
		mineValidtable[i] = 0 ;
    11c4:	82 2f       	mov	r24, r18
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	fc 01       	movw	r30, r24
    11ca:	ec 55       	subi	r30, 0x5C	; 92
    11cc:	ff 4f       	sbci	r31, 0xFF	; 255
    11ce:	10 82       	st	Z, r1
		enemyValidtable[i] = 0 ;
    11d0:	fc 01       	movw	r30, r24
    11d2:	e4 58       	subi	r30, 0x84	; 132
    11d4:	ff 4f       	sbci	r31, 0xFF	; 255
    11d6:	10 82       	st	Z, r1

void clearValidMoves(void)
{
	blackCount = 0 ;
	whiteCount = 0 ;
	for (uint8_t i = 0; i < SIZE / 2; i++)
    11d8:	2f 5f       	subi	r18, 0xFF	; 255
    11da:	28 30       	cpi	r18, 0x08	; 8
    11dc:	98 f3       	brcs	.-26     	; 0x11c4 <clearValidMoves+0xc>
	{
		mineValidtable[i] = 0 ;
		enemyValidtable[i] = 0 ;
	}
}
    11de:	08 95       	ret

000011e0 <tableInit>:
}


void tableInit(void)
{
	for (uint8_t i = 0; i < SIZE; i++)
    11e0:	80 e0       	ldi	r24, 0x00	; 0
    11e2:	06 c0       	rjmp	.+12     	; 0x11f0 <tableInit+0x10>
	{
		table[i] = 0 ;
    11e4:	e8 2f       	mov	r30, r24
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	e4 54       	subi	r30, 0x44	; 68
    11ea:	ff 4f       	sbci	r31, 0xFF	; 255
    11ec:	10 82       	st	Z, r1
}


void tableInit(void)
{
	for (uint8_t i = 0; i < SIZE; i++)
    11ee:	8f 5f       	subi	r24, 0xFF	; 255
    11f0:	80 31       	cpi	r24, 0x10	; 16
    11f2:	c0 f3       	brcs	.-16     	; 0x11e4 <tableInit+0x4>
	{
		table[i] = 0 ;
	}
	clearValidMoves();
    11f4:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <clearValidMoves>
	setChecker('D',4,'W',table) ;
    11f8:	2c eb       	ldi	r18, 0xBC	; 188
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	47 e5       	ldi	r20, 0x57	; 87
    11fe:	64 e0       	ldi	r22, 0x04	; 4
    1200:	84 e4       	ldi	r24, 0x44	; 68
    1202:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
	setChecker('D',5,'B',table) ;
    1206:	2c eb       	ldi	r18, 0xBC	; 188
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	42 e4       	ldi	r20, 0x42	; 66
    120c:	65 e0       	ldi	r22, 0x05	; 5
    120e:	84 e4       	ldi	r24, 0x44	; 68
    1210:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
	setChecker('E',4,'B',table) ;
    1214:	2c eb       	ldi	r18, 0xBC	; 188
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	42 e4       	ldi	r20, 0x42	; 66
    121a:	64 e0       	ldi	r22, 0x04	; 4
    121c:	85 e4       	ldi	r24, 0x45	; 69
    121e:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
	setChecker('E',5,'W',table) ;
    1222:	2c eb       	ldi	r18, 0xBC	; 188
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	47 e5       	ldi	r20, 0x57	; 87
    1228:	65 e0       	ldi	r22, 0x05	; 5
    122a:	85 e4       	ldi	r24, 0x45	; 69
    122c:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
    1230:	08 95       	ret

00001232 <countMineValidmoves>:
uint8_t countMineValidmoves(void)
{
	uint8_t count = 0 ;
	uint8_t buffer = 0 ;
	uint8_t temp = 0 ;
	uint8_t i = 0 ;
    1232:	20 e0       	ldi	r18, 0x00	; 0
	}
}

uint8_t countMineValidmoves(void)
{
	uint8_t count = 0 ;
    1234:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t buffer = 0 ;
	uint8_t temp = 0 ;
	uint8_t i = 0 ;
	while (i < SIZE/2 && count == 0)
    1236:	17 c0       	rjmp	.+46     	; 0x1266 <countMineValidmoves+0x34>
	{
		buffer = mineValidtable[i] ;
    1238:	e2 2f       	mov	r30, r18
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	ec 55       	subi	r30, 0x5C	; 92
    123e:	ff 4f       	sbci	r31, 0xFF	; 255
    1240:	90 81       	ld	r25, Z
		temp = buffer & 0b00000001 ;
		if (temp == 1)
    1242:	90 fd       	sbrc	r25, 0
		{
			count++ ;
    1244:	8f 5f       	subi	r24, 0xFF	; 255
		}
		temp = buffer & 0b00000010 ;
		temp = (temp >> 1) ;
		if (temp == 1)
    1246:	91 fd       	sbrc	r25, 1
		{
			count++ ;
    1248:	8f 5f       	subi	r24, 0xFF	; 255
		}
		temp = buffer & 0b00000100 ;
		temp = (temp >> 2) ;
		if (temp == 1)
    124a:	92 fd       	sbrc	r25, 2
		{
			count++ ;
    124c:	8f 5f       	subi	r24, 0xFF	; 255
		}
		temp = buffer & 0b00001000 ;
		temp = (temp >> 3) ;
		if (temp == 1)
    124e:	93 fd       	sbrc	r25, 3
		{
			count++ ;
    1250:	8f 5f       	subi	r24, 0xFF	; 255
		}
		temp = buffer & 0b00010000 ;
		temp = (temp >> 4) ;
		if (temp == 1)
    1252:	94 fd       	sbrc	r25, 4
		{
			count++ ;
    1254:	8f 5f       	subi	r24, 0xFF	; 255
		}
		temp = buffer & 0b00100000 ;
		temp = (temp >> 5) ;
		if (temp == 1)
    1256:	95 fd       	sbrc	r25, 5
		{
			count++ ;
    1258:	8f 5f       	subi	r24, 0xFF	; 255
		}
		temp = buffer & 0b01000000 ;
		temp = (temp >> 6) ;
		if (temp == 1)
    125a:	96 fd       	sbrc	r25, 6
		{
			count++ ;
    125c:	8f 5f       	subi	r24, 0xFF	; 255
		}
		temp = buffer & 0b10000000 ;
		temp = (temp >> 7) ;
		if (temp == 1)
    125e:	99 23       	and	r25, r25
    1260:	0c f4       	brge	.+2      	; 0x1264 <countMineValidmoves+0x32>
		{
			count++ ;
    1262:	8f 5f       	subi	r24, 0xFF	; 255
		}
		
		i++ ;
    1264:	2f 5f       	subi	r18, 0xFF	; 255
{
	uint8_t count = 0 ;
	uint8_t buffer = 0 ;
	uint8_t temp = 0 ;
	uint8_t i = 0 ;
	while (i < SIZE/2 && count == 0)
    1266:	28 30       	cpi	r18, 0x08	; 8
    1268:	10 f4       	brcc	.+4      	; 0x126e <countMineValidmoves+0x3c>
    126a:	88 23       	and	r24, r24
    126c:	29 f3       	breq	.-54     	; 0x1238 <countMineValidmoves+0x6>
		}
		
		i++ ;
	}
	return count ;
}
    126e:	08 95       	ret

00001270 <countEnemyValidmoves>:
uint8_t countEnemyValidmoves(void)
{
	uint8_t count = 0 ;
	uint8_t buffer = 0 ;
	uint8_t temp = 0 ;
	uint8_t i = 0 ;
    1270:	20 e0       	ldi	r18, 0x00	; 0
}


uint8_t countEnemyValidmoves(void)
{
	uint8_t count = 0 ;
    1272:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t buffer = 0 ;
	uint8_t temp = 0 ;
	uint8_t i = 0 ;
	while (i < SIZE/2 && count == 0)
    1274:	17 c0       	rjmp	.+46     	; 0x12a4 <countEnemyValidmoves+0x34>
	{
		buffer = enemyValidtable[i] ;
    1276:	e2 2f       	mov	r30, r18
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	e4 58       	subi	r30, 0x84	; 132
    127c:	ff 4f       	sbci	r31, 0xFF	; 255
    127e:	90 81       	ld	r25, Z
		temp = buffer & 0b00000001 ;
		if (temp == 1)
    1280:	90 fd       	sbrc	r25, 0
		{
			count++ ;
    1282:	8f 5f       	subi	r24, 0xFF	; 255
		}
		temp = buffer & 0b00000010 ;
		temp = (temp >> 1) ;
		if (temp == 1)
    1284:	91 fd       	sbrc	r25, 1
		{
			count++ ;
    1286:	8f 5f       	subi	r24, 0xFF	; 255
		}
		temp = buffer & 0b00000100 ;
		temp = (temp >> 2) ;
		if (temp == 1)
    1288:	92 fd       	sbrc	r25, 2
		{
			count++ ;
    128a:	8f 5f       	subi	r24, 0xFF	; 255
		}
		temp = buffer & 0b00001000 ;
		temp = (temp >> 3) ;
		if (temp == 1)
    128c:	93 fd       	sbrc	r25, 3
		{
			count++ ;
    128e:	8f 5f       	subi	r24, 0xFF	; 255
		}
		temp = buffer & 0b00010000 ;
		temp = (temp >> 4) ;
		if (temp == 1)
    1290:	94 fd       	sbrc	r25, 4
		{
			count++ ;
    1292:	8f 5f       	subi	r24, 0xFF	; 255
		}
		temp = buffer & 0b00100000 ;
		temp = (temp >> 5) ;
		if (temp == 1)
    1294:	95 fd       	sbrc	r25, 5
		{
			count++ ;
    1296:	8f 5f       	subi	r24, 0xFF	; 255
		}
		temp = buffer & 0b01000000 ;
		temp = (temp >> 6) ;
		if (temp == 1)
    1298:	96 fd       	sbrc	r25, 6
		{
			count++ ;
    129a:	8f 5f       	subi	r24, 0xFF	; 255
		}
		temp = buffer & 0b10000000 ;
		temp = (temp >> 7) ;
		if (temp == 1)
    129c:	99 23       	and	r25, r25
    129e:	0c f4       	brge	.+2      	; 0x12a2 <countEnemyValidmoves+0x32>
		{
			count++ ;
    12a0:	8f 5f       	subi	r24, 0xFF	; 255
		}
		
		i++ ;
    12a2:	2f 5f       	subi	r18, 0xFF	; 255
{
	uint8_t count = 0 ;
	uint8_t buffer = 0 ;
	uint8_t temp = 0 ;
	uint8_t i = 0 ;
	while (i < SIZE/2 && count == 0)
    12a4:	28 30       	cpi	r18, 0x08	; 8
    12a6:	10 f4       	brcc	.+4      	; 0x12ac <countEnemyValidmoves+0x3c>
    12a8:	88 23       	and	r24, r24
    12aa:	29 f3       	breq	.-54     	; 0x1276 <countEnemyValidmoves+0x6>
		}
		
		i++ ;
	}
	return count ;
}
    12ac:	08 95       	ret

000012ae <checkWin>:


void checkWin(char mine, uint8_t black, uint8_t white)
{
	switch(mine)
    12ae:	82 34       	cpi	r24, 0x42	; 66
    12b0:	69 f4       	brne	.+26     	; 0x12cc <checkWin+0x1e>
	{
		case 'B':
			if (black > white)
    12b2:	46 17       	cp	r20, r22
    12b4:	18 f4       	brcc	.+6      	; 0x12bc <checkWin+0xe>
			{
				/* I WIN */
				Win() ;
    12b6:	0e 94 cd 01 	call	0x39a	; 0x39a <Win>
    12ba:	08 95       	ret
			}
			else if (black < white)
    12bc:	64 17       	cp	r22, r20
    12be:	18 f4       	brcc	.+6      	; 0x12c6 <checkWin+0x18>
			{
				Lose() ;
    12c0:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Lose>
    12c4:	08 95       	ret
			}
			else
			{
				Tie() ;
    12c6:	0e 94 e7 01 	call	0x3ce	; 0x3ce <Tie>
    12ca:	08 95       	ret
			}
		break;
      default:
			if (white > black)
    12cc:	64 17       	cp	r22, r20
    12ce:	18 f4       	brcc	.+6      	; 0x12d6 <checkWin+0x28>
			{
				/* I WIN TATA */
				Win() ;
    12d0:	0e 94 cd 01 	call	0x39a	; 0x39a <Win>
    12d4:	08 95       	ret
			}
			else if (white < black)
    12d6:	46 17       	cp	r20, r22
    12d8:	18 f4       	brcc	.+6      	; 0x12e0 <checkWin+0x32>
			{
				Lose() ;
    12da:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Lose>
    12de:	08 95       	ret
			}
			else
			{
				Tie() ;
    12e0:	0e 94 e7 01 	call	0x3ce	; 0x3ce <Tie>
    12e4:	08 95       	ret

000012e6 <copyChessboard>:
	}
}

void copyChessboard(void)
{
	for (uint8_t i = 0; i < SIZE; i++)
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	43 c0       	rjmp	.+134    	; 0x1370 <copyChessboard+0x8a>
	{
		table1[i] = table[i];
    12ea:	83 2f       	mov	r24, r19
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	fc 01       	movw	r30, r24
    12f0:	e4 54       	subi	r30, 0x44	; 68
    12f2:	ff 4f       	sbci	r31, 0xFF	; 255
    12f4:	20 81       	ld	r18, Z
    12f6:	fc 01       	movw	r30, r24
    12f8:	e5 51       	subi	r30, 0x15	; 21
    12fa:	ff 4f       	sbci	r31, 0xFF	; 255
    12fc:	20 83       	st	Z, r18
		table2[i] = table[i];
    12fe:	fc 01       	movw	r30, r24
    1300:	e5 57       	subi	r30, 0x75	; 117
    1302:	fe 4f       	sbci	r31, 0xFE	; 254
    1304:	20 83       	st	Z, r18
		table3[i] = table[i];
    1306:	fc 01       	movw	r30, r24
    1308:	e4 59       	subi	r30, 0x94	; 148
    130a:	ff 4f       	sbci	r31, 0xFF	; 255
    130c:	20 83       	st	Z, r18
		table4[i] = table[i];
    130e:	fc 01       	movw	r30, r24
    1310:	e5 5a       	subi	r30, 0xA5	; 165
    1312:	fe 4f       	sbci	r31, 0xFE	; 254
    1314:	20 83       	st	Z, r18
		table5[i] = table[i];
    1316:	fc 01       	movw	r30, r24
    1318:	e5 59       	subi	r30, 0x95	; 149
    131a:	fe 4f       	sbci	r31, 0xFE	; 254
    131c:	20 83       	st	Z, r18
		table6[i] = table[i];
    131e:	fc 01       	movw	r30, r24
    1320:	ec 57       	subi	r30, 0x7C	; 124
    1322:	ff 4f       	sbci	r31, 0xFF	; 255
    1324:	20 83       	st	Z, r18
		table7[i] = table[i];
    1326:	fc 01       	movw	r30, r24
    1328:	e5 50       	subi	r30, 0x05	; 5
    132a:	ff 4f       	sbci	r31, 0xFF	; 255
    132c:	20 83       	st	Z, r18
		table8[i] = table[i];
    132e:	fc 01       	movw	r30, r24
    1330:	ec 56       	subi	r30, 0x6C	; 108
    1332:	ff 4f       	sbci	r31, 0xFF	; 255
    1334:	20 83       	st	Z, r18
		table9[i] = table[i];
    1336:	fc 01       	movw	r30, r24
    1338:	e5 5b       	subi	r30, 0xB5	; 181
    133a:	fe 4f       	sbci	r31, 0xFE	; 254
    133c:	20 83       	st	Z, r18
		table10[i] = table[i];
    133e:	fc 01       	movw	r30, r24
    1340:	e5 56       	subi	r30, 0x65	; 101
    1342:	fe 4f       	sbci	r31, 0xFE	; 254
    1344:	20 83       	st	Z, r18
		table11[i] = table[i];
    1346:	fc 01       	movw	r30, r24
    1348:	e5 5c       	subi	r30, 0xC5	; 197
    134a:	fe 4f       	sbci	r31, 0xFE	; 254
    134c:	20 83       	st	Z, r18
		table12[i] = table[i];
    134e:	fc 01       	movw	r30, r24
    1350:	e4 55       	subi	r30, 0x54	; 84
    1352:	ff 4f       	sbci	r31, 0xFF	; 255
    1354:	20 83       	st	Z, r18
		table13[i] = table[i];
    1356:	fc 01       	movw	r30, r24
    1358:	e5 52       	subi	r30, 0x25	; 37
    135a:	ff 4f       	sbci	r31, 0xFF	; 255
    135c:	20 83       	st	Z, r18
		table14[i] = table[i];
    135e:	fc 01       	movw	r30, r24
    1360:	e5 5d       	subi	r30, 0xD5	; 213
    1362:	fe 4f       	sbci	r31, 0xFE	; 254
    1364:	20 83       	st	Z, r18
		table15[i] = table[i];
    1366:	fc 01       	movw	r30, r24
    1368:	e5 5f       	subi	r30, 0xF5	; 245
    136a:	fe 4f       	sbci	r31, 0xFE	; 254
    136c:	20 83       	st	Z, r18
	}
}

void copyChessboard(void)
{
	for (uint8_t i = 0; i < SIZE; i++)
    136e:	3f 5f       	subi	r19, 0xFF	; 255
    1370:	30 31       	cpi	r19, 0x10	; 16
    1372:	08 f4       	brcc	.+2      	; 0x1376 <copyChessboard+0x90>
    1374:	ba cf       	rjmp	.-140    	; 0x12ea <copyChessboard+0x4>
		table13[i] = table[i];
		table14[i] = table[i];
		table15[i] = table[i];
	}
	
}
    1376:	08 95       	ret

00001378 <scanCopyChessBoard>:
	uint8_t buffer = 0 ;
	uint8_t temp1 = 0 ;
	uint8_t temp2 = 0 ;
	uint8_t mineCount = 0 ;
	
	for (uint8_t index = 0 ; index < SIZE ; index++)
    1378:	20 e0       	ldi	r18, 0x00	; 0
uint8_t scanCopyChessBoard(char mine,uint8_t chessBoard[])
{
	uint8_t buffer = 0 ;
	uint8_t temp1 = 0 ;
	uint8_t temp2 = 0 ;
	uint8_t mineCount = 0 ;
    137a:	30 e0       	ldi	r19, 0x00	; 0
	
	for (uint8_t index = 0 ; index < SIZE ; index++)
    137c:	31 c0       	rjmp	.+98     	; 0x13e0 <scanCopyChessBoard+0x68>
	{
		buffer = chessBoard[index] ;
    137e:	fb 01       	movw	r30, r22
    1380:	e2 0f       	add	r30, r18
    1382:	f1 1d       	adc	r31, r1
    1384:	90 81       	ld	r25, Z
		/* First column in half byte */
		temp1 = buffer & 0b00010000 ;								/* Checks for enabled position in chessboard */
		temp1 = (temp1 >> 4) ;
		if (temp1 == 1)
    1386:	94 ff       	sbrs	r25, 4
    1388:	09 c0       	rjmp	.+18     	; 0x139c <scanCopyChessBoard+0x24>
		{
			temp2 = buffer & 0b00000001 ;							/* Checks the colour of this checker */
			if (temp2 == 1)
    138a:	90 ff       	sbrs	r25, 0
    138c:	04 c0       	rjmp	.+8      	; 0x1396 <scanCopyChessBoard+0x1e>
			{
				/* Black checker */
				if (mine == 'B')
    138e:	82 34       	cpi	r24, 0x42	; 66
    1390:	29 f4       	brne	.+10     	; 0x139c <scanCopyChessBoard+0x24>
				{
					mineCount++ ;
    1392:	3f 5f       	subi	r19, 0xFF	; 255
    1394:	03 c0       	rjmp	.+6      	; 0x139c <scanCopyChessBoard+0x24>
				}
			}
			else
			{
				/* White checker */
				if (mine == 'W')
    1396:	87 35       	cpi	r24, 0x57	; 87
    1398:	09 f4       	brne	.+2      	; 0x139c <scanCopyChessBoard+0x24>
				{
					mineCount++ ;
    139a:	3f 5f       	subi	r19, 0xFF	; 255
		}
		
		/* Second column in half byte */
		temp1 = buffer & 0b00100000 ;
		temp1 = (temp1 >> 5) ;
		if (temp1 == 1)
    139c:	95 ff       	sbrs	r25, 5
    139e:	09 c0       	rjmp	.+18     	; 0x13b2 <scanCopyChessBoard+0x3a>
		{
			/* Enabled position. There is a checker */
			temp2 = buffer & 0b00000010 ;
			temp2 = (temp2 >> 1) ;
			if (temp2 == 1)
    13a0:	91 ff       	sbrs	r25, 1
    13a2:	04 c0       	rjmp	.+8      	; 0x13ac <scanCopyChessBoard+0x34>
			{
				/* Black checker */
				if (mine == 'B')
    13a4:	82 34       	cpi	r24, 0x42	; 66
    13a6:	29 f4       	brne	.+10     	; 0x13b2 <scanCopyChessBoard+0x3a>
				{
					mineCount++ ;
    13a8:	3f 5f       	subi	r19, 0xFF	; 255
    13aa:	03 c0       	rjmp	.+6      	; 0x13b2 <scanCopyChessBoard+0x3a>
				}
			}
			else
			{
				/* White checker */
				if (mine == 'W')
    13ac:	87 35       	cpi	r24, 0x57	; 87
    13ae:	09 f4       	brne	.+2      	; 0x13b2 <scanCopyChessBoard+0x3a>
				{
					mineCount++ ;
    13b0:	3f 5f       	subi	r19, 0xFF	; 255
		}
		
		/* Third column in half byte */
		temp1 = buffer & 0b01000000 ;
		temp1 = (temp1 >> 6) ;
		if (temp1 == 1)
    13b2:	96 ff       	sbrs	r25, 6
    13b4:	09 c0       	rjmp	.+18     	; 0x13c8 <scanCopyChessBoard+0x50>
		{
			/* There is a checker */
			temp2 = buffer & 0b00000100 ;
			temp2 = (temp2 >> 2) ;
			if (temp2 == 1)
    13b6:	92 ff       	sbrs	r25, 2
    13b8:	04 c0       	rjmp	.+8      	; 0x13c2 <scanCopyChessBoard+0x4a>
			{
				/* Black checker */
				if (mine == 'B')
    13ba:	82 34       	cpi	r24, 0x42	; 66
    13bc:	29 f4       	brne	.+10     	; 0x13c8 <scanCopyChessBoard+0x50>
				{
					mineCount++ ;
    13be:	3f 5f       	subi	r19, 0xFF	; 255
    13c0:	03 c0       	rjmp	.+6      	; 0x13c8 <scanCopyChessBoard+0x50>
				}
			}
			else
			{
				/* White checker */
				if (mine == 'W')
    13c2:	87 35       	cpi	r24, 0x57	; 87
    13c4:	09 f4       	brne	.+2      	; 0x13c8 <scanCopyChessBoard+0x50>
				{
					mineCount++ ;
    13c6:	3f 5f       	subi	r19, 0xFF	; 255
		}
		
		/* Fourth column in half byte */
		temp1 = buffer & 0b10000000 ;
		temp1 = (temp1 >> 7) ;
		if (temp1)
    13c8:	99 23       	and	r25, r25
    13ca:	4c f4       	brge	.+18     	; 0x13de <scanCopyChessBoard+0x66>
		{
			/* There is a checker */
			temp2 = buffer & 0b00001000 ;
			temp2 = (temp2 >> 3) ;
			if (temp2 == 1)
    13cc:	93 ff       	sbrs	r25, 3
    13ce:	04 c0       	rjmp	.+8      	; 0x13d8 <scanCopyChessBoard+0x60>
			{
				/* Black checker */
				if (mine == 'B')
    13d0:	82 34       	cpi	r24, 0x42	; 66
    13d2:	29 f4       	brne	.+10     	; 0x13de <scanCopyChessBoard+0x66>
				{
					mineCount++ ;
    13d4:	3f 5f       	subi	r19, 0xFF	; 255
    13d6:	03 c0       	rjmp	.+6      	; 0x13de <scanCopyChessBoard+0x66>
				}
			}
			else
			{
				/* White checker */
				if (mine == 'W')
    13d8:	87 35       	cpi	r24, 0x57	; 87
    13da:	09 f4       	brne	.+2      	; 0x13de <scanCopyChessBoard+0x66>
				{
					mineCount++ ;
    13dc:	3f 5f       	subi	r19, 0xFF	; 255
	uint8_t buffer = 0 ;
	uint8_t temp1 = 0 ;
	uint8_t temp2 = 0 ;
	uint8_t mineCount = 0 ;
	
	for (uint8_t index = 0 ; index < SIZE ; index++)
    13de:	2f 5f       	subi	r18, 0xFF	; 255
    13e0:	20 31       	cpi	r18, 0x10	; 16
    13e2:	68 f2       	brcs	.-102    	; 0x137e <scanCopyChessBoard+0x6>
		
	}
	
	return mineCount ;
	
}
    13e4:	83 2f       	mov	r24, r19
    13e6:	08 95       	ret

000013e8 <Tactics>:


void Tactics(char mine)
{
    13e8:	cf 92       	push	r12
    13ea:	df 92       	push	r13
    13ec:	ef 92       	push	r14
    13ee:	ff 92       	push	r15
    13f0:	0f 93       	push	r16
    13f2:	1f 93       	push	r17
    13f4:	cf 93       	push	r28
    13f6:	df 93       	push	r29
    13f8:	d8 2f       	mov	r29, r24
	uint8_t count = 0 ;
	uint8_t max = 0 ;
	uint8_t checkers = 0 ;
	char line = (char) 0 ;
	uint8_t column = 0 ;
	for (uint8_t index = 0; index < SIZE/2; index++)
    13fa:	d1 2c       	mov	r13, r1
void Tactics(char mine)
{
	uint8_t buffer = 0 ;
	uint8_t temp = 0;
	uint8_t count = 0 ;
	uint8_t max = 0 ;
    13fc:	c1 2c       	mov	r12, r1

void Tactics(char mine)
{
	uint8_t buffer = 0 ;
	uint8_t temp = 0;
	uint8_t count = 0 ;
    13fe:	c0 e0       	ldi	r28, 0x00	; 0
	uint8_t max = 0 ;
	uint8_t checkers = 0 ;
	char line = (char) 0 ;
	uint8_t column = 0 ;
	for (uint8_t index = 0; index < SIZE/2; index++)
    1400:	0c 94 7c 18 	jmp	0x30f8	; 0x30f8 <Tactics+0x1d10>
	{
		/* First check line */
		line = 65 + index ;
    1404:	0f 2e       	mov	r0, r31
    1406:	f1 e4       	ldi	r31, 0x41	; 65
    1408:	ff 2e       	mov	r15, r31
    140a:	f0 2d       	mov	r31, r0
    140c:	fd 0c       	add	r15, r13
		buffer = mineValidtable[index] ;
    140e:	ed 2d       	mov	r30, r13
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	ec 55       	subi	r30, 0x5C	; 92
    1414:	ff 4f       	sbci	r31, 0xFF	; 255
    1416:	e0 80       	ld	r14, Z
		/* Check column */
		temp = buffer & 0b00000001 ;
		if (temp == 1)
    1418:	e0 fe       	sbrs	r14, 0
    141a:	cc c1       	rjmp	.+920    	; 0x17b4 <Tactics+0x3cc>
		{
			/* First Valid in this line */
			column = 1 ;
			count++ ;
    141c:	cf 5f       	subi	r28, 0xFF	; 255
			switch(count)
    141e:	8c 2f       	mov	r24, r28
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	fc 01       	movw	r30, r24
    1424:	31 97       	sbiw	r30, 0x01	; 1
    1426:	ee 30       	cpi	r30, 0x0E	; 14
    1428:	f1 05       	cpc	r31, r1
    142a:	08 f0       	brcs	.+2      	; 0x142e <Tactics+0x46>
    142c:	a7 c1       	rjmp	.+846    	; 0x177c <Tactics+0x394>
    142e:	e4 5c       	subi	r30, 0xC4	; 196
    1430:	ff 4f       	sbci	r31, 0xFF	; 255
    1432:	0c 94 f8 1a 	jmp	0x35f0	; 0x35f0 <__tablejump2__>
			{
				case 1:
					setChecker(line,column,mine,table1) ;
    1436:	2b ee       	ldi	r18, 0xEB	; 235
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	4d 2f       	mov	r20, r29
    143c:	61 e0       	ldi	r22, 0x01	; 1
    143e:	8f 2d       	mov	r24, r15
    1440:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
					TurnOtherCheckers(line,column,enemy,mine,table1) ;
    1444:	0b ee       	ldi	r16, 0xEB	; 235
    1446:	10 e0       	ldi	r17, 0x00	; 0
    1448:	2d 2f       	mov	r18, r29
    144a:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    144e:	61 e0       	ldi	r22, 0x01	; 1
    1450:	8f 2d       	mov	r24, r15
    1452:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
					checkers = scanCopyChessBoard(mine,table1) ;
    1456:	b8 01       	movw	r22, r16
    1458:	8d 2f       	mov	r24, r29
    145a:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
					if (max < checkers)
    145e:	c8 16       	cp	r12, r24
    1460:	08 f0       	brcs	.+2      	; 0x1464 <Tactics+0x7c>
    1462:	a8 c1       	rjmp	.+848    	; 0x17b4 <Tactics+0x3cc>
					{
						max = checkers ;
						myLine = line ;
    1464:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
						myColumn = column ;
    1468:	91 e0       	ldi	r25, 0x01	; 1
    146a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
					setChecker(line,column,mine,table1) ;
					TurnOtherCheckers(line,column,enemy,mine,table1) ;
					checkers = scanCopyChessBoard(mine,table1) ;
					if (max < checkers)
					{
						max = checkers ;
    146e:	c8 2e       	mov	r12, r24
    1470:	a1 c1       	rjmp	.+834    	; 0x17b4 <Tactics+0x3cc>
						myColumn = column ;
					}
				break;
				
				case 2:
					setChecker(line,column,mine,table2) ;
    1472:	2b e8       	ldi	r18, 0x8B	; 139
    1474:	31 e0       	ldi	r19, 0x01	; 1
    1476:	4d 2f       	mov	r20, r29
    1478:	61 e0       	ldi	r22, 0x01	; 1
    147a:	8f 2d       	mov	r24, r15
    147c:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
					TurnOtherCheckers(line,column,enemy,mine,table2) ;
    1480:	0b e8       	ldi	r16, 0x8B	; 139
    1482:	11 e0       	ldi	r17, 0x01	; 1
    1484:	2d 2f       	mov	r18, r29
    1486:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    148a:	61 e0       	ldi	r22, 0x01	; 1
    148c:	8f 2d       	mov	r24, r15
    148e:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
					checkers = scanCopyChessBoard(mine,table2) ;
    1492:	b8 01       	movw	r22, r16
    1494:	8d 2f       	mov	r24, r29
    1496:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
					if (max < checkers)
    149a:	c8 16       	cp	r12, r24
    149c:	08 f0       	brcs	.+2      	; 0x14a0 <Tactics+0xb8>
    149e:	8a c1       	rjmp	.+788    	; 0x17b4 <Tactics+0x3cc>
					{
						max = checkers ;
						myLine = line ;
    14a0:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
						myColumn = column ;
    14a4:	91 e0       	ldi	r25, 0x01	; 1
    14a6:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
					setChecker(line,column,mine,table2) ;
					TurnOtherCheckers(line,column,enemy,mine,table2) ;
					checkers = scanCopyChessBoard(mine,table2) ;
					if (max < checkers)
					{
						max = checkers ;
    14aa:	c8 2e       	mov	r12, r24
    14ac:	83 c1       	rjmp	.+774    	; 0x17b4 <Tactics+0x3cc>
						myColumn = column ;
					}
				break;
				
				case 3:
					setChecker(line,column,mine,table3) ;
    14ae:	2c e6       	ldi	r18, 0x6C	; 108
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	4d 2f       	mov	r20, r29
    14b4:	61 e0       	ldi	r22, 0x01	; 1
    14b6:	8f 2d       	mov	r24, r15
    14b8:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
					TurnOtherCheckers(line,column,enemy,mine,table3) ;
    14bc:	0c e6       	ldi	r16, 0x6C	; 108
    14be:	10 e0       	ldi	r17, 0x00	; 0
    14c0:	2d 2f       	mov	r18, r29
    14c2:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    14c6:	61 e0       	ldi	r22, 0x01	; 1
    14c8:	8f 2d       	mov	r24, r15
    14ca:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
					checkers = scanCopyChessBoard(mine,table3) ;
    14ce:	b8 01       	movw	r22, r16
    14d0:	8d 2f       	mov	r24, r29
    14d2:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
					if (max < checkers)
    14d6:	c8 16       	cp	r12, r24
    14d8:	08 f0       	brcs	.+2      	; 0x14dc <Tactics+0xf4>
    14da:	6c c1       	rjmp	.+728    	; 0x17b4 <Tactics+0x3cc>
					{
						max = checkers ;
						myLine = line ;
    14dc:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
						myColumn = column ;
    14e0:	91 e0       	ldi	r25, 0x01	; 1
    14e2:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
					setChecker(line,column,mine,table3) ;
					TurnOtherCheckers(line,column,enemy,mine,table3) ;
					checkers = scanCopyChessBoard(mine,table3) ;
					if (max < checkers)
					{
						max = checkers ;
    14e6:	c8 2e       	mov	r12, r24
    14e8:	65 c1       	rjmp	.+714    	; 0x17b4 <Tactics+0x3cc>
						myColumn = column ;
					}
				break;
				
				case 4:
					setChecker(line,column,mine,table4) ;
    14ea:	2b e5       	ldi	r18, 0x5B	; 91
    14ec:	31 e0       	ldi	r19, 0x01	; 1
    14ee:	4d 2f       	mov	r20, r29
    14f0:	61 e0       	ldi	r22, 0x01	; 1
    14f2:	8f 2d       	mov	r24, r15
    14f4:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
					TurnOtherCheckers(line,column,enemy,mine,table4) ;
    14f8:	0b e5       	ldi	r16, 0x5B	; 91
    14fa:	11 e0       	ldi	r17, 0x01	; 1
    14fc:	2d 2f       	mov	r18, r29
    14fe:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    1502:	61 e0       	ldi	r22, 0x01	; 1
    1504:	8f 2d       	mov	r24, r15
    1506:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
					checkers = scanCopyChessBoard(mine,table4) ;
    150a:	b8 01       	movw	r22, r16
    150c:	8d 2f       	mov	r24, r29
    150e:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
					if (max < checkers)
    1512:	c8 16       	cp	r12, r24
    1514:	08 f0       	brcs	.+2      	; 0x1518 <Tactics+0x130>
    1516:	4e c1       	rjmp	.+668    	; 0x17b4 <Tactics+0x3cc>
					{
						max = checkers ;
						myLine = line ;
    1518:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
						myColumn = column ;
    151c:	91 e0       	ldi	r25, 0x01	; 1
    151e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
					setChecker(line,column,mine,table4) ;
					TurnOtherCheckers(line,column,enemy,mine,table4) ;
					checkers = scanCopyChessBoard(mine,table4) ;
					if (max < checkers)
					{
						max = checkers ;
    1522:	c8 2e       	mov	r12, r24
    1524:	47 c1       	rjmp	.+654    	; 0x17b4 <Tactics+0x3cc>
						myColumn = column ;
					}
				break;
				
				case 5:
					setChecker(line,column,mine,table5) ;
    1526:	2b e6       	ldi	r18, 0x6B	; 107
    1528:	31 e0       	ldi	r19, 0x01	; 1
    152a:	4d 2f       	mov	r20, r29
    152c:	61 e0       	ldi	r22, 0x01	; 1
    152e:	8f 2d       	mov	r24, r15
    1530:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
					TurnOtherCheckers(line,column,enemy,mine,table5) ;
    1534:	0b e6       	ldi	r16, 0x6B	; 107
    1536:	11 e0       	ldi	r17, 0x01	; 1
    1538:	2d 2f       	mov	r18, r29
    153a:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    153e:	61 e0       	ldi	r22, 0x01	; 1
    1540:	8f 2d       	mov	r24, r15
    1542:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
					checkers = scanCopyChessBoard(mine,table5) ;
    1546:	b8 01       	movw	r22, r16
    1548:	8d 2f       	mov	r24, r29
    154a:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
					if (max < checkers)
    154e:	c8 16       	cp	r12, r24
    1550:	08 f0       	brcs	.+2      	; 0x1554 <Tactics+0x16c>
    1552:	30 c1       	rjmp	.+608    	; 0x17b4 <Tactics+0x3cc>
					{
						max = checkers ;
						myLine = line ;
    1554:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
						myColumn = column ;
    1558:	91 e0       	ldi	r25, 0x01	; 1
    155a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
					setChecker(line,column,mine,table5) ;
					TurnOtherCheckers(line,column,enemy,mine,table5) ;
					checkers = scanCopyChessBoard(mine,table5) ;
					if (max < checkers)
					{
						max = checkers ;
    155e:	c8 2e       	mov	r12, r24
    1560:	29 c1       	rjmp	.+594    	; 0x17b4 <Tactics+0x3cc>
						myColumn = column ;
					}
				break;
				
				case 6:
					setChecker(line,column,mine,table6) ;
    1562:	24 e8       	ldi	r18, 0x84	; 132
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	4d 2f       	mov	r20, r29
    1568:	61 e0       	ldi	r22, 0x01	; 1
    156a:	8f 2d       	mov	r24, r15
    156c:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
					TurnOtherCheckers(line,column,enemy,mine,table6) ;
    1570:	04 e8       	ldi	r16, 0x84	; 132
    1572:	10 e0       	ldi	r17, 0x00	; 0
    1574:	2d 2f       	mov	r18, r29
    1576:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    157a:	61 e0       	ldi	r22, 0x01	; 1
    157c:	8f 2d       	mov	r24, r15
    157e:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
					checkers = scanCopyChessBoard(mine,table6) ;
    1582:	b8 01       	movw	r22, r16
    1584:	8d 2f       	mov	r24, r29
    1586:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
					if (max < checkers)
    158a:	c8 16       	cp	r12, r24
    158c:	08 f0       	brcs	.+2      	; 0x1590 <Tactics+0x1a8>
    158e:	12 c1       	rjmp	.+548    	; 0x17b4 <Tactics+0x3cc>
					{
						max = checkers ;
						myLine = line ;
    1590:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
						myColumn = column ;
    1594:	91 e0       	ldi	r25, 0x01	; 1
    1596:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
					setChecker(line,column,mine,table6) ;
					TurnOtherCheckers(line,column,enemy,mine,table6) ;
					checkers = scanCopyChessBoard(mine,table6) ;
					if (max < checkers)
					{
						max = checkers ;
    159a:	c8 2e       	mov	r12, r24
    159c:	0b c1       	rjmp	.+534    	; 0x17b4 <Tactics+0x3cc>
						myColumn = column ;
					}
				break;
				
				case 7:
					setChecker(line,column,mine,table7) ;
    159e:	2b ef       	ldi	r18, 0xFB	; 251
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	4d 2f       	mov	r20, r29
    15a4:	61 e0       	ldi	r22, 0x01	; 1
    15a6:	8f 2d       	mov	r24, r15
    15a8:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
					TurnOtherCheckers(line,column,enemy,mine,table7) ;
    15ac:	0b ef       	ldi	r16, 0xFB	; 251
    15ae:	10 e0       	ldi	r17, 0x00	; 0
    15b0:	2d 2f       	mov	r18, r29
    15b2:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    15b6:	61 e0       	ldi	r22, 0x01	; 1
    15b8:	8f 2d       	mov	r24, r15
    15ba:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
					checkers = scanCopyChessBoard(mine,table7) ;
    15be:	b8 01       	movw	r22, r16
    15c0:	8d 2f       	mov	r24, r29
    15c2:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
					if (max < checkers)
    15c6:	c8 16       	cp	r12, r24
    15c8:	08 f0       	brcs	.+2      	; 0x15cc <Tactics+0x1e4>
    15ca:	f4 c0       	rjmp	.+488    	; 0x17b4 <Tactics+0x3cc>
					{
						max = checkers ;
						myLine = line ;
    15cc:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
						myColumn = column ;
    15d0:	91 e0       	ldi	r25, 0x01	; 1
    15d2:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
					setChecker(line,column,mine,table7) ;
					TurnOtherCheckers(line,column,enemy,mine,table7) ;
					checkers = scanCopyChessBoard(mine,table7) ;
					if (max < checkers)
					{
						max = checkers ;
    15d6:	c8 2e       	mov	r12, r24
    15d8:	ed c0       	rjmp	.+474    	; 0x17b4 <Tactics+0x3cc>
						myColumn = column ;
					}
				break;
				
				case 8:
				setChecker(line,column,mine,table8) ;
    15da:	24 e9       	ldi	r18, 0x94	; 148
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	4d 2f       	mov	r20, r29
    15e0:	61 e0       	ldi	r22, 0x01	; 1
    15e2:	8f 2d       	mov	r24, r15
    15e4:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table8) ;
    15e8:	04 e9       	ldi	r16, 0x94	; 148
    15ea:	10 e0       	ldi	r17, 0x00	; 0
    15ec:	2d 2f       	mov	r18, r29
    15ee:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    15f2:	61 e0       	ldi	r22, 0x01	; 1
    15f4:	8f 2d       	mov	r24, r15
    15f6:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table8) ;
    15fa:	b8 01       	movw	r22, r16
    15fc:	8d 2f       	mov	r24, r29
    15fe:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    1602:	c8 16       	cp	r12, r24
    1604:	08 f0       	brcs	.+2      	; 0x1608 <Tactics+0x220>
    1606:	d6 c0       	rjmp	.+428    	; 0x17b4 <Tactics+0x3cc>
				{
					max = checkers ;
					myLine = line ;
    1608:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    160c:	91 e0       	ldi	r25, 0x01	; 1
    160e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table8) ;
				TurnOtherCheckers(line,column,enemy,mine,table8) ;
				checkers = scanCopyChessBoard(mine,table8) ;
				if (max < checkers)
				{
					max = checkers ;
    1612:	c8 2e       	mov	r12, r24
    1614:	cf c0       	rjmp	.+414    	; 0x17b4 <Tactics+0x3cc>
					myColumn = column ;
				}
				break;
				
				case 9:
				setChecker(line,column,mine,table9) ;
    1616:	2b e4       	ldi	r18, 0x4B	; 75
    1618:	31 e0       	ldi	r19, 0x01	; 1
    161a:	4d 2f       	mov	r20, r29
    161c:	61 e0       	ldi	r22, 0x01	; 1
    161e:	8f 2d       	mov	r24, r15
    1620:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
    1624:	0b e4       	ldi	r16, 0x4B	; 75
    1626:	11 e0       	ldi	r17, 0x01	; 1
    1628:	2d 2f       	mov	r18, r29
    162a:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    162e:	61 e0       	ldi	r22, 0x01	; 1
    1630:	8f 2d       	mov	r24, r15
    1632:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table9) ;
    1636:	b8 01       	movw	r22, r16
    1638:	8d 2f       	mov	r24, r29
    163a:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    163e:	c8 16       	cp	r12, r24
    1640:	08 f0       	brcs	.+2      	; 0x1644 <Tactics+0x25c>
    1642:	b8 c0       	rjmp	.+368    	; 0x17b4 <Tactics+0x3cc>
				{
					max = checkers ;
					myLine = line ;
    1644:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    1648:	91 e0       	ldi	r25, 0x01	; 1
    164a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table9) ;
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
				checkers = scanCopyChessBoard(mine,table9) ;
				if (max < checkers)
				{
					max = checkers ;
    164e:	c8 2e       	mov	r12, r24
    1650:	b1 c0       	rjmp	.+354    	; 0x17b4 <Tactics+0x3cc>
					myColumn = column ;
				}
				break;
				
				case 10:
				setChecker(line,column,mine,table10) ;
    1652:	2b e9       	ldi	r18, 0x9B	; 155
    1654:	31 e0       	ldi	r19, 0x01	; 1
    1656:	4d 2f       	mov	r20, r29
    1658:	61 e0       	ldi	r22, 0x01	; 1
    165a:	8f 2d       	mov	r24, r15
    165c:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table10) ;
    1660:	0b e9       	ldi	r16, 0x9B	; 155
    1662:	11 e0       	ldi	r17, 0x01	; 1
    1664:	2d 2f       	mov	r18, r29
    1666:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    166a:	61 e0       	ldi	r22, 0x01	; 1
    166c:	8f 2d       	mov	r24, r15
    166e:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table10) ;
    1672:	b8 01       	movw	r22, r16
    1674:	8d 2f       	mov	r24, r29
    1676:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    167a:	c8 16       	cp	r12, r24
    167c:	08 f0       	brcs	.+2      	; 0x1680 <Tactics+0x298>
    167e:	9a c0       	rjmp	.+308    	; 0x17b4 <Tactics+0x3cc>
				{
					max = checkers ;
					myLine = line ;
    1680:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    1684:	91 e0       	ldi	r25, 0x01	; 1
    1686:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table10) ;
				TurnOtherCheckers(line,column,enemy,mine,table10) ;
				checkers = scanCopyChessBoard(mine,table10) ;
				if (max < checkers)
				{
					max = checkers ;
    168a:	c8 2e       	mov	r12, r24
    168c:	93 c0       	rjmp	.+294    	; 0x17b4 <Tactics+0x3cc>
					myColumn = column ;
				}
				break;
				
				case 11:
				setChecker(line,column,mine,table11) ;
    168e:	2b e3       	ldi	r18, 0x3B	; 59
    1690:	31 e0       	ldi	r19, 0x01	; 1
    1692:	4d 2f       	mov	r20, r29
    1694:	61 e0       	ldi	r22, 0x01	; 1
    1696:	8f 2d       	mov	r24, r15
    1698:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table11) ;
    169c:	0b e3       	ldi	r16, 0x3B	; 59
    169e:	11 e0       	ldi	r17, 0x01	; 1
    16a0:	2d 2f       	mov	r18, r29
    16a2:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    16a6:	61 e0       	ldi	r22, 0x01	; 1
    16a8:	8f 2d       	mov	r24, r15
    16aa:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table11) ;
    16ae:	b8 01       	movw	r22, r16
    16b0:	8d 2f       	mov	r24, r29
    16b2:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    16b6:	c8 16       	cp	r12, r24
    16b8:	08 f0       	brcs	.+2      	; 0x16bc <Tactics+0x2d4>
    16ba:	7c c0       	rjmp	.+248    	; 0x17b4 <Tactics+0x3cc>
				{
					max = checkers ;
					myLine = line ;
    16bc:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    16c0:	91 e0       	ldi	r25, 0x01	; 1
    16c2:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table11) ;
				TurnOtherCheckers(line,column,enemy,mine,table11) ;
				checkers = scanCopyChessBoard(mine,table11) ;
				if (max < checkers)
				{
					max = checkers ;
    16c6:	c8 2e       	mov	r12, r24
    16c8:	75 c0       	rjmp	.+234    	; 0x17b4 <Tactics+0x3cc>
					myColumn = column ;
				}
				break;
				
				case 12:
				setChecker(line,column,mine,table12) ;
    16ca:	2c ea       	ldi	r18, 0xAC	; 172
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	4d 2f       	mov	r20, r29
    16d0:	61 e0       	ldi	r22, 0x01	; 1
    16d2:	8f 2d       	mov	r24, r15
    16d4:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table12) ;
    16d8:	0c ea       	ldi	r16, 0xAC	; 172
    16da:	10 e0       	ldi	r17, 0x00	; 0
    16dc:	2d 2f       	mov	r18, r29
    16de:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    16e2:	61 e0       	ldi	r22, 0x01	; 1
    16e4:	8f 2d       	mov	r24, r15
    16e6:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table12) ;
    16ea:	b8 01       	movw	r22, r16
    16ec:	8d 2f       	mov	r24, r29
    16ee:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    16f2:	c8 16       	cp	r12, r24
    16f4:	08 f0       	brcs	.+2      	; 0x16f8 <Tactics+0x310>
    16f6:	5e c0       	rjmp	.+188    	; 0x17b4 <Tactics+0x3cc>
				{
					max = checkers ;
					myLine = line ;
    16f8:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    16fc:	91 e0       	ldi	r25, 0x01	; 1
    16fe:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table12) ;
				TurnOtherCheckers(line,column,enemy,mine,table12) ;
				checkers = scanCopyChessBoard(mine,table12) ;
				if (max < checkers)
				{
					max = checkers ;
    1702:	c8 2e       	mov	r12, r24
    1704:	57 c0       	rjmp	.+174    	; 0x17b4 <Tactics+0x3cc>
					myColumn = column ;
				}
				break;
				
				case 13:
				setChecker(line,column,mine,table13) ;
    1706:	2b ed       	ldi	r18, 0xDB	; 219
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	4d 2f       	mov	r20, r29
    170c:	61 e0       	ldi	r22, 0x01	; 1
    170e:	8f 2d       	mov	r24, r15
    1710:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table13) ;
    1714:	0b ed       	ldi	r16, 0xDB	; 219
    1716:	10 e0       	ldi	r17, 0x00	; 0
    1718:	2d 2f       	mov	r18, r29
    171a:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    171e:	61 e0       	ldi	r22, 0x01	; 1
    1720:	8f 2d       	mov	r24, r15
    1722:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table13) ;
    1726:	b8 01       	movw	r22, r16
    1728:	8d 2f       	mov	r24, r29
    172a:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    172e:	c8 16       	cp	r12, r24
    1730:	08 f0       	brcs	.+2      	; 0x1734 <Tactics+0x34c>
    1732:	40 c0       	rjmp	.+128    	; 0x17b4 <Tactics+0x3cc>
				{
					max = checkers ;
					myLine = line ;
    1734:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    1738:	91 e0       	ldi	r25, 0x01	; 1
    173a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table13) ;
				TurnOtherCheckers(line,column,enemy,mine,table13) ;
				checkers = scanCopyChessBoard(mine,table13) ;
				if (max < checkers)
				{
					max = checkers ;
    173e:	c8 2e       	mov	r12, r24
    1740:	39 c0       	rjmp	.+114    	; 0x17b4 <Tactics+0x3cc>
					myColumn = column ;
				}
				break;
				
				case 14:
				setChecker(line,column,mine,table14) ;
    1742:	2b e2       	ldi	r18, 0x2B	; 43
    1744:	31 e0       	ldi	r19, 0x01	; 1
    1746:	4d 2f       	mov	r20, r29
    1748:	61 e0       	ldi	r22, 0x01	; 1
    174a:	8f 2d       	mov	r24, r15
    174c:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table14) ;
    1750:	0b e2       	ldi	r16, 0x2B	; 43
    1752:	11 e0       	ldi	r17, 0x01	; 1
    1754:	2d 2f       	mov	r18, r29
    1756:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    175a:	61 e0       	ldi	r22, 0x01	; 1
    175c:	8f 2d       	mov	r24, r15
    175e:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table14) ;
    1762:	b8 01       	movw	r22, r16
    1764:	8d 2f       	mov	r24, r29
    1766:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    176a:	c8 16       	cp	r12, r24
    176c:	18 f5       	brcc	.+70     	; 0x17b4 <Tactics+0x3cc>
				{
					max = checkers ;
					myLine = line ;
    176e:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    1772:	91 e0       	ldi	r25, 0x01	; 1
    1774:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table14) ;
				TurnOtherCheckers(line,column,enemy,mine,table14) ;
				checkers = scanCopyChessBoard(mine,table14) ;
				if (max < checkers)
				{
					max = checkers ;
    1778:	c8 2e       	mov	r12, r24
    177a:	1c c0       	rjmp	.+56     	; 0x17b4 <Tactics+0x3cc>
					myColumn = column ;
				}
				break;
				
				default:
				setChecker(line,column,mine,table15) ;
    177c:	2b e0       	ldi	r18, 0x0B	; 11
    177e:	31 e0       	ldi	r19, 0x01	; 1
    1780:	4d 2f       	mov	r20, r29
    1782:	61 e0       	ldi	r22, 0x01	; 1
    1784:	8f 2d       	mov	r24, r15
    1786:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table15) ;
    178a:	0b e0       	ldi	r16, 0x0B	; 11
    178c:	11 e0       	ldi	r17, 0x01	; 1
    178e:	2d 2f       	mov	r18, r29
    1790:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    1794:	61 e0       	ldi	r22, 0x01	; 1
    1796:	8f 2d       	mov	r24, r15
    1798:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table15) ;
    179c:	b8 01       	movw	r22, r16
    179e:	8d 2f       	mov	r24, r29
    17a0:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    17a4:	c8 16       	cp	r12, r24
    17a6:	30 f4       	brcc	.+12     	; 0x17b4 <Tactics+0x3cc>
				{
					max = checkers ;
					myLine = line ;
    17a8:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    17ac:	91 e0       	ldi	r25, 0x01	; 1
    17ae:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table15) ;
				TurnOtherCheckers(line,column,enemy,mine,table15) ;
				checkers = scanCopyChessBoard(mine,table15) ;
				if (max < checkers)
				{
					max = checkers ;
    17b2:	c8 2e       	mov	r12, r24
		}
		
		/* Second valid in this line */
		temp = buffer & 0b00000010 ;
		temp = (temp >> 1) ;
		if (temp == 1)
    17b4:	e1 fe       	sbrs	r14, 1
    17b6:	cc c1       	rjmp	.+920    	; 0x1b50 <Tactics+0x768>
		{
			column = 2 ;
			count++ ;
    17b8:	cf 5f       	subi	r28, 0xFF	; 255
			switch(count)
    17ba:	8c 2f       	mov	r24, r28
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	fc 01       	movw	r30, r24
    17c0:	31 97       	sbiw	r30, 0x01	; 1
    17c2:	ee 30       	cpi	r30, 0x0E	; 14
    17c4:	f1 05       	cpc	r31, r1
    17c6:	08 f0       	brcs	.+2      	; 0x17ca <Tactics+0x3e2>
    17c8:	a7 c1       	rjmp	.+846    	; 0x1b18 <Tactics+0x730>
    17ca:	e6 5b       	subi	r30, 0xB6	; 182
    17cc:	ff 4f       	sbci	r31, 0xFF	; 255
    17ce:	0c 94 f8 1a 	jmp	0x35f0	; 0x35f0 <__tablejump2__>
			{
				case 1:
				setChecker(line,column,mine,table1) ;
    17d2:	2b ee       	ldi	r18, 0xEB	; 235
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	4d 2f       	mov	r20, r29
    17d8:	62 e0       	ldi	r22, 0x02	; 2
    17da:	8f 2d       	mov	r24, r15
    17dc:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table1) ;
    17e0:	0b ee       	ldi	r16, 0xEB	; 235
    17e2:	10 e0       	ldi	r17, 0x00	; 0
    17e4:	2d 2f       	mov	r18, r29
    17e6:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    17ea:	62 e0       	ldi	r22, 0x02	; 2
    17ec:	8f 2d       	mov	r24, r15
    17ee:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table1) ;
    17f2:	b8 01       	movw	r22, r16
    17f4:	8d 2f       	mov	r24, r29
    17f6:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    17fa:	c8 16       	cp	r12, r24
    17fc:	08 f0       	brcs	.+2      	; 0x1800 <Tactics+0x418>
    17fe:	a8 c1       	rjmp	.+848    	; 0x1b50 <Tactics+0x768>
				{
					max = checkers ;
					myLine = line ;
    1800:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    1804:	92 e0       	ldi	r25, 0x02	; 2
    1806:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table1) ;
				TurnOtherCheckers(line,column,enemy,mine,table1) ;
				checkers = scanCopyChessBoard(mine,table1) ;
				if (max < checkers)
				{
					max = checkers ;
    180a:	c8 2e       	mov	r12, r24
    180c:	a1 c1       	rjmp	.+834    	; 0x1b50 <Tactics+0x768>
					myColumn = column ;
				}
				break;
				
				case 2:
				setChecker(line,column,mine,table2) ;
    180e:	2b e8       	ldi	r18, 0x8B	; 139
    1810:	31 e0       	ldi	r19, 0x01	; 1
    1812:	4d 2f       	mov	r20, r29
    1814:	62 e0       	ldi	r22, 0x02	; 2
    1816:	8f 2d       	mov	r24, r15
    1818:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table2) ;
    181c:	0b e8       	ldi	r16, 0x8B	; 139
    181e:	11 e0       	ldi	r17, 0x01	; 1
    1820:	2d 2f       	mov	r18, r29
    1822:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    1826:	62 e0       	ldi	r22, 0x02	; 2
    1828:	8f 2d       	mov	r24, r15
    182a:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table2) ;
    182e:	b8 01       	movw	r22, r16
    1830:	8d 2f       	mov	r24, r29
    1832:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    1836:	c8 16       	cp	r12, r24
    1838:	08 f0       	brcs	.+2      	; 0x183c <Tactics+0x454>
    183a:	8a c1       	rjmp	.+788    	; 0x1b50 <Tactics+0x768>
				{
					max = checkers ;
					myLine = line ;
    183c:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    1840:	92 e0       	ldi	r25, 0x02	; 2
    1842:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table2) ;
				TurnOtherCheckers(line,column,enemy,mine,table2) ;
				checkers = scanCopyChessBoard(mine,table2) ;
				if (max < checkers)
				{
					max = checkers ;
    1846:	c8 2e       	mov	r12, r24
    1848:	83 c1       	rjmp	.+774    	; 0x1b50 <Tactics+0x768>
					myColumn = column ;
				}
				break;
				
				case 3:
				setChecker(line,column,mine,table3) ;
    184a:	2c e6       	ldi	r18, 0x6C	; 108
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	4d 2f       	mov	r20, r29
    1850:	62 e0       	ldi	r22, 0x02	; 2
    1852:	8f 2d       	mov	r24, r15
    1854:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table3) ;
    1858:	0c e6       	ldi	r16, 0x6C	; 108
    185a:	10 e0       	ldi	r17, 0x00	; 0
    185c:	2d 2f       	mov	r18, r29
    185e:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    1862:	62 e0       	ldi	r22, 0x02	; 2
    1864:	8f 2d       	mov	r24, r15
    1866:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table3) ;
    186a:	b8 01       	movw	r22, r16
    186c:	8d 2f       	mov	r24, r29
    186e:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    1872:	c8 16       	cp	r12, r24
    1874:	08 f0       	brcs	.+2      	; 0x1878 <Tactics+0x490>
    1876:	6c c1       	rjmp	.+728    	; 0x1b50 <Tactics+0x768>
				{
					max = checkers ;
					myLine = line ;
    1878:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    187c:	92 e0       	ldi	r25, 0x02	; 2
    187e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table3) ;
				TurnOtherCheckers(line,column,enemy,mine,table3) ;
				checkers = scanCopyChessBoard(mine,table3) ;
				if (max < checkers)
				{
					max = checkers ;
    1882:	c8 2e       	mov	r12, r24
    1884:	65 c1       	rjmp	.+714    	; 0x1b50 <Tactics+0x768>
					myColumn = column ;
				}
				break;
				
				case 4:
				setChecker(line,column,mine,table4) ;
    1886:	2b e5       	ldi	r18, 0x5B	; 91
    1888:	31 e0       	ldi	r19, 0x01	; 1
    188a:	4d 2f       	mov	r20, r29
    188c:	62 e0       	ldi	r22, 0x02	; 2
    188e:	8f 2d       	mov	r24, r15
    1890:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table4) ;
    1894:	0b e5       	ldi	r16, 0x5B	; 91
    1896:	11 e0       	ldi	r17, 0x01	; 1
    1898:	2d 2f       	mov	r18, r29
    189a:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    189e:	62 e0       	ldi	r22, 0x02	; 2
    18a0:	8f 2d       	mov	r24, r15
    18a2:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table4) ;
    18a6:	b8 01       	movw	r22, r16
    18a8:	8d 2f       	mov	r24, r29
    18aa:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    18ae:	c8 16       	cp	r12, r24
    18b0:	08 f0       	brcs	.+2      	; 0x18b4 <Tactics+0x4cc>
    18b2:	4e c1       	rjmp	.+668    	; 0x1b50 <Tactics+0x768>
				{
					max = checkers ;
					myLine = line ;
    18b4:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    18b8:	92 e0       	ldi	r25, 0x02	; 2
    18ba:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table4) ;
				TurnOtherCheckers(line,column,enemy,mine,table4) ;
				checkers = scanCopyChessBoard(mine,table4) ;
				if (max < checkers)
				{
					max = checkers ;
    18be:	c8 2e       	mov	r12, r24
    18c0:	47 c1       	rjmp	.+654    	; 0x1b50 <Tactics+0x768>
					myColumn = column ;
				}
				break;
				
				case 5:
				setChecker(line,column,mine,table5) ;
    18c2:	2b e6       	ldi	r18, 0x6B	; 107
    18c4:	31 e0       	ldi	r19, 0x01	; 1
    18c6:	4d 2f       	mov	r20, r29
    18c8:	62 e0       	ldi	r22, 0x02	; 2
    18ca:	8f 2d       	mov	r24, r15
    18cc:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table5) ;
    18d0:	0b e6       	ldi	r16, 0x6B	; 107
    18d2:	11 e0       	ldi	r17, 0x01	; 1
    18d4:	2d 2f       	mov	r18, r29
    18d6:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    18da:	62 e0       	ldi	r22, 0x02	; 2
    18dc:	8f 2d       	mov	r24, r15
    18de:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table5) ;
    18e2:	b8 01       	movw	r22, r16
    18e4:	8d 2f       	mov	r24, r29
    18e6:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    18ea:	c8 16       	cp	r12, r24
    18ec:	08 f0       	brcs	.+2      	; 0x18f0 <Tactics+0x508>
    18ee:	30 c1       	rjmp	.+608    	; 0x1b50 <Tactics+0x768>
				{
					max = checkers ;
					myLine = line ;
    18f0:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    18f4:	92 e0       	ldi	r25, 0x02	; 2
    18f6:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table5) ;
				TurnOtherCheckers(line,column,enemy,mine,table5) ;
				checkers = scanCopyChessBoard(mine,table5) ;
				if (max < checkers)
				{
					max = checkers ;
    18fa:	c8 2e       	mov	r12, r24
    18fc:	29 c1       	rjmp	.+594    	; 0x1b50 <Tactics+0x768>
					myColumn = column ;
				}
				break;
				
				case 6:
				setChecker(line,column,mine,table6) ;
    18fe:	24 e8       	ldi	r18, 0x84	; 132
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	4d 2f       	mov	r20, r29
    1904:	62 e0       	ldi	r22, 0x02	; 2
    1906:	8f 2d       	mov	r24, r15
    1908:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table6) ;
    190c:	04 e8       	ldi	r16, 0x84	; 132
    190e:	10 e0       	ldi	r17, 0x00	; 0
    1910:	2d 2f       	mov	r18, r29
    1912:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    1916:	62 e0       	ldi	r22, 0x02	; 2
    1918:	8f 2d       	mov	r24, r15
    191a:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table6) ;
    191e:	b8 01       	movw	r22, r16
    1920:	8d 2f       	mov	r24, r29
    1922:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    1926:	c8 16       	cp	r12, r24
    1928:	08 f0       	brcs	.+2      	; 0x192c <Tactics+0x544>
    192a:	12 c1       	rjmp	.+548    	; 0x1b50 <Tactics+0x768>
				{
					max = checkers ;
					myLine = line ;
    192c:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    1930:	92 e0       	ldi	r25, 0x02	; 2
    1932:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table6) ;
				TurnOtherCheckers(line,column,enemy,mine,table6) ;
				checkers = scanCopyChessBoard(mine,table6) ;
				if (max < checkers)
				{
					max = checkers ;
    1936:	c8 2e       	mov	r12, r24
    1938:	0b c1       	rjmp	.+534    	; 0x1b50 <Tactics+0x768>
					myColumn = column ;
				}
				break;
				
				case 7:
				setChecker(line,column,mine,table7) ;
    193a:	2b ef       	ldi	r18, 0xFB	; 251
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	4d 2f       	mov	r20, r29
    1940:	62 e0       	ldi	r22, 0x02	; 2
    1942:	8f 2d       	mov	r24, r15
    1944:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table7) ;
    1948:	0b ef       	ldi	r16, 0xFB	; 251
    194a:	10 e0       	ldi	r17, 0x00	; 0
    194c:	2d 2f       	mov	r18, r29
    194e:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    1952:	62 e0       	ldi	r22, 0x02	; 2
    1954:	8f 2d       	mov	r24, r15
    1956:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table7) ;
    195a:	b8 01       	movw	r22, r16
    195c:	8d 2f       	mov	r24, r29
    195e:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    1962:	c8 16       	cp	r12, r24
    1964:	08 f0       	brcs	.+2      	; 0x1968 <Tactics+0x580>
    1966:	f4 c0       	rjmp	.+488    	; 0x1b50 <Tactics+0x768>
				{
					max = checkers ;
					myLine = line ;
    1968:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    196c:	92 e0       	ldi	r25, 0x02	; 2
    196e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table7) ;
				TurnOtherCheckers(line,column,enemy,mine,table7) ;
				checkers = scanCopyChessBoard(mine,table7) ;
				if (max < checkers)
				{
					max = checkers ;
    1972:	c8 2e       	mov	r12, r24
    1974:	ed c0       	rjmp	.+474    	; 0x1b50 <Tactics+0x768>
					myColumn = column ;
				}
				break;
				
				case 8:
				setChecker(line,column,mine,table8) ;
    1976:	24 e9       	ldi	r18, 0x94	; 148
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	4d 2f       	mov	r20, r29
    197c:	62 e0       	ldi	r22, 0x02	; 2
    197e:	8f 2d       	mov	r24, r15
    1980:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table8) ;
    1984:	04 e9       	ldi	r16, 0x94	; 148
    1986:	10 e0       	ldi	r17, 0x00	; 0
    1988:	2d 2f       	mov	r18, r29
    198a:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    198e:	62 e0       	ldi	r22, 0x02	; 2
    1990:	8f 2d       	mov	r24, r15
    1992:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table8) ;
    1996:	b8 01       	movw	r22, r16
    1998:	8d 2f       	mov	r24, r29
    199a:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    199e:	c8 16       	cp	r12, r24
    19a0:	08 f0       	brcs	.+2      	; 0x19a4 <Tactics+0x5bc>
    19a2:	d6 c0       	rjmp	.+428    	; 0x1b50 <Tactics+0x768>
				{
					max = checkers ;
					myLine = line ;
    19a4:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    19a8:	92 e0       	ldi	r25, 0x02	; 2
    19aa:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table8) ;
				TurnOtherCheckers(line,column,enemy,mine,table8) ;
				checkers = scanCopyChessBoard(mine,table8) ;
				if (max < checkers)
				{
					max = checkers ;
    19ae:	c8 2e       	mov	r12, r24
    19b0:	cf c0       	rjmp	.+414    	; 0x1b50 <Tactics+0x768>
					myColumn = column ;
				}
				break;
				
				case 9:
				setChecker(line,column,mine,table9) ;
    19b2:	2b e4       	ldi	r18, 0x4B	; 75
    19b4:	31 e0       	ldi	r19, 0x01	; 1
    19b6:	4d 2f       	mov	r20, r29
    19b8:	62 e0       	ldi	r22, 0x02	; 2
    19ba:	8f 2d       	mov	r24, r15
    19bc:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
    19c0:	0b e4       	ldi	r16, 0x4B	; 75
    19c2:	11 e0       	ldi	r17, 0x01	; 1
    19c4:	2d 2f       	mov	r18, r29
    19c6:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    19ca:	62 e0       	ldi	r22, 0x02	; 2
    19cc:	8f 2d       	mov	r24, r15
    19ce:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table9) ;
    19d2:	b8 01       	movw	r22, r16
    19d4:	8d 2f       	mov	r24, r29
    19d6:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    19da:	c8 16       	cp	r12, r24
    19dc:	08 f0       	brcs	.+2      	; 0x19e0 <Tactics+0x5f8>
    19de:	b8 c0       	rjmp	.+368    	; 0x1b50 <Tactics+0x768>
				{
					max = checkers ;
					myLine = line ;
    19e0:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    19e4:	92 e0       	ldi	r25, 0x02	; 2
    19e6:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table9) ;
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
				checkers = scanCopyChessBoard(mine,table9) ;
				if (max < checkers)
				{
					max = checkers ;
    19ea:	c8 2e       	mov	r12, r24
    19ec:	b1 c0       	rjmp	.+354    	; 0x1b50 <Tactics+0x768>
					myColumn = column ;
				}
				break;
				
				case 10:
				setChecker(line,column,mine,table10) ;
    19ee:	2b e9       	ldi	r18, 0x9B	; 155
    19f0:	31 e0       	ldi	r19, 0x01	; 1
    19f2:	4d 2f       	mov	r20, r29
    19f4:	62 e0       	ldi	r22, 0x02	; 2
    19f6:	8f 2d       	mov	r24, r15
    19f8:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table10) ;
    19fc:	0b e9       	ldi	r16, 0x9B	; 155
    19fe:	11 e0       	ldi	r17, 0x01	; 1
    1a00:	2d 2f       	mov	r18, r29
    1a02:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    1a06:	62 e0       	ldi	r22, 0x02	; 2
    1a08:	8f 2d       	mov	r24, r15
    1a0a:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table10) ;
    1a0e:	b8 01       	movw	r22, r16
    1a10:	8d 2f       	mov	r24, r29
    1a12:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    1a16:	c8 16       	cp	r12, r24
    1a18:	08 f0       	brcs	.+2      	; 0x1a1c <Tactics+0x634>
    1a1a:	9a c0       	rjmp	.+308    	; 0x1b50 <Tactics+0x768>
				{
					max = checkers ;
					myLine = line ;
    1a1c:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    1a20:	92 e0       	ldi	r25, 0x02	; 2
    1a22:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table10) ;
				TurnOtherCheckers(line,column,enemy,mine,table10) ;
				checkers = scanCopyChessBoard(mine,table10) ;
				if (max < checkers)
				{
					max = checkers ;
    1a26:	c8 2e       	mov	r12, r24
    1a28:	93 c0       	rjmp	.+294    	; 0x1b50 <Tactics+0x768>
					myColumn = column ;
				}
				break;
				
				case 11:
				setChecker(line,column,mine,table11) ;
    1a2a:	2b e3       	ldi	r18, 0x3B	; 59
    1a2c:	31 e0       	ldi	r19, 0x01	; 1
    1a2e:	4d 2f       	mov	r20, r29
    1a30:	62 e0       	ldi	r22, 0x02	; 2
    1a32:	8f 2d       	mov	r24, r15
    1a34:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table11) ;
    1a38:	0b e3       	ldi	r16, 0x3B	; 59
    1a3a:	11 e0       	ldi	r17, 0x01	; 1
    1a3c:	2d 2f       	mov	r18, r29
    1a3e:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    1a42:	62 e0       	ldi	r22, 0x02	; 2
    1a44:	8f 2d       	mov	r24, r15
    1a46:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table11) ;
    1a4a:	b8 01       	movw	r22, r16
    1a4c:	8d 2f       	mov	r24, r29
    1a4e:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    1a52:	c8 16       	cp	r12, r24
    1a54:	08 f0       	brcs	.+2      	; 0x1a58 <Tactics+0x670>
    1a56:	7c c0       	rjmp	.+248    	; 0x1b50 <Tactics+0x768>
				{
					max = checkers ;
					myLine = line ;
    1a58:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    1a5c:	92 e0       	ldi	r25, 0x02	; 2
    1a5e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table11) ;
				TurnOtherCheckers(line,column,enemy,mine,table11) ;
				checkers = scanCopyChessBoard(mine,table11) ;
				if (max < checkers)
				{
					max = checkers ;
    1a62:	c8 2e       	mov	r12, r24
    1a64:	75 c0       	rjmp	.+234    	; 0x1b50 <Tactics+0x768>
					myColumn = column ;
				}
				break;
				
				case 12:
				setChecker(line,column,mine,table12) ;
    1a66:	2c ea       	ldi	r18, 0xAC	; 172
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	4d 2f       	mov	r20, r29
    1a6c:	62 e0       	ldi	r22, 0x02	; 2
    1a6e:	8f 2d       	mov	r24, r15
    1a70:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table12) ;
    1a74:	0c ea       	ldi	r16, 0xAC	; 172
    1a76:	10 e0       	ldi	r17, 0x00	; 0
    1a78:	2d 2f       	mov	r18, r29
    1a7a:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    1a7e:	62 e0       	ldi	r22, 0x02	; 2
    1a80:	8f 2d       	mov	r24, r15
    1a82:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table12) ;
    1a86:	b8 01       	movw	r22, r16
    1a88:	8d 2f       	mov	r24, r29
    1a8a:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    1a8e:	c8 16       	cp	r12, r24
    1a90:	08 f0       	brcs	.+2      	; 0x1a94 <Tactics+0x6ac>
    1a92:	5e c0       	rjmp	.+188    	; 0x1b50 <Tactics+0x768>
				{
					max = checkers ;
					myLine = line ;
    1a94:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    1a98:	92 e0       	ldi	r25, 0x02	; 2
    1a9a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table12) ;
				TurnOtherCheckers(line,column,enemy,mine,table12) ;
				checkers = scanCopyChessBoard(mine,table12) ;
				if (max < checkers)
				{
					max = checkers ;
    1a9e:	c8 2e       	mov	r12, r24
    1aa0:	57 c0       	rjmp	.+174    	; 0x1b50 <Tactics+0x768>
					myColumn = column ;
				}
				break;
				
				case 13:
				setChecker(line,column,mine,table13) ;
    1aa2:	2b ed       	ldi	r18, 0xDB	; 219
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	4d 2f       	mov	r20, r29
    1aa8:	62 e0       	ldi	r22, 0x02	; 2
    1aaa:	8f 2d       	mov	r24, r15
    1aac:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table13) ;
    1ab0:	0b ed       	ldi	r16, 0xDB	; 219
    1ab2:	10 e0       	ldi	r17, 0x00	; 0
    1ab4:	2d 2f       	mov	r18, r29
    1ab6:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    1aba:	62 e0       	ldi	r22, 0x02	; 2
    1abc:	8f 2d       	mov	r24, r15
    1abe:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table13) ;
    1ac2:	b8 01       	movw	r22, r16
    1ac4:	8d 2f       	mov	r24, r29
    1ac6:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    1aca:	c8 16       	cp	r12, r24
    1acc:	08 f0       	brcs	.+2      	; 0x1ad0 <Tactics+0x6e8>
    1ace:	40 c0       	rjmp	.+128    	; 0x1b50 <Tactics+0x768>
				{
					max = checkers ;
					myLine = line ;
    1ad0:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    1ad4:	92 e0       	ldi	r25, 0x02	; 2
    1ad6:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table13) ;
				TurnOtherCheckers(line,column,enemy,mine,table13) ;
				checkers = scanCopyChessBoard(mine,table13) ;
				if (max < checkers)
				{
					max = checkers ;
    1ada:	c8 2e       	mov	r12, r24
    1adc:	39 c0       	rjmp	.+114    	; 0x1b50 <Tactics+0x768>
					myColumn = column ;
				}
				break;
				
				case 14:
				setChecker(line,column,mine,table14) ;
    1ade:	2b e2       	ldi	r18, 0x2B	; 43
    1ae0:	31 e0       	ldi	r19, 0x01	; 1
    1ae2:	4d 2f       	mov	r20, r29
    1ae4:	62 e0       	ldi	r22, 0x02	; 2
    1ae6:	8f 2d       	mov	r24, r15
    1ae8:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table14) ;
    1aec:	0b e2       	ldi	r16, 0x2B	; 43
    1aee:	11 e0       	ldi	r17, 0x01	; 1
    1af0:	2d 2f       	mov	r18, r29
    1af2:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    1af6:	62 e0       	ldi	r22, 0x02	; 2
    1af8:	8f 2d       	mov	r24, r15
    1afa:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table14) ;
    1afe:	b8 01       	movw	r22, r16
    1b00:	8d 2f       	mov	r24, r29
    1b02:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    1b06:	c8 16       	cp	r12, r24
    1b08:	18 f5       	brcc	.+70     	; 0x1b50 <Tactics+0x768>
				{
					max = checkers ;
					myLine = line ;
    1b0a:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    1b0e:	92 e0       	ldi	r25, 0x02	; 2
    1b10:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table14) ;
				TurnOtherCheckers(line,column,enemy,mine,table14) ;
				checkers = scanCopyChessBoard(mine,table14) ;
				if (max < checkers)
				{
					max = checkers ;
    1b14:	c8 2e       	mov	r12, r24
    1b16:	1c c0       	rjmp	.+56     	; 0x1b50 <Tactics+0x768>
					myColumn = column ;
				}
				break;
				
				default:
				setChecker(line,column,mine,table15) ;
    1b18:	2b e0       	ldi	r18, 0x0B	; 11
    1b1a:	31 e0       	ldi	r19, 0x01	; 1
    1b1c:	4d 2f       	mov	r20, r29
    1b1e:	62 e0       	ldi	r22, 0x02	; 2
    1b20:	8f 2d       	mov	r24, r15
    1b22:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table15) ;
    1b26:	0b e0       	ldi	r16, 0x0B	; 11
    1b28:	11 e0       	ldi	r17, 0x01	; 1
    1b2a:	2d 2f       	mov	r18, r29
    1b2c:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    1b30:	62 e0       	ldi	r22, 0x02	; 2
    1b32:	8f 2d       	mov	r24, r15
    1b34:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table15) ;
    1b38:	b8 01       	movw	r22, r16
    1b3a:	8d 2f       	mov	r24, r29
    1b3c:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    1b40:	c8 16       	cp	r12, r24
    1b42:	30 f4       	brcc	.+12     	; 0x1b50 <Tactics+0x768>
				{
					max = checkers ;
					myLine = line ;
    1b44:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    1b48:	92 e0       	ldi	r25, 0x02	; 2
    1b4a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table15) ;
				TurnOtherCheckers(line,column,enemy,mine,table15) ;
				checkers = scanCopyChessBoard(mine,table15) ;
				if (max < checkers)
				{
					max = checkers ;
    1b4e:	c8 2e       	mov	r12, r24
			
		}
		/* Third valid move in this line */
		temp = buffer & 0b00000100 ;
		temp = (temp >> 2) ;
		if (temp == 1)
    1b50:	e2 fe       	sbrs	r14, 2
    1b52:	cc c1       	rjmp	.+920    	; 0x1eec <Tactics+0xb04>
		{
			
			column = 3 ;
			count++ ;
    1b54:	cf 5f       	subi	r28, 0xFF	; 255
			switch(count)
    1b56:	8c 2f       	mov	r24, r28
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	fc 01       	movw	r30, r24
    1b5c:	31 97       	sbiw	r30, 0x01	; 1
    1b5e:	ee 30       	cpi	r30, 0x0E	; 14
    1b60:	f1 05       	cpc	r31, r1
    1b62:	08 f0       	brcs	.+2      	; 0x1b66 <Tactics+0x77e>
    1b64:	a7 c1       	rjmp	.+846    	; 0x1eb4 <Tactics+0xacc>
    1b66:	e8 5a       	subi	r30, 0xA8	; 168
    1b68:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6a:	0c 94 f8 1a 	jmp	0x35f0	; 0x35f0 <__tablejump2__>
			{
				case 1:
				setChecker(line,column,mine,table1) ;
    1b6e:	2b ee       	ldi	r18, 0xEB	; 235
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	4d 2f       	mov	r20, r29
    1b74:	63 e0       	ldi	r22, 0x03	; 3
    1b76:	8f 2d       	mov	r24, r15
    1b78:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table1) ;
    1b7c:	0b ee       	ldi	r16, 0xEB	; 235
    1b7e:	10 e0       	ldi	r17, 0x00	; 0
    1b80:	2d 2f       	mov	r18, r29
    1b82:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    1b86:	63 e0       	ldi	r22, 0x03	; 3
    1b88:	8f 2d       	mov	r24, r15
    1b8a:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table1) ;
    1b8e:	b8 01       	movw	r22, r16
    1b90:	8d 2f       	mov	r24, r29
    1b92:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    1b96:	c8 16       	cp	r12, r24
    1b98:	08 f0       	brcs	.+2      	; 0x1b9c <Tactics+0x7b4>
    1b9a:	a8 c1       	rjmp	.+848    	; 0x1eec <Tactics+0xb04>
				{
					max = checkers ;
					myLine = line ;
    1b9c:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    1ba0:	93 e0       	ldi	r25, 0x03	; 3
    1ba2:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table1) ;
				TurnOtherCheckers(line,column,enemy,mine,table1) ;
				checkers = scanCopyChessBoard(mine,table1) ;
				if (max < checkers)
				{
					max = checkers ;
    1ba6:	c8 2e       	mov	r12, r24
    1ba8:	a1 c1       	rjmp	.+834    	; 0x1eec <Tactics+0xb04>
					myColumn = column ;
				}
				break;
				
				case 2:
				setChecker(line,column,mine,table2) ;
    1baa:	2b e8       	ldi	r18, 0x8B	; 139
    1bac:	31 e0       	ldi	r19, 0x01	; 1
    1bae:	4d 2f       	mov	r20, r29
    1bb0:	63 e0       	ldi	r22, 0x03	; 3
    1bb2:	8f 2d       	mov	r24, r15
    1bb4:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table2) ;
    1bb8:	0b e8       	ldi	r16, 0x8B	; 139
    1bba:	11 e0       	ldi	r17, 0x01	; 1
    1bbc:	2d 2f       	mov	r18, r29
    1bbe:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    1bc2:	63 e0       	ldi	r22, 0x03	; 3
    1bc4:	8f 2d       	mov	r24, r15
    1bc6:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table2) ;
    1bca:	b8 01       	movw	r22, r16
    1bcc:	8d 2f       	mov	r24, r29
    1bce:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    1bd2:	c8 16       	cp	r12, r24
    1bd4:	08 f0       	brcs	.+2      	; 0x1bd8 <Tactics+0x7f0>
    1bd6:	8a c1       	rjmp	.+788    	; 0x1eec <Tactics+0xb04>
				{
					max = checkers ;
					myLine = line ;
    1bd8:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    1bdc:	93 e0       	ldi	r25, 0x03	; 3
    1bde:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table2) ;
				TurnOtherCheckers(line,column,enemy,mine,table2) ;
				checkers = scanCopyChessBoard(mine,table2) ;
				if (max < checkers)
				{
					max = checkers ;
    1be2:	c8 2e       	mov	r12, r24
    1be4:	83 c1       	rjmp	.+774    	; 0x1eec <Tactics+0xb04>
					myColumn = column ;
				}
				break;
				
				case 3:
				setChecker(line,column,mine,table3) ;
    1be6:	2c e6       	ldi	r18, 0x6C	; 108
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	4d 2f       	mov	r20, r29
    1bec:	63 e0       	ldi	r22, 0x03	; 3
    1bee:	8f 2d       	mov	r24, r15
    1bf0:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table3) ;
    1bf4:	0c e6       	ldi	r16, 0x6C	; 108
    1bf6:	10 e0       	ldi	r17, 0x00	; 0
    1bf8:	2d 2f       	mov	r18, r29
    1bfa:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    1bfe:	63 e0       	ldi	r22, 0x03	; 3
    1c00:	8f 2d       	mov	r24, r15
    1c02:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table3) ;
    1c06:	b8 01       	movw	r22, r16
    1c08:	8d 2f       	mov	r24, r29
    1c0a:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    1c0e:	c8 16       	cp	r12, r24
    1c10:	08 f0       	brcs	.+2      	; 0x1c14 <Tactics+0x82c>
    1c12:	6c c1       	rjmp	.+728    	; 0x1eec <Tactics+0xb04>
				{
					max = checkers ;
					myLine = line ;
    1c14:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    1c18:	93 e0       	ldi	r25, 0x03	; 3
    1c1a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table3) ;
				TurnOtherCheckers(line,column,enemy,mine,table3) ;
				checkers = scanCopyChessBoard(mine,table3) ;
				if (max < checkers)
				{
					max = checkers ;
    1c1e:	c8 2e       	mov	r12, r24
    1c20:	65 c1       	rjmp	.+714    	; 0x1eec <Tactics+0xb04>
					myColumn = column ;
				}
				break;
				
				case 4:
				setChecker(line,column,mine,table4) ;
    1c22:	2b e5       	ldi	r18, 0x5B	; 91
    1c24:	31 e0       	ldi	r19, 0x01	; 1
    1c26:	4d 2f       	mov	r20, r29
    1c28:	63 e0       	ldi	r22, 0x03	; 3
    1c2a:	8f 2d       	mov	r24, r15
    1c2c:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table4) ;
    1c30:	0b e5       	ldi	r16, 0x5B	; 91
    1c32:	11 e0       	ldi	r17, 0x01	; 1
    1c34:	2d 2f       	mov	r18, r29
    1c36:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    1c3a:	63 e0       	ldi	r22, 0x03	; 3
    1c3c:	8f 2d       	mov	r24, r15
    1c3e:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table4) ;
    1c42:	b8 01       	movw	r22, r16
    1c44:	8d 2f       	mov	r24, r29
    1c46:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    1c4a:	c8 16       	cp	r12, r24
    1c4c:	08 f0       	brcs	.+2      	; 0x1c50 <Tactics+0x868>
    1c4e:	4e c1       	rjmp	.+668    	; 0x1eec <Tactics+0xb04>
				{
					max = checkers ;
					myLine = line ;
    1c50:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    1c54:	93 e0       	ldi	r25, 0x03	; 3
    1c56:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table4) ;
				TurnOtherCheckers(line,column,enemy,mine,table4) ;
				checkers = scanCopyChessBoard(mine,table4) ;
				if (max < checkers)
				{
					max = checkers ;
    1c5a:	c8 2e       	mov	r12, r24
    1c5c:	47 c1       	rjmp	.+654    	; 0x1eec <Tactics+0xb04>
					myColumn = column ;
				}
				break;
				
				case 5:
				setChecker(line,column,mine,table5) ;
    1c5e:	2b e6       	ldi	r18, 0x6B	; 107
    1c60:	31 e0       	ldi	r19, 0x01	; 1
    1c62:	4d 2f       	mov	r20, r29
    1c64:	63 e0       	ldi	r22, 0x03	; 3
    1c66:	8f 2d       	mov	r24, r15
    1c68:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table5) ;
    1c6c:	0b e6       	ldi	r16, 0x6B	; 107
    1c6e:	11 e0       	ldi	r17, 0x01	; 1
    1c70:	2d 2f       	mov	r18, r29
    1c72:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    1c76:	63 e0       	ldi	r22, 0x03	; 3
    1c78:	8f 2d       	mov	r24, r15
    1c7a:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table5) ;
    1c7e:	b8 01       	movw	r22, r16
    1c80:	8d 2f       	mov	r24, r29
    1c82:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    1c86:	c8 16       	cp	r12, r24
    1c88:	08 f0       	brcs	.+2      	; 0x1c8c <Tactics+0x8a4>
    1c8a:	30 c1       	rjmp	.+608    	; 0x1eec <Tactics+0xb04>
				{
					max = checkers ;
					myLine = line ;
    1c8c:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    1c90:	93 e0       	ldi	r25, 0x03	; 3
    1c92:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table5) ;
				TurnOtherCheckers(line,column,enemy,mine,table5) ;
				checkers = scanCopyChessBoard(mine,table5) ;
				if (max < checkers)
				{
					max = checkers ;
    1c96:	c8 2e       	mov	r12, r24
    1c98:	29 c1       	rjmp	.+594    	; 0x1eec <Tactics+0xb04>
					myColumn = column ;
				}
				break;
				
				case 6:
				setChecker(line,column,mine,table6) ;
    1c9a:	24 e8       	ldi	r18, 0x84	; 132
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	4d 2f       	mov	r20, r29
    1ca0:	63 e0       	ldi	r22, 0x03	; 3
    1ca2:	8f 2d       	mov	r24, r15
    1ca4:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table6) ;
    1ca8:	04 e8       	ldi	r16, 0x84	; 132
    1caa:	10 e0       	ldi	r17, 0x00	; 0
    1cac:	2d 2f       	mov	r18, r29
    1cae:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    1cb2:	63 e0       	ldi	r22, 0x03	; 3
    1cb4:	8f 2d       	mov	r24, r15
    1cb6:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table6) ;
    1cba:	b8 01       	movw	r22, r16
    1cbc:	8d 2f       	mov	r24, r29
    1cbe:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    1cc2:	c8 16       	cp	r12, r24
    1cc4:	08 f0       	brcs	.+2      	; 0x1cc8 <Tactics+0x8e0>
    1cc6:	12 c1       	rjmp	.+548    	; 0x1eec <Tactics+0xb04>
				{
					max = checkers ;
					myLine = line ;
    1cc8:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    1ccc:	93 e0       	ldi	r25, 0x03	; 3
    1cce:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table6) ;
				TurnOtherCheckers(line,column,enemy,mine,table6) ;
				checkers = scanCopyChessBoard(mine,table6) ;
				if (max < checkers)
				{
					max = checkers ;
    1cd2:	c8 2e       	mov	r12, r24
    1cd4:	0b c1       	rjmp	.+534    	; 0x1eec <Tactics+0xb04>
					myColumn = column ;
				}
				break;
				
				case 7:
				setChecker(line,column,mine,table7) ;
    1cd6:	2b ef       	ldi	r18, 0xFB	; 251
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	4d 2f       	mov	r20, r29
    1cdc:	63 e0       	ldi	r22, 0x03	; 3
    1cde:	8f 2d       	mov	r24, r15
    1ce0:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table7) ;
    1ce4:	0b ef       	ldi	r16, 0xFB	; 251
    1ce6:	10 e0       	ldi	r17, 0x00	; 0
    1ce8:	2d 2f       	mov	r18, r29
    1cea:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    1cee:	63 e0       	ldi	r22, 0x03	; 3
    1cf0:	8f 2d       	mov	r24, r15
    1cf2:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table7) ;
    1cf6:	b8 01       	movw	r22, r16
    1cf8:	8d 2f       	mov	r24, r29
    1cfa:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    1cfe:	c8 16       	cp	r12, r24
    1d00:	08 f0       	brcs	.+2      	; 0x1d04 <Tactics+0x91c>
    1d02:	f4 c0       	rjmp	.+488    	; 0x1eec <Tactics+0xb04>
				{
					max = checkers ;
					myLine = line ;
    1d04:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    1d08:	93 e0       	ldi	r25, 0x03	; 3
    1d0a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table7) ;
				TurnOtherCheckers(line,column,enemy,mine,table7) ;
				checkers = scanCopyChessBoard(mine,table7) ;
				if (max < checkers)
				{
					max = checkers ;
    1d0e:	c8 2e       	mov	r12, r24
    1d10:	ed c0       	rjmp	.+474    	; 0x1eec <Tactics+0xb04>
					myColumn = column ;
				}
				break;
				
				case 8:
				setChecker(line,column,mine,table8) ;
    1d12:	24 e9       	ldi	r18, 0x94	; 148
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	4d 2f       	mov	r20, r29
    1d18:	63 e0       	ldi	r22, 0x03	; 3
    1d1a:	8f 2d       	mov	r24, r15
    1d1c:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table8) ;
    1d20:	04 e9       	ldi	r16, 0x94	; 148
    1d22:	10 e0       	ldi	r17, 0x00	; 0
    1d24:	2d 2f       	mov	r18, r29
    1d26:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    1d2a:	63 e0       	ldi	r22, 0x03	; 3
    1d2c:	8f 2d       	mov	r24, r15
    1d2e:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table8) ;
    1d32:	b8 01       	movw	r22, r16
    1d34:	8d 2f       	mov	r24, r29
    1d36:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    1d3a:	c8 16       	cp	r12, r24
    1d3c:	08 f0       	brcs	.+2      	; 0x1d40 <Tactics+0x958>
    1d3e:	d6 c0       	rjmp	.+428    	; 0x1eec <Tactics+0xb04>
				{
					max = checkers ;
					myLine = line ;
    1d40:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    1d44:	93 e0       	ldi	r25, 0x03	; 3
    1d46:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table8) ;
				TurnOtherCheckers(line,column,enemy,mine,table8) ;
				checkers = scanCopyChessBoard(mine,table8) ;
				if (max < checkers)
				{
					max = checkers ;
    1d4a:	c8 2e       	mov	r12, r24
    1d4c:	cf c0       	rjmp	.+414    	; 0x1eec <Tactics+0xb04>
					myColumn = column ;
				}
				break;
				
				case 9:
				setChecker(line,column,mine,table9) ;
    1d4e:	2b e4       	ldi	r18, 0x4B	; 75
    1d50:	31 e0       	ldi	r19, 0x01	; 1
    1d52:	4d 2f       	mov	r20, r29
    1d54:	63 e0       	ldi	r22, 0x03	; 3
    1d56:	8f 2d       	mov	r24, r15
    1d58:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
    1d5c:	0b e4       	ldi	r16, 0x4B	; 75
    1d5e:	11 e0       	ldi	r17, 0x01	; 1
    1d60:	2d 2f       	mov	r18, r29
    1d62:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    1d66:	63 e0       	ldi	r22, 0x03	; 3
    1d68:	8f 2d       	mov	r24, r15
    1d6a:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table9) ;
    1d6e:	b8 01       	movw	r22, r16
    1d70:	8d 2f       	mov	r24, r29
    1d72:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    1d76:	c8 16       	cp	r12, r24
    1d78:	08 f0       	brcs	.+2      	; 0x1d7c <Tactics+0x994>
    1d7a:	b8 c0       	rjmp	.+368    	; 0x1eec <Tactics+0xb04>
				{
					max = checkers ;
					myLine = line ;
    1d7c:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    1d80:	93 e0       	ldi	r25, 0x03	; 3
    1d82:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table9) ;
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
				checkers = scanCopyChessBoard(mine,table9) ;
				if (max < checkers)
				{
					max = checkers ;
    1d86:	c8 2e       	mov	r12, r24
    1d88:	b1 c0       	rjmp	.+354    	; 0x1eec <Tactics+0xb04>
					myColumn = column ;
				}
				break;
				
				case 10:
				setChecker(line,column,mine,table10) ;
    1d8a:	2b e9       	ldi	r18, 0x9B	; 155
    1d8c:	31 e0       	ldi	r19, 0x01	; 1
    1d8e:	4d 2f       	mov	r20, r29
    1d90:	63 e0       	ldi	r22, 0x03	; 3
    1d92:	8f 2d       	mov	r24, r15
    1d94:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table10) ;
    1d98:	0b e9       	ldi	r16, 0x9B	; 155
    1d9a:	11 e0       	ldi	r17, 0x01	; 1
    1d9c:	2d 2f       	mov	r18, r29
    1d9e:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    1da2:	63 e0       	ldi	r22, 0x03	; 3
    1da4:	8f 2d       	mov	r24, r15
    1da6:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table10) ;
    1daa:	b8 01       	movw	r22, r16
    1dac:	8d 2f       	mov	r24, r29
    1dae:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    1db2:	c8 16       	cp	r12, r24
    1db4:	08 f0       	brcs	.+2      	; 0x1db8 <Tactics+0x9d0>
    1db6:	9a c0       	rjmp	.+308    	; 0x1eec <Tactics+0xb04>
				{
					max = checkers ;
					myLine = line ;
    1db8:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    1dbc:	93 e0       	ldi	r25, 0x03	; 3
    1dbe:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table10) ;
				TurnOtherCheckers(line,column,enemy,mine,table10) ;
				checkers = scanCopyChessBoard(mine,table10) ;
				if (max < checkers)
				{
					max = checkers ;
    1dc2:	c8 2e       	mov	r12, r24
    1dc4:	93 c0       	rjmp	.+294    	; 0x1eec <Tactics+0xb04>
					myColumn = column ;
				}
				break;
				
				case 11:
				setChecker(line,column,mine,table11) ;
    1dc6:	2b e3       	ldi	r18, 0x3B	; 59
    1dc8:	31 e0       	ldi	r19, 0x01	; 1
    1dca:	4d 2f       	mov	r20, r29
    1dcc:	63 e0       	ldi	r22, 0x03	; 3
    1dce:	8f 2d       	mov	r24, r15
    1dd0:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table11) ;
    1dd4:	0b e3       	ldi	r16, 0x3B	; 59
    1dd6:	11 e0       	ldi	r17, 0x01	; 1
    1dd8:	2d 2f       	mov	r18, r29
    1dda:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    1dde:	63 e0       	ldi	r22, 0x03	; 3
    1de0:	8f 2d       	mov	r24, r15
    1de2:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table11) ;
    1de6:	b8 01       	movw	r22, r16
    1de8:	8d 2f       	mov	r24, r29
    1dea:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    1dee:	c8 16       	cp	r12, r24
    1df0:	08 f0       	brcs	.+2      	; 0x1df4 <Tactics+0xa0c>
    1df2:	7c c0       	rjmp	.+248    	; 0x1eec <Tactics+0xb04>
				{
					max = checkers ;
					myLine = line ;
    1df4:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    1df8:	93 e0       	ldi	r25, 0x03	; 3
    1dfa:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table11) ;
				TurnOtherCheckers(line,column,enemy,mine,table11) ;
				checkers = scanCopyChessBoard(mine,table11) ;
				if (max < checkers)
				{
					max = checkers ;
    1dfe:	c8 2e       	mov	r12, r24
    1e00:	75 c0       	rjmp	.+234    	; 0x1eec <Tactics+0xb04>
					myColumn = column ;
				}
				break;
				
				case 12:
				setChecker(line,column,mine,table12) ;
    1e02:	2c ea       	ldi	r18, 0xAC	; 172
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	4d 2f       	mov	r20, r29
    1e08:	63 e0       	ldi	r22, 0x03	; 3
    1e0a:	8f 2d       	mov	r24, r15
    1e0c:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table12) ;
    1e10:	0c ea       	ldi	r16, 0xAC	; 172
    1e12:	10 e0       	ldi	r17, 0x00	; 0
    1e14:	2d 2f       	mov	r18, r29
    1e16:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    1e1a:	63 e0       	ldi	r22, 0x03	; 3
    1e1c:	8f 2d       	mov	r24, r15
    1e1e:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table12) ;
    1e22:	b8 01       	movw	r22, r16
    1e24:	8d 2f       	mov	r24, r29
    1e26:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    1e2a:	c8 16       	cp	r12, r24
    1e2c:	08 f0       	brcs	.+2      	; 0x1e30 <Tactics+0xa48>
    1e2e:	5e c0       	rjmp	.+188    	; 0x1eec <Tactics+0xb04>
				{
					max = checkers ;
					myLine = line ;
    1e30:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    1e34:	93 e0       	ldi	r25, 0x03	; 3
    1e36:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table12) ;
				TurnOtherCheckers(line,column,enemy,mine,table12) ;
				checkers = scanCopyChessBoard(mine,table12) ;
				if (max < checkers)
				{
					max = checkers ;
    1e3a:	c8 2e       	mov	r12, r24
    1e3c:	57 c0       	rjmp	.+174    	; 0x1eec <Tactics+0xb04>
					myColumn = column ;
				}
				break;
				
				case 13:
				setChecker(line,column,mine,table13) ;
    1e3e:	2b ed       	ldi	r18, 0xDB	; 219
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	4d 2f       	mov	r20, r29
    1e44:	63 e0       	ldi	r22, 0x03	; 3
    1e46:	8f 2d       	mov	r24, r15
    1e48:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table13) ;
    1e4c:	0b ed       	ldi	r16, 0xDB	; 219
    1e4e:	10 e0       	ldi	r17, 0x00	; 0
    1e50:	2d 2f       	mov	r18, r29
    1e52:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    1e56:	63 e0       	ldi	r22, 0x03	; 3
    1e58:	8f 2d       	mov	r24, r15
    1e5a:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table13) ;
    1e5e:	b8 01       	movw	r22, r16
    1e60:	8d 2f       	mov	r24, r29
    1e62:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    1e66:	c8 16       	cp	r12, r24
    1e68:	08 f0       	brcs	.+2      	; 0x1e6c <Tactics+0xa84>
    1e6a:	40 c0       	rjmp	.+128    	; 0x1eec <Tactics+0xb04>
				{
					max = checkers ;
					myLine = line ;
    1e6c:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    1e70:	93 e0       	ldi	r25, 0x03	; 3
    1e72:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table13) ;
				TurnOtherCheckers(line,column,enemy,mine,table13) ;
				checkers = scanCopyChessBoard(mine,table13) ;
				if (max < checkers)
				{
					max = checkers ;
    1e76:	c8 2e       	mov	r12, r24
    1e78:	39 c0       	rjmp	.+114    	; 0x1eec <Tactics+0xb04>
					myColumn = column ;
				}
				break;
				
				case 14:
				setChecker(line,column,mine,table14) ;
    1e7a:	2b e2       	ldi	r18, 0x2B	; 43
    1e7c:	31 e0       	ldi	r19, 0x01	; 1
    1e7e:	4d 2f       	mov	r20, r29
    1e80:	63 e0       	ldi	r22, 0x03	; 3
    1e82:	8f 2d       	mov	r24, r15
    1e84:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table14) ;
    1e88:	0b e2       	ldi	r16, 0x2B	; 43
    1e8a:	11 e0       	ldi	r17, 0x01	; 1
    1e8c:	2d 2f       	mov	r18, r29
    1e8e:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    1e92:	63 e0       	ldi	r22, 0x03	; 3
    1e94:	8f 2d       	mov	r24, r15
    1e96:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table14) ;
    1e9a:	b8 01       	movw	r22, r16
    1e9c:	8d 2f       	mov	r24, r29
    1e9e:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    1ea2:	c8 16       	cp	r12, r24
    1ea4:	18 f5       	brcc	.+70     	; 0x1eec <Tactics+0xb04>
				{
					max = checkers ;
					myLine = line ;
    1ea6:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    1eaa:	93 e0       	ldi	r25, 0x03	; 3
    1eac:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table14) ;
				TurnOtherCheckers(line,column,enemy,mine,table14) ;
				checkers = scanCopyChessBoard(mine,table14) ;
				if (max < checkers)
				{
					max = checkers ;
    1eb0:	c8 2e       	mov	r12, r24
    1eb2:	1c c0       	rjmp	.+56     	; 0x1eec <Tactics+0xb04>
					myColumn = column ;
				}
				break;
				
				default:
				setChecker(line,column,mine,table15) ;
    1eb4:	2b e0       	ldi	r18, 0x0B	; 11
    1eb6:	31 e0       	ldi	r19, 0x01	; 1
    1eb8:	4d 2f       	mov	r20, r29
    1eba:	63 e0       	ldi	r22, 0x03	; 3
    1ebc:	8f 2d       	mov	r24, r15
    1ebe:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table15) ;
    1ec2:	0b e0       	ldi	r16, 0x0B	; 11
    1ec4:	11 e0       	ldi	r17, 0x01	; 1
    1ec6:	2d 2f       	mov	r18, r29
    1ec8:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    1ecc:	63 e0       	ldi	r22, 0x03	; 3
    1ece:	8f 2d       	mov	r24, r15
    1ed0:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table15) ;
    1ed4:	b8 01       	movw	r22, r16
    1ed6:	8d 2f       	mov	r24, r29
    1ed8:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    1edc:	c8 16       	cp	r12, r24
    1ede:	30 f4       	brcc	.+12     	; 0x1eec <Tactics+0xb04>
				{
					max = checkers ;
					myLine = line ;
    1ee0:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    1ee4:	93 e0       	ldi	r25, 0x03	; 3
    1ee6:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table15) ;
				TurnOtherCheckers(line,column,enemy,mine,table15) ;
				checkers = scanCopyChessBoard(mine,table15) ;
				if (max < checkers)
				{
					max = checkers ;
    1eea:	c8 2e       	mov	r12, r24
		}
		
		/* Fourth valid move in this line */
		temp = buffer & 0b00001000 ;
		temp = (temp >> 3) ;
		if (temp == 1)
    1eec:	e3 fe       	sbrs	r14, 3
    1eee:	cc c1       	rjmp	.+920    	; 0x2288 <Tactics+0xea0>
		{
			column = 4 ;
			count++ ;
    1ef0:	cf 5f       	subi	r28, 0xFF	; 255
			switch(count)
    1ef2:	8c 2f       	mov	r24, r28
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	fc 01       	movw	r30, r24
    1ef8:	31 97       	sbiw	r30, 0x01	; 1
    1efa:	ee 30       	cpi	r30, 0x0E	; 14
    1efc:	f1 05       	cpc	r31, r1
    1efe:	08 f0       	brcs	.+2      	; 0x1f02 <Tactics+0xb1a>
    1f00:	a7 c1       	rjmp	.+846    	; 0x2250 <Tactics+0xe68>
    1f02:	ea 59       	subi	r30, 0x9A	; 154
    1f04:	ff 4f       	sbci	r31, 0xFF	; 255
    1f06:	0c 94 f8 1a 	jmp	0x35f0	; 0x35f0 <__tablejump2__>
			{
				case 1:
				setChecker(line,column,mine,table1) ;
    1f0a:	2b ee       	ldi	r18, 0xEB	; 235
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	4d 2f       	mov	r20, r29
    1f10:	64 e0       	ldi	r22, 0x04	; 4
    1f12:	8f 2d       	mov	r24, r15
    1f14:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table1) ;
    1f18:	0b ee       	ldi	r16, 0xEB	; 235
    1f1a:	10 e0       	ldi	r17, 0x00	; 0
    1f1c:	2d 2f       	mov	r18, r29
    1f1e:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    1f22:	64 e0       	ldi	r22, 0x04	; 4
    1f24:	8f 2d       	mov	r24, r15
    1f26:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table1) ;
    1f2a:	b8 01       	movw	r22, r16
    1f2c:	8d 2f       	mov	r24, r29
    1f2e:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    1f32:	c8 16       	cp	r12, r24
    1f34:	08 f0       	brcs	.+2      	; 0x1f38 <Tactics+0xb50>
    1f36:	a8 c1       	rjmp	.+848    	; 0x2288 <Tactics+0xea0>
				{
					max = checkers ;
					myLine = line ;
    1f38:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    1f3c:	94 e0       	ldi	r25, 0x04	; 4
    1f3e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table1) ;
				TurnOtherCheckers(line,column,enemy,mine,table1) ;
				checkers = scanCopyChessBoard(mine,table1) ;
				if (max < checkers)
				{
					max = checkers ;
    1f42:	c8 2e       	mov	r12, r24
    1f44:	a1 c1       	rjmp	.+834    	; 0x2288 <Tactics+0xea0>
					myColumn = column ;
				}
				break;
				
				case 2:
				setChecker(line,column,mine,table2) ;
    1f46:	2b e8       	ldi	r18, 0x8B	; 139
    1f48:	31 e0       	ldi	r19, 0x01	; 1
    1f4a:	4d 2f       	mov	r20, r29
    1f4c:	64 e0       	ldi	r22, 0x04	; 4
    1f4e:	8f 2d       	mov	r24, r15
    1f50:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table2) ;
    1f54:	0b e8       	ldi	r16, 0x8B	; 139
    1f56:	11 e0       	ldi	r17, 0x01	; 1
    1f58:	2d 2f       	mov	r18, r29
    1f5a:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    1f5e:	64 e0       	ldi	r22, 0x04	; 4
    1f60:	8f 2d       	mov	r24, r15
    1f62:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table2) ;
    1f66:	b8 01       	movw	r22, r16
    1f68:	8d 2f       	mov	r24, r29
    1f6a:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    1f6e:	c8 16       	cp	r12, r24
    1f70:	08 f0       	brcs	.+2      	; 0x1f74 <Tactics+0xb8c>
    1f72:	8a c1       	rjmp	.+788    	; 0x2288 <Tactics+0xea0>
				{
					max = checkers ;
					myLine = line ;
    1f74:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    1f78:	94 e0       	ldi	r25, 0x04	; 4
    1f7a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table2) ;
				TurnOtherCheckers(line,column,enemy,mine,table2) ;
				checkers = scanCopyChessBoard(mine,table2) ;
				if (max < checkers)
				{
					max = checkers ;
    1f7e:	c8 2e       	mov	r12, r24
    1f80:	83 c1       	rjmp	.+774    	; 0x2288 <Tactics+0xea0>
					myColumn = column ;
				}
				break;
				
				case 3:
				setChecker(line,column,mine,table3) ;
    1f82:	2c e6       	ldi	r18, 0x6C	; 108
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	4d 2f       	mov	r20, r29
    1f88:	64 e0       	ldi	r22, 0x04	; 4
    1f8a:	8f 2d       	mov	r24, r15
    1f8c:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table3) ;
    1f90:	0c e6       	ldi	r16, 0x6C	; 108
    1f92:	10 e0       	ldi	r17, 0x00	; 0
    1f94:	2d 2f       	mov	r18, r29
    1f96:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    1f9a:	64 e0       	ldi	r22, 0x04	; 4
    1f9c:	8f 2d       	mov	r24, r15
    1f9e:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table3) ;
    1fa2:	b8 01       	movw	r22, r16
    1fa4:	8d 2f       	mov	r24, r29
    1fa6:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    1faa:	c8 16       	cp	r12, r24
    1fac:	08 f0       	brcs	.+2      	; 0x1fb0 <Tactics+0xbc8>
    1fae:	6c c1       	rjmp	.+728    	; 0x2288 <Tactics+0xea0>
				{
					max = checkers ;
					myLine = line ;
    1fb0:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    1fb4:	94 e0       	ldi	r25, 0x04	; 4
    1fb6:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table3) ;
				TurnOtherCheckers(line,column,enemy,mine,table3) ;
				checkers = scanCopyChessBoard(mine,table3) ;
				if (max < checkers)
				{
					max = checkers ;
    1fba:	c8 2e       	mov	r12, r24
    1fbc:	65 c1       	rjmp	.+714    	; 0x2288 <Tactics+0xea0>
					myColumn = column ;
				}
				break;
				
				case 4:
				setChecker(line,column,mine,table4) ;
    1fbe:	2b e5       	ldi	r18, 0x5B	; 91
    1fc0:	31 e0       	ldi	r19, 0x01	; 1
    1fc2:	4d 2f       	mov	r20, r29
    1fc4:	64 e0       	ldi	r22, 0x04	; 4
    1fc6:	8f 2d       	mov	r24, r15
    1fc8:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table4) ;
    1fcc:	0b e5       	ldi	r16, 0x5B	; 91
    1fce:	11 e0       	ldi	r17, 0x01	; 1
    1fd0:	2d 2f       	mov	r18, r29
    1fd2:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    1fd6:	64 e0       	ldi	r22, 0x04	; 4
    1fd8:	8f 2d       	mov	r24, r15
    1fda:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table4) ;
    1fde:	b8 01       	movw	r22, r16
    1fe0:	8d 2f       	mov	r24, r29
    1fe2:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    1fe6:	c8 16       	cp	r12, r24
    1fe8:	08 f0       	brcs	.+2      	; 0x1fec <Tactics+0xc04>
    1fea:	4e c1       	rjmp	.+668    	; 0x2288 <Tactics+0xea0>
				{
					max = checkers ;
					myLine = line ;
    1fec:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    1ff0:	94 e0       	ldi	r25, 0x04	; 4
    1ff2:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table4) ;
				TurnOtherCheckers(line,column,enemy,mine,table4) ;
				checkers = scanCopyChessBoard(mine,table4) ;
				if (max < checkers)
				{
					max = checkers ;
    1ff6:	c8 2e       	mov	r12, r24
    1ff8:	47 c1       	rjmp	.+654    	; 0x2288 <Tactics+0xea0>
					myColumn = column ;
				}
				break;
				
				case 5:
				setChecker(line,column,mine,table5) ;
    1ffa:	2b e6       	ldi	r18, 0x6B	; 107
    1ffc:	31 e0       	ldi	r19, 0x01	; 1
    1ffe:	4d 2f       	mov	r20, r29
    2000:	64 e0       	ldi	r22, 0x04	; 4
    2002:	8f 2d       	mov	r24, r15
    2004:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table5) ;
    2008:	0b e6       	ldi	r16, 0x6B	; 107
    200a:	11 e0       	ldi	r17, 0x01	; 1
    200c:	2d 2f       	mov	r18, r29
    200e:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2012:	64 e0       	ldi	r22, 0x04	; 4
    2014:	8f 2d       	mov	r24, r15
    2016:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table5) ;
    201a:	b8 01       	movw	r22, r16
    201c:	8d 2f       	mov	r24, r29
    201e:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    2022:	c8 16       	cp	r12, r24
    2024:	08 f0       	brcs	.+2      	; 0x2028 <Tactics+0xc40>
    2026:	30 c1       	rjmp	.+608    	; 0x2288 <Tactics+0xea0>
				{
					max = checkers ;
					myLine = line ;
    2028:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    202c:	94 e0       	ldi	r25, 0x04	; 4
    202e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table5) ;
				TurnOtherCheckers(line,column,enemy,mine,table5) ;
				checkers = scanCopyChessBoard(mine,table5) ;
				if (max < checkers)
				{
					max = checkers ;
    2032:	c8 2e       	mov	r12, r24
    2034:	29 c1       	rjmp	.+594    	; 0x2288 <Tactics+0xea0>
					myColumn = column ;
				}
				break;
				
				case 6:
				setChecker(line,column,mine,table6) ;
    2036:	24 e8       	ldi	r18, 0x84	; 132
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	4d 2f       	mov	r20, r29
    203c:	64 e0       	ldi	r22, 0x04	; 4
    203e:	8f 2d       	mov	r24, r15
    2040:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table6) ;
    2044:	04 e8       	ldi	r16, 0x84	; 132
    2046:	10 e0       	ldi	r17, 0x00	; 0
    2048:	2d 2f       	mov	r18, r29
    204a:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    204e:	64 e0       	ldi	r22, 0x04	; 4
    2050:	8f 2d       	mov	r24, r15
    2052:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table6) ;
    2056:	b8 01       	movw	r22, r16
    2058:	8d 2f       	mov	r24, r29
    205a:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    205e:	c8 16       	cp	r12, r24
    2060:	08 f0       	brcs	.+2      	; 0x2064 <Tactics+0xc7c>
    2062:	12 c1       	rjmp	.+548    	; 0x2288 <Tactics+0xea0>
				{
					max = checkers ;
					myLine = line ;
    2064:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    2068:	94 e0       	ldi	r25, 0x04	; 4
    206a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table6) ;
				TurnOtherCheckers(line,column,enemy,mine,table6) ;
				checkers = scanCopyChessBoard(mine,table6) ;
				if (max < checkers)
				{
					max = checkers ;
    206e:	c8 2e       	mov	r12, r24
    2070:	0b c1       	rjmp	.+534    	; 0x2288 <Tactics+0xea0>
					myColumn = column ;
				}
				break;
				
				case 7:
				setChecker(line,column,mine,table7) ;
    2072:	2b ef       	ldi	r18, 0xFB	; 251
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	4d 2f       	mov	r20, r29
    2078:	64 e0       	ldi	r22, 0x04	; 4
    207a:	8f 2d       	mov	r24, r15
    207c:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table7) ;
    2080:	0b ef       	ldi	r16, 0xFB	; 251
    2082:	10 e0       	ldi	r17, 0x00	; 0
    2084:	2d 2f       	mov	r18, r29
    2086:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    208a:	64 e0       	ldi	r22, 0x04	; 4
    208c:	8f 2d       	mov	r24, r15
    208e:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table7) ;
    2092:	b8 01       	movw	r22, r16
    2094:	8d 2f       	mov	r24, r29
    2096:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    209a:	c8 16       	cp	r12, r24
    209c:	08 f0       	brcs	.+2      	; 0x20a0 <Tactics+0xcb8>
    209e:	f4 c0       	rjmp	.+488    	; 0x2288 <Tactics+0xea0>
				{
					max = checkers ;
					myLine = line ;
    20a0:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    20a4:	94 e0       	ldi	r25, 0x04	; 4
    20a6:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table7) ;
				TurnOtherCheckers(line,column,enemy,mine,table7) ;
				checkers = scanCopyChessBoard(mine,table7) ;
				if (max < checkers)
				{
					max = checkers ;
    20aa:	c8 2e       	mov	r12, r24
    20ac:	ed c0       	rjmp	.+474    	; 0x2288 <Tactics+0xea0>
					myColumn = column ;
				}
				break;
				
				case 8:
				setChecker(line,column,mine,table8) ;
    20ae:	24 e9       	ldi	r18, 0x94	; 148
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	4d 2f       	mov	r20, r29
    20b4:	64 e0       	ldi	r22, 0x04	; 4
    20b6:	8f 2d       	mov	r24, r15
    20b8:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table8) ;
    20bc:	04 e9       	ldi	r16, 0x94	; 148
    20be:	10 e0       	ldi	r17, 0x00	; 0
    20c0:	2d 2f       	mov	r18, r29
    20c2:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    20c6:	64 e0       	ldi	r22, 0x04	; 4
    20c8:	8f 2d       	mov	r24, r15
    20ca:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table8) ;
    20ce:	b8 01       	movw	r22, r16
    20d0:	8d 2f       	mov	r24, r29
    20d2:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    20d6:	c8 16       	cp	r12, r24
    20d8:	08 f0       	brcs	.+2      	; 0x20dc <Tactics+0xcf4>
    20da:	d6 c0       	rjmp	.+428    	; 0x2288 <Tactics+0xea0>
				{
					max = checkers ;
					myLine = line ;
    20dc:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    20e0:	94 e0       	ldi	r25, 0x04	; 4
    20e2:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table8) ;
				TurnOtherCheckers(line,column,enemy,mine,table8) ;
				checkers = scanCopyChessBoard(mine,table8) ;
				if (max < checkers)
				{
					max = checkers ;
    20e6:	c8 2e       	mov	r12, r24
    20e8:	cf c0       	rjmp	.+414    	; 0x2288 <Tactics+0xea0>
					myColumn = column ;
				}
				break;
				
				case 9:
				setChecker(line,column,mine,table9) ;
    20ea:	2b e4       	ldi	r18, 0x4B	; 75
    20ec:	31 e0       	ldi	r19, 0x01	; 1
    20ee:	4d 2f       	mov	r20, r29
    20f0:	64 e0       	ldi	r22, 0x04	; 4
    20f2:	8f 2d       	mov	r24, r15
    20f4:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
    20f8:	0b e4       	ldi	r16, 0x4B	; 75
    20fa:	11 e0       	ldi	r17, 0x01	; 1
    20fc:	2d 2f       	mov	r18, r29
    20fe:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2102:	64 e0       	ldi	r22, 0x04	; 4
    2104:	8f 2d       	mov	r24, r15
    2106:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table9) ;
    210a:	b8 01       	movw	r22, r16
    210c:	8d 2f       	mov	r24, r29
    210e:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    2112:	c8 16       	cp	r12, r24
    2114:	08 f0       	brcs	.+2      	; 0x2118 <Tactics+0xd30>
    2116:	b8 c0       	rjmp	.+368    	; 0x2288 <Tactics+0xea0>
				{
					max = checkers ;
					myLine = line ;
    2118:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    211c:	94 e0       	ldi	r25, 0x04	; 4
    211e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table9) ;
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
				checkers = scanCopyChessBoard(mine,table9) ;
				if (max < checkers)
				{
					max = checkers ;
    2122:	c8 2e       	mov	r12, r24
    2124:	b1 c0       	rjmp	.+354    	; 0x2288 <Tactics+0xea0>
					myColumn = column ;
				}
				break;
				
				case 10:
				setChecker(line,column,mine,table10) ;
    2126:	2b e9       	ldi	r18, 0x9B	; 155
    2128:	31 e0       	ldi	r19, 0x01	; 1
    212a:	4d 2f       	mov	r20, r29
    212c:	64 e0       	ldi	r22, 0x04	; 4
    212e:	8f 2d       	mov	r24, r15
    2130:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table10) ;
    2134:	0b e9       	ldi	r16, 0x9B	; 155
    2136:	11 e0       	ldi	r17, 0x01	; 1
    2138:	2d 2f       	mov	r18, r29
    213a:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    213e:	64 e0       	ldi	r22, 0x04	; 4
    2140:	8f 2d       	mov	r24, r15
    2142:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table10) ;
    2146:	b8 01       	movw	r22, r16
    2148:	8d 2f       	mov	r24, r29
    214a:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    214e:	c8 16       	cp	r12, r24
    2150:	08 f0       	brcs	.+2      	; 0x2154 <Tactics+0xd6c>
    2152:	9a c0       	rjmp	.+308    	; 0x2288 <Tactics+0xea0>
				{
					max = checkers ;
					myLine = line ;
    2154:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    2158:	94 e0       	ldi	r25, 0x04	; 4
    215a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table10) ;
				TurnOtherCheckers(line,column,enemy,mine,table10) ;
				checkers = scanCopyChessBoard(mine,table10) ;
				if (max < checkers)
				{
					max = checkers ;
    215e:	c8 2e       	mov	r12, r24
    2160:	93 c0       	rjmp	.+294    	; 0x2288 <Tactics+0xea0>
					myColumn = column ;
				}
				break;
				
				case 11:
				setChecker(line,column,mine,table11) ;
    2162:	2b e3       	ldi	r18, 0x3B	; 59
    2164:	31 e0       	ldi	r19, 0x01	; 1
    2166:	4d 2f       	mov	r20, r29
    2168:	64 e0       	ldi	r22, 0x04	; 4
    216a:	8f 2d       	mov	r24, r15
    216c:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table11) ;
    2170:	0b e3       	ldi	r16, 0x3B	; 59
    2172:	11 e0       	ldi	r17, 0x01	; 1
    2174:	2d 2f       	mov	r18, r29
    2176:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    217a:	64 e0       	ldi	r22, 0x04	; 4
    217c:	8f 2d       	mov	r24, r15
    217e:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table11) ;
    2182:	b8 01       	movw	r22, r16
    2184:	8d 2f       	mov	r24, r29
    2186:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    218a:	c8 16       	cp	r12, r24
    218c:	08 f0       	brcs	.+2      	; 0x2190 <Tactics+0xda8>
    218e:	7c c0       	rjmp	.+248    	; 0x2288 <Tactics+0xea0>
				{
					max = checkers ;
					myLine = line ;
    2190:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    2194:	94 e0       	ldi	r25, 0x04	; 4
    2196:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table11) ;
				TurnOtherCheckers(line,column,enemy,mine,table11) ;
				checkers = scanCopyChessBoard(mine,table11) ;
				if (max < checkers)
				{
					max = checkers ;
    219a:	c8 2e       	mov	r12, r24
    219c:	75 c0       	rjmp	.+234    	; 0x2288 <Tactics+0xea0>
					myColumn = column ;
				}
				break;
				
				case 12:
				setChecker(line,column,mine,table12) ;
    219e:	2c ea       	ldi	r18, 0xAC	; 172
    21a0:	30 e0       	ldi	r19, 0x00	; 0
    21a2:	4d 2f       	mov	r20, r29
    21a4:	64 e0       	ldi	r22, 0x04	; 4
    21a6:	8f 2d       	mov	r24, r15
    21a8:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table12) ;
    21ac:	0c ea       	ldi	r16, 0xAC	; 172
    21ae:	10 e0       	ldi	r17, 0x00	; 0
    21b0:	2d 2f       	mov	r18, r29
    21b2:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    21b6:	64 e0       	ldi	r22, 0x04	; 4
    21b8:	8f 2d       	mov	r24, r15
    21ba:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table12) ;
    21be:	b8 01       	movw	r22, r16
    21c0:	8d 2f       	mov	r24, r29
    21c2:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    21c6:	c8 16       	cp	r12, r24
    21c8:	08 f0       	brcs	.+2      	; 0x21cc <Tactics+0xde4>
    21ca:	5e c0       	rjmp	.+188    	; 0x2288 <Tactics+0xea0>
				{
					max = checkers ;
					myLine = line ;
    21cc:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    21d0:	94 e0       	ldi	r25, 0x04	; 4
    21d2:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table12) ;
				TurnOtherCheckers(line,column,enemy,mine,table12) ;
				checkers = scanCopyChessBoard(mine,table12) ;
				if (max < checkers)
				{
					max = checkers ;
    21d6:	c8 2e       	mov	r12, r24
    21d8:	57 c0       	rjmp	.+174    	; 0x2288 <Tactics+0xea0>
					myColumn = column ;
				}
				break;
				
				case 13:
				setChecker(line,column,mine,table13) ;
    21da:	2b ed       	ldi	r18, 0xDB	; 219
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	4d 2f       	mov	r20, r29
    21e0:	64 e0       	ldi	r22, 0x04	; 4
    21e2:	8f 2d       	mov	r24, r15
    21e4:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table13) ;
    21e8:	0b ed       	ldi	r16, 0xDB	; 219
    21ea:	10 e0       	ldi	r17, 0x00	; 0
    21ec:	2d 2f       	mov	r18, r29
    21ee:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    21f2:	64 e0       	ldi	r22, 0x04	; 4
    21f4:	8f 2d       	mov	r24, r15
    21f6:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table13) ;
    21fa:	b8 01       	movw	r22, r16
    21fc:	8d 2f       	mov	r24, r29
    21fe:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    2202:	c8 16       	cp	r12, r24
    2204:	08 f0       	brcs	.+2      	; 0x2208 <Tactics+0xe20>
    2206:	40 c0       	rjmp	.+128    	; 0x2288 <Tactics+0xea0>
				{
					max = checkers ;
					myLine = line ;
    2208:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    220c:	94 e0       	ldi	r25, 0x04	; 4
    220e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table13) ;
				TurnOtherCheckers(line,column,enemy,mine,table13) ;
				checkers = scanCopyChessBoard(mine,table13) ;
				if (max < checkers)
				{
					max = checkers ;
    2212:	c8 2e       	mov	r12, r24
    2214:	39 c0       	rjmp	.+114    	; 0x2288 <Tactics+0xea0>
					myColumn = column ;
				}
				break;
				
				case 14:
				setChecker(line,column,mine,table14) ;
    2216:	2b e2       	ldi	r18, 0x2B	; 43
    2218:	31 e0       	ldi	r19, 0x01	; 1
    221a:	4d 2f       	mov	r20, r29
    221c:	64 e0       	ldi	r22, 0x04	; 4
    221e:	8f 2d       	mov	r24, r15
    2220:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table14) ;
    2224:	0b e2       	ldi	r16, 0x2B	; 43
    2226:	11 e0       	ldi	r17, 0x01	; 1
    2228:	2d 2f       	mov	r18, r29
    222a:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    222e:	64 e0       	ldi	r22, 0x04	; 4
    2230:	8f 2d       	mov	r24, r15
    2232:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table14) ;
    2236:	b8 01       	movw	r22, r16
    2238:	8d 2f       	mov	r24, r29
    223a:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    223e:	c8 16       	cp	r12, r24
    2240:	18 f5       	brcc	.+70     	; 0x2288 <Tactics+0xea0>
				{
					max = checkers ;
					myLine = line ;
    2242:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    2246:	94 e0       	ldi	r25, 0x04	; 4
    2248:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table14) ;
				TurnOtherCheckers(line,column,enemy,mine,table14) ;
				checkers = scanCopyChessBoard(mine,table14) ;
				if (max < checkers)
				{
					max = checkers ;
    224c:	c8 2e       	mov	r12, r24
    224e:	1c c0       	rjmp	.+56     	; 0x2288 <Tactics+0xea0>
					myColumn = column ;
				}
				break;
				
				default:
				setChecker(line,column,mine,table15) ;
    2250:	2b e0       	ldi	r18, 0x0B	; 11
    2252:	31 e0       	ldi	r19, 0x01	; 1
    2254:	4d 2f       	mov	r20, r29
    2256:	64 e0       	ldi	r22, 0x04	; 4
    2258:	8f 2d       	mov	r24, r15
    225a:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table15) ;
    225e:	0b e0       	ldi	r16, 0x0B	; 11
    2260:	11 e0       	ldi	r17, 0x01	; 1
    2262:	2d 2f       	mov	r18, r29
    2264:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2268:	64 e0       	ldi	r22, 0x04	; 4
    226a:	8f 2d       	mov	r24, r15
    226c:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table15) ;
    2270:	b8 01       	movw	r22, r16
    2272:	8d 2f       	mov	r24, r29
    2274:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    2278:	c8 16       	cp	r12, r24
    227a:	30 f4       	brcc	.+12     	; 0x2288 <Tactics+0xea0>
				{
					max = checkers ;
					myLine = line ;
    227c:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    2280:	94 e0       	ldi	r25, 0x04	; 4
    2282:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table15) ;
				TurnOtherCheckers(line,column,enemy,mine,table15) ;
				checkers = scanCopyChessBoard(mine,table15) ;
				if (max < checkers)
				{
					max = checkers ;
    2286:	c8 2e       	mov	r12, r24
		temp = 0b00010000 ;
		temp = (temp >> 4) ;
		if (temp == 1)
		{
			column = 5 ;
			count++ ;
    2288:	cf 5f       	subi	r28, 0xFF	; 255
			switch(count)
    228a:	8c 2f       	mov	r24, r28
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	fc 01       	movw	r30, r24
    2290:	31 97       	sbiw	r30, 0x01	; 1
    2292:	ee 30       	cpi	r30, 0x0E	; 14
    2294:	f1 05       	cpc	r31, r1
    2296:	08 f0       	brcs	.+2      	; 0x229a <Tactics+0xeb2>
    2298:	a7 c1       	rjmp	.+846    	; 0x25e8 <Tactics+0x1200>
    229a:	ec 58       	subi	r30, 0x8C	; 140
    229c:	ff 4f       	sbci	r31, 0xFF	; 255
    229e:	0c 94 f8 1a 	jmp	0x35f0	; 0x35f0 <__tablejump2__>
			{
				case 1:
				setChecker(line,column,mine,table1) ;
    22a2:	2b ee       	ldi	r18, 0xEB	; 235
    22a4:	30 e0       	ldi	r19, 0x00	; 0
    22a6:	4d 2f       	mov	r20, r29
    22a8:	65 e0       	ldi	r22, 0x05	; 5
    22aa:	8f 2d       	mov	r24, r15
    22ac:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table1) ;
    22b0:	0b ee       	ldi	r16, 0xEB	; 235
    22b2:	10 e0       	ldi	r17, 0x00	; 0
    22b4:	2d 2f       	mov	r18, r29
    22b6:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    22ba:	65 e0       	ldi	r22, 0x05	; 5
    22bc:	8f 2d       	mov	r24, r15
    22be:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table1) ;
    22c2:	b8 01       	movw	r22, r16
    22c4:	8d 2f       	mov	r24, r29
    22c6:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    22ca:	c8 16       	cp	r12, r24
    22cc:	08 f0       	brcs	.+2      	; 0x22d0 <Tactics+0xee8>
    22ce:	a8 c1       	rjmp	.+848    	; 0x2620 <Tactics+0x1238>
				{
					max = checkers ;
					myLine = line ;
    22d0:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    22d4:	95 e0       	ldi	r25, 0x05	; 5
    22d6:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table1) ;
				TurnOtherCheckers(line,column,enemy,mine,table1) ;
				checkers = scanCopyChessBoard(mine,table1) ;
				if (max < checkers)
				{
					max = checkers ;
    22da:	c8 2e       	mov	r12, r24
    22dc:	a1 c1       	rjmp	.+834    	; 0x2620 <Tactics+0x1238>
					myColumn = column ;
				}
				break;
				
				case 2:
				setChecker(line,column,mine,table2) ;
    22de:	2b e8       	ldi	r18, 0x8B	; 139
    22e0:	31 e0       	ldi	r19, 0x01	; 1
    22e2:	4d 2f       	mov	r20, r29
    22e4:	65 e0       	ldi	r22, 0x05	; 5
    22e6:	8f 2d       	mov	r24, r15
    22e8:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table2) ;
    22ec:	0b e8       	ldi	r16, 0x8B	; 139
    22ee:	11 e0       	ldi	r17, 0x01	; 1
    22f0:	2d 2f       	mov	r18, r29
    22f2:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    22f6:	65 e0       	ldi	r22, 0x05	; 5
    22f8:	8f 2d       	mov	r24, r15
    22fa:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table2) ;
    22fe:	b8 01       	movw	r22, r16
    2300:	8d 2f       	mov	r24, r29
    2302:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    2306:	c8 16       	cp	r12, r24
    2308:	08 f0       	brcs	.+2      	; 0x230c <Tactics+0xf24>
    230a:	8a c1       	rjmp	.+788    	; 0x2620 <Tactics+0x1238>
				{
					max = checkers ;
					myLine = line ;
    230c:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    2310:	95 e0       	ldi	r25, 0x05	; 5
    2312:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table2) ;
				TurnOtherCheckers(line,column,enemy,mine,table2) ;
				checkers = scanCopyChessBoard(mine,table2) ;
				if (max < checkers)
				{
					max = checkers ;
    2316:	c8 2e       	mov	r12, r24
    2318:	83 c1       	rjmp	.+774    	; 0x2620 <Tactics+0x1238>
					myColumn = column ;
				}
				break;
				
				case 3:
				setChecker(line,column,mine,table3) ;
    231a:	2c e6       	ldi	r18, 0x6C	; 108
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	4d 2f       	mov	r20, r29
    2320:	65 e0       	ldi	r22, 0x05	; 5
    2322:	8f 2d       	mov	r24, r15
    2324:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table3) ;
    2328:	0c e6       	ldi	r16, 0x6C	; 108
    232a:	10 e0       	ldi	r17, 0x00	; 0
    232c:	2d 2f       	mov	r18, r29
    232e:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2332:	65 e0       	ldi	r22, 0x05	; 5
    2334:	8f 2d       	mov	r24, r15
    2336:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table3) ;
    233a:	b8 01       	movw	r22, r16
    233c:	8d 2f       	mov	r24, r29
    233e:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    2342:	c8 16       	cp	r12, r24
    2344:	08 f0       	brcs	.+2      	; 0x2348 <Tactics+0xf60>
    2346:	6c c1       	rjmp	.+728    	; 0x2620 <Tactics+0x1238>
				{
					max = checkers ;
					myLine = line ;
    2348:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    234c:	95 e0       	ldi	r25, 0x05	; 5
    234e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table3) ;
				TurnOtherCheckers(line,column,enemy,mine,table3) ;
				checkers = scanCopyChessBoard(mine,table3) ;
				if (max < checkers)
				{
					max = checkers ;
    2352:	c8 2e       	mov	r12, r24
    2354:	65 c1       	rjmp	.+714    	; 0x2620 <Tactics+0x1238>
					myColumn = column ;
				}
				break;
				
				case 4:
				setChecker(line,column,mine,table4) ;
    2356:	2b e5       	ldi	r18, 0x5B	; 91
    2358:	31 e0       	ldi	r19, 0x01	; 1
    235a:	4d 2f       	mov	r20, r29
    235c:	65 e0       	ldi	r22, 0x05	; 5
    235e:	8f 2d       	mov	r24, r15
    2360:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table4) ;
    2364:	0b e5       	ldi	r16, 0x5B	; 91
    2366:	11 e0       	ldi	r17, 0x01	; 1
    2368:	2d 2f       	mov	r18, r29
    236a:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    236e:	65 e0       	ldi	r22, 0x05	; 5
    2370:	8f 2d       	mov	r24, r15
    2372:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table4) ;
    2376:	b8 01       	movw	r22, r16
    2378:	8d 2f       	mov	r24, r29
    237a:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    237e:	c8 16       	cp	r12, r24
    2380:	08 f0       	brcs	.+2      	; 0x2384 <Tactics+0xf9c>
    2382:	4e c1       	rjmp	.+668    	; 0x2620 <Tactics+0x1238>
				{
					max = checkers ;
					myLine = line ;
    2384:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    2388:	95 e0       	ldi	r25, 0x05	; 5
    238a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table4) ;
				TurnOtherCheckers(line,column,enemy,mine,table4) ;
				checkers = scanCopyChessBoard(mine,table4) ;
				if (max < checkers)
				{
					max = checkers ;
    238e:	c8 2e       	mov	r12, r24
    2390:	47 c1       	rjmp	.+654    	; 0x2620 <Tactics+0x1238>
					myColumn = column ;
				}
				break;
				
				case 5:
				setChecker(line,column,mine,table5) ;
    2392:	2b e6       	ldi	r18, 0x6B	; 107
    2394:	31 e0       	ldi	r19, 0x01	; 1
    2396:	4d 2f       	mov	r20, r29
    2398:	65 e0       	ldi	r22, 0x05	; 5
    239a:	8f 2d       	mov	r24, r15
    239c:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table5) ;
    23a0:	0b e6       	ldi	r16, 0x6B	; 107
    23a2:	11 e0       	ldi	r17, 0x01	; 1
    23a4:	2d 2f       	mov	r18, r29
    23a6:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    23aa:	65 e0       	ldi	r22, 0x05	; 5
    23ac:	8f 2d       	mov	r24, r15
    23ae:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table5) ;
    23b2:	b8 01       	movw	r22, r16
    23b4:	8d 2f       	mov	r24, r29
    23b6:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    23ba:	c8 16       	cp	r12, r24
    23bc:	08 f0       	brcs	.+2      	; 0x23c0 <Tactics+0xfd8>
    23be:	30 c1       	rjmp	.+608    	; 0x2620 <Tactics+0x1238>
				{
					max = checkers ;
					myLine = line ;
    23c0:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    23c4:	95 e0       	ldi	r25, 0x05	; 5
    23c6:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table5) ;
				TurnOtherCheckers(line,column,enemy,mine,table5) ;
				checkers = scanCopyChessBoard(mine,table5) ;
				if (max < checkers)
				{
					max = checkers ;
    23ca:	c8 2e       	mov	r12, r24
    23cc:	29 c1       	rjmp	.+594    	; 0x2620 <Tactics+0x1238>
					myColumn = column ;
				}
				break;
				
				case 6:
				setChecker(line,column,mine,table6) ;
    23ce:	24 e8       	ldi	r18, 0x84	; 132
    23d0:	30 e0       	ldi	r19, 0x00	; 0
    23d2:	4d 2f       	mov	r20, r29
    23d4:	65 e0       	ldi	r22, 0x05	; 5
    23d6:	8f 2d       	mov	r24, r15
    23d8:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table6) ;
    23dc:	04 e8       	ldi	r16, 0x84	; 132
    23de:	10 e0       	ldi	r17, 0x00	; 0
    23e0:	2d 2f       	mov	r18, r29
    23e2:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    23e6:	65 e0       	ldi	r22, 0x05	; 5
    23e8:	8f 2d       	mov	r24, r15
    23ea:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table6) ;
    23ee:	b8 01       	movw	r22, r16
    23f0:	8d 2f       	mov	r24, r29
    23f2:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    23f6:	c8 16       	cp	r12, r24
    23f8:	08 f0       	brcs	.+2      	; 0x23fc <Tactics+0x1014>
    23fa:	12 c1       	rjmp	.+548    	; 0x2620 <Tactics+0x1238>
				{
					max = checkers ;
					myLine = line ;
    23fc:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    2400:	95 e0       	ldi	r25, 0x05	; 5
    2402:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table6) ;
				TurnOtherCheckers(line,column,enemy,mine,table6) ;
				checkers = scanCopyChessBoard(mine,table6) ;
				if (max < checkers)
				{
					max = checkers ;
    2406:	c8 2e       	mov	r12, r24
    2408:	0b c1       	rjmp	.+534    	; 0x2620 <Tactics+0x1238>
					myColumn = column ;
				}
				break;
				
				case 7:
				setChecker(line,column,mine,table7) ;
    240a:	2b ef       	ldi	r18, 0xFB	; 251
    240c:	30 e0       	ldi	r19, 0x00	; 0
    240e:	4d 2f       	mov	r20, r29
    2410:	65 e0       	ldi	r22, 0x05	; 5
    2412:	8f 2d       	mov	r24, r15
    2414:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table7) ;
    2418:	0b ef       	ldi	r16, 0xFB	; 251
    241a:	10 e0       	ldi	r17, 0x00	; 0
    241c:	2d 2f       	mov	r18, r29
    241e:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2422:	65 e0       	ldi	r22, 0x05	; 5
    2424:	8f 2d       	mov	r24, r15
    2426:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table7) ;
    242a:	b8 01       	movw	r22, r16
    242c:	8d 2f       	mov	r24, r29
    242e:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    2432:	c8 16       	cp	r12, r24
    2434:	08 f0       	brcs	.+2      	; 0x2438 <Tactics+0x1050>
    2436:	f4 c0       	rjmp	.+488    	; 0x2620 <Tactics+0x1238>
				{
					max = checkers ;
					myLine = line ;
    2438:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    243c:	95 e0       	ldi	r25, 0x05	; 5
    243e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table7) ;
				TurnOtherCheckers(line,column,enemy,mine,table7) ;
				checkers = scanCopyChessBoard(mine,table7) ;
				if (max < checkers)
				{
					max = checkers ;
    2442:	c8 2e       	mov	r12, r24
    2444:	ed c0       	rjmp	.+474    	; 0x2620 <Tactics+0x1238>
					myColumn = column ;
				}
				break;
				
				case 8:
				setChecker(line,column,mine,table8) ;
    2446:	24 e9       	ldi	r18, 0x94	; 148
    2448:	30 e0       	ldi	r19, 0x00	; 0
    244a:	4d 2f       	mov	r20, r29
    244c:	65 e0       	ldi	r22, 0x05	; 5
    244e:	8f 2d       	mov	r24, r15
    2450:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table8) ;
    2454:	04 e9       	ldi	r16, 0x94	; 148
    2456:	10 e0       	ldi	r17, 0x00	; 0
    2458:	2d 2f       	mov	r18, r29
    245a:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    245e:	65 e0       	ldi	r22, 0x05	; 5
    2460:	8f 2d       	mov	r24, r15
    2462:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table8) ;
    2466:	b8 01       	movw	r22, r16
    2468:	8d 2f       	mov	r24, r29
    246a:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    246e:	c8 16       	cp	r12, r24
    2470:	08 f0       	brcs	.+2      	; 0x2474 <Tactics+0x108c>
    2472:	d6 c0       	rjmp	.+428    	; 0x2620 <Tactics+0x1238>
				{
					max = checkers ;
					myLine = line ;
    2474:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    2478:	95 e0       	ldi	r25, 0x05	; 5
    247a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table8) ;
				TurnOtherCheckers(line,column,enemy,mine,table8) ;
				checkers = scanCopyChessBoard(mine,table8) ;
				if (max < checkers)
				{
					max = checkers ;
    247e:	c8 2e       	mov	r12, r24
    2480:	cf c0       	rjmp	.+414    	; 0x2620 <Tactics+0x1238>
					myColumn = column ;
				}
				break;
				
				case 9:
				setChecker(line,column,mine,table9) ;
    2482:	2b e4       	ldi	r18, 0x4B	; 75
    2484:	31 e0       	ldi	r19, 0x01	; 1
    2486:	4d 2f       	mov	r20, r29
    2488:	65 e0       	ldi	r22, 0x05	; 5
    248a:	8f 2d       	mov	r24, r15
    248c:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
    2490:	0b e4       	ldi	r16, 0x4B	; 75
    2492:	11 e0       	ldi	r17, 0x01	; 1
    2494:	2d 2f       	mov	r18, r29
    2496:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    249a:	65 e0       	ldi	r22, 0x05	; 5
    249c:	8f 2d       	mov	r24, r15
    249e:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table9) ;
    24a2:	b8 01       	movw	r22, r16
    24a4:	8d 2f       	mov	r24, r29
    24a6:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    24aa:	c8 16       	cp	r12, r24
    24ac:	08 f0       	brcs	.+2      	; 0x24b0 <Tactics+0x10c8>
    24ae:	b8 c0       	rjmp	.+368    	; 0x2620 <Tactics+0x1238>
				{
					max = checkers ;
					myLine = line ;
    24b0:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    24b4:	95 e0       	ldi	r25, 0x05	; 5
    24b6:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table9) ;
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
				checkers = scanCopyChessBoard(mine,table9) ;
				if (max < checkers)
				{
					max = checkers ;
    24ba:	c8 2e       	mov	r12, r24
    24bc:	b1 c0       	rjmp	.+354    	; 0x2620 <Tactics+0x1238>
					myColumn = column ;
				}
				break;
				
				case 10:
				setChecker(line,column,mine,table10) ;
    24be:	2b e9       	ldi	r18, 0x9B	; 155
    24c0:	31 e0       	ldi	r19, 0x01	; 1
    24c2:	4d 2f       	mov	r20, r29
    24c4:	65 e0       	ldi	r22, 0x05	; 5
    24c6:	8f 2d       	mov	r24, r15
    24c8:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table10) ;
    24cc:	0b e9       	ldi	r16, 0x9B	; 155
    24ce:	11 e0       	ldi	r17, 0x01	; 1
    24d0:	2d 2f       	mov	r18, r29
    24d2:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    24d6:	65 e0       	ldi	r22, 0x05	; 5
    24d8:	8f 2d       	mov	r24, r15
    24da:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table10) ;
    24de:	b8 01       	movw	r22, r16
    24e0:	8d 2f       	mov	r24, r29
    24e2:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    24e6:	c8 16       	cp	r12, r24
    24e8:	08 f0       	brcs	.+2      	; 0x24ec <Tactics+0x1104>
    24ea:	9a c0       	rjmp	.+308    	; 0x2620 <Tactics+0x1238>
				{
					max = checkers ;
					myLine = line ;
    24ec:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    24f0:	95 e0       	ldi	r25, 0x05	; 5
    24f2:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table10) ;
				TurnOtherCheckers(line,column,enemy,mine,table10) ;
				checkers = scanCopyChessBoard(mine,table10) ;
				if (max < checkers)
				{
					max = checkers ;
    24f6:	c8 2e       	mov	r12, r24
    24f8:	93 c0       	rjmp	.+294    	; 0x2620 <Tactics+0x1238>
					myColumn = column ;
				}
				break;
				
				case 11:
				setChecker(line,column,mine,table11) ;
    24fa:	2b e3       	ldi	r18, 0x3B	; 59
    24fc:	31 e0       	ldi	r19, 0x01	; 1
    24fe:	4d 2f       	mov	r20, r29
    2500:	65 e0       	ldi	r22, 0x05	; 5
    2502:	8f 2d       	mov	r24, r15
    2504:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table11) ;
    2508:	0b e3       	ldi	r16, 0x3B	; 59
    250a:	11 e0       	ldi	r17, 0x01	; 1
    250c:	2d 2f       	mov	r18, r29
    250e:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2512:	65 e0       	ldi	r22, 0x05	; 5
    2514:	8f 2d       	mov	r24, r15
    2516:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table11) ;
    251a:	b8 01       	movw	r22, r16
    251c:	8d 2f       	mov	r24, r29
    251e:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    2522:	c8 16       	cp	r12, r24
    2524:	08 f0       	brcs	.+2      	; 0x2528 <Tactics+0x1140>
    2526:	7c c0       	rjmp	.+248    	; 0x2620 <Tactics+0x1238>
				{
					max = checkers ;
					myLine = line ;
    2528:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    252c:	95 e0       	ldi	r25, 0x05	; 5
    252e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table11) ;
				TurnOtherCheckers(line,column,enemy,mine,table11) ;
				checkers = scanCopyChessBoard(mine,table11) ;
				if (max < checkers)
				{
					max = checkers ;
    2532:	c8 2e       	mov	r12, r24
    2534:	75 c0       	rjmp	.+234    	; 0x2620 <Tactics+0x1238>
					myColumn = column ;
				}
				break;
				
				case 12:
				setChecker(line,column,mine,table12) ;
    2536:	2c ea       	ldi	r18, 0xAC	; 172
    2538:	30 e0       	ldi	r19, 0x00	; 0
    253a:	4d 2f       	mov	r20, r29
    253c:	65 e0       	ldi	r22, 0x05	; 5
    253e:	8f 2d       	mov	r24, r15
    2540:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table12) ;
    2544:	0c ea       	ldi	r16, 0xAC	; 172
    2546:	10 e0       	ldi	r17, 0x00	; 0
    2548:	2d 2f       	mov	r18, r29
    254a:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    254e:	65 e0       	ldi	r22, 0x05	; 5
    2550:	8f 2d       	mov	r24, r15
    2552:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table12) ;
    2556:	b8 01       	movw	r22, r16
    2558:	8d 2f       	mov	r24, r29
    255a:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    255e:	c8 16       	cp	r12, r24
    2560:	08 f0       	brcs	.+2      	; 0x2564 <Tactics+0x117c>
    2562:	5e c0       	rjmp	.+188    	; 0x2620 <Tactics+0x1238>
				{
					max = checkers ;
					myLine = line ;
    2564:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    2568:	95 e0       	ldi	r25, 0x05	; 5
    256a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table12) ;
				TurnOtherCheckers(line,column,enemy,mine,table12) ;
				checkers = scanCopyChessBoard(mine,table12) ;
				if (max < checkers)
				{
					max = checkers ;
    256e:	c8 2e       	mov	r12, r24
    2570:	57 c0       	rjmp	.+174    	; 0x2620 <Tactics+0x1238>
					myColumn = column ;
				}
				break;
				
				case 13:
				setChecker(line,column,mine,table13) ;
    2572:	2b ed       	ldi	r18, 0xDB	; 219
    2574:	30 e0       	ldi	r19, 0x00	; 0
    2576:	4d 2f       	mov	r20, r29
    2578:	65 e0       	ldi	r22, 0x05	; 5
    257a:	8f 2d       	mov	r24, r15
    257c:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table13) ;
    2580:	0b ed       	ldi	r16, 0xDB	; 219
    2582:	10 e0       	ldi	r17, 0x00	; 0
    2584:	2d 2f       	mov	r18, r29
    2586:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    258a:	65 e0       	ldi	r22, 0x05	; 5
    258c:	8f 2d       	mov	r24, r15
    258e:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table13) ;
    2592:	b8 01       	movw	r22, r16
    2594:	8d 2f       	mov	r24, r29
    2596:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    259a:	c8 16       	cp	r12, r24
    259c:	08 f0       	brcs	.+2      	; 0x25a0 <Tactics+0x11b8>
    259e:	40 c0       	rjmp	.+128    	; 0x2620 <Tactics+0x1238>
				{
					max = checkers ;
					myLine = line ;
    25a0:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    25a4:	95 e0       	ldi	r25, 0x05	; 5
    25a6:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table13) ;
				TurnOtherCheckers(line,column,enemy,mine,table13) ;
				checkers = scanCopyChessBoard(mine,table13) ;
				if (max < checkers)
				{
					max = checkers ;
    25aa:	c8 2e       	mov	r12, r24
    25ac:	39 c0       	rjmp	.+114    	; 0x2620 <Tactics+0x1238>
					myColumn = column ;
				}
				break;
				
				case 14:
				setChecker(line,column,mine,table14) ;
    25ae:	2b e2       	ldi	r18, 0x2B	; 43
    25b0:	31 e0       	ldi	r19, 0x01	; 1
    25b2:	4d 2f       	mov	r20, r29
    25b4:	65 e0       	ldi	r22, 0x05	; 5
    25b6:	8f 2d       	mov	r24, r15
    25b8:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table14) ;
    25bc:	0b e2       	ldi	r16, 0x2B	; 43
    25be:	11 e0       	ldi	r17, 0x01	; 1
    25c0:	2d 2f       	mov	r18, r29
    25c2:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    25c6:	65 e0       	ldi	r22, 0x05	; 5
    25c8:	8f 2d       	mov	r24, r15
    25ca:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table14) ;
    25ce:	b8 01       	movw	r22, r16
    25d0:	8d 2f       	mov	r24, r29
    25d2:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    25d6:	c8 16       	cp	r12, r24
    25d8:	18 f5       	brcc	.+70     	; 0x2620 <Tactics+0x1238>
				{
					max = checkers ;
					myLine = line ;
    25da:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    25de:	95 e0       	ldi	r25, 0x05	; 5
    25e0:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table14) ;
				TurnOtherCheckers(line,column,enemy,mine,table14) ;
				checkers = scanCopyChessBoard(mine,table14) ;
				if (max < checkers)
				{
					max = checkers ;
    25e4:	c8 2e       	mov	r12, r24
    25e6:	1c c0       	rjmp	.+56     	; 0x2620 <Tactics+0x1238>
					myColumn = column ;
				}
				break;
				
				default:
				setChecker(line,column,mine,table15) ;
    25e8:	2b e0       	ldi	r18, 0x0B	; 11
    25ea:	31 e0       	ldi	r19, 0x01	; 1
    25ec:	4d 2f       	mov	r20, r29
    25ee:	65 e0       	ldi	r22, 0x05	; 5
    25f0:	8f 2d       	mov	r24, r15
    25f2:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table15) ;
    25f6:	0b e0       	ldi	r16, 0x0B	; 11
    25f8:	11 e0       	ldi	r17, 0x01	; 1
    25fa:	2d 2f       	mov	r18, r29
    25fc:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2600:	65 e0       	ldi	r22, 0x05	; 5
    2602:	8f 2d       	mov	r24, r15
    2604:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table15) ;
    2608:	b8 01       	movw	r22, r16
    260a:	8d 2f       	mov	r24, r29
    260c:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    2610:	c8 16       	cp	r12, r24
    2612:	30 f4       	brcc	.+12     	; 0x2620 <Tactics+0x1238>
				{
					max = checkers ;
					myLine = line ;
    2614:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    2618:	95 e0       	ldi	r25, 0x05	; 5
    261a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table15) ;
				TurnOtherCheckers(line,column,enemy,mine,table15) ;
				checkers = scanCopyChessBoard(mine,table15) ;
				if (max < checkers)
				{
					max = checkers ;
    261e:	c8 2e       	mov	r12, r24
		}
		
		/* Sixth valid move in this line */
		temp = buffer & 0b00100000 ;
		temp = (temp >> 5) ;
		if (temp == 1)
    2620:	e5 fe       	sbrs	r14, 5
    2622:	cc c1       	rjmp	.+920    	; 0x29bc <Tactics+0x15d4>
		{
			column = 6 ;
			count++ ;
    2624:	cf 5f       	subi	r28, 0xFF	; 255
			switch(count)
    2626:	8c 2f       	mov	r24, r28
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	fc 01       	movw	r30, r24
    262c:	31 97       	sbiw	r30, 0x01	; 1
    262e:	ee 30       	cpi	r30, 0x0E	; 14
    2630:	f1 05       	cpc	r31, r1
    2632:	08 f0       	brcs	.+2      	; 0x2636 <Tactics+0x124e>
    2634:	a7 c1       	rjmp	.+846    	; 0x2984 <Tactics+0x159c>
    2636:	ee 57       	subi	r30, 0x7E	; 126
    2638:	ff 4f       	sbci	r31, 0xFF	; 255
    263a:	0c 94 f8 1a 	jmp	0x35f0	; 0x35f0 <__tablejump2__>
			{
				case 1:
				setChecker(line,column,mine,table1) ;
    263e:	2b ee       	ldi	r18, 0xEB	; 235
    2640:	30 e0       	ldi	r19, 0x00	; 0
    2642:	4d 2f       	mov	r20, r29
    2644:	66 e0       	ldi	r22, 0x06	; 6
    2646:	8f 2d       	mov	r24, r15
    2648:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table1) ;
    264c:	0b ee       	ldi	r16, 0xEB	; 235
    264e:	10 e0       	ldi	r17, 0x00	; 0
    2650:	2d 2f       	mov	r18, r29
    2652:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2656:	66 e0       	ldi	r22, 0x06	; 6
    2658:	8f 2d       	mov	r24, r15
    265a:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table1) ;
    265e:	b8 01       	movw	r22, r16
    2660:	8d 2f       	mov	r24, r29
    2662:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    2666:	c8 16       	cp	r12, r24
    2668:	08 f0       	brcs	.+2      	; 0x266c <Tactics+0x1284>
    266a:	a8 c1       	rjmp	.+848    	; 0x29bc <Tactics+0x15d4>
				{
					max = checkers ;
					myLine = line ;
    266c:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    2670:	96 e0       	ldi	r25, 0x06	; 6
    2672:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table1) ;
				TurnOtherCheckers(line,column,enemy,mine,table1) ;
				checkers = scanCopyChessBoard(mine,table1) ;
				if (max < checkers)
				{
					max = checkers ;
    2676:	c8 2e       	mov	r12, r24
    2678:	a1 c1       	rjmp	.+834    	; 0x29bc <Tactics+0x15d4>
					myColumn = column ;
				}
				break;
				
				case 2:
				setChecker(line,column,mine,table2) ;
    267a:	2b e8       	ldi	r18, 0x8B	; 139
    267c:	31 e0       	ldi	r19, 0x01	; 1
    267e:	4d 2f       	mov	r20, r29
    2680:	66 e0       	ldi	r22, 0x06	; 6
    2682:	8f 2d       	mov	r24, r15
    2684:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table2) ;
    2688:	0b e8       	ldi	r16, 0x8B	; 139
    268a:	11 e0       	ldi	r17, 0x01	; 1
    268c:	2d 2f       	mov	r18, r29
    268e:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2692:	66 e0       	ldi	r22, 0x06	; 6
    2694:	8f 2d       	mov	r24, r15
    2696:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table2) ;
    269a:	b8 01       	movw	r22, r16
    269c:	8d 2f       	mov	r24, r29
    269e:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    26a2:	c8 16       	cp	r12, r24
    26a4:	08 f0       	brcs	.+2      	; 0x26a8 <Tactics+0x12c0>
    26a6:	8a c1       	rjmp	.+788    	; 0x29bc <Tactics+0x15d4>
				{
					max = checkers ;
					myLine = line ;
    26a8:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    26ac:	96 e0       	ldi	r25, 0x06	; 6
    26ae:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table2) ;
				TurnOtherCheckers(line,column,enemy,mine,table2) ;
				checkers = scanCopyChessBoard(mine,table2) ;
				if (max < checkers)
				{
					max = checkers ;
    26b2:	c8 2e       	mov	r12, r24
    26b4:	83 c1       	rjmp	.+774    	; 0x29bc <Tactics+0x15d4>
					myColumn = column ;
				}
				break;
				
				case 3:
				setChecker(line,column,mine,table3) ;
    26b6:	2c e6       	ldi	r18, 0x6C	; 108
    26b8:	30 e0       	ldi	r19, 0x00	; 0
    26ba:	4d 2f       	mov	r20, r29
    26bc:	66 e0       	ldi	r22, 0x06	; 6
    26be:	8f 2d       	mov	r24, r15
    26c0:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table3) ;
    26c4:	0c e6       	ldi	r16, 0x6C	; 108
    26c6:	10 e0       	ldi	r17, 0x00	; 0
    26c8:	2d 2f       	mov	r18, r29
    26ca:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    26ce:	66 e0       	ldi	r22, 0x06	; 6
    26d0:	8f 2d       	mov	r24, r15
    26d2:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table3) ;
    26d6:	b8 01       	movw	r22, r16
    26d8:	8d 2f       	mov	r24, r29
    26da:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    26de:	c8 16       	cp	r12, r24
    26e0:	08 f0       	brcs	.+2      	; 0x26e4 <Tactics+0x12fc>
    26e2:	6c c1       	rjmp	.+728    	; 0x29bc <Tactics+0x15d4>
				{
					max = checkers ;
					myLine = line ;
    26e4:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    26e8:	96 e0       	ldi	r25, 0x06	; 6
    26ea:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table3) ;
				TurnOtherCheckers(line,column,enemy,mine,table3) ;
				checkers = scanCopyChessBoard(mine,table3) ;
				if (max < checkers)
				{
					max = checkers ;
    26ee:	c8 2e       	mov	r12, r24
    26f0:	65 c1       	rjmp	.+714    	; 0x29bc <Tactics+0x15d4>
					myColumn = column ;
				}
				break;
				
				case 4:
				setChecker(line,column,mine,table4) ;
    26f2:	2b e5       	ldi	r18, 0x5B	; 91
    26f4:	31 e0       	ldi	r19, 0x01	; 1
    26f6:	4d 2f       	mov	r20, r29
    26f8:	66 e0       	ldi	r22, 0x06	; 6
    26fa:	8f 2d       	mov	r24, r15
    26fc:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table4) ;
    2700:	0b e5       	ldi	r16, 0x5B	; 91
    2702:	11 e0       	ldi	r17, 0x01	; 1
    2704:	2d 2f       	mov	r18, r29
    2706:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    270a:	66 e0       	ldi	r22, 0x06	; 6
    270c:	8f 2d       	mov	r24, r15
    270e:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table4) ;
    2712:	b8 01       	movw	r22, r16
    2714:	8d 2f       	mov	r24, r29
    2716:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    271a:	c8 16       	cp	r12, r24
    271c:	08 f0       	brcs	.+2      	; 0x2720 <Tactics+0x1338>
    271e:	4e c1       	rjmp	.+668    	; 0x29bc <Tactics+0x15d4>
				{
					max = checkers ;
					myLine = line ;
    2720:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    2724:	96 e0       	ldi	r25, 0x06	; 6
    2726:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table4) ;
				TurnOtherCheckers(line,column,enemy,mine,table4) ;
				checkers = scanCopyChessBoard(mine,table4) ;
				if (max < checkers)
				{
					max = checkers ;
    272a:	c8 2e       	mov	r12, r24
    272c:	47 c1       	rjmp	.+654    	; 0x29bc <Tactics+0x15d4>
					myColumn = column ;
				}
				break;
				
				case 5:
				setChecker(line,column,mine,table5) ;
    272e:	2b e6       	ldi	r18, 0x6B	; 107
    2730:	31 e0       	ldi	r19, 0x01	; 1
    2732:	4d 2f       	mov	r20, r29
    2734:	66 e0       	ldi	r22, 0x06	; 6
    2736:	8f 2d       	mov	r24, r15
    2738:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table5) ;
    273c:	0b e6       	ldi	r16, 0x6B	; 107
    273e:	11 e0       	ldi	r17, 0x01	; 1
    2740:	2d 2f       	mov	r18, r29
    2742:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2746:	66 e0       	ldi	r22, 0x06	; 6
    2748:	8f 2d       	mov	r24, r15
    274a:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table5) ;
    274e:	b8 01       	movw	r22, r16
    2750:	8d 2f       	mov	r24, r29
    2752:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    2756:	c8 16       	cp	r12, r24
    2758:	08 f0       	brcs	.+2      	; 0x275c <Tactics+0x1374>
    275a:	30 c1       	rjmp	.+608    	; 0x29bc <Tactics+0x15d4>
				{
					max = checkers ;
					myLine = line ;
    275c:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    2760:	96 e0       	ldi	r25, 0x06	; 6
    2762:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table5) ;
				TurnOtherCheckers(line,column,enemy,mine,table5) ;
				checkers = scanCopyChessBoard(mine,table5) ;
				if (max < checkers)
				{
					max = checkers ;
    2766:	c8 2e       	mov	r12, r24
    2768:	29 c1       	rjmp	.+594    	; 0x29bc <Tactics+0x15d4>
					myColumn = column ;
				}
				break;
				
				case 6:
				setChecker(line,column,mine,table6) ;
    276a:	24 e8       	ldi	r18, 0x84	; 132
    276c:	30 e0       	ldi	r19, 0x00	; 0
    276e:	4d 2f       	mov	r20, r29
    2770:	66 e0       	ldi	r22, 0x06	; 6
    2772:	8f 2d       	mov	r24, r15
    2774:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table6) ;
    2778:	04 e8       	ldi	r16, 0x84	; 132
    277a:	10 e0       	ldi	r17, 0x00	; 0
    277c:	2d 2f       	mov	r18, r29
    277e:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2782:	66 e0       	ldi	r22, 0x06	; 6
    2784:	8f 2d       	mov	r24, r15
    2786:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table6) ;
    278a:	b8 01       	movw	r22, r16
    278c:	8d 2f       	mov	r24, r29
    278e:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    2792:	c8 16       	cp	r12, r24
    2794:	08 f0       	brcs	.+2      	; 0x2798 <Tactics+0x13b0>
    2796:	12 c1       	rjmp	.+548    	; 0x29bc <Tactics+0x15d4>
				{
					max = checkers ;
					myLine = line ;
    2798:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    279c:	96 e0       	ldi	r25, 0x06	; 6
    279e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table6) ;
				TurnOtherCheckers(line,column,enemy,mine,table6) ;
				checkers = scanCopyChessBoard(mine,table6) ;
				if (max < checkers)
				{
					max = checkers ;
    27a2:	c8 2e       	mov	r12, r24
    27a4:	0b c1       	rjmp	.+534    	; 0x29bc <Tactics+0x15d4>
					myColumn = column ;
				}
				break;
				
				case 7:
				setChecker(line,column,mine,table7) ;
    27a6:	2b ef       	ldi	r18, 0xFB	; 251
    27a8:	30 e0       	ldi	r19, 0x00	; 0
    27aa:	4d 2f       	mov	r20, r29
    27ac:	66 e0       	ldi	r22, 0x06	; 6
    27ae:	8f 2d       	mov	r24, r15
    27b0:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table7) ;
    27b4:	0b ef       	ldi	r16, 0xFB	; 251
    27b6:	10 e0       	ldi	r17, 0x00	; 0
    27b8:	2d 2f       	mov	r18, r29
    27ba:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    27be:	66 e0       	ldi	r22, 0x06	; 6
    27c0:	8f 2d       	mov	r24, r15
    27c2:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table7) ;
    27c6:	b8 01       	movw	r22, r16
    27c8:	8d 2f       	mov	r24, r29
    27ca:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    27ce:	c8 16       	cp	r12, r24
    27d0:	08 f0       	brcs	.+2      	; 0x27d4 <Tactics+0x13ec>
    27d2:	f4 c0       	rjmp	.+488    	; 0x29bc <Tactics+0x15d4>
				{
					max = checkers ;
					myLine = line ;
    27d4:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    27d8:	96 e0       	ldi	r25, 0x06	; 6
    27da:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table7) ;
				TurnOtherCheckers(line,column,enemy,mine,table7) ;
				checkers = scanCopyChessBoard(mine,table7) ;
				if (max < checkers)
				{
					max = checkers ;
    27de:	c8 2e       	mov	r12, r24
    27e0:	ed c0       	rjmp	.+474    	; 0x29bc <Tactics+0x15d4>
					myColumn = column ;
				}
				break;
				
				case 8:
				setChecker(line,column,mine,table8) ;
    27e2:	24 e9       	ldi	r18, 0x94	; 148
    27e4:	30 e0       	ldi	r19, 0x00	; 0
    27e6:	4d 2f       	mov	r20, r29
    27e8:	66 e0       	ldi	r22, 0x06	; 6
    27ea:	8f 2d       	mov	r24, r15
    27ec:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table8) ;
    27f0:	04 e9       	ldi	r16, 0x94	; 148
    27f2:	10 e0       	ldi	r17, 0x00	; 0
    27f4:	2d 2f       	mov	r18, r29
    27f6:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    27fa:	66 e0       	ldi	r22, 0x06	; 6
    27fc:	8f 2d       	mov	r24, r15
    27fe:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table8) ;
    2802:	b8 01       	movw	r22, r16
    2804:	8d 2f       	mov	r24, r29
    2806:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    280a:	c8 16       	cp	r12, r24
    280c:	08 f0       	brcs	.+2      	; 0x2810 <Tactics+0x1428>
    280e:	d6 c0       	rjmp	.+428    	; 0x29bc <Tactics+0x15d4>
				{
					max = checkers ;
					myLine = line ;
    2810:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    2814:	96 e0       	ldi	r25, 0x06	; 6
    2816:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table8) ;
				TurnOtherCheckers(line,column,enemy,mine,table8) ;
				checkers = scanCopyChessBoard(mine,table8) ;
				if (max < checkers)
				{
					max = checkers ;
    281a:	c8 2e       	mov	r12, r24
    281c:	cf c0       	rjmp	.+414    	; 0x29bc <Tactics+0x15d4>
					myColumn = column ;
				}
				break;
				
				case 9:
				setChecker(line,column,mine,table9) ;
    281e:	2b e4       	ldi	r18, 0x4B	; 75
    2820:	31 e0       	ldi	r19, 0x01	; 1
    2822:	4d 2f       	mov	r20, r29
    2824:	66 e0       	ldi	r22, 0x06	; 6
    2826:	8f 2d       	mov	r24, r15
    2828:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
    282c:	0b e4       	ldi	r16, 0x4B	; 75
    282e:	11 e0       	ldi	r17, 0x01	; 1
    2830:	2d 2f       	mov	r18, r29
    2832:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2836:	66 e0       	ldi	r22, 0x06	; 6
    2838:	8f 2d       	mov	r24, r15
    283a:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table9) ;
    283e:	b8 01       	movw	r22, r16
    2840:	8d 2f       	mov	r24, r29
    2842:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    2846:	c8 16       	cp	r12, r24
    2848:	08 f0       	brcs	.+2      	; 0x284c <Tactics+0x1464>
    284a:	b8 c0       	rjmp	.+368    	; 0x29bc <Tactics+0x15d4>
				{
					max = checkers ;
					myLine = line ;
    284c:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    2850:	96 e0       	ldi	r25, 0x06	; 6
    2852:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table9) ;
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
				checkers = scanCopyChessBoard(mine,table9) ;
				if (max < checkers)
				{
					max = checkers ;
    2856:	c8 2e       	mov	r12, r24
    2858:	b1 c0       	rjmp	.+354    	; 0x29bc <Tactics+0x15d4>
					myColumn = column ;
				}
				break;
				
				case 10:
				setChecker(line,column,mine,table10) ;
    285a:	2b e9       	ldi	r18, 0x9B	; 155
    285c:	31 e0       	ldi	r19, 0x01	; 1
    285e:	4d 2f       	mov	r20, r29
    2860:	66 e0       	ldi	r22, 0x06	; 6
    2862:	8f 2d       	mov	r24, r15
    2864:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table10) ;
    2868:	0b e9       	ldi	r16, 0x9B	; 155
    286a:	11 e0       	ldi	r17, 0x01	; 1
    286c:	2d 2f       	mov	r18, r29
    286e:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2872:	66 e0       	ldi	r22, 0x06	; 6
    2874:	8f 2d       	mov	r24, r15
    2876:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table10) ;
    287a:	b8 01       	movw	r22, r16
    287c:	8d 2f       	mov	r24, r29
    287e:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    2882:	c8 16       	cp	r12, r24
    2884:	08 f0       	brcs	.+2      	; 0x2888 <Tactics+0x14a0>
    2886:	9a c0       	rjmp	.+308    	; 0x29bc <Tactics+0x15d4>
				{
					max = checkers ;
					myLine = line ;
    2888:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    288c:	96 e0       	ldi	r25, 0x06	; 6
    288e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table10) ;
				TurnOtherCheckers(line,column,enemy,mine,table10) ;
				checkers = scanCopyChessBoard(mine,table10) ;
				if (max < checkers)
				{
					max = checkers ;
    2892:	c8 2e       	mov	r12, r24
    2894:	93 c0       	rjmp	.+294    	; 0x29bc <Tactics+0x15d4>
					myColumn = column ;
				}
				break;
				
				case 11:
				setChecker(line,column,mine,table11) ;
    2896:	2b e3       	ldi	r18, 0x3B	; 59
    2898:	31 e0       	ldi	r19, 0x01	; 1
    289a:	4d 2f       	mov	r20, r29
    289c:	66 e0       	ldi	r22, 0x06	; 6
    289e:	8f 2d       	mov	r24, r15
    28a0:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table11) ;
    28a4:	0b e3       	ldi	r16, 0x3B	; 59
    28a6:	11 e0       	ldi	r17, 0x01	; 1
    28a8:	2d 2f       	mov	r18, r29
    28aa:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    28ae:	66 e0       	ldi	r22, 0x06	; 6
    28b0:	8f 2d       	mov	r24, r15
    28b2:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table11) ;
    28b6:	b8 01       	movw	r22, r16
    28b8:	8d 2f       	mov	r24, r29
    28ba:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    28be:	c8 16       	cp	r12, r24
    28c0:	08 f0       	brcs	.+2      	; 0x28c4 <Tactics+0x14dc>
    28c2:	7c c0       	rjmp	.+248    	; 0x29bc <Tactics+0x15d4>
				{
					max = checkers ;
					myLine = line ;
    28c4:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    28c8:	96 e0       	ldi	r25, 0x06	; 6
    28ca:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table11) ;
				TurnOtherCheckers(line,column,enemy,mine,table11) ;
				checkers = scanCopyChessBoard(mine,table11) ;
				if (max < checkers)
				{
					max = checkers ;
    28ce:	c8 2e       	mov	r12, r24
    28d0:	75 c0       	rjmp	.+234    	; 0x29bc <Tactics+0x15d4>
					myColumn = column ;
				}
				break;
				
				case 12:
				setChecker(line,column,mine,table12) ;
    28d2:	2c ea       	ldi	r18, 0xAC	; 172
    28d4:	30 e0       	ldi	r19, 0x00	; 0
    28d6:	4d 2f       	mov	r20, r29
    28d8:	66 e0       	ldi	r22, 0x06	; 6
    28da:	8f 2d       	mov	r24, r15
    28dc:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table12) ;
    28e0:	0c ea       	ldi	r16, 0xAC	; 172
    28e2:	10 e0       	ldi	r17, 0x00	; 0
    28e4:	2d 2f       	mov	r18, r29
    28e6:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    28ea:	66 e0       	ldi	r22, 0x06	; 6
    28ec:	8f 2d       	mov	r24, r15
    28ee:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table12) ;
    28f2:	b8 01       	movw	r22, r16
    28f4:	8d 2f       	mov	r24, r29
    28f6:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    28fa:	c8 16       	cp	r12, r24
    28fc:	08 f0       	brcs	.+2      	; 0x2900 <Tactics+0x1518>
    28fe:	5e c0       	rjmp	.+188    	; 0x29bc <Tactics+0x15d4>
				{
					max = checkers ;
					myLine = line ;
    2900:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    2904:	96 e0       	ldi	r25, 0x06	; 6
    2906:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table12) ;
				TurnOtherCheckers(line,column,enemy,mine,table12) ;
				checkers = scanCopyChessBoard(mine,table12) ;
				if (max < checkers)
				{
					max = checkers ;
    290a:	c8 2e       	mov	r12, r24
    290c:	57 c0       	rjmp	.+174    	; 0x29bc <Tactics+0x15d4>
					myColumn = column ;
				}
				break;
				
				case 13:
				setChecker(line,column,mine,table13) ;
    290e:	2b ed       	ldi	r18, 0xDB	; 219
    2910:	30 e0       	ldi	r19, 0x00	; 0
    2912:	4d 2f       	mov	r20, r29
    2914:	66 e0       	ldi	r22, 0x06	; 6
    2916:	8f 2d       	mov	r24, r15
    2918:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table13) ;
    291c:	0b ed       	ldi	r16, 0xDB	; 219
    291e:	10 e0       	ldi	r17, 0x00	; 0
    2920:	2d 2f       	mov	r18, r29
    2922:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2926:	66 e0       	ldi	r22, 0x06	; 6
    2928:	8f 2d       	mov	r24, r15
    292a:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table13) ;
    292e:	b8 01       	movw	r22, r16
    2930:	8d 2f       	mov	r24, r29
    2932:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    2936:	c8 16       	cp	r12, r24
    2938:	08 f0       	brcs	.+2      	; 0x293c <Tactics+0x1554>
    293a:	40 c0       	rjmp	.+128    	; 0x29bc <Tactics+0x15d4>
				{
					max = checkers ;
					myLine = line ;
    293c:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    2940:	96 e0       	ldi	r25, 0x06	; 6
    2942:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table13) ;
				TurnOtherCheckers(line,column,enemy,mine,table13) ;
				checkers = scanCopyChessBoard(mine,table13) ;
				if (max < checkers)
				{
					max = checkers ;
    2946:	c8 2e       	mov	r12, r24
    2948:	39 c0       	rjmp	.+114    	; 0x29bc <Tactics+0x15d4>
					myColumn = column ;
				}
				break;
				
				case 14:
				setChecker(line,column,mine,table14) ;
    294a:	2b e2       	ldi	r18, 0x2B	; 43
    294c:	31 e0       	ldi	r19, 0x01	; 1
    294e:	4d 2f       	mov	r20, r29
    2950:	66 e0       	ldi	r22, 0x06	; 6
    2952:	8f 2d       	mov	r24, r15
    2954:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table14) ;
    2958:	0b e2       	ldi	r16, 0x2B	; 43
    295a:	11 e0       	ldi	r17, 0x01	; 1
    295c:	2d 2f       	mov	r18, r29
    295e:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2962:	66 e0       	ldi	r22, 0x06	; 6
    2964:	8f 2d       	mov	r24, r15
    2966:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table14) ;
    296a:	b8 01       	movw	r22, r16
    296c:	8d 2f       	mov	r24, r29
    296e:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    2972:	c8 16       	cp	r12, r24
    2974:	18 f5       	brcc	.+70     	; 0x29bc <Tactics+0x15d4>
				{
					max = checkers ;
					myLine = line ;
    2976:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    297a:	96 e0       	ldi	r25, 0x06	; 6
    297c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table14) ;
				TurnOtherCheckers(line,column,enemy,mine,table14) ;
				checkers = scanCopyChessBoard(mine,table14) ;
				if (max < checkers)
				{
					max = checkers ;
    2980:	c8 2e       	mov	r12, r24
    2982:	1c c0       	rjmp	.+56     	; 0x29bc <Tactics+0x15d4>
					myColumn = column ;
				}
				break;
				
				default:
				setChecker(line,column,mine,table15) ;
    2984:	2b e0       	ldi	r18, 0x0B	; 11
    2986:	31 e0       	ldi	r19, 0x01	; 1
    2988:	4d 2f       	mov	r20, r29
    298a:	66 e0       	ldi	r22, 0x06	; 6
    298c:	8f 2d       	mov	r24, r15
    298e:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table15) ;
    2992:	0b e0       	ldi	r16, 0x0B	; 11
    2994:	11 e0       	ldi	r17, 0x01	; 1
    2996:	2d 2f       	mov	r18, r29
    2998:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    299c:	66 e0       	ldi	r22, 0x06	; 6
    299e:	8f 2d       	mov	r24, r15
    29a0:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table15) ;
    29a4:	b8 01       	movw	r22, r16
    29a6:	8d 2f       	mov	r24, r29
    29a8:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    29ac:	c8 16       	cp	r12, r24
    29ae:	30 f4       	brcc	.+12     	; 0x29bc <Tactics+0x15d4>
				{
					max = checkers ;
					myLine = line ;
    29b0:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    29b4:	96 e0       	ldi	r25, 0x06	; 6
    29b6:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table15) ;
				TurnOtherCheckers(line,column,enemy,mine,table15) ;
				checkers = scanCopyChessBoard(mine,table15) ;
				if (max < checkers)
				{
					max = checkers ;
    29ba:	c8 2e       	mov	r12, r24
		}
		
		/* Seventh valid move in this line */
		temp = buffer & 0b01000000 ;
		temp = (temp >> 6) ;
		if (temp == 1)
    29bc:	e6 fe       	sbrs	r14, 6
    29be:	cc c1       	rjmp	.+920    	; 0x2d58 <Tactics+0x1970>
		{
			column = 7 ;
			count++ ;
    29c0:	cf 5f       	subi	r28, 0xFF	; 255
			switch(count)
    29c2:	8c 2f       	mov	r24, r28
    29c4:	90 e0       	ldi	r25, 0x00	; 0
    29c6:	fc 01       	movw	r30, r24
    29c8:	31 97       	sbiw	r30, 0x01	; 1
    29ca:	ee 30       	cpi	r30, 0x0E	; 14
    29cc:	f1 05       	cpc	r31, r1
    29ce:	08 f0       	brcs	.+2      	; 0x29d2 <Tactics+0x15ea>
    29d0:	a7 c1       	rjmp	.+846    	; 0x2d20 <Tactics+0x1938>
    29d2:	e0 57       	subi	r30, 0x70	; 112
    29d4:	ff 4f       	sbci	r31, 0xFF	; 255
    29d6:	0c 94 f8 1a 	jmp	0x35f0	; 0x35f0 <__tablejump2__>
			{
				case 1:
				setChecker(line,column,mine,table1) ;
    29da:	2b ee       	ldi	r18, 0xEB	; 235
    29dc:	30 e0       	ldi	r19, 0x00	; 0
    29de:	4d 2f       	mov	r20, r29
    29e0:	67 e0       	ldi	r22, 0x07	; 7
    29e2:	8f 2d       	mov	r24, r15
    29e4:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table1) ;
    29e8:	0b ee       	ldi	r16, 0xEB	; 235
    29ea:	10 e0       	ldi	r17, 0x00	; 0
    29ec:	2d 2f       	mov	r18, r29
    29ee:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    29f2:	67 e0       	ldi	r22, 0x07	; 7
    29f4:	8f 2d       	mov	r24, r15
    29f6:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table1) ;
    29fa:	b8 01       	movw	r22, r16
    29fc:	8d 2f       	mov	r24, r29
    29fe:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    2a02:	c8 16       	cp	r12, r24
    2a04:	08 f0       	brcs	.+2      	; 0x2a08 <Tactics+0x1620>
    2a06:	a8 c1       	rjmp	.+848    	; 0x2d58 <Tactics+0x1970>
				{
					max = checkers ;
					myLine = line ;
    2a08:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    2a0c:	97 e0       	ldi	r25, 0x07	; 7
    2a0e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table1) ;
				TurnOtherCheckers(line,column,enemy,mine,table1) ;
				checkers = scanCopyChessBoard(mine,table1) ;
				if (max < checkers)
				{
					max = checkers ;
    2a12:	c8 2e       	mov	r12, r24
    2a14:	a1 c1       	rjmp	.+834    	; 0x2d58 <Tactics+0x1970>
					myColumn = column ;
				}
				break;
				
				case 2:
				setChecker(line,column,mine,table2) ;
    2a16:	2b e8       	ldi	r18, 0x8B	; 139
    2a18:	31 e0       	ldi	r19, 0x01	; 1
    2a1a:	4d 2f       	mov	r20, r29
    2a1c:	67 e0       	ldi	r22, 0x07	; 7
    2a1e:	8f 2d       	mov	r24, r15
    2a20:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table2) ;
    2a24:	0b e8       	ldi	r16, 0x8B	; 139
    2a26:	11 e0       	ldi	r17, 0x01	; 1
    2a28:	2d 2f       	mov	r18, r29
    2a2a:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2a2e:	67 e0       	ldi	r22, 0x07	; 7
    2a30:	8f 2d       	mov	r24, r15
    2a32:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table2) ;
    2a36:	b8 01       	movw	r22, r16
    2a38:	8d 2f       	mov	r24, r29
    2a3a:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    2a3e:	c8 16       	cp	r12, r24
    2a40:	08 f0       	brcs	.+2      	; 0x2a44 <Tactics+0x165c>
    2a42:	8a c1       	rjmp	.+788    	; 0x2d58 <Tactics+0x1970>
				{
					max = checkers ;
					myLine = line ;
    2a44:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    2a48:	97 e0       	ldi	r25, 0x07	; 7
    2a4a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table2) ;
				TurnOtherCheckers(line,column,enemy,mine,table2) ;
				checkers = scanCopyChessBoard(mine,table2) ;
				if (max < checkers)
				{
					max = checkers ;
    2a4e:	c8 2e       	mov	r12, r24
    2a50:	83 c1       	rjmp	.+774    	; 0x2d58 <Tactics+0x1970>
					myColumn = column ;
				}
				break;
				
				case 3:
				setChecker(line,column,mine,table3) ;
    2a52:	2c e6       	ldi	r18, 0x6C	; 108
    2a54:	30 e0       	ldi	r19, 0x00	; 0
    2a56:	4d 2f       	mov	r20, r29
    2a58:	67 e0       	ldi	r22, 0x07	; 7
    2a5a:	8f 2d       	mov	r24, r15
    2a5c:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table3) ;
    2a60:	0c e6       	ldi	r16, 0x6C	; 108
    2a62:	10 e0       	ldi	r17, 0x00	; 0
    2a64:	2d 2f       	mov	r18, r29
    2a66:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2a6a:	67 e0       	ldi	r22, 0x07	; 7
    2a6c:	8f 2d       	mov	r24, r15
    2a6e:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table3) ;
    2a72:	b8 01       	movw	r22, r16
    2a74:	8d 2f       	mov	r24, r29
    2a76:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    2a7a:	c8 16       	cp	r12, r24
    2a7c:	08 f0       	brcs	.+2      	; 0x2a80 <Tactics+0x1698>
    2a7e:	6c c1       	rjmp	.+728    	; 0x2d58 <Tactics+0x1970>
				{
					max = checkers ;
					myLine = line ;
    2a80:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    2a84:	97 e0       	ldi	r25, 0x07	; 7
    2a86:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table3) ;
				TurnOtherCheckers(line,column,enemy,mine,table3) ;
				checkers = scanCopyChessBoard(mine,table3) ;
				if (max < checkers)
				{
					max = checkers ;
    2a8a:	c8 2e       	mov	r12, r24
    2a8c:	65 c1       	rjmp	.+714    	; 0x2d58 <Tactics+0x1970>
					myColumn = column ;
				}
				break;
				
				case 4:
				setChecker(line,column,mine,table4) ;
    2a8e:	2b e5       	ldi	r18, 0x5B	; 91
    2a90:	31 e0       	ldi	r19, 0x01	; 1
    2a92:	4d 2f       	mov	r20, r29
    2a94:	67 e0       	ldi	r22, 0x07	; 7
    2a96:	8f 2d       	mov	r24, r15
    2a98:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table4) ;
    2a9c:	0b e5       	ldi	r16, 0x5B	; 91
    2a9e:	11 e0       	ldi	r17, 0x01	; 1
    2aa0:	2d 2f       	mov	r18, r29
    2aa2:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2aa6:	67 e0       	ldi	r22, 0x07	; 7
    2aa8:	8f 2d       	mov	r24, r15
    2aaa:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table4) ;
    2aae:	b8 01       	movw	r22, r16
    2ab0:	8d 2f       	mov	r24, r29
    2ab2:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    2ab6:	c8 16       	cp	r12, r24
    2ab8:	08 f0       	brcs	.+2      	; 0x2abc <Tactics+0x16d4>
    2aba:	4e c1       	rjmp	.+668    	; 0x2d58 <Tactics+0x1970>
				{
					max = checkers ;
					myLine = line ;
    2abc:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    2ac0:	97 e0       	ldi	r25, 0x07	; 7
    2ac2:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table4) ;
				TurnOtherCheckers(line,column,enemy,mine,table4) ;
				checkers = scanCopyChessBoard(mine,table4) ;
				if (max < checkers)
				{
					max = checkers ;
    2ac6:	c8 2e       	mov	r12, r24
    2ac8:	47 c1       	rjmp	.+654    	; 0x2d58 <Tactics+0x1970>
					myColumn = column ;
				}
				break;
				
				case 5:
				setChecker(line,column,mine,table5) ;
    2aca:	2b e6       	ldi	r18, 0x6B	; 107
    2acc:	31 e0       	ldi	r19, 0x01	; 1
    2ace:	4d 2f       	mov	r20, r29
    2ad0:	67 e0       	ldi	r22, 0x07	; 7
    2ad2:	8f 2d       	mov	r24, r15
    2ad4:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table5) ;
    2ad8:	0b e6       	ldi	r16, 0x6B	; 107
    2ada:	11 e0       	ldi	r17, 0x01	; 1
    2adc:	2d 2f       	mov	r18, r29
    2ade:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2ae2:	67 e0       	ldi	r22, 0x07	; 7
    2ae4:	8f 2d       	mov	r24, r15
    2ae6:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table5) ;
    2aea:	b8 01       	movw	r22, r16
    2aec:	8d 2f       	mov	r24, r29
    2aee:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    2af2:	c8 16       	cp	r12, r24
    2af4:	08 f0       	brcs	.+2      	; 0x2af8 <Tactics+0x1710>
    2af6:	30 c1       	rjmp	.+608    	; 0x2d58 <Tactics+0x1970>
				{
					max = checkers ;
					myLine = line ;
    2af8:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    2afc:	97 e0       	ldi	r25, 0x07	; 7
    2afe:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table5) ;
				TurnOtherCheckers(line,column,enemy,mine,table5) ;
				checkers = scanCopyChessBoard(mine,table5) ;
				if (max < checkers)
				{
					max = checkers ;
    2b02:	c8 2e       	mov	r12, r24
    2b04:	29 c1       	rjmp	.+594    	; 0x2d58 <Tactics+0x1970>
					myColumn = column ;
				}
				break;
				
				case 6:
				setChecker(line,column,mine,table6) ;
    2b06:	24 e8       	ldi	r18, 0x84	; 132
    2b08:	30 e0       	ldi	r19, 0x00	; 0
    2b0a:	4d 2f       	mov	r20, r29
    2b0c:	67 e0       	ldi	r22, 0x07	; 7
    2b0e:	8f 2d       	mov	r24, r15
    2b10:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table6) ;
    2b14:	04 e8       	ldi	r16, 0x84	; 132
    2b16:	10 e0       	ldi	r17, 0x00	; 0
    2b18:	2d 2f       	mov	r18, r29
    2b1a:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2b1e:	67 e0       	ldi	r22, 0x07	; 7
    2b20:	8f 2d       	mov	r24, r15
    2b22:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table6) ;
    2b26:	b8 01       	movw	r22, r16
    2b28:	8d 2f       	mov	r24, r29
    2b2a:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    2b2e:	c8 16       	cp	r12, r24
    2b30:	08 f0       	brcs	.+2      	; 0x2b34 <Tactics+0x174c>
    2b32:	12 c1       	rjmp	.+548    	; 0x2d58 <Tactics+0x1970>
				{
					max = checkers ;
					myLine = line ;
    2b34:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    2b38:	97 e0       	ldi	r25, 0x07	; 7
    2b3a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table6) ;
				TurnOtherCheckers(line,column,enemy,mine,table6) ;
				checkers = scanCopyChessBoard(mine,table6) ;
				if (max < checkers)
				{
					max = checkers ;
    2b3e:	c8 2e       	mov	r12, r24
    2b40:	0b c1       	rjmp	.+534    	; 0x2d58 <Tactics+0x1970>
					myColumn = column ;
				}
				break;
				
				case 7:
				setChecker(line,column,mine,table7) ;
    2b42:	2b ef       	ldi	r18, 0xFB	; 251
    2b44:	30 e0       	ldi	r19, 0x00	; 0
    2b46:	4d 2f       	mov	r20, r29
    2b48:	67 e0       	ldi	r22, 0x07	; 7
    2b4a:	8f 2d       	mov	r24, r15
    2b4c:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table7) ;
    2b50:	0b ef       	ldi	r16, 0xFB	; 251
    2b52:	10 e0       	ldi	r17, 0x00	; 0
    2b54:	2d 2f       	mov	r18, r29
    2b56:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2b5a:	67 e0       	ldi	r22, 0x07	; 7
    2b5c:	8f 2d       	mov	r24, r15
    2b5e:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table7) ;
    2b62:	b8 01       	movw	r22, r16
    2b64:	8d 2f       	mov	r24, r29
    2b66:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    2b6a:	c8 16       	cp	r12, r24
    2b6c:	08 f0       	brcs	.+2      	; 0x2b70 <Tactics+0x1788>
    2b6e:	f4 c0       	rjmp	.+488    	; 0x2d58 <Tactics+0x1970>
				{
					max = checkers ;
					myLine = line ;
    2b70:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    2b74:	97 e0       	ldi	r25, 0x07	; 7
    2b76:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table7) ;
				TurnOtherCheckers(line,column,enemy,mine,table7) ;
				checkers = scanCopyChessBoard(mine,table7) ;
				if (max < checkers)
				{
					max = checkers ;
    2b7a:	c8 2e       	mov	r12, r24
    2b7c:	ed c0       	rjmp	.+474    	; 0x2d58 <Tactics+0x1970>
					myColumn = column ;
				}
				break;
				
				case 8:
				setChecker(line,column,mine,table8) ;
    2b7e:	24 e9       	ldi	r18, 0x94	; 148
    2b80:	30 e0       	ldi	r19, 0x00	; 0
    2b82:	4d 2f       	mov	r20, r29
    2b84:	67 e0       	ldi	r22, 0x07	; 7
    2b86:	8f 2d       	mov	r24, r15
    2b88:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table8) ;
    2b8c:	04 e9       	ldi	r16, 0x94	; 148
    2b8e:	10 e0       	ldi	r17, 0x00	; 0
    2b90:	2d 2f       	mov	r18, r29
    2b92:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2b96:	67 e0       	ldi	r22, 0x07	; 7
    2b98:	8f 2d       	mov	r24, r15
    2b9a:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table8) ;
    2b9e:	b8 01       	movw	r22, r16
    2ba0:	8d 2f       	mov	r24, r29
    2ba2:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    2ba6:	c8 16       	cp	r12, r24
    2ba8:	08 f0       	brcs	.+2      	; 0x2bac <Tactics+0x17c4>
    2baa:	d6 c0       	rjmp	.+428    	; 0x2d58 <Tactics+0x1970>
				{
					max = checkers ;
					myLine = line ;
    2bac:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    2bb0:	97 e0       	ldi	r25, 0x07	; 7
    2bb2:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table8) ;
				TurnOtherCheckers(line,column,enemy,mine,table8) ;
				checkers = scanCopyChessBoard(mine,table8) ;
				if (max < checkers)
				{
					max = checkers ;
    2bb6:	c8 2e       	mov	r12, r24
    2bb8:	cf c0       	rjmp	.+414    	; 0x2d58 <Tactics+0x1970>
					myColumn = column ;
				}
				break;
				
				case 9:
				setChecker(line,column,mine,table9) ;
    2bba:	2b e4       	ldi	r18, 0x4B	; 75
    2bbc:	31 e0       	ldi	r19, 0x01	; 1
    2bbe:	4d 2f       	mov	r20, r29
    2bc0:	67 e0       	ldi	r22, 0x07	; 7
    2bc2:	8f 2d       	mov	r24, r15
    2bc4:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
    2bc8:	0b e4       	ldi	r16, 0x4B	; 75
    2bca:	11 e0       	ldi	r17, 0x01	; 1
    2bcc:	2d 2f       	mov	r18, r29
    2bce:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2bd2:	67 e0       	ldi	r22, 0x07	; 7
    2bd4:	8f 2d       	mov	r24, r15
    2bd6:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table9) ;
    2bda:	b8 01       	movw	r22, r16
    2bdc:	8d 2f       	mov	r24, r29
    2bde:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    2be2:	c8 16       	cp	r12, r24
    2be4:	08 f0       	brcs	.+2      	; 0x2be8 <Tactics+0x1800>
    2be6:	b8 c0       	rjmp	.+368    	; 0x2d58 <Tactics+0x1970>
				{
					max = checkers ;
					myLine = line ;
    2be8:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    2bec:	97 e0       	ldi	r25, 0x07	; 7
    2bee:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table9) ;
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
				checkers = scanCopyChessBoard(mine,table9) ;
				if (max < checkers)
				{
					max = checkers ;
    2bf2:	c8 2e       	mov	r12, r24
    2bf4:	b1 c0       	rjmp	.+354    	; 0x2d58 <Tactics+0x1970>
					myColumn = column ;
				}
				break;
				
				case 10:
				setChecker(line,column,mine,table10) ;
    2bf6:	2b e9       	ldi	r18, 0x9B	; 155
    2bf8:	31 e0       	ldi	r19, 0x01	; 1
    2bfa:	4d 2f       	mov	r20, r29
    2bfc:	67 e0       	ldi	r22, 0x07	; 7
    2bfe:	8f 2d       	mov	r24, r15
    2c00:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table10) ;
    2c04:	0b e9       	ldi	r16, 0x9B	; 155
    2c06:	11 e0       	ldi	r17, 0x01	; 1
    2c08:	2d 2f       	mov	r18, r29
    2c0a:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2c0e:	67 e0       	ldi	r22, 0x07	; 7
    2c10:	8f 2d       	mov	r24, r15
    2c12:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table10) ;
    2c16:	b8 01       	movw	r22, r16
    2c18:	8d 2f       	mov	r24, r29
    2c1a:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    2c1e:	c8 16       	cp	r12, r24
    2c20:	08 f0       	brcs	.+2      	; 0x2c24 <Tactics+0x183c>
    2c22:	9a c0       	rjmp	.+308    	; 0x2d58 <Tactics+0x1970>
				{
					max = checkers ;
					myLine = line ;
    2c24:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    2c28:	97 e0       	ldi	r25, 0x07	; 7
    2c2a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table10) ;
				TurnOtherCheckers(line,column,enemy,mine,table10) ;
				checkers = scanCopyChessBoard(mine,table10) ;
				if (max < checkers)
				{
					max = checkers ;
    2c2e:	c8 2e       	mov	r12, r24
    2c30:	93 c0       	rjmp	.+294    	; 0x2d58 <Tactics+0x1970>
					myColumn = column ;
				}
				break;
				
				case 11:
				setChecker(line,column,mine,table11) ;
    2c32:	2b e3       	ldi	r18, 0x3B	; 59
    2c34:	31 e0       	ldi	r19, 0x01	; 1
    2c36:	4d 2f       	mov	r20, r29
    2c38:	67 e0       	ldi	r22, 0x07	; 7
    2c3a:	8f 2d       	mov	r24, r15
    2c3c:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table11) ;
    2c40:	0b e3       	ldi	r16, 0x3B	; 59
    2c42:	11 e0       	ldi	r17, 0x01	; 1
    2c44:	2d 2f       	mov	r18, r29
    2c46:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2c4a:	67 e0       	ldi	r22, 0x07	; 7
    2c4c:	8f 2d       	mov	r24, r15
    2c4e:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table11) ;
    2c52:	b8 01       	movw	r22, r16
    2c54:	8d 2f       	mov	r24, r29
    2c56:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    2c5a:	c8 16       	cp	r12, r24
    2c5c:	08 f0       	brcs	.+2      	; 0x2c60 <Tactics+0x1878>
    2c5e:	7c c0       	rjmp	.+248    	; 0x2d58 <Tactics+0x1970>
				{
					max = checkers ;
					myLine = line ;
    2c60:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    2c64:	97 e0       	ldi	r25, 0x07	; 7
    2c66:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table11) ;
				TurnOtherCheckers(line,column,enemy,mine,table11) ;
				checkers = scanCopyChessBoard(mine,table11) ;
				if (max < checkers)
				{
					max = checkers ;
    2c6a:	c8 2e       	mov	r12, r24
    2c6c:	75 c0       	rjmp	.+234    	; 0x2d58 <Tactics+0x1970>
					myColumn = column ;
				}
				break;
				
				case 12:
				setChecker(line,column,mine,table12) ;
    2c6e:	2c ea       	ldi	r18, 0xAC	; 172
    2c70:	30 e0       	ldi	r19, 0x00	; 0
    2c72:	4d 2f       	mov	r20, r29
    2c74:	67 e0       	ldi	r22, 0x07	; 7
    2c76:	8f 2d       	mov	r24, r15
    2c78:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table12) ;
    2c7c:	0c ea       	ldi	r16, 0xAC	; 172
    2c7e:	10 e0       	ldi	r17, 0x00	; 0
    2c80:	2d 2f       	mov	r18, r29
    2c82:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2c86:	67 e0       	ldi	r22, 0x07	; 7
    2c88:	8f 2d       	mov	r24, r15
    2c8a:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table12) ;
    2c8e:	b8 01       	movw	r22, r16
    2c90:	8d 2f       	mov	r24, r29
    2c92:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    2c96:	c8 16       	cp	r12, r24
    2c98:	08 f0       	brcs	.+2      	; 0x2c9c <Tactics+0x18b4>
    2c9a:	5e c0       	rjmp	.+188    	; 0x2d58 <Tactics+0x1970>
				{
					max = checkers ;
					myLine = line ;
    2c9c:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    2ca0:	97 e0       	ldi	r25, 0x07	; 7
    2ca2:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table12) ;
				TurnOtherCheckers(line,column,enemy,mine,table12) ;
				checkers = scanCopyChessBoard(mine,table12) ;
				if (max < checkers)
				{
					max = checkers ;
    2ca6:	c8 2e       	mov	r12, r24
    2ca8:	57 c0       	rjmp	.+174    	; 0x2d58 <Tactics+0x1970>
					myColumn = column ;
				}
				break;
				
				case 13:
				setChecker(line,column,mine,table13) ;
    2caa:	2b ed       	ldi	r18, 0xDB	; 219
    2cac:	30 e0       	ldi	r19, 0x00	; 0
    2cae:	4d 2f       	mov	r20, r29
    2cb0:	67 e0       	ldi	r22, 0x07	; 7
    2cb2:	8f 2d       	mov	r24, r15
    2cb4:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table13) ;
    2cb8:	0b ed       	ldi	r16, 0xDB	; 219
    2cba:	10 e0       	ldi	r17, 0x00	; 0
    2cbc:	2d 2f       	mov	r18, r29
    2cbe:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2cc2:	67 e0       	ldi	r22, 0x07	; 7
    2cc4:	8f 2d       	mov	r24, r15
    2cc6:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table13) ;
    2cca:	b8 01       	movw	r22, r16
    2ccc:	8d 2f       	mov	r24, r29
    2cce:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    2cd2:	c8 16       	cp	r12, r24
    2cd4:	08 f0       	brcs	.+2      	; 0x2cd8 <Tactics+0x18f0>
    2cd6:	40 c0       	rjmp	.+128    	; 0x2d58 <Tactics+0x1970>
				{
					max = checkers ;
					myLine = line ;
    2cd8:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    2cdc:	97 e0       	ldi	r25, 0x07	; 7
    2cde:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table13) ;
				TurnOtherCheckers(line,column,enemy,mine,table13) ;
				checkers = scanCopyChessBoard(mine,table13) ;
				if (max < checkers)
				{
					max = checkers ;
    2ce2:	c8 2e       	mov	r12, r24
    2ce4:	39 c0       	rjmp	.+114    	; 0x2d58 <Tactics+0x1970>
					myColumn = column ;
				}
				break;
				
				case 14:
				setChecker(line,column,mine,table14) ;
    2ce6:	2b e2       	ldi	r18, 0x2B	; 43
    2ce8:	31 e0       	ldi	r19, 0x01	; 1
    2cea:	4d 2f       	mov	r20, r29
    2cec:	67 e0       	ldi	r22, 0x07	; 7
    2cee:	8f 2d       	mov	r24, r15
    2cf0:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table14) ;
    2cf4:	0b e2       	ldi	r16, 0x2B	; 43
    2cf6:	11 e0       	ldi	r17, 0x01	; 1
    2cf8:	2d 2f       	mov	r18, r29
    2cfa:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2cfe:	67 e0       	ldi	r22, 0x07	; 7
    2d00:	8f 2d       	mov	r24, r15
    2d02:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table14) ;
    2d06:	b8 01       	movw	r22, r16
    2d08:	8d 2f       	mov	r24, r29
    2d0a:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    2d0e:	c8 16       	cp	r12, r24
    2d10:	18 f5       	brcc	.+70     	; 0x2d58 <Tactics+0x1970>
				{
					max = checkers ;
					myLine = line ;
    2d12:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    2d16:	97 e0       	ldi	r25, 0x07	; 7
    2d18:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table14) ;
				TurnOtherCheckers(line,column,enemy,mine,table14) ;
				checkers = scanCopyChessBoard(mine,table14) ;
				if (max < checkers)
				{
					max = checkers ;
    2d1c:	c8 2e       	mov	r12, r24
    2d1e:	1c c0       	rjmp	.+56     	; 0x2d58 <Tactics+0x1970>
					myColumn = column ;
				}
				break;
				
				default:
				setChecker(line,column,mine,table15) ;
    2d20:	2b e0       	ldi	r18, 0x0B	; 11
    2d22:	31 e0       	ldi	r19, 0x01	; 1
    2d24:	4d 2f       	mov	r20, r29
    2d26:	67 e0       	ldi	r22, 0x07	; 7
    2d28:	8f 2d       	mov	r24, r15
    2d2a:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table15) ;
    2d2e:	0b e0       	ldi	r16, 0x0B	; 11
    2d30:	11 e0       	ldi	r17, 0x01	; 1
    2d32:	2d 2f       	mov	r18, r29
    2d34:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2d38:	67 e0       	ldi	r22, 0x07	; 7
    2d3a:	8f 2d       	mov	r24, r15
    2d3c:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table15) ;
    2d40:	b8 01       	movw	r22, r16
    2d42:	8d 2f       	mov	r24, r29
    2d44:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    2d48:	c8 16       	cp	r12, r24
    2d4a:	30 f4       	brcc	.+12     	; 0x2d58 <Tactics+0x1970>
				{
					max = checkers ;
					myLine = line ;
    2d4c:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    2d50:	97 e0       	ldi	r25, 0x07	; 7
    2d52:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table15) ;
				TurnOtherCheckers(line,column,enemy,mine,table15) ;
				checkers = scanCopyChessBoard(mine,table15) ;
				if (max < checkers)
				{
					max = checkers ;
    2d56:	c8 2e       	mov	r12, r24
		}
		
		/* Eighth valid move in this line */
		temp = buffer & 0b10000000 ;
		temp = (temp >> 7) ;
		if (temp == 1)
    2d58:	ee 20       	and	r14, r14
    2d5a:	0c f0       	brlt	.+2      	; 0x2d5e <Tactics+0x1976>
    2d5c:	cc c1       	rjmp	.+920    	; 0x30f6 <Tactics+0x1d0e>
		{
			column = 8 ;
			count++ ;
    2d5e:	cf 5f       	subi	r28, 0xFF	; 255
			switch(count)
    2d60:	8c 2f       	mov	r24, r28
    2d62:	90 e0       	ldi	r25, 0x00	; 0
    2d64:	fc 01       	movw	r30, r24
    2d66:	31 97       	sbiw	r30, 0x01	; 1
    2d68:	ee 30       	cpi	r30, 0x0E	; 14
    2d6a:	f1 05       	cpc	r31, r1
    2d6c:	08 f0       	brcs	.+2      	; 0x2d70 <Tactics+0x1988>
    2d6e:	a7 c1       	rjmp	.+846    	; 0x30be <Tactics+0x1cd6>
    2d70:	e2 56       	subi	r30, 0x62	; 98
    2d72:	ff 4f       	sbci	r31, 0xFF	; 255
    2d74:	0c 94 f8 1a 	jmp	0x35f0	; 0x35f0 <__tablejump2__>
			{
				case 1:
				setChecker(line,column,mine,table1) ;
    2d78:	2b ee       	ldi	r18, 0xEB	; 235
    2d7a:	30 e0       	ldi	r19, 0x00	; 0
    2d7c:	4d 2f       	mov	r20, r29
    2d7e:	68 e0       	ldi	r22, 0x08	; 8
    2d80:	8f 2d       	mov	r24, r15
    2d82:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table1) ;
    2d86:	0b ee       	ldi	r16, 0xEB	; 235
    2d88:	10 e0       	ldi	r17, 0x00	; 0
    2d8a:	2d 2f       	mov	r18, r29
    2d8c:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2d90:	68 e0       	ldi	r22, 0x08	; 8
    2d92:	8f 2d       	mov	r24, r15
    2d94:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table1) ;
    2d98:	b8 01       	movw	r22, r16
    2d9a:	8d 2f       	mov	r24, r29
    2d9c:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    2da0:	c8 16       	cp	r12, r24
    2da2:	08 f0       	brcs	.+2      	; 0x2da6 <Tactics+0x19be>
    2da4:	a8 c1       	rjmp	.+848    	; 0x30f6 <Tactics+0x1d0e>
				{
					max = checkers ;
					myLine = line ;
    2da6:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    2daa:	98 e0       	ldi	r25, 0x08	; 8
    2dac:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table1) ;
				TurnOtherCheckers(line,column,enemy,mine,table1) ;
				checkers = scanCopyChessBoard(mine,table1) ;
				if (max < checkers)
				{
					max = checkers ;
    2db0:	c8 2e       	mov	r12, r24
    2db2:	a1 c1       	rjmp	.+834    	; 0x30f6 <Tactics+0x1d0e>
					myColumn = column ;
				}
				break;
				
				case 2:
				setChecker(line,column,mine,table2) ;
    2db4:	2b e8       	ldi	r18, 0x8B	; 139
    2db6:	31 e0       	ldi	r19, 0x01	; 1
    2db8:	4d 2f       	mov	r20, r29
    2dba:	68 e0       	ldi	r22, 0x08	; 8
    2dbc:	8f 2d       	mov	r24, r15
    2dbe:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table2) ;
    2dc2:	0b e8       	ldi	r16, 0x8B	; 139
    2dc4:	11 e0       	ldi	r17, 0x01	; 1
    2dc6:	2d 2f       	mov	r18, r29
    2dc8:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2dcc:	68 e0       	ldi	r22, 0x08	; 8
    2dce:	8f 2d       	mov	r24, r15
    2dd0:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table2) ;
    2dd4:	b8 01       	movw	r22, r16
    2dd6:	8d 2f       	mov	r24, r29
    2dd8:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    2ddc:	c8 16       	cp	r12, r24
    2dde:	08 f0       	brcs	.+2      	; 0x2de2 <Tactics+0x19fa>
    2de0:	8a c1       	rjmp	.+788    	; 0x30f6 <Tactics+0x1d0e>
				{
					max = checkers ;
					myLine = line ;
    2de2:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    2de6:	98 e0       	ldi	r25, 0x08	; 8
    2de8:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table2) ;
				TurnOtherCheckers(line,column,enemy,mine,table2) ;
				checkers = scanCopyChessBoard(mine,table2) ;
				if (max < checkers)
				{
					max = checkers ;
    2dec:	c8 2e       	mov	r12, r24
    2dee:	83 c1       	rjmp	.+774    	; 0x30f6 <Tactics+0x1d0e>
					myColumn = column ;
				}
				break;
				
				case 3:
				setChecker(line,column,mine,table3) ;
    2df0:	2c e6       	ldi	r18, 0x6C	; 108
    2df2:	30 e0       	ldi	r19, 0x00	; 0
    2df4:	4d 2f       	mov	r20, r29
    2df6:	68 e0       	ldi	r22, 0x08	; 8
    2df8:	8f 2d       	mov	r24, r15
    2dfa:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table3) ;
    2dfe:	0c e6       	ldi	r16, 0x6C	; 108
    2e00:	10 e0       	ldi	r17, 0x00	; 0
    2e02:	2d 2f       	mov	r18, r29
    2e04:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2e08:	68 e0       	ldi	r22, 0x08	; 8
    2e0a:	8f 2d       	mov	r24, r15
    2e0c:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table3) ;
    2e10:	b8 01       	movw	r22, r16
    2e12:	8d 2f       	mov	r24, r29
    2e14:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    2e18:	c8 16       	cp	r12, r24
    2e1a:	08 f0       	brcs	.+2      	; 0x2e1e <Tactics+0x1a36>
    2e1c:	6c c1       	rjmp	.+728    	; 0x30f6 <Tactics+0x1d0e>
				{
					max = checkers ;
					myLine = line ;
    2e1e:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    2e22:	98 e0       	ldi	r25, 0x08	; 8
    2e24:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table3) ;
				TurnOtherCheckers(line,column,enemy,mine,table3) ;
				checkers = scanCopyChessBoard(mine,table3) ;
				if (max < checkers)
				{
					max = checkers ;
    2e28:	c8 2e       	mov	r12, r24
    2e2a:	65 c1       	rjmp	.+714    	; 0x30f6 <Tactics+0x1d0e>
					myColumn = column ;
				}
				break;
				
				case 4:
				setChecker(line,column,mine,table4) ;
    2e2c:	2b e5       	ldi	r18, 0x5B	; 91
    2e2e:	31 e0       	ldi	r19, 0x01	; 1
    2e30:	4d 2f       	mov	r20, r29
    2e32:	68 e0       	ldi	r22, 0x08	; 8
    2e34:	8f 2d       	mov	r24, r15
    2e36:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table4) ;
    2e3a:	0b e5       	ldi	r16, 0x5B	; 91
    2e3c:	11 e0       	ldi	r17, 0x01	; 1
    2e3e:	2d 2f       	mov	r18, r29
    2e40:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2e44:	68 e0       	ldi	r22, 0x08	; 8
    2e46:	8f 2d       	mov	r24, r15
    2e48:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table4) ;
    2e4c:	b8 01       	movw	r22, r16
    2e4e:	8d 2f       	mov	r24, r29
    2e50:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    2e54:	c8 16       	cp	r12, r24
    2e56:	08 f0       	brcs	.+2      	; 0x2e5a <Tactics+0x1a72>
    2e58:	4e c1       	rjmp	.+668    	; 0x30f6 <Tactics+0x1d0e>
				{
					max = checkers ;
					myLine = line ;
    2e5a:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    2e5e:	98 e0       	ldi	r25, 0x08	; 8
    2e60:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table4) ;
				TurnOtherCheckers(line,column,enemy,mine,table4) ;
				checkers = scanCopyChessBoard(mine,table4) ;
				if (max < checkers)
				{
					max = checkers ;
    2e64:	c8 2e       	mov	r12, r24
    2e66:	47 c1       	rjmp	.+654    	; 0x30f6 <Tactics+0x1d0e>
					myColumn = column ;
				}
				break;
				
				case 5:
				setChecker(line,column,mine,table5) ;
    2e68:	2b e6       	ldi	r18, 0x6B	; 107
    2e6a:	31 e0       	ldi	r19, 0x01	; 1
    2e6c:	4d 2f       	mov	r20, r29
    2e6e:	68 e0       	ldi	r22, 0x08	; 8
    2e70:	8f 2d       	mov	r24, r15
    2e72:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table5) ;
    2e76:	0b e6       	ldi	r16, 0x6B	; 107
    2e78:	11 e0       	ldi	r17, 0x01	; 1
    2e7a:	2d 2f       	mov	r18, r29
    2e7c:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2e80:	68 e0       	ldi	r22, 0x08	; 8
    2e82:	8f 2d       	mov	r24, r15
    2e84:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table5) ;
    2e88:	b8 01       	movw	r22, r16
    2e8a:	8d 2f       	mov	r24, r29
    2e8c:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    2e90:	c8 16       	cp	r12, r24
    2e92:	08 f0       	brcs	.+2      	; 0x2e96 <Tactics+0x1aae>
    2e94:	30 c1       	rjmp	.+608    	; 0x30f6 <Tactics+0x1d0e>
				{
					max = checkers ;
					myLine = line ;
    2e96:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    2e9a:	98 e0       	ldi	r25, 0x08	; 8
    2e9c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table5) ;
				TurnOtherCheckers(line,column,enemy,mine,table5) ;
				checkers = scanCopyChessBoard(mine,table5) ;
				if (max < checkers)
				{
					max = checkers ;
    2ea0:	c8 2e       	mov	r12, r24
    2ea2:	29 c1       	rjmp	.+594    	; 0x30f6 <Tactics+0x1d0e>
					myColumn = column ;
				}
				break;
				
				case 6:
				setChecker(line,column,mine,table6) ;
    2ea4:	24 e8       	ldi	r18, 0x84	; 132
    2ea6:	30 e0       	ldi	r19, 0x00	; 0
    2ea8:	4d 2f       	mov	r20, r29
    2eaa:	68 e0       	ldi	r22, 0x08	; 8
    2eac:	8f 2d       	mov	r24, r15
    2eae:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table6) ;
    2eb2:	04 e8       	ldi	r16, 0x84	; 132
    2eb4:	10 e0       	ldi	r17, 0x00	; 0
    2eb6:	2d 2f       	mov	r18, r29
    2eb8:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2ebc:	68 e0       	ldi	r22, 0x08	; 8
    2ebe:	8f 2d       	mov	r24, r15
    2ec0:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table6) ;
    2ec4:	b8 01       	movw	r22, r16
    2ec6:	8d 2f       	mov	r24, r29
    2ec8:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    2ecc:	c8 16       	cp	r12, r24
    2ece:	08 f0       	brcs	.+2      	; 0x2ed2 <Tactics+0x1aea>
    2ed0:	12 c1       	rjmp	.+548    	; 0x30f6 <Tactics+0x1d0e>
				{
					max = checkers ;
					myLine = line ;
    2ed2:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    2ed6:	98 e0       	ldi	r25, 0x08	; 8
    2ed8:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table6) ;
				TurnOtherCheckers(line,column,enemy,mine,table6) ;
				checkers = scanCopyChessBoard(mine,table6) ;
				if (max < checkers)
				{
					max = checkers ;
    2edc:	c8 2e       	mov	r12, r24
    2ede:	0b c1       	rjmp	.+534    	; 0x30f6 <Tactics+0x1d0e>
					myColumn = column ;
				}
				break;
				
				case 7:
				setChecker(line,column,mine,table7) ;
    2ee0:	2b ef       	ldi	r18, 0xFB	; 251
    2ee2:	30 e0       	ldi	r19, 0x00	; 0
    2ee4:	4d 2f       	mov	r20, r29
    2ee6:	68 e0       	ldi	r22, 0x08	; 8
    2ee8:	8f 2d       	mov	r24, r15
    2eea:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table7) ;
    2eee:	0b ef       	ldi	r16, 0xFB	; 251
    2ef0:	10 e0       	ldi	r17, 0x00	; 0
    2ef2:	2d 2f       	mov	r18, r29
    2ef4:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2ef8:	68 e0       	ldi	r22, 0x08	; 8
    2efa:	8f 2d       	mov	r24, r15
    2efc:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table7) ;
    2f00:	b8 01       	movw	r22, r16
    2f02:	8d 2f       	mov	r24, r29
    2f04:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    2f08:	c8 16       	cp	r12, r24
    2f0a:	08 f0       	brcs	.+2      	; 0x2f0e <Tactics+0x1b26>
    2f0c:	f4 c0       	rjmp	.+488    	; 0x30f6 <Tactics+0x1d0e>
				{
					max = checkers ;
					myLine = line ;
    2f0e:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    2f12:	98 e0       	ldi	r25, 0x08	; 8
    2f14:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table7) ;
				TurnOtherCheckers(line,column,enemy,mine,table7) ;
				checkers = scanCopyChessBoard(mine,table7) ;
				if (max < checkers)
				{
					max = checkers ;
    2f18:	c8 2e       	mov	r12, r24
    2f1a:	ed c0       	rjmp	.+474    	; 0x30f6 <Tactics+0x1d0e>
					myColumn = column ;
				}
				break;
				
				case 8:
				setChecker(line,column,mine,table8) ;
    2f1c:	24 e9       	ldi	r18, 0x94	; 148
    2f1e:	30 e0       	ldi	r19, 0x00	; 0
    2f20:	4d 2f       	mov	r20, r29
    2f22:	68 e0       	ldi	r22, 0x08	; 8
    2f24:	8f 2d       	mov	r24, r15
    2f26:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table8) ;
    2f2a:	04 e9       	ldi	r16, 0x94	; 148
    2f2c:	10 e0       	ldi	r17, 0x00	; 0
    2f2e:	2d 2f       	mov	r18, r29
    2f30:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2f34:	68 e0       	ldi	r22, 0x08	; 8
    2f36:	8f 2d       	mov	r24, r15
    2f38:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table8) ;
    2f3c:	b8 01       	movw	r22, r16
    2f3e:	8d 2f       	mov	r24, r29
    2f40:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    2f44:	c8 16       	cp	r12, r24
    2f46:	08 f0       	brcs	.+2      	; 0x2f4a <Tactics+0x1b62>
    2f48:	d6 c0       	rjmp	.+428    	; 0x30f6 <Tactics+0x1d0e>
				{
					max = checkers ;
					myLine = line ;
    2f4a:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    2f4e:	98 e0       	ldi	r25, 0x08	; 8
    2f50:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table8) ;
				TurnOtherCheckers(line,column,enemy,mine,table8) ;
				checkers = scanCopyChessBoard(mine,table8) ;
				if (max < checkers)
				{
					max = checkers ;
    2f54:	c8 2e       	mov	r12, r24
    2f56:	cf c0       	rjmp	.+414    	; 0x30f6 <Tactics+0x1d0e>
					myColumn = column ;
				}
				break;
				
				case 9:
				setChecker(line,column,mine,table9) ;
    2f58:	2b e4       	ldi	r18, 0x4B	; 75
    2f5a:	31 e0       	ldi	r19, 0x01	; 1
    2f5c:	4d 2f       	mov	r20, r29
    2f5e:	68 e0       	ldi	r22, 0x08	; 8
    2f60:	8f 2d       	mov	r24, r15
    2f62:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
    2f66:	0b e4       	ldi	r16, 0x4B	; 75
    2f68:	11 e0       	ldi	r17, 0x01	; 1
    2f6a:	2d 2f       	mov	r18, r29
    2f6c:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2f70:	68 e0       	ldi	r22, 0x08	; 8
    2f72:	8f 2d       	mov	r24, r15
    2f74:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table9) ;
    2f78:	b8 01       	movw	r22, r16
    2f7a:	8d 2f       	mov	r24, r29
    2f7c:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    2f80:	c8 16       	cp	r12, r24
    2f82:	08 f0       	brcs	.+2      	; 0x2f86 <Tactics+0x1b9e>
    2f84:	b8 c0       	rjmp	.+368    	; 0x30f6 <Tactics+0x1d0e>
				{
					max = checkers ;
					myLine = line ;
    2f86:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    2f8a:	98 e0       	ldi	r25, 0x08	; 8
    2f8c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table9) ;
				TurnOtherCheckers(line,column,enemy,mine,table9) ;
				checkers = scanCopyChessBoard(mine,table9) ;
				if (max < checkers)
				{
					max = checkers ;
    2f90:	c8 2e       	mov	r12, r24
    2f92:	b1 c0       	rjmp	.+354    	; 0x30f6 <Tactics+0x1d0e>
					myColumn = column ;
				}
				break;
				
				case 10:
				setChecker(line,column,mine,table10) ;
    2f94:	2b e9       	ldi	r18, 0x9B	; 155
    2f96:	31 e0       	ldi	r19, 0x01	; 1
    2f98:	4d 2f       	mov	r20, r29
    2f9a:	68 e0       	ldi	r22, 0x08	; 8
    2f9c:	8f 2d       	mov	r24, r15
    2f9e:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table10) ;
    2fa2:	0b e9       	ldi	r16, 0x9B	; 155
    2fa4:	11 e0       	ldi	r17, 0x01	; 1
    2fa6:	2d 2f       	mov	r18, r29
    2fa8:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2fac:	68 e0       	ldi	r22, 0x08	; 8
    2fae:	8f 2d       	mov	r24, r15
    2fb0:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table10) ;
    2fb4:	b8 01       	movw	r22, r16
    2fb6:	8d 2f       	mov	r24, r29
    2fb8:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    2fbc:	c8 16       	cp	r12, r24
    2fbe:	08 f0       	brcs	.+2      	; 0x2fc2 <Tactics+0x1bda>
    2fc0:	9a c0       	rjmp	.+308    	; 0x30f6 <Tactics+0x1d0e>
				{
					max = checkers ;
					myLine = line ;
    2fc2:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    2fc6:	98 e0       	ldi	r25, 0x08	; 8
    2fc8:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table10) ;
				TurnOtherCheckers(line,column,enemy,mine,table10) ;
				checkers = scanCopyChessBoard(mine,table10) ;
				if (max < checkers)
				{
					max = checkers ;
    2fcc:	c8 2e       	mov	r12, r24
    2fce:	93 c0       	rjmp	.+294    	; 0x30f6 <Tactics+0x1d0e>
					myColumn = column ;
				}
				break;
				
				case 11:
				setChecker(line,column,mine,table11) ;
    2fd0:	2b e3       	ldi	r18, 0x3B	; 59
    2fd2:	31 e0       	ldi	r19, 0x01	; 1
    2fd4:	4d 2f       	mov	r20, r29
    2fd6:	68 e0       	ldi	r22, 0x08	; 8
    2fd8:	8f 2d       	mov	r24, r15
    2fda:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table11) ;
    2fde:	0b e3       	ldi	r16, 0x3B	; 59
    2fe0:	11 e0       	ldi	r17, 0x01	; 1
    2fe2:	2d 2f       	mov	r18, r29
    2fe4:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    2fe8:	68 e0       	ldi	r22, 0x08	; 8
    2fea:	8f 2d       	mov	r24, r15
    2fec:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table11) ;
    2ff0:	b8 01       	movw	r22, r16
    2ff2:	8d 2f       	mov	r24, r29
    2ff4:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    2ff8:	c8 16       	cp	r12, r24
    2ffa:	08 f0       	brcs	.+2      	; 0x2ffe <Tactics+0x1c16>
    2ffc:	7c c0       	rjmp	.+248    	; 0x30f6 <Tactics+0x1d0e>
				{
					max = checkers ;
					myLine = line ;
    2ffe:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    3002:	98 e0       	ldi	r25, 0x08	; 8
    3004:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table11) ;
				TurnOtherCheckers(line,column,enemy,mine,table11) ;
				checkers = scanCopyChessBoard(mine,table11) ;
				if (max < checkers)
				{
					max = checkers ;
    3008:	c8 2e       	mov	r12, r24
    300a:	75 c0       	rjmp	.+234    	; 0x30f6 <Tactics+0x1d0e>
					myColumn = column ;
				}
				break;
				
				case 12:
				setChecker(line,column,mine,table12) ;
    300c:	2c ea       	ldi	r18, 0xAC	; 172
    300e:	30 e0       	ldi	r19, 0x00	; 0
    3010:	4d 2f       	mov	r20, r29
    3012:	68 e0       	ldi	r22, 0x08	; 8
    3014:	8f 2d       	mov	r24, r15
    3016:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table12) ;
    301a:	0c ea       	ldi	r16, 0xAC	; 172
    301c:	10 e0       	ldi	r17, 0x00	; 0
    301e:	2d 2f       	mov	r18, r29
    3020:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    3024:	68 e0       	ldi	r22, 0x08	; 8
    3026:	8f 2d       	mov	r24, r15
    3028:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table12) ;
    302c:	b8 01       	movw	r22, r16
    302e:	8d 2f       	mov	r24, r29
    3030:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    3034:	c8 16       	cp	r12, r24
    3036:	08 f0       	brcs	.+2      	; 0x303a <Tactics+0x1c52>
    3038:	5e c0       	rjmp	.+188    	; 0x30f6 <Tactics+0x1d0e>
				{
					max = checkers ;
					myLine = line ;
    303a:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    303e:	98 e0       	ldi	r25, 0x08	; 8
    3040:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table12) ;
				TurnOtherCheckers(line,column,enemy,mine,table12) ;
				checkers = scanCopyChessBoard(mine,table12) ;
				if (max < checkers)
				{
					max = checkers ;
    3044:	c8 2e       	mov	r12, r24
    3046:	57 c0       	rjmp	.+174    	; 0x30f6 <Tactics+0x1d0e>
					myColumn = column ;
				}
				break;
				
				case 13:
				setChecker(line,column,mine,table13) ;
    3048:	2b ed       	ldi	r18, 0xDB	; 219
    304a:	30 e0       	ldi	r19, 0x00	; 0
    304c:	4d 2f       	mov	r20, r29
    304e:	68 e0       	ldi	r22, 0x08	; 8
    3050:	8f 2d       	mov	r24, r15
    3052:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table13) ;
    3056:	0b ed       	ldi	r16, 0xDB	; 219
    3058:	10 e0       	ldi	r17, 0x00	; 0
    305a:	2d 2f       	mov	r18, r29
    305c:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    3060:	68 e0       	ldi	r22, 0x08	; 8
    3062:	8f 2d       	mov	r24, r15
    3064:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table13) ;
    3068:	b8 01       	movw	r22, r16
    306a:	8d 2f       	mov	r24, r29
    306c:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    3070:	c8 16       	cp	r12, r24
    3072:	08 f0       	brcs	.+2      	; 0x3076 <Tactics+0x1c8e>
    3074:	40 c0       	rjmp	.+128    	; 0x30f6 <Tactics+0x1d0e>
				{
					max = checkers ;
					myLine = line ;
    3076:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    307a:	98 e0       	ldi	r25, 0x08	; 8
    307c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table13) ;
				TurnOtherCheckers(line,column,enemy,mine,table13) ;
				checkers = scanCopyChessBoard(mine,table13) ;
				if (max < checkers)
				{
					max = checkers ;
    3080:	c8 2e       	mov	r12, r24
    3082:	39 c0       	rjmp	.+114    	; 0x30f6 <Tactics+0x1d0e>
					myColumn = column ;
				}
				break;
				
				case 14:
				setChecker(line,column,mine,table14) ;
    3084:	2b e2       	ldi	r18, 0x2B	; 43
    3086:	31 e0       	ldi	r19, 0x01	; 1
    3088:	4d 2f       	mov	r20, r29
    308a:	68 e0       	ldi	r22, 0x08	; 8
    308c:	8f 2d       	mov	r24, r15
    308e:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table14) ;
    3092:	0b e2       	ldi	r16, 0x2B	; 43
    3094:	11 e0       	ldi	r17, 0x01	; 1
    3096:	2d 2f       	mov	r18, r29
    3098:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    309c:	68 e0       	ldi	r22, 0x08	; 8
    309e:	8f 2d       	mov	r24, r15
    30a0:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table14) ;
    30a4:	b8 01       	movw	r22, r16
    30a6:	8d 2f       	mov	r24, r29
    30a8:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    30ac:	c8 16       	cp	r12, r24
    30ae:	18 f5       	brcc	.+70     	; 0x30f6 <Tactics+0x1d0e>
				{
					max = checkers ;
					myLine = line ;
    30b0:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    30b4:	98 e0       	ldi	r25, 0x08	; 8
    30b6:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table14) ;
				TurnOtherCheckers(line,column,enemy,mine,table14) ;
				checkers = scanCopyChessBoard(mine,table14) ;
				if (max < checkers)
				{
					max = checkers ;
    30ba:	c8 2e       	mov	r12, r24
    30bc:	1c c0       	rjmp	.+56     	; 0x30f6 <Tactics+0x1d0e>
					myColumn = column ;
				}
				break;
				
				default:
				setChecker(line,column,mine,table15) ;
    30be:	2b e0       	ldi	r18, 0x0B	; 11
    30c0:	31 e0       	ldi	r19, 0x01	; 1
    30c2:	4d 2f       	mov	r20, r29
    30c4:	68 e0       	ldi	r22, 0x08	; 8
    30c6:	8f 2d       	mov	r24, r15
    30c8:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(line,column,enemy,mine,table15) ;
    30cc:	0b e0       	ldi	r16, 0x0B	; 11
    30ce:	11 e0       	ldi	r17, 0x01	; 1
    30d0:	2d 2f       	mov	r18, r29
    30d2:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    30d6:	68 e0       	ldi	r22, 0x08	; 8
    30d8:	8f 2d       	mov	r24, r15
    30da:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				checkers = scanCopyChessBoard(mine,table15) ;
    30de:	b8 01       	movw	r22, r16
    30e0:	8d 2f       	mov	r24, r29
    30e2:	0e 94 bc 09 	call	0x1378	; 0x1378 <scanCopyChessBoard>
				if (max < checkers)
    30e6:	c8 16       	cp	r12, r24
    30e8:	30 f4       	brcc	.+12     	; 0x30f6 <Tactics+0x1d0e>
				{
					max = checkers ;
					myLine = line ;
    30ea:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <myLine>
					myColumn = column ;
    30ee:	98 e0       	ldi	r25, 0x08	; 8
    30f0:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
				setChecker(line,column,mine,table15) ;
				TurnOtherCheckers(line,column,enemy,mine,table15) ;
				checkers = scanCopyChessBoard(mine,table15) ;
				if (max < checkers)
				{
					max = checkers ;
    30f4:	c8 2e       	mov	r12, r24
	uint8_t count = 0 ;
	uint8_t max = 0 ;
	uint8_t checkers = 0 ;
	char line = (char) 0 ;
	uint8_t column = 0 ;
	for (uint8_t index = 0; index < SIZE/2; index++)
    30f6:	d3 94       	inc	r13
    30f8:	87 e0       	ldi	r24, 0x07	; 7
    30fa:	8d 15       	cp	r24, r13
    30fc:	10 f0       	brcs	.+4      	; 0x3102 <Tactics+0x1d1a>
    30fe:	0c 94 02 0a 	jmp	0x1404	; 0x1404 <Tactics+0x1c>
				break;
			}
			
		}
	}
    3102:	df 91       	pop	r29
    3104:	cf 91       	pop	r28
    3106:	1f 91       	pop	r17
    3108:	0f 91       	pop	r16
    310a:	ff 90       	pop	r15
    310c:	ef 90       	pop	r14
    310e:	df 90       	pop	r13
    3110:	cf 90       	pop	r12
    3112:	08 95       	ret

00003114 <examineInstr>:
	}
	return c ;
}

void examineInstr(char c[])
{
    3114:	ef 92       	push	r14
    3116:	ff 92       	push	r15
    3118:	0f 93       	push	r16
    311a:	1f 93       	push	r17
    311c:	cf 93       	push	r28
    311e:	df 93       	push	r29
    3120:	7c 01       	movw	r14, r24
	if (strlen(c) == 2 && c[0] == 'A' && c[1] == 'T')
    3122:	ec 01       	movw	r28, r24
    3124:	09 90       	ld	r0, Y+
    3126:	00 20       	and	r0, r0
    3128:	e9 f7       	brne	.-6      	; 0x3124 <examineInstr+0x10>
    312a:	21 97       	sbiw	r28, 0x01	; 1
    312c:	c8 1b       	sub	r28, r24
    312e:	d9 0b       	sbc	r29, r25
    3130:	c2 30       	cpi	r28, 0x02	; 2
    3132:	d1 05       	cpc	r29, r1
    3134:	89 f4       	brne	.+34     	; 0x3158 <examineInstr+0x44>
    3136:	fc 01       	movw	r30, r24
    3138:	80 81       	ld	r24, Z
    313a:	81 34       	cpi	r24, 0x41	; 65
    313c:	69 f4       	brne	.+26     	; 0x3158 <examineInstr+0x44>
    313e:	81 81       	ldd	r24, Z+1	; 0x01
    3140:	84 35       	cpi	r24, 0x54	; 84
    3142:	51 f4       	brne	.+20     	; 0x3158 <examineInstr+0x44>
	{
		/* Simple answer ok */
		/*writeString("OK\r") ; */
		writeByte('O') ;
    3144:	8f e4       	ldi	r24, 0x4F	; 79
    3146:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
		writeByte('K') ;
    314a:	8b e4       	ldi	r24, 0x4B	; 75
    314c:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
		writeByte('\r') ;
    3150:	8d e0       	ldi	r24, 0x0D	; 13
    3152:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
    3156:	15 c2       	rjmp	.+1066   	; 0x3582 <examineInstr+0x46e>
		/* Begin timer */
		//TCCR1B |= (1 << CS12) ;
		
	}
	else if (strlen(c) == 3 && c[0] == 'R' && c[1] == 'S' && c[2] == 'T')
    3158:	c3 30       	cpi	r28, 0x03	; 3
    315a:	d1 05       	cpc	r29, r1
    315c:	a1 f4       	brne	.+40     	; 0x3186 <examineInstr+0x72>
    315e:	f7 01       	movw	r30, r14
    3160:	80 81       	ld	r24, Z
    3162:	82 35       	cpi	r24, 0x52	; 82
    3164:	81 f4       	brne	.+32     	; 0x3186 <examineInstr+0x72>
    3166:	81 81       	ldd	r24, Z+1	; 0x01
    3168:	83 35       	cpi	r24, 0x53	; 83
    316a:	69 f4       	brne	.+26     	; 0x3186 <examineInstr+0x72>
    316c:	82 81       	ldd	r24, Z+2	; 0x02
    316e:	84 35       	cpi	r24, 0x54	; 84
    3170:	51 f4       	brne	.+20     	; 0x3186 <examineInstr+0x72>
	{
		/* Reset (warm start) */
		/* writeString("OK\r") ; */
		writeByte('O') ;
    3172:	8f e4       	ldi	r24, 0x4F	; 79
    3174:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
		writeByte('K') ;
    3178:	8b e4       	ldi	r24, 0x4B	; 75
    317a:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
		writeByte('\r') ;
    317e:	8d e0       	ldi	r24, 0x0D	; 13
    3180:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
    3184:	fe c1       	rjmp	.+1020   	; 0x3582 <examineInstr+0x46e>
		/*Begin timer */
		//TCCR1B |= (1 << CS12) ;
	}
	else if (strlen(c) == 4 && c[0] == 'S' && c[1] == 'P' && c[2] == ' ' && (c[3] == 'B' || c[3] == 'W'))
    3186:	c4 30       	cpi	r28, 0x04	; 4
    3188:	d1 05       	cpc	r29, r1
    318a:	81 f5       	brne	.+96     	; 0x31ec <examineInstr+0xd8>
    318c:	f7 01       	movw	r30, r14
    318e:	80 81       	ld	r24, Z
    3190:	83 35       	cpi	r24, 0x53	; 83
    3192:	61 f5       	brne	.+88     	; 0x31ec <examineInstr+0xd8>
    3194:	81 81       	ldd	r24, Z+1	; 0x01
    3196:	80 35       	cpi	r24, 0x50	; 80
    3198:	49 f5       	brne	.+82     	; 0x31ec <examineInstr+0xd8>
    319a:	82 81       	ldd	r24, Z+2	; 0x02
    319c:	80 32       	cpi	r24, 0x20	; 32
    319e:	31 f5       	brne	.+76     	; 0x31ec <examineInstr+0xd8>
    31a0:	83 81       	ldd	r24, Z+3	; 0x03
    31a2:	82 34       	cpi	r24, 0x42	; 66
    31a4:	11 f0       	breq	.+4      	; 0x31aa <examineInstr+0x96>
    31a6:	87 35       	cpi	r24, 0x57	; 87
    31a8:	09 f5       	brne	.+66     	; 0x31ec <examineInstr+0xd8>
	{
		/* Set players to black or white */
		if (c[3] == 'B')
    31aa:	82 34       	cpi	r24, 0x42	; 66
    31ac:	79 f4       	brne	.+30     	; 0x31cc <examineInstr+0xb8>
		{
			/* Set player to black */
			enemy = 'B';
    31ae:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <enemy>
			mine = 'W' ;
    31b2:	87 e5       	ldi	r24, 0x57	; 87
    31b4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <mine>
			/*writeString("\r") ; */
			writeByte('O') ;
    31b8:	8f e4       	ldi	r24, 0x4F	; 79
    31ba:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
			writeByte('K') ;
    31be:	8b e4       	ldi	r24, 0x4B	; 75
    31c0:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
			writeByte('\r') ;
    31c4:	8d e0       	ldi	r24, 0x0D	; 13
    31c6:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
    31ca:	db c1       	rjmp	.+950    	; 0x3582 <examineInstr+0x46e>
			//TCCR1B |= (1 << CS12) ;
		}
		else
		{
			/* Set player to white */
			enemy = 'W';
    31cc:	87 e5       	ldi	r24, 0x57	; 87
    31ce:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <enemy>
			mine = 'B';
    31d2:	82 e4       	ldi	r24, 0x42	; 66
    31d4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <mine>
			/*writeString("\r") ; */
			writeByte('O') ;
    31d8:	8f e4       	ldi	r24, 0x4F	; 79
    31da:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
			writeByte('K') ;
    31de:	8b e4       	ldi	r24, 0x4B	; 75
    31e0:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
			writeByte('\r') ;
    31e4:	8d e0       	ldi	r24, 0x0D	; 13
    31e6:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
    31ea:	cb c1       	rjmp	.+918    	; 0x3582 <examineInstr+0x46e>
			/* Begin timer */
			//TCCR1B |= (1 << CS12) ;
		}
	}
	else if (strlen(c) == 2 && c[0] == 'N' && c[1] == 'G')
    31ec:	c2 30       	cpi	r28, 0x02	; 2
    31ee:	d1 05       	cpc	r29, r1
    31f0:	b9 f4       	brne	.+46     	; 0x3220 <examineInstr+0x10c>
    31f2:	f7 01       	movw	r30, r14
    31f4:	80 81       	ld	r24, Z
    31f6:	8e 34       	cpi	r24, 0x4E	; 78
    31f8:	99 f4       	brne	.+38     	; 0x3220 <examineInstr+0x10c>
    31fa:	81 81       	ldd	r24, Z+1	; 0x01
    31fc:	87 34       	cpi	r24, 0x47	; 71
    31fe:	81 f4       	brne	.+32     	; 0x3220 <examineInstr+0x10c>
	{
		/* New game */
		tableInit();
    3200:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <tableInit>
		scanChessboard(mine) ;
    3204:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <mine>
    3208:	0e 94 30 06 	call	0xc60	; 0xc60 <scanChessboard>
		/*writeString("OK\r") ; */
		writeByte('O') ;
    320c:	8f e4       	ldi	r24, 0x4F	; 79
    320e:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
		writeByte('K') ;
    3212:	8b e4       	ldi	r24, 0x4B	; 75
    3214:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
		writeByte('\r') ;
    3218:	8d e0       	ldi	r24, 0x0D	; 13
    321a:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
    321e:	b1 c1       	rjmp	.+866    	; 0x3582 <examineInstr+0x46e>
		/* Begin timer */
		//TCCR1B |= (1 << CS12) ;
		
	}
	else if (strlen(c) == 2 && c[0] == 'E' && c[1] == 'G')
    3220:	c2 30       	cpi	r28, 0x02	; 2
    3222:	d1 05       	cpc	r29, r1
    3224:	a9 f5       	brne	.+106    	; 0x3290 <examineInstr+0x17c>
    3226:	f7 01       	movw	r30, r14
    3228:	80 81       	ld	r24, Z
    322a:	85 34       	cpi	r24, 0x45	; 69
    322c:	89 f5       	brne	.+98     	; 0x3290 <examineInstr+0x17c>
    322e:	81 81       	ldd	r24, Z+1	; 0x01
    3230:	87 34       	cpi	r24, 0x47	; 71
    3232:	71 f5       	brne	.+92     	; 0x3290 <examineInstr+0x17c>
	{
		/* End game */
		/* Disable timer */
		TCCR1B &= 0b11111011 ;
    3234:	8e b5       	in	r24, 0x2e	; 46
    3236:	8b 7f       	andi	r24, 0xFB	; 251
    3238:	8e bd       	out	0x2e, r24	; 46
		TCNT1 = 0 ;
    323a:	1d bc       	out	0x2d, r1	; 45
    323c:	1c bc       	out	0x2c, r1	; 44
		if (seconds > timelimit)									/* if the opponents exceeds the allowable timelimit then send illegal time */
    323e:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <__data_end>
    3242:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <timelimit>
    3246:	89 17       	cp	r24, r25
    3248:	10 f4       	brcc	.+4      	; 0x324e <examineInstr+0x13a>
		{
			IllegalTime() ;
    324a:	0e 94 fe 01 	call	0x3fc	; 0x3fc <IllegalTime>
		}
		seconds = 0 ;
    324e:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <__data_end>
		
		if (countMineValidmoves() == 0 && countEnemyValidmoves() == 0)
    3252:	0e 94 19 09 	call	0x1232	; 0x1232 <countMineValidmoves>
    3256:	81 11       	cpse	r24, r1
    3258:	0e c0       	rjmp	.+28     	; 0x3276 <examineInstr+0x162>
    325a:	0e 94 38 09 	call	0x1270	; 0x1270 <countEnemyValidmoves>
    325e:	81 11       	cpse	r24, r1
    3260:	0a c0       	rjmp	.+20     	; 0x3276 <examineInstr+0x162>
		{
			writeByte('O') ;
    3262:	8f e4       	ldi	r24, 0x4F	; 79
    3264:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
			writeByte('K') ;
    3268:	8b e4       	ldi	r24, 0x4B	; 75
    326a:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
			writeByte('\r') ;
    326e:	8d e0       	ldi	r24, 0x0D	; 13
    3270:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
    3274:	09 c0       	rjmp	.+18     	; 0x3288 <examineInstr+0x174>
		}
		else
		{
			writeByte('P') ;
    3276:	80 e5       	ldi	r24, 0x50	; 80
    3278:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
			writeByte('L') ;
    327c:	8c e4       	ldi	r24, 0x4C	; 76
    327e:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
			writeByte('\r') ;
    3282:	8d e0       	ldi	r24, 0x0D	; 13
    3284:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
		}
		/* Start again opponents time */
		TCCR1B |= (1 << CS12) ;
    3288:	8e b5       	in	r24, 0x2e	; 46
    328a:	84 60       	ori	r24, 0x04	; 4
    328c:	8e bd       	out	0x2e, r24	; 46
    328e:	79 c1       	rjmp	.+754    	; 0x3582 <examineInstr+0x46e>
	}
	else if (strlen(c) == 4 && c[0] == 'S' && c[1] == 'T' && c[2] == ' ' && (asciiToInteger(c[3]) >= 1 && asciiToInteger(c[3]) <=9))
    3290:	c4 30       	cpi	r28, 0x04	; 4
    3292:	d1 05       	cpc	r29, r1
    3294:	39 f5       	brne	.+78     	; 0x32e4 <examineInstr+0x1d0>
    3296:	f7 01       	movw	r30, r14
    3298:	80 81       	ld	r24, Z
    329a:	83 35       	cpi	r24, 0x53	; 83
    329c:	19 f5       	brne	.+70     	; 0x32e4 <examineInstr+0x1d0>
    329e:	81 81       	ldd	r24, Z+1	; 0x01
    32a0:	84 35       	cpi	r24, 0x54	; 84
    32a2:	01 f5       	brne	.+64     	; 0x32e4 <examineInstr+0x1d0>
    32a4:	82 81       	ldd	r24, Z+2	; 0x02
    32a6:	80 32       	cpi	r24, 0x20	; 32
    32a8:	e9 f4       	brne	.+58     	; 0x32e4 <examineInstr+0x1d0>
    32aa:	83 81       	ldd	r24, Z+3	; 0x03
    32ac:	0e 94 5e 01 	call	0x2bc	; 0x2bc <asciiToInteger>
    32b0:	88 23       	and	r24, r24
    32b2:	c1 f0       	breq	.+48     	; 0x32e4 <examineInstr+0x1d0>
    32b4:	8a 30       	cpi	r24, 0x0A	; 10
    32b6:	b0 f4       	brcc	.+44     	; 0x32e4 <examineInstr+0x1d0>
	{
		/* set time limit */
		TCCR1B &= 0b11111011 ;										/* Disable timer */
    32b8:	8e b5       	in	r24, 0x2e	; 46
    32ba:	8b 7f       	andi	r24, 0xFB	; 251
    32bc:	8e bd       	out	0x2e, r24	; 46
		timelimit = asciiToInteger(c[3]) ;							/* Change timing limit */
    32be:	f7 01       	movw	r30, r14
    32c0:	83 81       	ldd	r24, Z+3	; 0x03
    32c2:	0e 94 5e 01 	call	0x2bc	; 0x2bc <asciiToInteger>
    32c6:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <timelimit>
		writeByte('O') ;
    32ca:	8f e4       	ldi	r24, 0x4F	; 79
    32cc:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
		writeByte('K') ;
    32d0:	8b e4       	ldi	r24, 0x4B	; 75
    32d2:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
		writeByte('\r') ;
    32d6:	8d e0       	ldi	r24, 0x0D	; 13
    32d8:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
		TCCR1B |= (1 << CS12) ;										/* Renable timer */
    32dc:	8e b5       	in	r24, 0x2e	; 46
    32de:	84 60       	ori	r24, 0x04	; 4
    32e0:	8e bd       	out	0x2e, r24	; 46
    32e2:	4f c1       	rjmp	.+670    	; 0x3582 <examineInstr+0x46e>
		
	}
	else if (strlen(c) == 2 && c[0] == 'O' && c[1] == 'K')
    32e4:	c2 30       	cpi	r28, 0x02	; 2
    32e6:	d1 05       	cpc	r29, r1
    32e8:	09 f0       	breq	.+2      	; 0x32ec <examineInstr+0x1d8>
    32ea:	40 c0       	rjmp	.+128    	; 0x336c <examineInstr+0x258>
    32ec:	f7 01       	movw	r30, r14
    32ee:	80 81       	ld	r24, Z
    32f0:	8f 34       	cpi	r24, 0x4F	; 79
    32f2:	e1 f5       	brne	.+120    	; 0x336c <examineInstr+0x258>
    32f4:	81 81       	ldd	r24, Z+1	; 0x01
    32f6:	8b 34       	cpi	r24, 0x4B	; 75
    32f8:	c9 f5       	brne	.+114    	; 0x336c <examineInstr+0x258>
		//if (seconds > timelimit)									/* if the opponents exceeds the allowable timelimit then send illegal time */
		//{
			//IllegalTime() ;
		//}
		//seconds = 0 ;
		if (countMineValidmoves() > 0)
    32fa:	0e 94 19 09 	call	0x1232	; 0x1232 <countMineValidmoves>
    32fe:	88 23       	and	r24, r24
    3300:	79 f1       	breq	.+94     	; 0x3360 <examineInstr+0x24c>
		{
			clearValidMoves() ;
    3302:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <clearValidMoves>
			scanChessboard(mine) ;
    3306:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <mine>
    330a:	0e 94 30 06 	call	0xc60	; 0xc60 <scanChessboard>
			/* firstValid(mine) ; */
			copyChessboard() ;
    330e:	0e 94 73 09 	call	0x12e6	; 0x12e6 <copyChessboard>
			Tactics(mine) ;
    3312:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <mine>
    3316:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <Tactics>
			setChecker(myLine,myColumn,mine,table) ;
    331a:	2c eb       	ldi	r18, 0xBC	; 188
    331c:	30 e0       	ldi	r19, 0x00	; 0
    331e:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <mine>
    3322:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__data_start>
    3326:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <myLine>
    332a:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
			TurnOtherCheckers(myLine,myColumn,enemy,mine,table);
    332e:	0c eb       	ldi	r16, 0xBC	; 188
    3330:	10 e0       	ldi	r17, 0x00	; 0
    3332:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <mine>
    3336:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    333a:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__data_start>
    333e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <myLine>
    3342:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
			clearValidMoves() ;
    3346:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <clearValidMoves>
			scanChessboard(mine) ;
    334a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <mine>
    334e:	0e 94 30 06 	call	0xc60	; 0xc60 <scanChessboard>
			MyMove(myLine,myColumn) ;
    3352:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__data_start>
    3356:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <myLine>
    335a:	0e 94 a8 01 	call	0x350	; 0x350 <MyMove>
    335e:	02 c0       	rjmp	.+4      	; 0x3364 <examineInstr+0x250>
		}
		else
		{
			MyPass() ;
    3360:	0e 94 c3 01 	call	0x386	; 0x386 <MyPass>
		}
		/* I played my move. So the enemy stops counting my time and i started counting his time */
		TCCR1B |= (1 << CS12) ;
    3364:	8e b5       	in	r24, 0x2e	; 46
    3366:	84 60       	ori	r24, 0x04	; 4
    3368:	8e bd       	out	0x2e, r24	; 46
    336a:	0b c1       	rjmp	.+534    	; 0x3582 <examineInstr+0x46e>
		
	}
	else if (strlen(c) == 5 && c[0] == 'M' && c[1] == 'V' && c[2] == ' ' && (c[3] >= 'A' && c[3] <= 'H') && (c[4] >= '1' && c[4] <= '8'))
    336c:	c5 30       	cpi	r28, 0x05	; 5
    336e:	d1 05       	cpc	r29, r1
    3370:	09 f0       	breq	.+2      	; 0x3374 <examineInstr+0x260>
    3372:	66 c0       	rjmp	.+204    	; 0x3440 <examineInstr+0x32c>
    3374:	f7 01       	movw	r30, r14
    3376:	80 81       	ld	r24, Z
    3378:	8d 34       	cpi	r24, 0x4D	; 77
    337a:	09 f0       	breq	.+2      	; 0x337e <examineInstr+0x26a>
    337c:	61 c0       	rjmp	.+194    	; 0x3440 <examineInstr+0x32c>
    337e:	81 81       	ldd	r24, Z+1	; 0x01
    3380:	86 35       	cpi	r24, 0x56	; 86
    3382:	09 f0       	breq	.+2      	; 0x3386 <examineInstr+0x272>
    3384:	5d c0       	rjmp	.+186    	; 0x3440 <examineInstr+0x32c>
    3386:	82 81       	ldd	r24, Z+2	; 0x02
    3388:	80 32       	cpi	r24, 0x20	; 32
    338a:	09 f0       	breq	.+2      	; 0x338e <examineInstr+0x27a>
    338c:	59 c0       	rjmp	.+178    	; 0x3440 <examineInstr+0x32c>
    338e:	83 81       	ldd	r24, Z+3	; 0x03
    3390:	81 54       	subi	r24, 0x41	; 65
    3392:	88 30       	cpi	r24, 0x08	; 8
    3394:	08 f0       	brcs	.+2      	; 0x3398 <examineInstr+0x284>
    3396:	54 c0       	rjmp	.+168    	; 0x3440 <examineInstr+0x32c>
    3398:	84 81       	ldd	r24, Z+4	; 0x04
    339a:	81 53       	subi	r24, 0x31	; 49
    339c:	88 30       	cpi	r24, 0x08	; 8
    339e:	08 f0       	brcs	.+2      	; 0x33a2 <examineInstr+0x28e>
    33a0:	4f c0       	rjmp	.+158    	; 0x3440 <examineInstr+0x32c>
	{
		/* Opponent move*/
		/* I am stopping counting his time. Disable timer by clearing prescaler */
		TCCR1B &= 0b11111011 ;
    33a2:	8e b5       	in	r24, 0x2e	; 46
    33a4:	8b 7f       	andi	r24, 0xFB	; 251
    33a6:	8e bd       	out	0x2e, r24	; 46
		/* Reset timer's value */
		TCNT1 = 0 ;
    33a8:	1d bc       	out	0x2d, r1	; 45
    33aa:	1c bc       	out	0x2c, r1	; 44
		/* Then I check if he exceeds the allowable timelimit */
		if (seconds > timelimit)
    33ac:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <__data_end>
    33b0:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <timelimit>
    33b4:	89 17       	cp	r24, r25
    33b6:	30 f4       	brcc	.+12     	; 0x33c4 <examineInstr+0x2b0>
		{
			PORTB &= 0b11111011 ;
    33b8:	88 b3       	in	r24, 0x18	; 24
    33ba:	8b 7f       	andi	r24, 0xFB	; 251
    33bc:	88 bb       	out	0x18, r24	; 24
			IllegalTime() ;
    33be:	0e 94 fe 01 	call	0x3fc	; 0x3fc <IllegalTime>
    33c2:	03 c0       	rjmp	.+6      	; 0x33ca <examineInstr+0x2b6>
		}
		else
		{
			PORTB |= (1 << PB5) ;
    33c4:	88 b3       	in	r24, 0x18	; 24
    33c6:	80 62       	ori	r24, 0x20	; 32
    33c8:	88 bb       	out	0x18, r24	; 24
		}
		/* reset opponents time - thinking */
		seconds = 0 ;
    33ca:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <__data_end>
		
		if (checkEnemyMove(c[3],asciiToInteger(c[4])) == 1)
    33ce:	f7 01       	movw	r30, r14
    33d0:	84 81       	ldd	r24, Z+4	; 0x04
    33d2:	0e 94 5e 01 	call	0x2bc	; 0x2bc <asciiToInteger>
    33d6:	d8 2f       	mov	r29, r24
    33d8:	f7 01       	movw	r30, r14
    33da:	c3 81       	ldd	r28, Z+3	; 0x03
    33dc:	68 2f       	mov	r22, r24
    33de:	8c 2f       	mov	r24, r28
    33e0:	0e 94 6d 02 	call	0x4da	; 0x4da <checkEnemyMove>
    33e4:	81 30       	cpi	r24, 0x01	; 1
    33e6:	49 f5       	brne	.+82     	; 0x343a <examineInstr+0x326>
		{
			setChecker(c[3],asciiToInteger(c[4]),enemy,table);
    33e8:	2c eb       	ldi	r18, 0xBC	; 188
    33ea:	30 e0       	ldi	r19, 0x00	; 0
    33ec:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    33f0:	6d 2f       	mov	r22, r29
    33f2:	8c 2f       	mov	r24, r28
    33f4:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
			TurnOtherCheckers(c[3],asciiToInteger(c[4]),mine,enemy,table) ;
    33f8:	d0 91 63 00 	lds	r29, 0x0063	; 0x800063 <enemy>
    33fc:	c0 91 62 00 	lds	r28, 0x0062	; 0x800062 <mine>
    3400:	f7 01       	movw	r30, r14
    3402:	84 81       	ldd	r24, Z+4	; 0x04
    3404:	0e 94 5e 01 	call	0x2bc	; 0x2bc <asciiToInteger>
    3408:	0c eb       	ldi	r16, 0xBC	; 188
    340a:	10 e0       	ldi	r17, 0x00	; 0
    340c:	2d 2f       	mov	r18, r29
    340e:	4c 2f       	mov	r20, r28
    3410:	68 2f       	mov	r22, r24
    3412:	f7 01       	movw	r30, r14
    3414:	83 81       	ldd	r24, Z+3	; 0x03
    3416:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
			clearValidMoves() ;
    341a:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <clearValidMoves>
			scanChessboard(mine) ;
    341e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <mine>
    3422:	0e 94 30 06 	call	0xc60	; 0xc60 <scanChessboard>
			
			writeByte('O') ;
    3426:	8f e4       	ldi	r24, 0x4F	; 79
    3428:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
			writeByte('K') ;
    342c:	8b e4       	ldi	r24, 0x4B	; 75
    342e:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
			writeByte('\r') ;
    3432:	8d e0       	ldi	r24, 0x0D	; 13
    3434:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
    3438:	a4 c0       	rjmp	.+328    	; 0x3582 <examineInstr+0x46e>
		}else
		{
			IllegalMove();
    343a:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <IllegalMove>
    343e:	a1 c0       	rjmp	.+322    	; 0x3582 <examineInstr+0x46e>
		}

	}
	else if (strlen(c) == 2 && c[0] == 'P' && c[1] == 'S')
    3440:	c2 30       	cpi	r28, 0x02	; 2
    3442:	d1 05       	cpc	r29, r1
    3444:	09 f0       	breq	.+2      	; 0x3448 <examineInstr+0x334>
    3446:	77 c0       	rjmp	.+238    	; 0x3536 <examineInstr+0x422>
    3448:	f7 01       	movw	r30, r14
    344a:	80 81       	ld	r24, Z
    344c:	80 35       	cpi	r24, 0x50	; 80
    344e:	09 f0       	breq	.+2      	; 0x3452 <examineInstr+0x33e>
    3450:	72 c0       	rjmp	.+228    	; 0x3536 <examineInstr+0x422>
    3452:	81 81       	ldd	r24, Z+1	; 0x01
    3454:	83 35       	cpi	r24, 0x53	; 83
    3456:	09 f0       	breq	.+2      	; 0x345a <examineInstr+0x346>
    3458:	6e c0       	rjmp	.+220    	; 0x3536 <examineInstr+0x422>
	{
		/* Pass PC doesn't have any move ΞΌC will play again */
		/*writeString("OK\r") ; */
		TCCR1B &= 0b11111011 ;
    345a:	8e b5       	in	r24, 0x2e	; 46
    345c:	8b 7f       	andi	r24, 0xFB	; 251
    345e:	8e bd       	out	0x2e, r24	; 46
		/* Reset timer's value */
		TCNT1 = 0 ;
    3460:	1d bc       	out	0x2d, r1	; 45
    3462:	1c bc       	out	0x2c, r1	; 44
		/* Then I check if he exceeds the allowable timelimit */
		if (seconds > timelimit)
    3464:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <__data_end>
    3468:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <timelimit>
    346c:	89 17       	cp	r24, r25
    346e:	30 f4       	brcc	.+12     	; 0x347c <examineInstr+0x368>
		{
			PORTB &= 0b11111011 ;
    3470:	88 b3       	in	r24, 0x18	; 24
    3472:	8b 7f       	andi	r24, 0xFB	; 251
    3474:	88 bb       	out	0x18, r24	; 24
			IllegalTime() ;
    3476:	0e 94 fe 01 	call	0x3fc	; 0x3fc <IllegalTime>
    347a:	03 c0       	rjmp	.+6      	; 0x3482 <examineInstr+0x36e>
		}
		else
		{
			PORTB |= (1 << PB5) ;
    347c:	88 b3       	in	r24, 0x18	; 24
    347e:	80 62       	ori	r24, 0x20	; 32
    3480:	88 bb       	out	0x18, r24	; 24
		}
		/* reset opponents time - thinking */
		seconds = 0 ;
    3482:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <__data_end>
		
		
		writeByte('O') ;
    3486:	8f e4       	ldi	r24, 0x4F	; 79
    3488:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
		writeByte('K') ;
    348c:	8b e4       	ldi	r24, 0x4B	; 75
    348e:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
		writeByte('\r') ;
    3492:	8d e0       	ldi	r24, 0x0D	; 13
    3494:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
		
		if (countEnemyValidmoves() == 0)
    3498:	0e 94 38 09 	call	0x1270	; 0x1270 <countEnemyValidmoves>
    349c:	81 11       	cpse	r24, r1
    349e:	48 c0       	rjmp	.+144    	; 0x3530 <examineInstr+0x41c>
		{
			if (countMineValidmoves() == 0)
    34a0:	0e 94 19 09 	call	0x1232	; 0x1232 <countMineValidmoves>
    34a4:	81 11       	cpse	r24, r1
    34a6:	12 c0       	rjmp	.+36     	; 0x34cc <examineInstr+0x3b8>
			{
				writeByte('E') ;
    34a8:	85 e4       	ldi	r24, 0x45	; 69
    34aa:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
				writeByte('G') ;
    34ae:	87 e4       	ldi	r24, 0x47	; 71
    34b0:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
				writeByte('\r') ;
    34b4:	8d e0       	ldi	r24, 0x0D	; 13
    34b6:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
				
				/* Check who won the game */
				checkWin(mine,blackCount,whiteCount) ;
    34ba:	40 91 6a 00 	lds	r20, 0x006A	; 0x80006a <whiteCount>
    34be:	60 91 6b 00 	lds	r22, 0x006B	; 0x80006b <blackCount>
    34c2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <mine>
    34c6:	0e 94 57 09 	call	0x12ae	; 0x12ae <checkWin>
    34ca:	5b c0       	rjmp	.+182    	; 0x3582 <examineInstr+0x46e>
			}
			else
			{
				clearValidMoves() ;
    34cc:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <clearValidMoves>
				scanChessboard(mine) ;
    34d0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <mine>
    34d4:	0e 94 30 06 	call	0xc60	; 0xc60 <scanChessboard>
				copyChessboard() ;
    34d8:	0e 94 73 09 	call	0x12e6	; 0x12e6 <copyChessboard>
				Tactics(mine) ;
    34dc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <mine>
    34e0:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <Tactics>
				setChecker(myLine,myColumn,mine,table) ;
    34e4:	2c eb       	ldi	r18, 0xBC	; 188
    34e6:	30 e0       	ldi	r19, 0x00	; 0
    34e8:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <mine>
    34ec:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__data_start>
    34f0:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <myLine>
    34f4:	0e 94 08 02 	call	0x410	; 0x410 <setChecker>
				TurnOtherCheckers(myLine,myColumn,enemy,mine,table) ;
    34f8:	0c eb       	ldi	r16, 0xBC	; 188
    34fa:	10 e0       	ldi	r17, 0x00	; 0
    34fc:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <mine>
    3500:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <enemy>
    3504:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__data_start>
    3508:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <myLine>
    350c:	0e 94 f1 06 	call	0xde2	; 0xde2 <TurnOtherCheckers>
				clearValidMoves() ;
    3510:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <clearValidMoves>
				scanChessboard(mine) ;
    3514:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <mine>
    3518:	0e 94 30 06 	call	0xc60	; 0xc60 <scanChessboard>
				MyMove(myLine,myColumn) ;
    351c:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__data_start>
    3520:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <myLine>
    3524:	0e 94 a8 01 	call	0x350	; 0x350 <MyMove>
				/* I played my move. So the enemy stops counting my time and i started counting his time */
				TCCR1B |= (1 << CS12) ;
    3528:	8e b5       	in	r24, 0x2e	; 46
    352a:	84 60       	ori	r24, 0x04	; 4
    352c:	8e bd       	out	0x2e, r24	; 46
    352e:	29 c0       	rjmp	.+82     	; 0x3582 <examineInstr+0x46e>
			
		}
		else
		{
			/* Enemy is trolling. He has available moves but he plays Pass */
			IllegalMove() ;
    3530:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <IllegalMove>
    3534:	26 c0       	rjmp	.+76     	; 0x3582 <examineInstr+0x46e>
		}
		
		
	}
	else if (strlen(c) == 2 && c[0] == 'P' && c[1] == 'L')
    3536:	c2 30       	cpi	r28, 0x02	; 2
    3538:	d1 05       	cpc	r29, r1
    353a:	39 f4       	brne	.+14     	; 0x354a <examineInstr+0x436>
    353c:	f7 01       	movw	r30, r14
    353e:	80 81       	ld	r24, Z
    3540:	80 35       	cpi	r24, 0x50	; 80
    3542:	19 f4       	brne	.+6      	; 0x354a <examineInstr+0x436>
    3544:	81 81       	ldd	r24, Z+1	; 0x01
    3546:	8c 34       	cpi	r24, 0x4C	; 76
    3548:	e1 f0       	breq	.+56     	; 0x3582 <examineInstr+0x46e>
	{
		/* Reject */
	}
	else if (strlen(c) == 2 && c[0] == 'W' && c[1] == 'N')
    354a:	22 97       	sbiw	r28, 0x02	; 2
    354c:	89 f4       	brne	.+34     	; 0x3570 <examineInstr+0x45c>
    354e:	f7 01       	movw	r30, r14
    3550:	80 81       	ld	r24, Z
    3552:	87 35       	cpi	r24, 0x57	; 87
    3554:	69 f4       	brne	.+26     	; 0x3570 <examineInstr+0x45c>
    3556:	81 81       	ldd	r24, Z+1	; 0x01
    3558:	8e 34       	cpi	r24, 0x4E	; 78
    355a:	51 f4       	brne	.+20     	; 0x3570 <examineInstr+0x45c>
	{
		/* You win */
		/*writeString("OK\r") ; */
		writeByte('O') ;
    355c:	8f e4       	ldi	r24, 0x4F	; 79
    355e:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
		writeByte('K') ;
    3562:	8b e4       	ldi	r24, 0x4B	; 75
    3564:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
		writeByte('\r') ;
    3568:	8d e0       	ldi	r24, 0x0D	; 13
    356a:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
    356e:	09 c0       	rjmp	.+18     	; 0x3582 <examineInstr+0x46e>
	}
	else
	{
		writeByte('P') ;
    3570:	80 e5       	ldi	r24, 0x50	; 80
    3572:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
		writeByte('L') ;
    3576:	8c e4       	ldi	r24, 0x4C	; 76
    3578:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
		writeByte('\r') ;
    357c:	8d e0       	ldi	r24, 0x0D	; 13
    357e:	0e 94 17 01 	call	0x22e	; 0x22e <writeByte>
	}
}
    3582:	df 91       	pop	r29
    3584:	cf 91       	pop	r28
    3586:	1f 91       	pop	r17
    3588:	0f 91       	pop	r16
    358a:	ff 90       	pop	r15
    358c:	ef 90       	pop	r14
    358e:	08 95       	ret

00003590 <__vector_11>:
		}
	}
}

ISR(USART_RXC_vect)
{
    3590:	1f 92       	push	r1
    3592:	0f 92       	push	r0
    3594:	0f b6       	in	r0, 0x3f	; 63
    3596:	0f 92       	push	r0
    3598:	11 24       	eor	r1, r1
    359a:	2f 93       	push	r18
    359c:	3f 93       	push	r19
    359e:	4f 93       	push	r20
    35a0:	5f 93       	push	r21
    35a2:	6f 93       	push	r22
    35a4:	7f 93       	push	r23
    35a6:	8f 93       	push	r24
    35a8:	9f 93       	push	r25
    35aa:	af 93       	push	r26
    35ac:	bf 93       	push	r27
    35ae:	ef 93       	push	r30
    35b0:	ff 93       	push	r31
	char c = UDR ;
    35b2:	8c b1       	in	r24, 0x0c	; 12
	if ( c != '\r')
    35b4:	8d 30       	cpi	r24, 0x0D	; 13
    35b6:	19 f0       	breq	.+6      	; 0x35be <__vector_11+0x2e>
	{
		readByte(c) ;
    35b8:	0e 94 34 01 	call	0x268	; 0x268 <readByte>
    35bc:	08 c0       	rjmp	.+16     	; 0x35ce <__vector_11+0x3e>
	}
	else
	{
		/* Call Examine function */
		updateRxBuffer(RX_buffer) ;
    35be:	8b e7       	ldi	r24, 0x7B	; 123
    35c0:	91 e0       	ldi	r25, 0x01	; 1
    35c2:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <updateRxBuffer>
		examineInstr(RX_buffer) ;
    35c6:	8b e7       	ldi	r24, 0x7B	; 123
    35c8:	91 e0       	ldi	r25, 0x01	; 1
    35ca:	0e 94 8a 18 	call	0x3114	; 0x3114 <examineInstr>
	}
}
    35ce:	ff 91       	pop	r31
    35d0:	ef 91       	pop	r30
    35d2:	bf 91       	pop	r27
    35d4:	af 91       	pop	r26
    35d6:	9f 91       	pop	r25
    35d8:	8f 91       	pop	r24
    35da:	7f 91       	pop	r23
    35dc:	6f 91       	pop	r22
    35de:	5f 91       	pop	r21
    35e0:	4f 91       	pop	r20
    35e2:	3f 91       	pop	r19
    35e4:	2f 91       	pop	r18
    35e6:	0f 90       	pop	r0
    35e8:	0f be       	out	0x3f, r0	; 63
    35ea:	0f 90       	pop	r0
    35ec:	1f 90       	pop	r1
    35ee:	18 95       	reti

000035f0 <__tablejump2__>:
    35f0:	ee 0f       	add	r30, r30
    35f2:	ff 1f       	adc	r31, r31
    35f4:	05 90       	lpm	r0, Z+
    35f6:	f4 91       	lpm	r31, Z
    35f8:	e0 2d       	mov	r30, r0
    35fa:	09 94       	ijmp

000035fc <_exit>:
    35fc:	f8 94       	cli

000035fe <__stop_program>:
    35fe:	ff cf       	rjmp	.-2      	; 0x35fe <__stop_program>
